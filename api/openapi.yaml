openapi: 3.0.1
info:
  contact:
    url: https://zulip.com
  description: |
    Powerful open source group chat
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Zulip REST API
  version: 1.0.0
servers:
- url: "https://{subdomain}.zulipchat.com/api/v1"
  variables:
    subdomain:
      default: example
- url: "{server}/api/v1"
  variables:
    server:
      default: https://
- url: https://chat.zulip.org/api/v1
- url: http://localhost:9991/api/v1
- url: "http://{subdomain}.testserver/json"
security:
- basicAuth: []
paths:
  /fetch_api_key:
    post:
      description: |
        This API endpoint is used by clients such as the Zulip mobile and
        terminal apps to implement password-based authentication. Given the
        user's Zulip login credentials, it returns a Zulip API key that the client
        can use to make requests as the user.

        This endpoint is only useful for Zulip servers/organizations with
        EmailAuthBackend or LDAPAuthBackend enabled.

        The Zulip mobile apps also support SSO/social authentication (GitHub
        auth, Google auth, SAML, etc.) that does not use this endpoint. Instead,
        the mobile apps reuse the web login flow passing the `mobile_flow_otp` in
        a webview, and the credentials are returned to the app (encrypted) via a redirect
        to a `zulip://` URL.

        !!! warn ""

            **Note:** If you signed up using passwordless authentication and
            never had a password, you can [reset your password](/help/change-your-password).

        See the [API keys](/api/api-keys) documentation for more details
        on how to download an API key manually.

        In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html),
        see also [the unauthenticated variant](/api/dev-fetch-api-key).
      operationId: fetch-api-key
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/fetch_api_key_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResponse"
          description: |
            Valid credentials the client can use to access the Zulip API:
      security: []
      summary: Fetch an API key (production)
      tags:
      - authentication
  /dev_fetch_api_key:
    post:
      description: |
        For easy testing of mobile apps and other clients and against Zulip
        development servers, we support fetching a Zulip API key for any user
        on the development server without authentication (so that they can
        implement analogues of the one-click login process available for Zulip
        development servers on the web).

        !!! warn ""

            **Note:** This endpoint is only available on Zulip development
            servers; for obvious security reasons it will always return an error
            in a Zulip production server.
      operationId: dev-fetch-api-key
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/dev_fetch_api_key_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResponse"
          description: Success.
      security: []
      summary: Fetch an API key (development only)
      tags:
      - authentication
  /events:
    delete:
      description: |
        Delete a previously registered queue.
      operationId: delete-queue
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/delete_queue_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BadEventQueueIdError"
                description: |
                  A typical JSON response for when the `queue_id` is non-existent or the
                  associated queue has already been deleted:
          description: Bad request.
      summary: Delete an event queue
      tags:
      - real_time_events
    get:
      description: |
        This endpoint allows you to receive new events from
        [a registered event queue](/api/register-queue).

        Long-lived clients should use the
        `event_queue_longpoll_timeout_seconds` property returned by
        `POST /register` as the client-side HTTP request timeout for
        calls to this endpoint. It is guaranteed to be higher than
        heartbeat frequency and should be respected by clients to
        avoid breaking when heartbeat frequency increases.
      operationId: get-events
      parameters:
      - description: |
          The ID of an event queue that was previously registered via
          `POST /api/v1/register` (see [Register a queue](/api/register-queue)).
        example: fb67bf8a-c031-47cc-84cf-ed80accacda8
        explode: true
        in: query
        name: queue_id
        required: true
        schema:
          type: string
        style: form
      - description: |
          The highest event ID in this queue that you've received and
          wish to acknowledge. See the [code for
          `call_on_each_event`](https://github.com/zulip/python-zulip-api/blob/main/zulip/zulip/__init__.py)
          in the [zulip Python
          module](https://github.com/zulip/python-zulip-api) for an
          example implementation of correctly processing each event
          exactly once.
        example: -1
        explode: true
        in: query
        name: last_event_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Set to `true` if the client is requesting a nonblocking reply. If not
          specified, the request will block until either a new event is available
          or a few minutes have passed, in which case the server will send the
          client a heartbeat event.
        example: true
        explode: true
        in: query
        name: dont_block
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_events_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BadEventQueueIdError"
                description: |
                  #### BAD_EVENT_QUEUE_ID errors

                  This error occurs if the target event queue has been garbage collected.
                  A compliant client will handle this error by re-initializing itself
                  (e.g. a Zulip web app browser window will reload in this case).

                  See [the /register endpoint docs](/api/register-queue) for details on how to
                  handle these correctly.

                  The following is the error response in such case:
          description: Bad request.
      summary: Get events from an event queue
      tags:
      - real_time_events
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - queue_id
            - last_event_id
      x-parameter-description: |
        !!! warn ""

            **Note**: The parameters documented above are optional in the sense that
            even if you haven't registered a queue by explicitly requesting the
            `POST /register` endpoint, you could pass the parameters for
            [the `POST /register` endpoint](/api/register-queue) to this
            endpoint and a queue would be registered in the absence of a `queue_id`.
      x-python-examples-extra-imports:
      - sys
  /get_stream_id:
    get:
      description: |
        Get the unique ID of a given channel.
      operationId: get-stream-id
      parameters:
      - description: |
          The name of the channel to access.
        example: Denmark
        explode: true
        in: query
        name: stream
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_stream_id_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response for when the supplied channel does not exist:
                example:
                  code: BAD_REQUEST
                  msg: Invalid channel name 'nonexistent'
                  result: error
          description: Bad request.
      summary: Get channel ID
      tags:
      - channels
  /mark_all_as_read:
    post:
      deprecated: true
      description: |
        Marks all of the current user's unread messages as read.

        Because this endpoint marks messages as read in batches, it is possible
        for the request to time out after only marking some messages as read.
        When this happens, the `complete` boolean field in the success response
        will be `false`. Clients should repeat the request when handling such a
        response. If all messages were marked as read, then the success response
        will return `"complete": true`.

        **Changes**: Deprecated; clients should use the [update personal message
        flags for narrow](/api/update-message-flags-for-narrow) endpoint instead
        as this endpoint will be removed in a future release.

        Before Zulip 8.0 (feature level 211), if the server's
        processing was interrupted by a timeout, but some messages were marked
        as read, then it would return `"result": "partially_completed"`, along
        with a `code` field for an error string, in the success response to
        indicate that there was a timeout and that the client should repeat the
        request.

        Before Zulip 6.0 (feature level 153), this request did a single atomic
        operation, which could time out with 10,000s of unread messages to mark
        as read. As of this feature level, messages are marked as read in
        batches, starting with the newest messages, so that progress is made
        even if the request times out. And, instead of returning an error when
        the request times out and some messages have been marked as read, a
        success response with `"result": "partially_completed"` is returned.
      operationId: mark-all-as-read
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mark_all_as_read_200_response"
          description: Success.
      summary: Mark all messages as read
      tags:
      - messages
  /mark_stream_as_read:
    post:
      deprecated: true
      description: |
        Mark all the unread messages in a channel as read.

        **Changes**: Deprecated; clients should use the [update personal message
        flags for narrow](/api/update-message-flags-for-narrow) endpoint instead
        as this endpoint will be removed in a future release.
      operationId: mark-stream-as-read
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/mark_stream_as_read_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Mark messages in a channel as read
      tags:
      - messages
  /mark_topic_as_read:
    post:
      deprecated: true
      description: |
        Mark all the unread messages in a topic as read.

        **Changes**: Deprecated; clients should use the [update personal message
        flags for narrow](/api/update-message-flags-for-narrow) endpoint instead
        as this endpoint will be removed in a future release.
      operationId: mark-topic-as-read
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/mark_topic_as_read_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Mark messages in a topic as read
      tags:
      - messages
  /attachments:
    get:
      description: |
        Fetch metadata on files uploaded by the requesting user.
      operationId: get-attachments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_attachments_200_response"
          description: Success.
      summary: Get attachments
      tags:
      - users
  /attachments/{attachment_id}:
    delete:
      description: |
        Delete an uploaded file given its attachment ID.

        Note that uploaded files that have been referenced in at least
        one message are automatically deleted once the last message
        containing a link to them is deleted (whether directly or via
        a [message retention policy](/help/message-retention-policy)).

        Uploaded files that are never used in a message are
        automatically deleted a few weeks after being uploaded.

        Attachment IDs can be contained from [GET /attachments](/api/get-attachments).
      operationId: remove-attachment
      parameters:
      - description: |
          The ID of the attachment to be deleted.
        example: 1
        explode: false
        in: path
        name: attachment_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when the `attachment_id` is invalid
                example:
                  result: error
                  msg: Invalid attachment
                  code: BAD_REQUEST
          description: Bad request.
        "401":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when the user is not logged in:
                example:
                  code: UNAUTHORIZED
                  result: error
                  msg: "Not logged in: API authentication or user session required"
          description: Error.
      summary: Delete an attachment
      tags:
      - users
  /drafts:
    get:
      description: |
        Fetch all drafts for the current user.
      operationId: get-drafts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_drafts_200_response"
          description: Success.
      summary: Get drafts
      tags:
      - drafts
    post:
      description: |
        Create one or more drafts on the server. These drafts will be automatically
        synchronized to other clients via `drafts` events.
      operationId: create-drafts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              drafts:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_drafts_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_drafts_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  JSON response for when a draft targeted towards a channel does not specify
                  exactly one channel ID:
                example:
                  code: BAD_REQUEST
                  msg: Must specify exactly 1 channel ID for channel messages
                  result: error
          description: Bad request.
      summary: Create drafts
      tags:
      - drafts
  /drafts/{draft_id}:
    delete:
      description: |
        Delete a single draft from the server. The deletion will be automatically
        synchronized to other clients via a `drafts` event.
      operationId: delete-draft
      parameters:
      - description: |
          The ID of the draft you want to delete.
        example: 1
        explode: false
        in: path
        name: draft_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no draft exists with
                  the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Draft does not exist
          description: Not Found.
      summary: Delete a draft
      tags:
      - drafts
    patch:
      description: |
        Edit a draft on the server. The edit will be automatically
        synchronized to other clients via `drafts` events.
      operationId: edit-draft
      parameters:
      - description: |
          The ID of the draft to be edited.
        example: 2
        explode: false
        in: path
        name: draft_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              draft:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/edit_draft_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no draft exists with
                  the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Draft does not exist
          description: Not Found.
      summary: Edit a draft
      tags:
      - drafts
  /navigation_views:
    get:
      description: |
        Fetch all configured custom navigation views for the current user.

        **Changes**: New in Zulip 11.0 (feature level 390).
      operationId: get-navigation-views
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_navigation_views_200_response"
          description: Success.
      summary: Get all navigation views
      tags:
      - navigation_views
    post:
      description: |
        Adds a new custom left sidebar navigation view configuration
        for the current user.

        This can be used both to configure built-in navigation views,
        or to add new navigation views.

        **Changes**: New in Zulip 11.0 (feature level 390).
      operationId: add-navigation-view
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NavigationView"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_navigation_view_200_response"
          description: Request succeeded.
        "400":
          content:
            application/json:
              examples:
                invalid_parameters:
                  value:
                    code: BAD_REQUEST
                    msg: fragment cannot be blank
                    result: error
              schema:
                $ref: "#/components/schemas/CodedError"
          description: Bad request.
      summary: Add a navigation view
      tags:
      - navigation_views
  /navigation_views/{fragment}:
    delete:
      description: |
        Remove a navigation view.

        **Changes**: New in Zulip 11.0 (feature level 390).
      operationId: remove-navigation-view
      parameters:
      - description: |
          The unique URL hash of the navigation view to be removed.

          This also serves as the identifier for the navigation view.
        example: narrow/is/alerted
        explode: false
        in: path
        name: fragment
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no navigation
                  view exists with the provided fragment:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Navigation view does not exist.
          description: Not Found.
      summary: Remove a navigation view
      tags:
      - navigation_views
    patch:
      description: |
        Update the details of an existing configured navigation view,
        such as its name or whether it's pinned.

        **Changes**: New in Zulip 11.0 (feature level 390).
      operationId: edit-navigation-view
      parameters:
      - description: |
          The unique URL hash of the navigation view to be updated.

          This also serves as the identifier for the navigation view.
        example: narrow/is/alerted
        explode: false
        in: path
        name: fragment
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/edit_navigation_view_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_navigation_view_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for invalid parameters.
                example:
                  code: BAD_REQUEST
                  msg: Built-in views cannot have a custom name
                  result: error
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response when no navigation view
                  exists with the provided fragment:
                example:
                  code: NOT_FOUND
                  result: error
                  msg: Navigation view does not exist.
          description: Not Found.
      summary: Update the navigation view
      tags:
      - navigation_views
  /saved_snippets:
    get:
      description: |
        Fetch all the saved snippets for the current user.

        **Changes**: New in Zulip 10.0 (feature level 297).
      operationId: get-saved-snippets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_saved_snippets_200_response"
          description: Success.
      summary: Get all saved snippets
      tags:
      - drafts
    post:
      description: |
        Create a new saved snippet for the current user.

        **Changes**: New in Zulip 10.0 (feature level 297).
      operationId: create-saved-snippet
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/create_saved_snippet_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_saved_snippet_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when either title or content is
                  empty:
                example:
                  code: BAD_REQUEST
                  msg: Title cannot be empty.
                  result: error
          description: Bad request.
      summary: Create a saved snippet
      tags:
      - drafts
  /saved_snippets/{saved_snippet_id}:
    delete:
      description: |
        Delete a saved snippet.

        **Changes**: New in Zulip 10.0 (feature level 297).
      operationId: delete-saved-snippet
      parameters:
      - description: |
          The ID of the saved snippet to delete.
        example: 2
        explode: false
        in: path
        name: saved_snippet_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no saved snippet exists
                  with the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Saved snippet does not exist.
          description: Not Found.
      summary: Delete a saved snippet
      tags:
      - drafts
    patch:
      description: |
        Edit a saved snippet for the current user.

        **Changes**: New in Zulip 10.0 (feature level 368).
      operationId: edit-saved-snippet
      parameters:
      - description: |
          The ID of the saved snippet to edit.
        example: 3
        explode: false
        in: path
        name: saved_snippet_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/edit_saved_snippet_request"
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no saved snippet exists
                  with the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Saved snippet does not exist.
          description: Not Found.
      summary: Edit a saved snippet
      tags:
      - drafts
  /reminders:
    get:
      description: |
        Fetch all [reminders](/help/schedule-a-reminder) for the
        current user.

        Reminders are messages the user has scheduled to be sent in the
        future to themself.

        **Changes**: New in Zulip 11.0 (feature level 399).
      operationId: get-reminders
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_reminders_200_response"
          description: Success.
      summary: Get reminders
      tags:
      - reminders
    post:
      description: |
        Schedule a reminder to be sent to the current user at the specified time. The reminder will link the relevant message.

        **Changes**: New in Zulip 11.0 (feature level 381).
      operationId: create-message-reminder
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/create_message_reminder_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_message_reminder_200_response"
          description: Success.
      summary: Create a message reminder
      tags:
      - reminders
  /reminders/{reminder_id}:
    delete:
      description: |
        Delete, and therefore cancel sending, a previously [scheduled
        reminder](/help/schedule-a-reminder).

        **Changes**: New in Zulip 11.0 (feature level 399).
      operationId: delete-reminder
      parameters:
      - description: |
          The ID of the reminder to delete.

          This is different from the unique ID that the message would have
          after being sent.
        example: 1
        explode: false
        in: path
        name: reminder_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no reminder exists
                  with the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Reminder does not exist
          description: Not Found.
      summary: Delete a reminder
      tags:
      - reminders
  /scheduled_messages:
    get:
      description: |
        Fetch all [scheduled messages](/help/schedule-a-message) for
        the current user.

        Scheduled messages are messages the user has scheduled to be
        sent in the future via the send later feature.

        **Changes**: New in Zulip 7.0 (feature level 173).
      operationId: get-scheduled-messages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_scheduled_messages_200_response"
          description: Success.
      summary: Get scheduled messages
      tags:
      - scheduled_messages
    post:
      description: |
        Create a new [scheduled message](/help/schedule-a-message).

        **Changes**: In Zulip 7.0 (feature level 184), moved support for
        [editing a scheduled message](/api/update-scheduled-message) to a
        separate API endpoint, which removed the `scheduled_message_id`
        parameter from this endpoint.

        New in Zulip 7.0 (feature level 179).
      operationId: create-scheduled-message
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              to:
                contentType: application/json
                style: form
              scheduled_delivery_timestamp:
                contentType: application/json
                style: form
              read_by_sender:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_scheduled_message_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_scheduled_message_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_scheduled_message_400_response"
          description: Bad request.
      summary: Create a scheduled message
      tags:
      - scheduled_messages
  /scheduled_messages/{scheduled_message_id}:
    delete:
      description: |
        Delete, and therefore cancel sending, a previously [scheduled
        message](/help/schedule-a-message).

        **Changes**: New in Zulip 7.0 (feature level 173).
      operationId: delete-scheduled-message
      parameters:
      - description: |
          The ID of the scheduled message to delete.

          This is different from the unique ID that the message would have
          after being sent.
        example: 1
        explode: false
        in: path
        name: scheduled_message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no scheduled message exists
                  with the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Scheduled message does not exist
          description: Not Found.
      summary: Delete a scheduled message
      tags:
      - scheduled_messages
    patch:
      description: |
        Edit an existing [scheduled message](/help/schedule-a-message).

        **Changes**: New in Zulip 7.0 (feature level 184).
      operationId: update-scheduled-message
      parameters:
      - description: |
          The ID of the scheduled message to update.

          This is different from the unique ID that the message would have
          after being sent.
        example: 2
        explode: false
        in: path
        name: scheduled_message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              to:
                contentType: application/json
                style: form
              scheduled_delivery_timestamp:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_scheduled_message_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_scheduled_message_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_scheduled_message_400_response"
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when no scheduled message exists
                  with the provided ID:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Scheduled message does not exist
          description: Not Found.
      summary: Edit a scheduled message
      tags:
      - scheduled_messages
  /default_streams:
    delete:
      description: |
        Remove a channel from the set of [default channels][default-channels]
        for new users joining the organization.

        [default-channels]: /help/set-default-channels-for-new-users
      operationId: remove-default-stream
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/add_default_stream_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  A typical failed JSON response for when an invalid channel ID is passed:
          description: Bad request.
      summary: Remove a default channel
      tags:
      - channels
      x-requires-administrator: true
    post:
      description: |
        Add a channel to the set of [default channels][default-channels]
        for new users joining the organization.

        [default-channels]: /help/set-default-channels-for-new-users
      operationId: add-default-stream
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/add_default_stream_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_default_stream_400_response"
          description: Bad request.
      summary: Add a default channel
      tags:
      - channels
      x-requires-administrator: true
  /messages:
    get:
      description: |
        This endpoint is the primary way to fetch a messages. It is used by all official
        Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as
        many bots, API clients, backup scripts, etc.

        Most queries will specify a [narrow filter](/api/get-messages#parameter-narrow),
        to fetch the messages matching any supported [search
        query](/help/search-for-messages). If not specified, it will return messages
        corresponding to the user's [combined feed](/help/combined-feed). There are two
        ways to specify which messages matching the narrow filter to fetch:

        - A range of messages, described by an `anchor` message ID (or a string-format
          specification of how the server should computer an anchor to use) and a maximum
          number of messages in each direction from that anchor.

        - A rarely used variant (`message_ids`) where the client specifies the message IDs
          to fetch.

        The server returns the matching messages, sorted by message ID, as well as some
        metadata that makes it easy for a client to determine whether there are more
        messages matching the query that were not returned due to the `num_before` and
        `num_after` limits.

        Note that a user's message history does not contain messages sent to
        channels before they [subscribe](/api/subscribe), and newly created
        bot users are not usually subscribed to any channels.

        We recommend requesting at most 1000 messages in a batch, to avoid generating very
        large HTTP responses. A maximum of 5000 messages can be obtained per request;
        attempting to exceed this will result in an error.

        **Changes**: The `message_ids` option is new in Zulip 10.0 (feature level 300).
      operationId: get-messages
      parameters:
      - description: |
          Integer message ID to anchor fetching of new messages. Supports special
          string values for when the client wants the server to compute the anchor
          to use:

          - `newest`: The most recent message.
          - `oldest`: The oldest message.
          - `first_unread`: The oldest unread message matching the
            query, if any; otherwise, the most recent message.

          **Changes**: String values are new in Zulip 3.0 (feature level 1). The
          `first_unread` functionality was supported in Zulip 2.1.x
          and older by not sending `anchor` and using `use_first_unread_anchor`.

          In Zulip 2.1.x and older, `oldest` can be emulated with
          `"anchor": 0`, and `newest` with `"anchor": 10000000000000000`
          (that specific large value works around a bug in Zulip
          2.1.x and older in the `found_newest` return value).
        example: "43"
        explode: true
        in: query
        name: anchor
        required: false
        schema:
          $ref: "#/components/schemas/Anchor"
        style: form
      - description: |
          Whether a message with the specified ID matching the narrow
          should be included.

          **Changes**: New in Zulip 6.0 (feature level 155).
        example: false
        explode: true
        in: query
        name: include_anchor
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          The number of messages with IDs less than the anchor to retrieve.
          Required if `message_ids` is not provided.
        example: 4
        explode: true
        in: query
        name: num_before
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: |
          The number of messages with IDs greater than the anchor to retrieve.
          Required if `message_ids` is not provided.
        example: 8
        explode: true
        in: query
        name: num_after
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - content:
          application/json:
            example:
            - operand: Denmark
              operator: channel
            schema:
              default: []
              items:
                oneOf:
                - additionalProperties: false
                  properties:
                    operator:
                      type: string
                    operand:
                      oneOf:
                      - type: string
                      - type: integer
                      - items:
                          type: integer
                        type: array
                    negated:
                      type: boolean
                  required:
                  - operand
                  - operator
                  type: object
                - items:
                    type: string
                  maxItems: 2
                  minItems: 2
                  type: array
              type: array
        description: |
          The narrow where you want to fetch the messages from. See how to
          [construct a narrow](/api/construct-narrow).

          Note that many narrows, including all that lack a `channel`, `channels`,
          `stream`, or `streams` operator, search the user's personal message
          history. See [searching shared
          history](/help/search-for-messages#search-shared-history)
          for details.

          For example, if you would like to fetch messages from all public channels instead
          of only the user's message history, then a specific narrow for
          messages sent to all public channels can be used:
          `{"operator": "channels", "operand": "public"}`.

          Newly created bot users are not usually subscribed to any
          channels, so bots using this API should either be
          subscribed to appropriate channels or use a shared history
          search narrow with this endpoint.

          **Changes**: See [changes section](/api/construct-narrow#changes)
          of search/narrow filter documentation.
        in: query
        name: narrow
        required: false
      - description: |
          Whether the client supports computing gravatars URLs. If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar. This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.

          **Changes**: The default value of this parameter was `false`
          prior to Zulip 5.0 (feature level 92).
        example: false
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If `true`, message content is returned in the rendered HTML
          format. If `false`, message content is returned in the raw
          Markdown-format text that user entered.

          See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
        example: false
        explode: true
        in: query
        name: apply_markdown
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: true
        description: |
          Legacy way to specify `"anchor": "first_unread"` in Zulip 2.1.x and older.

          Whether to use the (computed by the server) first unread message
          matching the narrow as the `anchor`. Mutually exclusive with `anchor`.

          **Changes**: Deprecated in Zulip 3.0 (feature level 1) and replaced by
          `"anchor": "first_unread"`.
        example: true
        explode: true
        in: query
        name: use_first_unread_anchor
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - content:
          application/json:
            example:
            - 1
            - 2
            - 3
            schema:
              items:
                type: integer
              type: array
        description: |
          A list of message IDs to fetch. The server will return messages corresponding to the
          subset of the requested message IDs that exist and the current user has access to,
          potentially filtered by the narrow (if that parameter is provided).

          It is an error to pass this parameter as well as any of the parameters involved in
          specifying a range of messages: `anchor`, `include_anchor`, `use_first_unread_anchor`,
          `num_before`, and `num_after`.

          **Changes**: New in Zulip 10.0 (feature level 300). Previously, there was
          no way to request a specific set of messages IDs.
        in: query
        name: message_ids
        required: false
      - description: |
          Whether the client supports processing the empty string as a topic in the
          topic name fields in the returned data, including in returned edit_history data.

          If `false`, the server will use the value of `realm_empty_topic_display_name`
          found in the [`POST /register`](/api/register-queue) response instead of empty string
          to represent the empty string topic in its response.

          **Changes**: New in Zulip 10.0 (feature level 334). Previously, the empty string
          was not a valid topic.
        example: true
        explode: true
        in: query
        name: allow_empty_topic_name
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_messages_200_response"
          description: Success.
      summary: Get messages
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - client_gravatar
            - apply_markdown
            - use_first_unread_anchor
            - include_anchor
            - message_ids
    post:
      description: |
        Send a [channel message](/help/introduction-to-topics) or a
        [direct message](/help/direct-messages).
      operationId: send-message
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              to:
                contentType: application/json
                style: form
              read_by_sender:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/send_message_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/send_message_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/send_message_400_response"
          description: Bad request.
      summary: Send a message
      tags:
      - messages
  /messages/{message_id}/history:
    get:
      description: |
        Fetch the message edit history of a previously edited message.

        Note that edit history may be disabled in some organizations; see the
        [Zulip Help Center documentation on editing messages][edit-settings].

        [edit-settings]: /help/view-a-messages-edit-history
      operationId: get-message-history
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether the topic names i.e. `topic` and `prev_topic` fields in
          the `message_history` objects returned can be empty string.

          If `false`, the value of `realm_empty_topic_display_name`
          found in the [`POST /register`](/api/register-queue) response is
          returned replacing the empty string as the topic name.

          **Changes**: New in Zulip 10.0 (feature level 334).
        example: true
        explode: true
        in: query
        name: allow_empty_topic_name
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_message_history_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidMessageError"
                description: |
                  An example JSON response for when the specified message does not exist:
          description: Bad request.
      summary: Get a message's edit history
      tags:
      - messages
      x-response-description: |
        Please note that the original message's snapshot only contains the fields
        `topic`, `content`, `rendered_content`, `timestamp` and `user_id`. This
        snapshot will be the only one present if the message has never been edited.

        Also note that each snapshot object will only contain additional data for the
        modified fields for that particular edit (e.g. if only the topic or channel
        was edited, `prev_content`, `prev_rendered_content`, and
        `content_html_diff` will not appear).
  /messages/flags:
    post:
      description: |
        Add or remove personal message flags like `read` and `starred`
        on a collection of message IDs.

        See also the endpoint for [updating flags on a range of
        messages within a narrow](/api/update-message-flags-for-narrow).
      operationId: update-message-flags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              messages:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_message_flags_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_message_flags_200_response"
          description: Success.
      summary: Update personal message flags
      tags:
      - messages
      x-parameter-description: |
        ## Available flags
        <div>
            <table>
                <thead>
                    <tr>
                        <th style="width:30%">Flag</th>
                        <th style="width:70%">Purpose</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>read</code></td>
                        <td>
                            Whether the user has read the message.  Messages
                            start out unread (except for messages the user
                            themself sent using a non-API client) and can
                            later be marked as read.
                        </td>
                    </tr>
                    <tr>
                        <td><code>starred</code></td>
                        <td>Whether the user has <a href="/help/star-a-message">starred this message</a>.</td>
                    </tr>
                    <tr>
                        <td><code>collapsed</code></td>
                        <td>Whether the user has <a href="/help/collapse-a-message">collapsed this message</a>.</td>
                    </tr>
                    <tr>
                        <td><code>mentioned</code></td>
                        <td>
                            Whether the current user
                            <a href="/help/mention-a-user-or-group">was mentioned</a>
                            by this message, either directly or via a user
                            group. Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            a mention of the current user.
                        </td>
                    </tr>
                    <tr>
                        <td><code>stream_wildcard_mentioned</code></td>
                        <td>
                            Whether this message contained a
                            <a href="/help/mention-a-user-or-group#mention-everyone-on-a-channel">channel wildcard mention</a>
                            (like @**all**). Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            a channel wildcard mention.
                            <br /><br />
                            <b>Changes</b>: New in Zulip 8.0 (feature level 224).
                        </td>
                    </tr>
                    <tr>
                        <td><code>topic_wildcard_mentioned</code></td>
                        <td>
                            Whether this message contained a
                            <a href="/help/mention-a-user-or-group#mention-all-topic-participants">topic wildcard mention</a>
                            (@**topic**).
                            Cannot be changed by the user directly, but can change if
                            the message is edited to add/remove a topic wildcard mention.
                            <br /><br />
                            <b>Changes</b>: New in Zulip 8.0 (feature level 224).
                        </td>
                    <tr>
                        <td><code>has_alert_word</code></td>
                        <td>
                            Whether the message contains any of the current user's
                            <a href="/help/dm-mention-alert-notifications#alert-words">configured alert words</a>.
                            Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            one of the current user's alert words.
                        </td>
                    </tr>
                    <tr>
                        <td><code>historical</code></td>
                        <td>
                            Is <code>true</code> for messages that the user did not receive
                            at the time they were sent but later was added to
                            the user's history (e.g. because they starred or
                            reacted to a message sent to a public channel
                            before they subscribed to that channel). Cannot be
                            changed by the user directly.
                        </td>
                    </tr>
                    <tr>
                        <td><code>wildcard_mentioned</code></td>
                        <td>
                            Whether this message contained either a
                            <a href="/help/mention-a-user-or-group#mention-everyone-on-a-channel">channel wildcard mention</a>
                            (like @**all**) or a
                            <a href="/help/mention-a-user-or-group#mention-all-topic-participants">topic wildcard mention</a>
                            (@**topic**). Cannot be changed by the user directly, but can change if
                            the message is edited to add/remove a channel and/or topic wildcard
                            mention.
                            <br /><br />
                            <b>Changes</b>: Deprecated in Zulip 8.0 (feature level 224), in favor of
                            the <code>stream_wildcard_mentioned</code> and
                            <code>topic_wildcard_mentioned</code> flags. The
                            <code>wildcard_mentioned</code> flag exists for backwards compatibility
                            with older clients and equals
                            <code>stream_wildcard_mentioned || topic_wildcard_mentioned</code>.
                            Clients supporting older server versions should treat this field as a
                            previous name for the <code>stream_wildcard_mentioned</code> flag as
                            topic wildcard mentions were not available prior to this feature level.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
  /messages/flags/narrow:
    post:
      description: |
        Add or remove personal message flags like `read` and `starred`
        on a range of messages within a narrow.

        See also [the endpoint for updating flags on specific message
        IDs](/api/update-message-flags).

        **Changes**: New in Zulip 6.0 (feature level 155).
      operationId: update-message-flags-for-narrow
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              include_anchor:
                contentType: application/json
                style: form
              num_before:
                contentType: application/json
                style: form
              num_after:
                contentType: application/json
                style: form
              narrow:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_message_flags_for_narrow_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_message_flags_for_narrow_200_response"
          description: Success.
      summary: Update personal message flags for narrow
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - include_anchor
  /messages/render:
    post:
      description: |
        Render a message to HTML.
      operationId: render-message
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/render_message_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/render_message_200_response"
          description: Success.
      summary: Render a message
      tags:
      - messages
  /messages/{message_id}/reactions:
    delete:
      description: |
        Remove an [emoji reaction](/help/emoji-reactions) from a message.
      operationId: remove-reaction
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/remove_reaction_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/remove_reaction_400_response"
          description: Bad request.
      summary: Remove an emoji reaction
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - emoji_code
            - reaction_type
    post:
      description: |
        Add an [emoji reaction](/help/emoji-reactions) to a message.
      operationId: add-reaction
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_reaction_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_reaction_400_response"
          description: Bad request.
      summary: Add an emoji reaction
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - emoji_code
            - reaction_type
  /messages/{message_id}/read_receipts:
    get:
      description: |
        Returns a list containing the IDs for all users who have
        marked the message as read (and whose privacy settings allow
        sharing that information).

        The list of users IDs will include any bots who have marked
        the message as read via the API (providing a way for bots to
        indicate whether they have processed a message successfully in
        a way that can be easily inspected in a Zulip client). Bots
        for which this behavior is not desired may disable the
        `send_read_receipts` setting via the API.

        It will never contain the message's sender.

        **Changes**: New in Zulip 6.0 (feature level 137).
      operationId: get-read-receipts
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_read_receipts_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidMessageError"
                description: |
                  A typical JSON response when attempting to access read receipts for
                  a message ID that either does not exist or is not accessible to the
                  current user:
          description: Bad request.
      summary: Get a message's read receipts
      tags:
      - messages
  /messages/matches_narrow:
    get:
      description: |
        Check whether a set of messages match a [narrow](/api/construct-narrow).

        For many common narrows (e.g. a topic), clients can write an efficient
        client-side check to determine whether a newly arrived message belongs
        in the view.

        This endpoint is designed to allow clients to handle more complex narrows
        for which the client does not (or in the case of full-text search, cannot)
        implement this check.

        The format of the `match_subject` and `match_content` objects is designed
        to match those returned by the [`GET /messages`](/api/get-messages#response)
        endpoint, so that a client can splice these fields into a `message` object
        received from [`GET /events`](/api/get-events#message) and end up with an
        extended message object identical to how a [`GET /messages`](/api/get-messages)
        request for the current narrow would have returned the message.
      operationId: check-messages-match-narrow
      parameters:
      - content:
          application/json:
            example:
            - 31
            - 32
            schema:
              items:
                type: integer
              type: array
        description: List of IDs for the messages to check.
        in: query
        name: msg_ids
        required: true
      - content:
          application/json:
            example:
            - operator: has
              operand: link
            schema:
              items:
                type: object
              type: array
        description: |
          A structure defining the narrow to check against. See how to
          [construct a narrow](/api/construct-narrow).

          **Changes**: See [changes section](/api/construct-narrow#changes)
          of search/narrow filter documentation.
        in: query
        name: narrow
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/check_messages_match_narrow_200_response"
          description: Success.
      summary: Check if messages match a narrow
      tags:
      - messages
  /messages/{message_id}:
    delete:
      description: |
        Permanently delete a message.

        This API corresponds to the
        [delete a message completely][delete-completely] feature documented in
        the Zulip Help Center.

        [delete-completely]: /help/delete-a-message#delete-a-message-completely
      operationId: delete-message
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delete_message_400_response"
          description: Bad request.
      summary: Delete a message
      tags:
      - messages
      x-requires-administrator: true
    get:
      description: |
        Given a message ID, return the message object.

        Additionally, a `raw_content` field is included. This field is
        useful for clients that primarily work with HTML-rendered
        messages but might need to occasionally fetch the message's
        raw [Zulip-flavored Markdown](/help/format-your-message-using-markdown) (e.g. for [view
        source](/help/view-the-markdown-source-of-a-message) or
        prefilling a message edit textarea).

        **Changes**: Before Zulip 5.0 (feature level 120), this
        endpoint only returned the `raw_content` field.
      operationId: get-message
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          If `true`, message content is returned in the rendered HTML
          format. If `false`, message content is returned in the raw
          [Zulip-flavored Markdown format](/help/format-your-message-using-markdown) text that user entered.

          **Changes**: New in Zulip 5.0 (feature level 120).
        example: false
        explode: true
        in: query
        name: apply_markdown
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether the client supports processing the empty string as a topic in the
          topic name fields in the returned data, including in returned edit_history data.

          If `false`, the server will use the value of `realm_empty_topic_display_name`
          found in the [`POST /register`](/api/register-queue) response instead of empty string
          to represent the empty string topic in its response.

          **Changes**: New in Zulip 10.0 (feature level 334). Previously, the empty string
          was not a valid topic.
        example: true
        explode: true
        in: query
        name: allow_empty_topic_name
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_message_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidMessageError"
                description: |
                  An example JSON response for when the specified message does not exist or it
                  is not visible to the user making the query (e.g. it was a direct message
                  between two other users):
          description: Bad request.
      summary: Fetch a single message
      tags:
      - messages
    patch:
      description: |
        Update the content, topic, or channel of the message with the specified
        ID.

        You can [resolve topics](/help/resolve-a-topic) by editing the topic to
        `✔ {original_topic}` with the `propagate_mode` parameter set to
        `"change_all"`.

        See [configuring message editing][config-message-editing] for detailed
        documentation on when users are allowed to edit message content, and
        [restricting moving messages][restrict-move-messages] for detailed
        documentation on when users are allowed to change a message's topic
        and/or channel.

        The relevant realm settings in the API that are related to the above
        linked documentation on when users are allowed to update messages are:

        - `allow_message_editing`
        - `can_resolve_topics_group`
        - `can_move_messages_between_channels_group`
        - `can_move_messages_between_topics_group`
        - `message_content_edit_limit_seconds`
        - `move_messages_within_stream_limit_seconds`
        - `move_messages_between_streams_limit_seconds`

        More details about these realm settings can be found in the
        [`POST /register`](/api/register-queue) response or in the documentation
        of the [`realm op: update_dict`](/api/get-events#realm-update_dict)
        event in [`GET /events`](/api/get-events).

        **Changes**: Prior to Zulip 10.0 (feature level 367), the permission for
        resolving a topic was managed by `can_move_messages_between_topics_group`.
        As of this feature level, users belonging to the `can_resolve_topics_group`
        will have the permission to [resolve topics](/help/resolve-a-topic) in the organization.

        In Zulip 10.0 (feature level 316), `edit_topic_policy`
        was removed and replaced by `can_move_messages_between_topics_group`
        realm setting.

        **Changes**: In Zulip 10.0 (feature level 310), `move_messages_between_streams_policy`
        was removed and replaced by `can_move_messages_between_channels_group`
        realm setting.

        Prior to Zulip 7.0 (feature level 172), anyone could add a
        topic to channel messages without a topic, regardless of the organization's
        [topic editing permissions](/help/restrict-moving-messages). As of this
        feature level, messages without topics have the same restrictions for
        topic edits as messages with topics.

        Before Zulip 7.0 (feature level 172), by using the `change_all` value for
        the `propagate_mode` parameter, users could move messages after the
        organization's configured time limits for changing a message's topic or
        channel had passed. As of this feature level, the server will [return an
        error](/api/update-message#response) with `"code":
        "MOVE_MESSAGES_TIME_LIMIT_EXCEEDED"` if users, other than organization
        administrators or moderators, try to move messages after these time
        limits have passed.

        Before Zulip 7.0 (feature level 162), users who were not administrators or
        moderators could only edit topics if the target message was sent within the
        last 3 days. As of this feature level, that time limit is now controlled by
        the realm setting `move_messages_within_stream_limit_seconds`. Also at this
        feature level, a similar time limit for moving messages between channels was
        added, controlled by the realm setting
        `move_messages_between_streams_limit_seconds`. Previously, all users who
        had permission to move messages between channels did not have any time limit
        restrictions when doing so.

        Before Zulip 7.0 (feature level 159), editing channels and topics of messages
        was forbidden if the realm setting for `allow_message_editing` was `false`,
        regardless of an organization's configuration for the realm settings
        `edit_topic_policy` or `move_messages_between_streams_policy`.

        Before Zulip 7.0 (feature level 159), message senders were allowed to edit
        the topic of their messages indefinitely.

        In Zulip 5.0 (feature level 75), the `edit_topic_policy` realm setting
        was added, replacing the `allow_community_topic_editing` boolean.

        In Zulip 4.0 (feature level 56), the `move_messages_between_streams_policy`
        realm setting was added.

        [config-message-editing]: /help/restrict-message-editing-and-deletion
        [restrict-move-messages]: /help/restrict-moving-messages
      operationId: update-message
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              send_notification_to_old_thread:
                contentType: application/json
                style: form
              send_notification_to_new_thread:
                contentType: application/json
                style: form
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_message_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_message_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_message_400_response"
          description: Bad request.
      summary: Edit a message
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - stream_id
  /messages/{message_id}/report:
    post:
      description: |
        Sends a notification to the organization's moderation request channel,
        if it is configured, that reports the targeted message for review and
        moderation.

        Clients should check the `moderation_request_channel` realm setting to
        decide whether to show the option to report messages in the UI.

        If the `report_type` parameter value is `"other"`, the `description`
        parameter is required. Clients should also enforce and communicate this
        behavior in the UI.

        **Changes**: New in Zulip 11.0 (feature level 382). This API builds on
        the `moderation_request_channel` realm setting, which was added in
        feature level 331.
      operationId: report-message
      parameters:
      - description: |
          The target message's ID.
        example: 43
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/report_message_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response for when the organization's moderation
                  request channel is not configured:
                example:
                  result: error
                  msg: Moderation request channel must be specified to enable message
                    reporting.
                  code: BAD_REQUEST
          description: Bad request.
      summary: Report a message
      tags:
      - messages
  /user_uploads:
    post:
      description: |
        [Upload](/help/share-and-upload-files) a single file and get the corresponding URL.

        Initially, only you will be able to access the link. To share the
        uploaded file, you'll need to [send a message][send-message]
        containing the resulting link. Users who can already access the link
        can reshare it with other users by sending additional Zulip messages
        containing the link.

        The maximum allowed file size is available in the `max_file_upload_size_mib`
        field in the [`POST /register`](/api/register-queue) response. Note that
        large files (25MB+) may fail to upload using this API endpoint due to
        network-layer timeouts, depending on the quality of your connection to the
        Zulip server.

        For uploading larger files, `/api/v1/tus` is an endpoint implementing the
        [`tus` resumable upload protocol](https://tus.io/protocols/resumable-upload),
        which supports uploading arbitrarily large files limited only by the server's
        `max_file_upload_size_mib` (Configured via `MAX_FILE_UPLOAD_SIZE` in
        `/etc/zulip/settings.py`). Clients which send authenticated credentials
        (either via browser-based cookies, or API key via `Authorization` header) may
        use this endpoint to upload files.

        **Changes**: The `api/v1/tus` endpoint supporting resumable uploads was
        introduced in Zulip 10.0 (feature level 296). Previously,
        `max_file_upload_size_mib` was typically 25MB.

        [uploaded-files]: /help/manage-your-uploaded-files
        [send-message]: /api/send-message
      operationId: upload-file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/upload_file_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/upload_file_200_response"
          description: Success.
      summary: Upload a file
      tags:
      - messages
      x-parameter-description: |
        As described above, the file to upload must be provided in the
        request's body.

        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings
  /user_uploads/{realm_id_str}/{filename}:
    get:
      description: |
        Get a temporary URL for access to the file that doesn't require authentication.

        **Changes**: New in Zulip 3.0 (feature level 1).
      operationId: get-file-temporary-url
      parameters:
      - description: |
          The realm ID.
        example: 1
        explode: false
        in: path
        name: realm_id_str
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Path to the URL.
        example: 4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
        explode: false
        in: path
        name: filename
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_file_temporary_url_200_response"
          description: Success.
      summary: Get public temporary URL
      tags:
      - messages
  /users:
    get:
      description: |
        Retrieve details on users in the organization.

        By default, returns all accessible users in the organization.
        The `user_ids` query parameter can be used to limit the
        results to a specific set of user IDs.

        Optionally includes values of [custom profile fields](/help/custom-profile-fields).

        You can also [fetch details on a single user](/api/get-user).

        **Changes**: This endpoint did not support unauthenticated
        access in organizations using the [public access
        option](/help/public-access-option) prior to Zulip 11.0
        (feature level 387).
      operationId: get-users
      parameters:
      - description: |
          Whether the client supports computing gravatars URLs. If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar. This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.

          **Changes**: The default value of this parameter was `false`
          prior to Zulip 5.0 (feature level 92).
        example: false
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0. Previous versions do not offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - content:
          application/json:
            example:
            - 1
            - 2
            - 3
            schema:
              items:
                type: integer
              type: array
        description: |
          Limits the results to the specified user IDs. If not
          provided, the server will return all accessible users in
          the organization.

          **Changes**: New in Zulip 11.0 (feature level 384).
        in: query
        name: user_ids
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_users_200_response"
          description: Success.
      summary: Get users
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` query parameter as follows:
    post:
      description: |
        Create a new user account via the API.

        !!! warn ""

            **Note**: On Zulip Cloud, this feature is available only for
            organizations on a [Zulip Cloud Standard](https://zulip.com/plans/)
            or [Zulip Cloud Plus](https://zulip.com/plans/) plan. Administrators
            can request the required `can_create_users` permission for a bot or
            user by contacting [Zulip Cloud support][support] with an
            explanation for why it is needed. Self-hosted installations can
            toggle `can_create_users` on an account using the `manage.py
            change_user_role` [management command][management-commands].

        **Changes**: Before Zulip 4.0 (feature level 36), this endpoint was
        available to all organization administrators.

        [support]: /help/contact-support
        [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
      operationId: create-user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/create_user_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_user_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical JSON response for when another user with the same
                  email address already exists in the realm:
                example:
                  code: BAD_REQUEST
                  msg: Email is already in use.
                  result: error
          description: Bad request.
      summary: Create a user
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id}/reactivate:
    post:
      description: |
        [Reactivates a
        user](https://zulip.com/help/deactivate-or-reactivate-a-user)
        given their user ID.
      operationId: reactivate-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Reactivate a user
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id}/status:
    get:
      description: |
        Get the [status](/help/status-and-availability) currently set by a
        user in the organization.

        **Changes**: New in Zulip 9.0 (feature level 262). Previously,
        user statuses could only be fetched via the [`POST
        /register`](/api/register-queue) endpoint.
      operationId: get-user-status
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_status_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response when the user does not exist:
                example:
                  result: error
                  msg: No such user
                  code: BAD_REQUEST
          description: Success.
      summary: Get a user's status
      tags:
      - users
    post:
      description: |
        Administrator endpoint for changing the [status](/help/status-and-availability) of
        another user.

        **Changes**: New in Zulip 11.0 (feature level 407).
      operationId: update-status-for-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              away:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_status_for_user_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_status_for_user_400_response"
          description: Bad request.
      summary: Update user status
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id_or_email}/presence:
    get:
      description: |
        Get the presence status for a specific user.

        This endpoint is most useful for embedding data about a user's
        presence status in other sites (e.g. an employee directory). Full
        Zulip clients like mobile/desktop apps will want to use the [main
        presence endpoint](/api/get-presence), which returns data for all
        active users in the organization, instead.
      operationId: get-user-presence
      parameters:
      - description: |
          The ID or Zulip API email address of the user whose presence you want to fetch.

          **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported
          identifying the user by Zulip API email.
        example: iago@zulip.com
        explode: false
        in: path
        name: user_id_or_email
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_presence_200_response"
          description: Success.
      summary: Get a user's presence
      tags:
      - users
  /users/me:
    delete:
      description: |
        Deactivates the current user's account. See also the administrative endpoint for
        [deactivating another user](/api/deactivate-user).

        This endpoint is primarily useful to Zulip clients providing a user settings UI.
      operationId: deactivate-own-user
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deactivate_own_user_400_response"
          description: Bad request.
      summary: Deactivate own user
      tags:
      - users
    get:
      description: |
        Get basic data about the user/bot that requests this endpoint.

        **Changes**: Removed `is_billing_admin` field in Zulip 10.0 (feature level 363), as it was
        replaced by the `can_manage_billing_group` realm setting.
      operationId: get-own-user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_own_user_200_response"
          description: Success
      summary: Get own user
      tags:
      - users
  /users/me/alert_words:
    delete:
      description: |
        Remove words (or phrases) from the user's set of configured [alert words][alert-words].

        Alert words are case insensitive.

        [alert-words]: /help/dm-mention-alert-notifications#alert-words
      operationId: remove-alert-words
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              alert_words:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/remove_alert_words_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/remove_alert_words_200_response"
          description: Success.
      summary: Remove alert words
      tags:
      - users
    get:
      description: |
        Get all of the user's configured [alert words][alert-words].

        [alert-words]: /help/dm-mention-alert-notifications#alert-words
      operationId: get-alert-words
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_alert_words_200_response"
          description: Success.
      summary: Get all alert words
      tags:
      - users
    post:
      description: |
        Add words (or phrases) to the user's set of configured [alert words][alert-words].

        [alert-words]: /help/dm-mention-alert-notifications#alert-words
      operationId: add-alert-words
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              alert_words:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/add_alert_words_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_alert_words_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response for when a supplied alert word (or phrase)
                  exceeds the character limit:
                example:
                  code: BAD_REQUEST
                  msg: "alert_words[0] is too long (limit: 100 characters)"
                  result: error
          description: Bad request.
      summary: Add alert words
      tags:
      - users
  /users/me/presence:
    post:
      description: |
        Update the current user's [presence][availability] and fetch presence data
        of other users in the organization.

        This endpoint is meant to be used by clients for both:

        - Reporting the current user's presence status (`"active"` or `"idle"`)
          to the server.

        - Obtaining the presence data of all other users in the organization via
          regular polling.

        Accurate user presence is one of the most expensive parts of any
        chat application (in terms of bandwidth and other resources). Therefore,
        it is important that clients implementing Zulip's user presence system
        use the modern [`last_update_id`](#parameter-last_update_id) protocol to
        minimize fetching duplicate user presence data.

        Client apps implementing presence are recommended to also consume [`presence`
        events](/api/get-events#presence)), in order to learn about newly online users
        immediately.

        The Zulip server is responsible for implementing [invisible mode][invisible],
        which disables sharing a user's presence data. Nonetheless, clients
        should check the `presence_enabled` field in user objects in order to
        display the current user as online or offline based on whether they are
        sharing their presence information.

        **Changes**: As of Zulip 8.0 (feature level 228), if the
        `CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE` server-level setting is
        `true`, then user presence data in the response is [limited to users
        the current user can see/access][limit-visibility].

        [limit-visibility]: /help/guest-users#configure-whether-guests-can-see-all-other-users
        [invisible]: /help/status-and-availability#invisible-mode
        [availability]: /help/status-and-availability#availability
      operationId: update-presence
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/update_presence_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                modern-presence-format-example:
                  description: |
                    Modern presence format:
                  value:
                    msg: ""
                    presences:
                      "10":
                        idle_timestamp: 1656958530
                        active_timestamp: 1656958520
                    result: success
                    server_timestamp: 1.6569585396287155E9
                    presence_last_update_id: 1000
                legacy-presence-format-example:
                  description: |
                    Legacy presence format:
                  value:
                    msg: ""
                    presences:
                      user@example.com:
                        aggregated:
                          client: website
                          status: idle
                          timestamp: 1594825445
                        website:
                          client: website
                          status: idle
                          timestamp: 1594825445
                          pushable: false
                    result: success
                    server_timestamp: 1.6569585396287155E9
                    presence_last_update_id: 1000
              schema:
                $ref: "#/components/schemas/update_presence_200_response"
          description: Success.
      summary: Update your presence
      tags:
      - users
  /users/me/status:
    post:
      description: |
        Change your [status](/help/status-and-availability).

        A request to this endpoint will only change the parameters passed.
        For example, passing just `status_text` requests a change in the status
        text, but will leave the status emoji unchanged.

        Clients that wish to set the user's status to a specific value should
        pass all supported parameters.

        **Changes**: In Zulip 5.0 (feature level 86), added support for
        `emoji_name`, `emoji_code`, and `reaction_type` parameters.
      operationId: update-status
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              away:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_status_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_status_400_response"
          description: Bad request.
      summary: Update your status
      tags:
      - users
  /users/me/{stream_id}/topics:
    get:
      description: |
        Get all topics the user has access to in a specific channel.

        Note that for [private channels with
        protected history](/help/channel-permissions#private-channels),
        the user will only have access to topics of messages sent after they
        [subscribed to](/api/subscribe) the channel. Similarly, a user's
        [bot](/help/bots-overview#bot-type) will only have access to messages
        sent after the bot was subscribed to the channel, instead of when the
        user subscribed.
      operationId: get-stream-topics
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether the client supports processing the empty string as
          a topic name in the returned data.

          If `false`, the value of `realm_empty_topic_display_name`
          found in the [`POST /register`](/api/register-queue) response is
          returned replacing the empty string as the topic name.

          **Changes**: New in Zulip 10.0 (feature level 334). Previously,
          the empty string was not a valid topic.
        example: true
        explode: true
        in: query
        name: allow_empty_topic_name
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_stream_topics_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  An example JSON response for when the user is attempting to fetch the topics
                  of a non-existing channel (or also a private channel they don't have access to):
          description: Bad request.
      summary: Get topics in a channel
      tags:
      - channels
  /users/me/subscriptions:
    delete:
      description: |
        Unsubscribe yourself or other users from one or more channels.

        In addition to managing the current user's subscriptions, this
        endpoint can be used to remove other users from channels. This
        is possible in 3 situations:

        - Organization administrators can remove any user from any
          channel.
        - Users can remove a bot that they own from any channel that
          the user [can access](/help/channel-permissions).
        - Users can unsubscribe any user from a channel if they [have
          access](/help/channel-permissions) to the channel and are a
          member of the [user group](/api/get-user-groups) specified
          by the [`can_remove_subscribers_group`][can-remove-parameter]
          for the channel.

        **Changes**: Before Zulip 10.0 (feature level 362),
        subscriptions in archived channels could not be modified.

        Before Zulip 8.0 (feature level 208), if a user specified by
        the [`principals`][principals-param] parameter was a
        deactivated user, or did not exist, then an HTTP status code
        of 403 was returned with `code: "UNAUTHORIZED_PRINCIPAL"` in
        the error response. As of this feature level, an HTTP status
        code of 400 is returned with `code: "BAD_REQUEST"` in the
        error response for these cases.

        Before Zulip 8.0 (feature level 197),
        the `can_remove_subscribers_group` setting
        was named `can_remove_subscribers_group_id`.

        Before Zulip 7.0 (feature level 161), the
        `can_remove_subscribers_group_id` for all channels was always
        the system group for organization administrators.

        Before Zulip 6.0 (feature level 145), users had no special
        privileges for managing bots that they own.

        [principals-param]: /api/unsubscribe#parameter-principals
        [can-remove-parameter]: /api/subscribe#parameter-can_remove_subscribers_group
      operationId: unsubscribe
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              subscriptions:
                contentType: application/json
                style: form
              principals:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/unsubscribe_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unsubscribe_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/NonExistingChannelNameError"
                description: |
                  A typical failed JSON response for when the target channel does not exist:
          description: Bad request.
      summary: Unsubscribe from a channel
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          description: |
            **Note**: Unsubscribing another user from a channel requires
            administrative privileges.
          parameters:
            enum:
            - subscriptions
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may specify the `principals` parameter like so:
    get:
      description: |
        Get all channels that the user is subscribed to.
      operationId: get-subscriptions
      parameters:
      - description: |
          Whether each returned channel object should include a `subscribers`
          field containing a list of the user IDs of its subscribers.

          Client apps supporting organizations with many thousands of users
          should not pass `true`, because the full subscriber matrix may be
          several megabytes of data. The `partial` value, combined with the
          `subscriber_count` and fetching subscribers for individual channels as
          needed, is recommended to support client app features where
          channel subscriber data is useful.

          If a client passes `partial` for this parameter, the server may,
          for some channels, return a subset of the channel's subscribers
          in the `partial_subscribers` field instead of the `subscribers` field,
          which always contains the complete set of subscribers.

          The server guarantees that it will always return a `subscribers`
          field for channels with fewer than 250 total subscribers. When
          returning a `partial_subscribers` field, the server guarantees
          that all bot users and users active within the last 14 days will
          be included. For other cases, the server may use its discretion
          to determine which channels and users to include, balancing between
          payload size and usefulness of the data provided to the client.

          **Changes**: The `partial` value is new in Zulip 11.0 (feature level 412).

          New in Zulip 2.1.0.
        example: "true"
        explode: true
        in: query
        name: include_subscribers
        required: false
        schema:
          default: "false"
          enum:
          - "true"
          - "false"
          - partial
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_subscriptions_200_response"
          description: Success.
      summary: Get subscribed channels
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          description: |
            You may pass the `include_subscribers` query parameter as follows:
          parameters:
            enum:
            - ""
    patch:
      description: |
        Update which channels you are subscribed to.

        **Changes**: Before Zulip 10.0 (feature level 362),
        subscriptions in archived channels could not be modified.
      operationId: update-subscriptions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              delete:
                contentType: application/json
                style: form
              add:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_subscriptions_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_subscriptions_200_response"
          description: Success.
      summary: Update subscriptions
      tags:
      - channels
    post:
      description: |
        Subscribe one or more users to one or more channels.

        If any of the specified channels do not exist, they are automatically
        created. The initial [channel settings](/api/update-stream) will be determined
        by the optional parameters, like `invite_only`, detailed below.

        Note that the ability to subscribe oneself and/or other users
        to a specified channel depends on the [channel's permissions
        settings](/help/channel-permissions).

        **Changes**: Before Zulip 10.0 (feature level 362),
        subscriptions in archived channels could not be modified.

        Before Zulip 10.0 (feature level 357), the
        `can_subscribe_group` permission, which allows members of the
        group to subscribe themselves to the channel, did not exist.

        Before Zulip 10.0 (feature level 349), a user cannot subscribe
        other users to a private channel without being subscribed
        to that channel themselves. Now, If a user is part of
        `can_add_subscribers_group`, they can subscribe themselves or other
        users to a private channel without being subscribed to that channel.

        Removed `stream_post_policy` and `is_announcement_only`
        parameters in Zulip 10.0 (feature level 333), as permission to post
        in the channel is now controlled by `can_send_message_group`.

        Before Zulip 8.0 (feature level 208), if a user specified by the
        [`principals`][principals-param] parameter was a deactivated user,
        or did not exist, then an HTTP status code of 403 was returned with
        `code: "UNAUTHORIZED_PRINCIPAL"` in the error response. As of this
        feature level, an HTTP status code of 400 is returned with
        `code: "BAD_REQUEST"` in the error response for these cases.

        [principals-param]: /api/subscribe#parameter-principals
      operationId: subscribe
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              subscriptions:
                contentType: application/json
                style: form
              principals:
                contentType: application/json
                style: form
              authorization_errors_fatal:
                contentType: application/json
                style: form
              announce:
                contentType: application/json
                style: form
              invite_only:
                contentType: application/json
                style: form
              is_web_public:
                contentType: application/json
                style: form
              is_default_stream:
                contentType: application/json
                style: form
              history_public_to_subscribers:
                contentType: application/json
                style: form
              topics_policy:
                contentType: application/json
                style: form
              can_add_subscribers_group:
                contentType: application/json
                style: form
              can_remove_subscribers_group:
                contentType: application/json
                style: form
              can_administer_channel_group:
                contentType: application/json
                style: form
              can_delete_any_message_group:
                contentType: application/json
                style: form
              can_delete_own_message_group:
                contentType: application/json
                style: form
              can_move_messages_out_of_channel_group:
                contentType: application/json
                style: form
              can_move_messages_within_channel_group:
                contentType: application/json
                style: form
              can_send_message_group:
                contentType: application/json
                style: form
              can_subscribe_group:
                contentType: application/json
                style: form
              can_resolve_topics_group:
                contentType: application/json
                style: form
              folder_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/subscribe_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subscribe_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response for when the requesting user does not have
                  access to a private channel and `"authorization_errors_fatal": true`:
                example:
                  msg: Unable to access channel (private).
                  result: error
                  code: BAD_REQUEST
          description: Bad request.
      summary: Subscribe to a channel
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - subscriptions
        - type: include
          description: |
            To subscribe another user to a channel, you may pass in
            the `principals` parameter, like so:
          parameters:
            enum:
            - subscriptions
            - principals
  /users/me/subscriptions/muted_topics:
    patch:
      deprecated: true
      description: |
        [Mute or unmute a topic](/help/mute-a-topic) within a channel that
        the current user is subscribed to.

        **Changes**: Deprecated in Zulip 7.0 (feature level 170). Clients connecting
        to newer servers should use the [POST /user_topics](/api/update-user-topic)
        endpoint, as this endpoint may be removed in a future release.

        Before Zulip 7.0 (feature level 169), this endpoint
        returned an error if asked to mute a topic that was already muted
        or asked to unmute a topic that had not previously been muted.
      operationId: mute-topic
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/mute_topic_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Topic muting
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - stream_id
  /mobile_push/test_notification:
    post:
      description: |
        Trigger sending a test push notification to the user's
        selected mobile device or all of their mobile devices.

        **Changes**: Starting with Zulip 8.0 (feature level 234), test
        notifications sent via this endpoint use `test` rather than
        `test-by-device-token` in the `event` field. Also, as of this
        feature level, all mobile push notifications now include a
        `realm_name` field.

        New in Zulip 8.0 (feature level 217).
      operationId: test-notify
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/test_notify_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonSuccess"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/test_notify_400_response"
          description: |
            Bad request.
      summary: Send a test notification to mobile device(s)
      tags:
      - mobile
  /mobile_push/e2ee/test_notification:
    post:
      description: |
        Trigger sending an end-to-end encrypted (E2EE) test push notification
        to the user's selected mobile device or all of their mobile devices.

        **Changes**: New in Zulip 11.0 (feature level 420).
      operationId: e2ee-test-notify
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/e2ee_test_notify_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonSuccess"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoActivePushDeviceError"
          description: |
            Bad request.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PushNotificationAdminActionRequiredError"
          description: |
            Forbidden.
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/e2ee_test_notify_502_response"
          description: |
            Bad gateway.
      summary: Send an E2EE test notification to mobile device(s)
      tags:
      - mobile
  /mobile_push/register:
    post:
      description: |
        Register a device to receive end-to-end encrypted mobile push notifications.

        **Changes**: New in Zulip 11.0 (feature level 406).
      operationId: register-push-device
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/register_push_device_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  Error when the server is not configured to use push notification service:
                example:
                  result: error
                  msg: Server is not configured to use push notification service.
                  code: PUSH_SERVICE_NOT_CONFIGURED
          description: Bad request.
      summary: Register E2EE push device
      tags:
      - mobile
  /user_topics:
    post:
      description: |
        This endpoint is used to update the personal preferences for a topic,
        such as the topic's visibility policy, which is used to implement
        [mute a topic](/help/mute-a-topic) and related features.

        This endpoint can be used to update the visibility policy for the single
        channel and topic pair indicated by the parameters for a user.

        **Changes**: New in Zulip 7.0 (feature level 170). Previously,
        toggling whether a topic was muted or unmuted was managed by the
        [PATCH /users/me/subscriptions/muted_topics](/api/mute-topic) endpoint.
      operationId: update-user-topic
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              stream_id:
                contentType: application/json
                style: form
              visibility_policy:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_user_topic_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Update personal preferences for a topic
      tags:
      - channels
  /users/me/muted_users/{muted_user_id}:
    delete:
      description: |
        [Unmute a user](/help/mute-a-user#see-your-list-of-muted-users)
        from the perspective of the requesting user.

        **Changes**: New in Zulip 4.0 (feature level 48).
      operationId: unmute-user
      parameters:
      - description: |
          The ID of the user to mute/unmute.

          **Changes**: Before Zulip 8.0 (feature level 188), bot users could not
          be muted/unmuted, and specifying a bot user's ID returned an error response.
        example: 10
        explode: false
        in: path
        name: muted_user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unmute_user_400_response"
          description: Bad request.
      summary: Unmute a user
      tags:
      - users
    post:
      description: |
        [Mute a user](/help/mute-a-user) from the perspective of the requesting
        user. Messages sent by muted users will be automatically marked as read
        and hidden for the user who muted them.

        Muted users should be implemented by clients as follows:

        - The server will immediately mark all messages sent by the muted
          user as read. This will automatically clear any existing mobile
          push notifications related to the muted user.
        - The server will mark any new messages sent by the muted user as read
          for the requesting user's account, which prevents all email and mobile
          push notifications.
        - Clients should exclude muted users from presence lists or other UI
          for viewing or composing one-on-one direct messages. One-on-one direct
          messages sent by muted users should be hidden everywhere in the Zulip UI.
        - Channel messages and group direct messages sent by the muted
          user should avoid displaying the content and name/avatar,
          but should display that N messages by a muted user were
          hidden (so that it is possible to interpret the messages by
          other users who are talking with the muted user).
        - Group direct message conversations including the muted user
          should display muted users as "Muted user", rather than
          showing their name, in lists of such conversations, along with using
          a blank grey avatar where avatars are displayed.
        - Administrative/settings UI elements for showing "All users that exist
          on this channel or realm", e.g. for organization
          administration or showing channel subscribers, should display
          the user's name as normal.

        **Changes**: New in Zulip 4.0 (feature level 48).
      operationId: mute-user
      parameters:
      - description: |
          The ID of the user to mute/unmute.

          **Changes**: Before Zulip 8.0 (feature level 188), bot users could not
          be muted/unmuted, and specifying a bot user's ID returned an error response.
        example: 10
        explode: false
        in: path
        name: muted_user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mute_user_400_response"
          description: Bad request.
      summary: Mute a user
      tags:
      - users
  /users/me/apns_device_token:
    delete:
      description: |
        This endpoint removes an APNs device token for iOS push notifications.
      operationId: remove-apns-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/remove_apns_token_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/remove_apns_token_400_response"
          description: Bad request.
      summary: Remove an APNs device token
      tags:
      - users
    post:
      description: |
        This endpoint adds an APNs device token to register for iOS push notifications.
      operationId: add-apns-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_apns_token_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_apns_token_400_response"
          description: Bad request.
      summary: Add an APNs device token
      tags:
      - users
  /users/me/android_gcm_reg_id:
    delete:
      description: |
        This endpoint removes an FCM registration token for push notifications.
      operationId: remove-fcm-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_fcm_token_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/remove_fcm_token_400_response"
          description: Bad request.
      summary: Remove an FCM registration token
      tags:
      - users
    post:
      description: |
        This endpoint adds an FCM registration token for push notifications.
      operationId: add-fcm-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_fcm_token_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for when the token's length is invalid
                  or is empty:
                example:
                  result: error
                  msg: Empty or invalid length token
                  code: BAD_REQUEST
          description: Bad request.
      summary: Add an FCM registration token
      tags:
      - users
  /users/{user_id}/subscriptions/{stream_id}:
    get:
      description: |
        Check whether a user is subscribed to a channel.

        **Changes**: New in Zulip 3.0 (feature level 12).
      operationId: get-subscription-status
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_subscription_status_200_response"
          description: Success
      summary: Get subscription status
      tags:
      - channels
  /realm/emoji/{emoji_name}:
    delete:
      description: |
        [Deactivate a custom emoji](/help/custom-emoji#deactivate-custom-emoji) from
        the user's organization.

        Users can only deactivate custom emoji that they added themselves except for
        organization administrators, who can deactivate any custom emoji.

        Note that deactivated emoji will still be visible in old messages, reactions,
        user statuses and channel descriptions.

        **Changes**: Before Zulip 8.0 (feature level 190), this endpoint returned an
        HTTP status code of 400 when the emoji did not exist, instead of 404.
      operationId: deactivate-custom-emoji
      parameters:
      - description: |
          The name of the custom emoji to deactivate.
        example: green_tick
        explode: false
        in: path
        name: emoji_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response for when no emoji exists with the provided name:
                example:
                  code: BAD_REQUEST
                  result: error
                  msg: Emoji 'green_tick' does not exist
          description: Not Found.
      summary: Deactivate custom emoji
      tags:
      - server_and_organizations
    post:
      description: |
        This endpoint is used to upload a custom emoji for use in the user's
        organization. Access to this endpoint depends on the
        [organization's configuration](https://zulip.com/help/custom-emoji#change-who-can-add-custom-emoji).
      operationId: upload-custom-emoji
      parameters:
      - description: |
          The name that should be associated with the uploaded emoji image/gif.
          The emoji name can only contain letters, numbers, dashes, and spaces.
          Upper and lower case letters are treated the same, and underscores (\_)
          are treated the same as spaces (consistent with how the Zulip UI
          handles emoji).
        example: smile
        explode: false
        in: path
        name: emoji_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/upload_custom_emoji_request"
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Upload custom emoji
      tags:
      - server_and_organizations
      x-parameter-description: |
        As described above, the image file to upload must be provided in the
        request's body.

        ## Maximum file size

        The maximum file size for uploads can be configured by the
        administrator of the Zulip server by setting `MAX_EMOJI_FILE_SIZE_MIB`
        in the [server's settings][1]. `MAX_EMOJI_FILE_SIZE_MIB` defaults
        to 5MB.

        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings
  /realm/emoji:
    get:
      description: |
        Get all the custom emoji in the user's organization.
      operationId: get-custom-emoji
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_custom_emoji_200_response"
          description: Success.
      summary: Get all custom emoji
      tags:
      - server_and_organizations
  /realm/presence:
    get:
      description: |
        Get the presence information of all the users in an organization.

        If the `CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE` server-level
        setting is set to `true`, presence information of only accessible
        users are returned.

        Complete Zulip apps are recommended to fetch presence
        information when they post their own state using the [`POST
        /presence`](/api/update-presence) API endpoint.
      operationId: get-presence
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_presence_200_response"
          description: Success.
      summary: Get presence of all users
      tags:
      - server_and_organizations
  /realm/profile_fields:
    get:
      description: |
        Get all the [custom profile fields](/help/custom-profile-fields)
        configured for the user's organization.
      operationId: get-custom-profile-fields
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_custom_profile_fields_200_response"
          description: Success.
      summary: Get all custom profile fields
      tags:
      - server_and_organizations
    patch:
      description: |
        Reorder the custom profile fields in the user's organization.

        Custom profile fields are displayed in Zulip UI widgets in order; this
        endpoint allows administrative settings UI to change the field ordering.

        This endpoint is used to implement the dragging feature described in the
        [custom profile fields documentation](/help/custom-profile-fields).
      operationId: reorder-custom-profile-fields
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              order:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/reorder_custom_profile_fields_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Reorder custom profile fields
      tags:
      - server_and_organizations
      x-requires-administrator: true
    post:
      description: |
        [Create a custom profile field](/help/custom-profile-fields#add-a-custom-profile-field) in the user's organization.
      operationId: create-custom-profile-field
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              field_type:
                contentType: application/json
                style: form
              field_data:
                contentType: application/json
                style: form
              display_in_profile_summary:
                contentType: application/json
                style: form
              required:
                contentType: application/json
                style: form
              editable_by_user:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_custom_profile_field_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_custom_profile_field_200_response"
          description: Success.
      summary: Create a custom profile field
      tags:
      - server_and_organizations
      x-requires-administrator: true
  /realm/user_settings_defaults:
    patch:
      description: |
        Change the [default values of settings][new-user-defaults] for new users
        joining the organization. Essentially all
        [personal preference settings](/api/update-settings) are supported.

        This feature can be invaluable for customizing Zulip's default
        settings for notifications or UI to be appropriate for how the
        organization is using Zulip. (Note that this only supports
        personal preference settings, like when to send push
        notifications or what emoji set to use, not profile or
        identity settings that naturally should be different for each user).

        Note that this endpoint cannot, at present, be used to modify
        settings for existing users in any way.

        **Changes**: Removed `dense_mode` setting in Zulip 10.0 (feature level 364)
        as we now have `web_font_size_px` and `web_line_height_percent`
        settings for more control.

        New in Zulip 5.0 (feature level 96). If any parameters sent in the
        request are not supported by this endpoint, an
        [`ignored_parameters_unsupported`][ignored-parameters] array will
        be returned in the JSON success response.

        [new-user-defaults]: /help/configure-default-new-user-settings
        [ignored-parameters]: /api/rest-error-handling#ignored-parameters
      operationId: update-realm-user-settings-defaults
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              starred_message_counts:
                contentType: application/json
                style: form
              receives_typing_notifications:
                contentType: application/json
                style: form
              web_suggest_update_timezone:
                contentType: application/json
                style: form
              fluid_layout_width:
                contentType: application/json
                style: form
              high_contrast_mode:
                contentType: application/json
                style: form
              web_mark_read_on_scroll_policy:
                contentType: application/json
                style: form
              web_channel_default_view:
                contentType: application/json
                style: form
              web_font_size_px:
                contentType: application/json
                style: form
              web_line_height_percent:
                contentType: application/json
                style: form
              color_scheme:
                contentType: application/json
                style: form
              enable_drafts_synchronization:
                contentType: application/json
                style: form
              translate_emoticons:
                contentType: application/json
                style: form
              display_emoji_reaction_users:
                contentType: application/json
                style: form
              web_escape_navigates_to_home_view:
                contentType: application/json
                style: form
              left_side_userlist:
                contentType: application/json
                style: form
              demote_inactive_streams:
                contentType: application/json
                style: form
              user_list_style:
                contentType: application/json
                style: form
              web_stream_unreads_count_display_policy:
                contentType: application/json
                style: form
              hide_ai_features:
                contentType: application/json
                style: form
              web_left_sidebar_show_channel_folders:
                contentType: application/json
                style: form
              web_left_sidebar_unreads_count_summary:
                contentType: application/json
                style: form
              enable_stream_desktop_notifications:
                contentType: application/json
                style: form
              enable_stream_email_notifications:
                contentType: application/json
                style: form
              enable_stream_push_notifications:
                contentType: application/json
                style: form
              enable_stream_audible_notifications:
                contentType: application/json
                style: form
              enable_desktop_notifications:
                contentType: application/json
                style: form
              enable_sounds:
                contentType: application/json
                style: form
              enable_followed_topic_desktop_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_email_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_push_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_audible_notifications:
                contentType: application/json
                style: form
              email_notifications_batching_period_seconds:
                contentType: application/json
                style: form
              enable_offline_email_notifications:
                contentType: application/json
                style: form
              enable_offline_push_notifications:
                contentType: application/json
                style: form
              enable_online_push_notifications:
                contentType: application/json
                style: form
              enable_digest_emails:
                contentType: application/json
                style: form
              message_content_in_email_notifications:
                contentType: application/json
                style: form
              pm_content_in_desktop_notifications:
                contentType: application/json
                style: form
              wildcard_mentions_notify:
                contentType: application/json
                style: form
              enable_followed_topic_wildcard_mentions_notify:
                contentType: application/json
                style: form
              desktop_icon_count_display:
                contentType: application/json
                style: form
              realm_name_in_email_notifications_policy:
                contentType: application/json
                style: form
              automatically_follow_topics_policy:
                contentType: application/json
                style: form
              automatically_unmute_topics_in_muted_streams_policy:
                contentType: application/json
                style: form
              automatically_follow_topics_where_mentioned:
                contentType: application/json
                style: form
              presence_enabled:
                contentType: application/json
                style: form
              enter_sends:
                contentType: application/json
                style: form
              twenty_four_hour_time:
                contentType: application/json
                style: form
              send_private_typing_notifications:
                contentType: application/json
                style: form
              send_stream_typing_notifications:
                contentType: application/json
                style: form
              send_read_receipts:
                contentType: application/json
                style: form
              email_address_visibility:
                contentType: application/json
                style: form
              web_navigate_to_sent_message:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_realm_user_settings_defaults_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SuccessIgnoredParameters"
      summary: Update realm-level defaults of user settings
      tags:
      - server_and_organizations
      x-requires-administrator: true
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - left_side_userlist
            - emojiset
  /users/me/subscriptions/properties:
    post:
      description: |
        This endpoint is used to update the user's personal settings for the
        channels they are subscribed to, including muting, color, pinning, and
        per-channel notification settings.

        **Changes**: Prior to Zulip 5.0 (feature level 111), response
        object included the `subscription_data` in the
        request. The endpoint now returns the more ergonomic
        [`ignored_parameters_unsupported`][ignored-parameters] array instead.

        [ignored-parameters]: /api/rest-error-handling#ignored-parameters
      operationId: update-subscription-settings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              subscription_data:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_subscription_settings_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SuccessIgnoredParameters"
      summary: Update subscription settings
      tags:
      - channels
  /users/{email}:
    get:
      description: |
        Fetch details for a single user in the organization given a Zulip
        API email address.

        You can also fetch details on [all users in the organization](/api/get-users)
        or [by user ID](/api/get-user).

        Fetching by user ID is generally recommended when possible,
        as a user might [change their email address](/help/change-your-email-address)
        or change their [email address visibility](/help/configure-email-visibility),
        either of which could change the client's ability to look them up by that
        email address.

        **Changes**: Starting with Zulip 10.0 (feature level 302), the real email
        address can be used in the `email` parameter and will fetch the target user's
        data if and only if the target's email visibility setting permits the requester
        to see the email address.
        The dummy email addresses of the form `user{id}@{realm.host}` still work, and
        will now work for **all** users, via identifying them by the embedded user ID.

        New in Zulip Server 4.0 (feature level 39).
      operationId: get-user-by-email
      parameters:
      - description: |
          The email address of the user to fetch. Two forms are supported:

          - The real email address of the user (`delivery_email`). The lookup will
            succeed if and only if the user exists and their email address visibility
            setting permits the client to see the email address.

          - The dummy Zulip API email address of the form `user{user_id}@{realm_host}`. This
            is identical to simply [getting user by ID](/api/get-user). If the server or
            realm change domains, the dummy email address used has to be adjustment to
            match the new realm domain. This is legacy behavior for
            backwards-compatibility, and will be removed in a future release.

          **Changes**: Starting with Zulip 10.0 (feature level 302), lookups by real email
          address match the semantics of the target's email visibility setting and dummy
          email addresses work for all users, independently of their email visibility
          setting.

          Previously, lookups were done only using the Zulip API email addresses.
        example: iago@zulip.com
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Whether the client supports computing gravatars URLs. If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar. This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.

          **Changes**: The default value of this parameter was `false`
          prior to Zulip 5.0 (feature level 92).
        example: false
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0. Previous versions do not offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_by_email_200_response"
          description: Success.
      summary: Get a user by email
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:
    patch:
      description: |
        Administrative endpoint to update the details of another user in the organization by their email address.
        Works the same way as [`PATCH /users/{user_id}`](/api/update-user) but fetching the target user by their
        real email address.

        The requester needs to have permission to view the target user's real email address, subject to the
        user's email address visibility setting. Otherwise, the dummy address of the format
        `user{id}@{realm.host}` needs be used. This follows the same rules as `GET /users/{email}`.

        **Changes**: New in Zulip 10.0 (feature level 313).
      operationId: update-user-by-email
      parameters:
      - description: |
          The email address of the user, specified following the same rules as
          [`GET /users/{email}`](/api/get-user-by-email).
        example: hamlet@zulip.com
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: "#/components/requestBodies/UpdateUser"
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical unsuccessful JSON response:
                example:
                  result: error
                  msg: Guests cannot be organization administrators
                  code: BAD_REQUEST
          description: Bad request.
      summary: Update a user by email
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id}:
    delete:
      description: |
        [Deactivates a
        user](https://zulip.com/help/deactivate-or-reactivate-a-user)
        given their user ID.
      operationId: deactivate-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/deactivate_user_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response when attempting to deactivate the only
                  organization owner in an organization:
                example:
                  code: BAD_REQUEST
                  msg: Cannot deactivate the only organization owner
                  result: error
          description: Bad request.
      summary: Deactivate a user
      tags:
      - users
      x-requires-administrator: true
    get:
      description: |
        Fetch details for a single user in the organization.

        You can also fetch details on [all users in the organization](/api/get-users)
        or [by a user's Zulip API email](/api/get-user-by-email).

        **Changes**: New in Zulip 3.0 (feature level 1).
      operationId: get-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether the client supports computing gravatars URLs. If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar. This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.

          **Changes**: The default value of this parameter was `false`
          prior to Zulip 5.0 (feature level 92).
        example: false
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0. Previous versions do not offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_by_email_200_response"
          description: Success.
      summary: Get a user
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:
    patch:
      description: |
        Administrative endpoint to update the details of another user in the organization.

        Supports everything an administrator can do to edit details of another
        user's account, including editing full name,
        [role](/help/user-roles), and [custom profile
        fields](/help/custom-profile-fields).
      operationId: update-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        $ref: "#/components/requestBodies/UpdateUser"
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical unsuccessful JSON response:
                example:
                  result: error
                  msg: Guests cannot be organization administrators
                  code: BAD_REQUEST
          description: Bad request.
      summary: Update a user
      tags:
      - users
      x-requires-administrator: true
  /realm/linkifiers:
    get:
      description: |
        List all of an organization's configured
        [linkifiers](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.

        **Changes**: New in Zulip 4.0 (feature level 54). On older versions,
        a similar `GET /realm/filters` endpoint was available with each entry in
        a `[pattern, url_format, id]` tuple format.
      operationId: get-linkifiers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_linkifiers_200_response"
          description: Success.
      summary: Get linkifiers
      tags:
      - server_and_organizations
    patch:
      description: |
        Change the order that the regular expression patterns in the organization's
        [linkifiers](/help/add-a-custom-linkifier) are matched in messages and topics.
        Useful when defining linkifiers with overlapping patterns.

        **Changes**: New in Zulip 8.0 (feature level 202). Before this feature level,
        linkifiers were always processed in order by ID, which meant users would
        need to delete and recreate them to reorder the list of linkifiers.
      operationId: reorder-linkifiers
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              ordered_linkifier_ids:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/reorder_linkifiers_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Reorder linkifiers
      tags:
      - server_and_organizations
  /realm/filters:
    post:
      description: |
        Configure [linkifiers](/help/add-a-custom-linkifier),
        regular expression patterns that are automatically linkified when they
        appear in messages and topics.
      operationId: add-linkifier
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_linkifier_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_linkifier_200_response"
          description: Success.
      summary: Add a linkifier
      tags:
      - server_and_organizations
  /realm/filters/{filter_id}:
    delete:
      description: |
        Remove [linkifiers](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.
      operationId: remove-linkifier
      parameters:
      - description: |
          The ID of the linkifier that you want to remove.
        example: 43
        explode: false
        in: path
        name: filter_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Remove a linkifier
      tags:
      - server_and_organizations
    patch:
      description: |
        Update a [linkifier](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.

        **Changes**: New in Zulip 4.0 (feature level 57).
      operationId: update-linkifier
      parameters:
      - description: |
          The ID of the linkifier that you want to update.
        example: 5
        explode: false
        in: path
        name: filter_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_linkifier_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Update a linkifier
      tags:
      - server_and_organizations
  /realm/playgrounds:
    post:
      description: |
        Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.

        **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was
        fixed in Zulip 4.0 (feature level 57).
      operationId: add-code-playground
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/add_code_playground_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/add_code_playground_200_response"
          description: Success.
      summary: Add a code playground
      tags:
      - server_and_organizations
  /realm/playgrounds/{playground_id}:
    delete:
      description: |
        Remove a [code playground](/help/code-blocks#code-playgrounds) previously
        configured for an organization.

        **Changes**: New in Zulip 4.0 (feature level 49).
      operationId: remove-code-playground
      parameters:
      - description: |
          The ID of the playground that you want to remove.
        example: 1
        explode: false
        in: path
        name: playground_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Remove a code playground
      tags:
      - server_and_organizations
  /export/realm:
    get:
      description: |
        Fetch all the public and standard [data exports][export-data]
        of the organization.

        **Changes**: Prior to Zulip 10.0 (feature level 304), only
        public data exports could be fetched using this endpoint.

        New in Zulip 2.1.

        [export-data]: /help/export-your-organization#export-for-migrating-to-zulip-cloud-or-a-self-hosted-server
      operationId: get-realm-exports
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_realm_exports_200_response"
          description: Success.
      summary: Get all data exports
      tags:
      - server_and_organizations
      x-requires-administrator: true
    post:
      description: |
        Create a public or a standard [data export][export-data] of the organization.

        !!! warn ""

            **Note**: If you're the administrator of a self-hosted installation,
            you may be looking for the documentation on [server data export and
            import][data-export] or [server backups][backups].

        **Changes**: Prior to Zulip 10.0 (feature level 304), only
        public data exports could be created using this endpoint.

        New in Zulip 2.1.

        [export-data]: /help/export-your-organization#export-for-migrating-to-zulip-cloud-or-a-self-hosted-server
        [data-export]: https://zulip.readthedocs.io/en/stable/production/export-and-import.html#data-export
        [backups]: https://zulip.readthedocs.io/en/stable/production/export-and-import.html#backups
      operationId: export-realm
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/export_realm_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/export_realm_200_response"
          description: Success
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response for when the data export
                  exceeds the maximum allowed data export size.
                example:
                  code: BAD_REQUEST
                  msg: Please request a manual export from zulip-admin@example.com.
                  result: error
          description: Bad request.
      summary: Create a data export
      tags:
      - server_and_organizations
      x-requires-administrator: true
  /export/realm/consents:
    get:
      description: |
        Fetches which users have [consented](/help/export-your-organization#configure-whether-administrators-can-export-your-private-data)
        for their private data to be exported by organization administrators.

        **Changes**: New in Zulip 10.0 (feature level 295).
      operationId: get-realm-export-consents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_realm_export_consents_200_response"
          description: Success.
      summary: Get data export consent state
      tags:
      - server_and_organizations
      x-requires-administrator: true
  /invites:
    get:
      description: |
        Fetch all unexpired [invitations](/help/invite-new-users) (i.e. email
        invitations and reusable invitation links) that can be managed by the user.

        Note that administrators can manage invitations that were created by other users.

        **Changes**: Prior to Zulip 8.0 (feature level 209), non-admin users could
        only create email invitations, and therefore the response would never include
        reusable invitation links for these users.
      operationId: get-invites
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_invites_200_response"
          description: Success.
      summary: Get all invitations
      tags:
      - invites
    post:
      description: |
        Send [invitations](/help/invite-new-users) to specified email addresses.

        **Changes**: In Zulip 6.0 (feature level 126), the `invite_expires_in_days`
        parameter was removed and replaced by `invite_expires_in_minutes`.

        In Zulip 5.0 (feature level 117), added support for passing `null` as
        the `invite_expires_in_days` parameter to request an invitation that never
        expires.

        In Zulip 5.0 (feature level 96), the `invite_expires_in_days` parameter was
        added which specified the number of days before the invitation would expire.
      operationId: send-invites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              invite_expires_in_minutes:
                contentType: application/json
                style: form
              stream_ids:
                contentType: application/json
                style: form
              group_ids:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/send_invites_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/send_invites_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/send_invites_400_response"
          description: Bad request.
      summary: Send invitations
      tags:
      - invites
  /invites/multiuse:
    post:
      description: |
        Create a [reusable invitation link](/help/invite-new-users#create-a-reusable-invitation-link)
        which can be used to invite new users to the organization.

        **Changes**: In Zulip 8.0 (feature level 209), added support for non-admin
        users [with permission](/help/restrict-account-creation#change-who-can-send-invitations)
        to use this endpoint. Previously, it was restricted to administrators only.

        In Zulip 6.0 (feature level 126), the `invite_expires_in_days`
        parameter was removed and replaced by `invite_expires_in_minutes`.

        In Zulip 5.0 (feature level 117), added support for passing `null` as
        the `invite_expires_in_days` parameter to request an invitation that never
        expires.

        In Zulip 5.0 (feature level 96), the `invite_expires_in_days` parameter was
        added which specified the number of days before the invitation would expire.
      operationId: create-invite-link
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              invite_expires_in_minutes:
                contentType: application/json
                style: form
              stream_ids:
                contentType: application/json
                style: form
              group_ids:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_invite_link_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_invite_link_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_invite_link_400_response"
          description: Bad request.
      summary: Create a reusable invitation link
      tags:
      - invites
  /invites/{invite_id}:
    delete:
      description: |
        Revoke an [email invitation](/help/invite-new-users#send-email-invitations).

        A user can only revoke [invitations that they can
        manage](/help/invite-new-users#manage-pending-invitations).
      operationId: revoke-email-invite
      parameters:
      - description: |
          The ID of the email invitation to be revoked.
        example: 1
        explode: false
        in: path
        name: invite_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for an invalid email invitation ID:
                example:
                  result: error
                  msg: No such invitation
                  code: BAD_REQUEST
          description: Bad request.
      summary: Revoke an email invitation
      tags:
      - invites
  /invites/multiuse/{invite_id}:
    delete:
      description: |
        Revoke a [reusable invitation link](/help/invite-new-users#create-a-reusable-invitation-link).

        A user can only revoke [invitations that they can
        manage](/help/invite-new-users#manage-pending-invitations).

        **Changes**: Prior to Zulip 8.0 (feature level 209), only organization
        administrators were able to create and revoke reusable invitation links.
      operationId: revoke-invite-link
      parameters:
      - description: |
          The ID of the reusable invitation link to be revoked.
        example: 1
        explode: false
        in: path
        name: invite_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/revoke_invite_link_400_response"
          description: Bad request.
      summary: Revoke a reusable invitation link
      tags:
      - invites
  /invites/{invite_id}/resend:
    post:
      description: |
        Resend an [email invitation](/help/invite-new-users#send-email-invitations).

        A user can only resend [invitations that they can
        manage](/help/invite-new-users#manage-pending-invitations).
      operationId: resend-email-invite
      parameters:
      - description: |
          The ID of the email invitation to be resent.
        example: 1
        explode: false
        in: path
        name: invite_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  A typical failed JSON response for an invalid email invitation ID:
                example:
                  result: error
                  msg: No such invitation
                  code: BAD_REQUEST
          description: Bad request.
      summary: Resend an email invitation
      tags:
      - invites
  /realm/test_welcome_bot_custom_message:
    post:
      description: |
        Sends a test Welcome Bot custom message to the acting administrator.
        This allows administrators to preview how the custom welcome message will
        appear when received by new users upon joining the organization.

        **Changes**: New in Zulip 11.0 (feature level 416).
      operationId: test-welcome-bot-custom-message
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/test_welcome_bot_custom_message_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/test_welcome_bot_custom_message_200_response"
          description: Success.
      summary: Test welcome bot custom message
      tags:
      - server_and_organizations
      x-requires-administrator: true
  /register:
    post:
      description: |
        This powerful endpoint can be used to register a Zulip "event queue"
        (subscribed to certain types of "events", or updates to the messages
        and other Zulip data the current user has access to), as well as to
        fetch the current state of that data.

        (`register` also powers the `call_on_each_event` Python API, and is
        intended primarily for complex applications for which the more convenient
        `call_on_each_event` API is insufficient).

        This endpoint returns a `queue_id` and a `last_event_id`; these can be
        used in subsequent calls to the
        ["events" endpoint](/api/get-events) to request events from
        the Zulip server using long-polling.

        The server will queue events for up to 10 minutes of inactivity.
        After 10 minutes, your event queue will be garbage-collected. The
        server will send `heartbeat` events every minute, which makes it easy
        to implement a robust client that does not miss events unless the
        client loses network connectivity with the Zulip server for 10 minutes
        or longer.

        Once the server garbage-collects your event queue, the server will
        [return an error](/api/get-events#bad_event_queue_id-errors)
        with a code of `BAD_EVENT_QUEUE_ID` if you try to fetch events from
        the event queue. Your software will need to handle that error
        condition by re-initializing itself (e.g. this is what triggers your
        browser reloading the Zulip web app when your laptop comes back online
        after being offline for more than 10 minutes).

        When prototyping with this API, we recommend first calling `register`
        with no `event_types` parameter to see all the available data from all
        supported event types. Before using your client in production, you
        should set appropriate `event_types` and `fetch_event_types` filters
        so that your client only requests the data it needs. A few minutes
        doing this often saves 90% of the total bandwidth and other resources
        consumed by a client using this API.

        See the [events system developer documentation][events-system-docs]
        if you need deeper details about how the Zulip event queue system
        works, avoids clients needing to worry about large classes of
        potentially messy races, etc.

        **Changes**: Removed `dense_mode` setting in Zulip 10.0 (feature level 364)
        as we now have `web_font_size_px` and `web_line_height_percent`
        settings for more control.

        Before Zulip 7.0 (feature level 183), the
        `realm_community_topic_editing_limit_seconds` property
        was returned by the response. It was removed because it
        had not been in use since the realm setting
        `move_messages_within_stream_limit_seconds` was introduced
        in feature level 162.

        In Zulip 7.0 (feature level 163), the realm setting
        `email_address_visibility` was removed. It was replaced by a [user
        setting](/api/update-settings#parameter-email_address_visibility) with
        a [realm user default][user-defaults], with the encoding of different
        values preserved. Clients can support all versions by supporting the
        current API and treating every user as having the realm's
        `email_address_visibility` value.

        [user-defaults]: /api/update-realm-user-settings-defaults#parameter-email_address_visibility
        [events-system-docs]: https://zulip.readthedocs.io/en/latest/subsystems/events-system.html
      operationId: register-queue
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              apply_markdown:
                contentType: application/json
                style: form
              client_gravatar:
                contentType: application/json
                style: form
              slim_presence:
                contentType: application/json
                style: form
              event_types:
                contentType: application/json
                style: form
              all_public_streams:
                contentType: application/json
                style: form
              client_capabilities:
                contentType: application/json
                style: form
              fetch_event_types:
                contentType: application/json
                style: form
              narrow:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/register_queue_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/register_queue_200_response"
          description: Success.
      summary: Register an event queue
      tags:
      - real_time_events
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - event_types
  /server_settings:
    get:
      description: |
        Fetch global settings for a Zulip server.

        **Note:** this endpoint does not require any authentication at all, and you can use it to check:

        - If this is a Zulip server, and if so, what version of Zulip it's running.
        - What a Zulip client (e.g. a mobile app or
          [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to
          know in order to display a login prompt for the server (e.g. what
          authentication methods are available).
      operationId: get-server-settings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_server_settings_200_response"
          description: Success.
      summary: Get server settings
      tags:
      - server_and_organizations
      x-response-description: |
        Please note that not all of these attributes are guaranteed to appear in a
        response, for two reasons:

        * This endpoint has evolved over time, so responses from older Zulip servers
          might be missing some keys (in which case a client should assume the
          appropriate default).
        * If a `/server_settings` request is made to the root domain of a
          multi-subdomain server, like the root domain of zulip.com, the settings
          that are realm-specific are not known and thus not provided.
  /settings:
    patch:
      description: |
        This endpoint is used to edit the current user's settings.

        **Changes**: Removed `dense_mode` setting in Zulip 10.0
        (feature level 364) as we now have `web_font_size_px` and
        `web_line_height_percent` settings for more control.

        Prior to Zulip 5.0 (feature level 80), this endpoint only
        supported the `full_name`, `email`, `old_password`, and
        `new_password` parameters. Notification settings were
        managed by `PATCH /settings/notifications`, and all other
        settings by `PATCH /settings/display`.

        The feature level 80 migration to merge these endpoints did not
        change how request parameters are encoded. However, it did change
        the handling of any invalid parameters present in a request
        (see feature level 78 change below).

        As of feature level 80, the `PATCH /settings/display` and
        `PATCH /settings/notifications` endpoints are deprecated aliases
        for this endpoint for backwards-compatibility, and will be removed
        once clients have migrated to use this endpoint.

        Prior to Zulip 5.0 (feature level 78), this endpoint indicated
        which parameters it had processed by including in the response
        object `"key": value` entries for values successfully changed by
        the request. That was replaced by the more ergonomic
        [`ignored_parameters_unsupported`][ignored-parameters] array.

        The `PATCH /settings/notifications` and `PATCH /settings/display`
        endpoints also had this behavior of indicating processed parameters
        before they became aliases of this endpoint in Zulip 5.0 (see
        feature level 80 change above).

        Before feature level 78, request parameters that were not supported
        (or were unchanged) were silently ignored.

        [ignored-parameters]: /api/rest-error-handling#ignored-parameters
      operationId: update-settings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              twenty_four_hour_time:
                contentType: application/json
                style: form
              web_mark_read_on_scroll_policy:
                contentType: application/json
                style: form
              web_channel_default_view:
                contentType: application/json
                style: form
              starred_message_counts:
                contentType: application/json
                style: form
              receives_typing_notifications:
                contentType: application/json
                style: form
              web_suggest_update_timezone:
                contentType: application/json
                style: form
              fluid_layout_width:
                contentType: application/json
                style: form
              high_contrast_mode:
                contentType: application/json
                style: form
              web_font_size_px:
                contentType: application/json
                style: form
              web_line_height_percent:
                contentType: application/json
                style: form
              color_scheme:
                contentType: application/json
                style: form
              enable_drafts_synchronization:
                contentType: application/json
                style: form
              translate_emoticons:
                contentType: application/json
                style: form
              display_emoji_reaction_users:
                contentType: application/json
                style: form
              web_escape_navigates_to_home_view:
                contentType: application/json
                style: form
              left_side_userlist:
                contentType: application/json
                style: form
              demote_inactive_streams:
                contentType: application/json
                style: form
              user_list_style:
                contentType: application/json
                style: form
              web_stream_unreads_count_display_policy:
                contentType: application/json
                style: form
              hide_ai_features:
                contentType: application/json
                style: form
              web_left_sidebar_show_channel_folders:
                contentType: application/json
                style: form
              web_left_sidebar_unreads_count_summary:
                contentType: application/json
                style: form
              enable_stream_desktop_notifications:
                contentType: application/json
                style: form
              enable_stream_email_notifications:
                contentType: application/json
                style: form
              enable_stream_push_notifications:
                contentType: application/json
                style: form
              enable_stream_audible_notifications:
                contentType: application/json
                style: form
              enable_desktop_notifications:
                contentType: application/json
                style: form
              enable_sounds:
                contentType: application/json
                style: form
              email_notifications_batching_period_seconds:
                contentType: application/json
                style: form
              enable_offline_email_notifications:
                contentType: application/json
                style: form
              enable_offline_push_notifications:
                contentType: application/json
                style: form
              enable_online_push_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_desktop_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_email_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_push_notifications:
                contentType: application/json
                style: form
              enable_followed_topic_audible_notifications:
                contentType: application/json
                style: form
              enable_digest_emails:
                contentType: application/json
                style: form
              enable_marketing_emails:
                contentType: application/json
                style: form
              enable_login_emails:
                contentType: application/json
                style: form
              message_content_in_email_notifications:
                contentType: application/json
                style: form
              pm_content_in_desktop_notifications:
                contentType: application/json
                style: form
              wildcard_mentions_notify:
                contentType: application/json
                style: form
              enable_followed_topic_wildcard_mentions_notify:
                contentType: application/json
                style: form
              desktop_icon_count_display:
                contentType: application/json
                style: form
              realm_name_in_email_notifications_policy:
                contentType: application/json
                style: form
              automatically_follow_topics_policy:
                contentType: application/json
                style: form
              automatically_unmute_topics_in_muted_streams_policy:
                contentType: application/json
                style: form
              automatically_follow_topics_where_mentioned:
                contentType: application/json
                style: form
              presence_enabled:
                contentType: application/json
                style: form
              enter_sends:
                contentType: application/json
                style: form
              send_private_typing_notifications:
                contentType: application/json
                style: form
              send_stream_typing_notifications:
                contentType: application/json
                style: form
              send_read_receipts:
                contentType: application/json
                style: form
              allow_private_data_export:
                contentType: application/json
                style: form
              email_address_visibility:
                contentType: application/json
                style: form
              web_navigate_to_sent_message:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_settings_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SuccessIgnoredParameters"
      summary: Update settings
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - left_side_userlist
            - emojiset
  /streams/{stream_id}/members:
    get:
      description: |
        Get all users subscribed to a channel.
      operationId: get-subscribers
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_subscribers_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  An example JSON response for when the requested channel does not exist,
                  or where the user does not have permission to access the target channel:
          description: Bad request.
      summary: Get channel subscribers
      tags:
      - channels
  /streams:
    get:
      description: |
        Get all channels that the user [has access to](/help/channel-permissions).
      operationId: get-streams
      parameters:
      - description: |
          Include all public channels.
        example: false
        explode: true
        in: query
        name: include_public
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Include all web-public channels.
        example: true
        explode: true
        in: query
        name: include_web_public
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all channels that the user is subscribed to.
        example: false
        explode: true
        in: query
        name: include_subscribed
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether to exclude archived streams from the results.

          **Changes**: New in Zulip 10.0 (feature level 315).
        example: true
        explode: true
        in: query
        name: exclude_archived
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: true
        description: |
          Deprecated parameter to include all channels. The user must
          have administrative privileges to use this parameter.

          **Changes**: Deprecated in Zulip 10.0 (feature level
          356). Clients interacting with newer servers should use
          the equivalent `include_all` parameter, which does not
          incorrectly hint that this parameter, and not
          `exclude_archived`, controls whether archived channels
          appear in the response.
        example: true
        explode: true
        in: query
        name: include_all_active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all channels that the user has metadata access to.

          For organization administrators, this will be all channels
          in the organization, since organization administrators
          implicitly have metadata access to all channels.

          **Changes**: New in Zulip 10.0 (feature level 356). On older
          versions, use `include_all_active`, which this replaces.
        example: true
        explode: true
        in: query
        name: include_all
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all default channels for the user's realm.
        example: true
        explode: true
        in: query
        name: include_default
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          If the user is a bot, include all channels that the bot's owner is
          subscribed to.
        example: true
        explode: true
        in: query
        name: include_owner_subscribed
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all the channels that the user has content access to.

          **Changes**: New in Zulip 10.0 (feature level 356).
        example: true
        explode: true
        in: query
        name: include_can_access_content
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_streams_200_response"
          description: Success.
      summary: Get all channels
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: include
          parameters:
            enum:
            - include_public
          description: |
            You may pass in one or more of the parameters mentioned below
            as URL query parameters, like so:
  /streams/{stream_id}:
    delete:
      description: |
        [Archive the channel](/help/archive-a-channel) with the ID `stream_id`.
      operationId: archive-stream
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  An example JSON response for when the supplied channel does not exist:
          description: Bad request.
      summary: Archive a channel
      tags:
      - channels
      x-requires-administrator: true
    get:
      description: |
        Fetch details for the channel with the ID `stream_id`.

        **Changes**: New in Zulip 6.0 (feature level 132).
      operationId: get-stream-by-id
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_stream_by_id_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  An example JSON response for when the channel ID is not valid:
          description: Bad request.
      summary: Get a channel by ID
      tags:
      - channels
    patch:
      description: |
        Configure the channel with the ID `stream_id`. This endpoint supports
        an organization administrator editing any property of a channel,
        including:

        - Channel [name](/help/rename-a-channel) and [description](/help/change-the-channel-description)
        - Channel [permissions](/help/channel-permissions), including
          [privacy](/help/change-the-privacy-of-a-channel) and [who can
          send](/help/channel-posting-policy).

        Note that an organization administrator's ability to change a
        [private channel's permissions](/help/channel-permissions#private-channels)
        depends on them being subscribed to the channel.

        **Changes**: Before Zulip 10.0 (feature level 362), channel privacy could not be
        edited for archived channels.

        Removed `stream_post_policy` and `is_announcement_only`
        parameters in Zulip 10.0 (feature level 333), as permission to post
        in the channel is now controlled by `can_send_message_group`.
      operationId: update-stream
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              is_private:
                contentType: application/json
                style: form
              is_web_public:
                contentType: application/json
                style: form
              history_public_to_subscribers:
                contentType: application/json
                style: form
              is_default_stream:
                contentType: application/json
                style: form
              folder_id:
                contentType: application/json
                style: form
              can_add_subscribers_group:
                contentType: application/json
                style: form
              can_remove_subscribers_group:
                contentType: application/json
                style: form
              can_administer_channel_group:
                contentType: application/json
                style: form
              can_delete_any_message_group:
                contentType: application/json
                style: form
              can_delete_own_message_group:
                contentType: application/json
                style: form
              can_move_messages_out_of_channel_group:
                contentType: application/json
                style: form
              can_move_messages_within_channel_group:
                contentType: application/json
                style: form
              can_send_message_group:
                contentType: application/json
                style: form
              can_subscribe_group:
                contentType: application/json
                style: form
              can_resolve_topics_group:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_stream_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_stream_400_response"
          description: Bad request.
      summary: Update a channel
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - new_name
            - description
            - is_private
  /streams/{stream_id}/email_address:
    get:
      description: |
        Get email address of a channel.

        **Changes**: New in Zulip 8.0 (feature level 226).
      operationId: get-stream-email-address
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The ID of a user or bot which should appear as the sender when messages
          are sent to the channel using the returned channel email address.

          `sender_id` can be:

          - ID of the current user.
          - ID of the Email gateway bot. (Default value)
          - ID of a bot owned by the current user.

          **Changes**: New in Zulip 10.0 (feature level 335).

          Previously, the sender was always Email gateway bot.
        example: 1
        explode: true
        in: query
        name: sender_id
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_stream_email_address_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/InvalidChannelError"
                description: |
                  An example JSON response for when the requested channel does not exist,
                  or where the user does not have permission to access the target channel:
          description: Bad request.
      summary: Get channel's email address
      tags:
      - channels
  /streams/{stream_id}/delete_topic:
    post:
      description: |
        Delete all messages in a topic.

        Topics are a field on messages (not an independent data structure), so
        deleting all the messages in the topic deletes the topic from Zulip.

        Because this endpoint deletes messages in batches, it is possible for
        the request to time out after only deleting some messages in the topic.
        When this happens, the `complete` boolean field in the success response
        will be `false`. Clients should repeat the request when handling such a
        response. If all messages in the topic were deleted, then the success
        response will return `"complete": true`.

        **Changes**: Before Zulip 9.0 (feature level 256), the server never sent
        [`stream` op: `update`](/api/get-events#stream-update) events with an
        updated `first_message_id` for a channel when the oldest message that
        had been sent to it changed.

        Before Zulip 8.0 (feature level 211), if the server's
        processing was interrupted by a timeout, but some messages in the topic
        were deleted, then it would return `"result": "partially_completed"`,
        along with a `code` field for an error string, in the success response
        to indicate that there was a timeout and that the client should repeat
        the request.

        As of Zulip 6.0 (feature level 154), instead of returning an error
        response when a request times out after successfully deleting some of
        the messages in the topic, a success response is returned with
        `"result": "partially_completed"` to indicate that some messages were
        deleted.

        Before Zulip 6.0 (feature level 147), this request did a single atomic
        operation, which could time out for very large topics. As of this
        feature level, messages are deleted in batches, starting with the newest
        messages, so that progress is made even if the request times out and
        returns an error.
      operationId: delete-topic
      parameters:
      - description: |
          The ID of the channel to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/delete_topic_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mark_all_as_read_200_response"
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  Error when the user does not have permission
                  to delete topics in this organization:
                example:
                  result: error
                  msg: Must be an organization administrator
                  code: UNAUTHORIZED_PRINCIPAL
          description: Bad request.
      summary: Delete a topic
      tags:
      - channels
      x-requires-administrator: true
  /typing:
    post:
      description: |
        Notify other users whether the current user is
        [typing a message][help-typing].

        Clients implementing Zulip's typing notifications
        protocol should work as follows:

        - Send a request to this endpoint with `"op": "start"` when a user
          starts composing a message.
        - While the user continues to actively type or otherwise interact with
          the compose UI (e.g. interacting with the compose box emoji picker),
          send regular `"op": "start"` requests to this endpoint, using
          `server_typing_started_wait_period_milliseconds` in the
          [`POST /register`][api-register] response as the time interval
          between each request.
        - Send a request to this endpoint with `"op": "stop"` when a user
          has stopped using the compose UI for the time period indicated by
          `server_typing_stopped_wait_period_milliseconds` in the
          [`POST /register`][api-register] response or when a user
          cancels the compose action (if it had previously sent a "start"
          notification for that compose action).
        - Start displaying a visual typing indicator for a given conversation
          when a [`typing op:start`][start-typing] event is received
          from the server.
        - Continue displaying a visual typing indicator for the conversation
          until a [`typing op:stop`][stop-typing] event is received
          from the server or the time period indicated by
          `server_typing_started_expiry_period_milliseconds` in the
          [`POST /register`][api-register] response has passed without
          a new `typing "op": "start"` event for the conversation.

        This protocol is designed to allow the server-side typing notifications
        implementation to be stateless while being resilient as network failures
        will not result in a user being incorrectly displayed as perpetually
        typing.

        See the subsystems documentation on [typing indicators][typing-protocol-docs]
        for additional design details on Zulip's typing notifications protocol.

        **Changes**: Clients shouldn't care about the APIs prior to Zulip 8.0 (feature level 215)
        for channel typing notifications, as no client actually implemented
        the previous API for those.

        Support for displaying channel typing notifications was new
        in Zulip 4.0 (feature level 58). Clients should indicate they support
        processing channel typing notifications via the `stream_typing_notifications`
        value in the `client_capabilities` parameter of the
        [`POST /register`][client-capabilities] endpoint.

        [help-typing]: /help/typing-notifications
        [api-register]: /api/register-queue
        [start-typing]: /api/get-events#typing-start
        [stop-typing]: /api/get-events#typing-stop
        [client-capabilities]: /api/register-queue#parameter-client_capabilities
        [typing-protocol-docs]: https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html
      operationId: set-typing-status
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              to:
                contentType: application/json
                style: form
              stream_id:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/set_typing_status_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response when the user composes a channel message
                  and `stream_id` is not specified:
                example:
                  code: BAD_REQUEST
                  msg: Missing channel ID
                  result: error
          description: Bad request.
      summary: Set "typing" status
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - topic
  /messages/{message_id}/typing:
    post:
      description: |
        Notify other users whether the current user is editing a message.

        Typing notifications for editing messages follow the same protocol as
        [set-typing-status](/api/set-typing-status), see that endpoint for
        details.

        **Changes**: Before Zulip 10.0 (feature level 361), the endpoint was
        named `/message_edit_typing` with `message_id` a required parameter in
        the request body. Clients are recommended to start using sending these
        typing notifications starting from this feature level.

        New in Zulip 10.0 (feature level 351). Previously, typing notifications were
        not available when editing messages.
      operationId: set-typing-status-for-message-edit
      parameters:
      - description: |
          The target message's ID.
        example: 47
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/set_typing_status_for_message_edit_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Set "typing" status for message editing
      tags:
      - users
  /channels/create:
    post:
      description: |
        Create a new [channel](/help/create-channels) and optionally
        subscribe users to the newly created channel. The initial [channel settings](/api/update-stream)
        will be determined by the optional parameters, like `invite_only`, detailed below.

        **Changes**: New in Zulip 11.0 (feature level 417). Previously, this was only possible via
        the [`POST /api/subscribe`](/api/subscribe) endpoint, which handled both creation and subscription.
      operationId: create-channel
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              announce:
                contentType: application/json
                style: form
              can_add_subscribers_group:
                contentType: application/json
                style: form
              can_administer_channel_group:
                contentType: application/json
                style: form
              can_move_messages_out_of_channel_group:
                contentType: application/json
                style: form
              can_move_messages_within_channel_group:
                contentType: application/json
                style: form
              can_remove_subscribers_group:
                contentType: application/json
                style: form
              can_resolve_topics_group:
                contentType: application/json
                style: form
              can_send_message_group:
                contentType: application/json
                style: form
              can_subscribe_group:
                contentType: application/json
                style: form
              subscribers:
                contentType: application/json
                style: form
              invite_only:
                contentType: application/json
                style: form
              is_web_public:
                contentType: application/json
                style: form
              is_default_stream:
                contentType: application/json
                style: form
              history_public_to_subscribers:
                contentType: application/json
                style: form
              folder_id:
                contentType: application/json
                style: form
              topics_policy:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_channel_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_channel_200_response"
          description: Success.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_channel_409_response"
          description: Bad request.
      summary: Create a channel
      tags:
      - channels
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - name
            - subscribers
  /user_groups/create:
    post:
      description: |
        Create a new [user group](/help/user-groups).
      operationId: create-user-group
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              members:
                contentType: application/json
                style: form
              subgroups:
                contentType: application/json
                style: form
              can_add_members_group:
                contentType: application/json
                style: form
              can_join_group:
                contentType: application/json
                style: form
              can_leave_group:
                contentType: application/json
                style: form
              can_manage_group:
                contentType: application/json
                style: form
              can_mention_group:
                contentType: application/json
                style: form
              can_remove_members_group:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/create_user_group_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_user_group_200_response"
          description: |
            A success response containing the unique ID of the user group.
            This field provides a straightforward way to reference the
            newly created user group.

            **Changes**: New in Zulip 10.0 (feature level 317).
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON error response for when the one of the users does not exist:
                example:
                  result: error
                  code: BAD_REQUEST
                  msg: "Invalid user ID: 500"
          description: Bad request.
      summary: Create a user group
      tags:
      - users
  /user_groups/{user_group_id}/members:
    get:
      description: |
        Get the members of a [user group](/help/user-groups).

        **Changes**: New in Zulip 6.0 (feature level 127).
      operationId: get-user-group-members
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether to consider only the direct members of user group and not members
          of its subgroups. Default is `false`.
        example: false
        explode: true
        in: query
        name: direct_member_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_group_members_200_response"
          description: Success
      summary: Get user group members
      tags:
      - users
    post:
      description: |
        Update the members of a [user group](/help/user-groups). The
        user IDs must correspond to non-deactivated users.

        **Changes**: Prior to Zulip 11.0 (feature level 391), members
        could not be added or removed from a deactivated group.

        **Changes**: Prior to Zulip 10.0 (feature level 303), group memberships of
        deactivated users were visible to the API and could be edited via this endpoint.
      operationId: update-user-group-members
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              delete:
                contentType: application/json
                style: form
              add:
                contentType: application/json
                style: form
              delete_subgroups:
                contentType: application/json
                style: form
              add_subgroups:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_user_group_members_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Update user group members
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - delete
  /user_groups/{user_group_id}:
    patch:
      description: |
        Update the name, description or any of the permission settings
        of a [user group](/help/user-groups).

        This endpoint is also used to reactivate a user group.

        Note that while permissions settings of deactivated groups can
        be edited by this API endpoint, and those permissions settings
        do affect the ability to modify the deactivated group and its
        membership, the deactivated group itself cannot be mentioned
        or used in the value of any permission without first being reactivated.

        **Changes**: Starting with Zulip 11.0 (feature level 386), this
        endpoint can be used to reactivate a user group.

        Prior to Zulip 10.0 (feature level 340), only the name field
        of deactivated groups could be modified.
      operationId: update-user-group
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              can_add_members_group:
                contentType: application/json
                style: form
              can_join_group:
                contentType: application/json
                style: form
              can_leave_group:
                contentType: application/json
                style: form
              can_manage_group:
                contentType: application/json
                style: form
              can_mention_group:
                contentType: application/json
                style: form
              can_remove_members_group:
                contentType: application/json
                style: form
              deactivated:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_user_group_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response when the user group ID is invalid:
                example:
                  code: BAD_REQUEST
                  msg: Invalid user group
                  result: error
          description: Bad request.
      summary: Update a user group
      tags:
      - users
  /user_groups:
    get:
      description: |
        Fetches all of the user groups in the organization.

        !!! warn ""

            **Note**: This endpoint is only available to [members and
            administrators](/help/user-roles); bots and guests
            cannot use this endpoint.
      operationId: get-user-groups
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              allow_deactivated:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/get_user_groups_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_groups_200_response"
          description: Success.
      summary: Get user groups
      tags:
      - users
  /user_groups/{user_group_id}/subgroups:
    get:
      description: |
        Get the subgroups of a [user group](/help/user-groups).

        **Changes**: New in Zulip 6.0 (feature level 127).
      operationId: get-user-group-subgroups
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether to consider only direct subgroups of the user group
          or subgroups of subgroups also.
        example: true
        explode: true
        in: query
        name: direct_subgroup_only
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_user_group_subgroups_200_response"
          description: Success
      summary: Get subgroups of a user group
      tags:
      - users
    post:
      description: |
        Update the subgroups of a [user group](/help/user-groups).

        **Changes**: Prior to Zulip 11.0 (feature level 391), subgroups
        could not be added or removed from a deactivated group.

        **Changes**: New in Zulip 6.0 (feature level 127).
      operationId: update-user-group-subgroups
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              delete:
                contentType: application/json
                style: form
              add:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/update_user_group_subgroups_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
      summary: Update subgroups of a user group
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - delete
  /user_groups/{user_group_id}/members/{user_id}:
    get:
      description: |
        Check whether a user is member of user group.

        **Changes**: Prior to Zulip 10.0 (feature level 303),
        this would return true when passed a deactivated user
        who was a member of the user group before being deactivated.

        New in Zulip 6.0 (feature level 127).
      operationId: get-is-user-group-member
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether to consider only the direct members of user group and not members
          of its subgroups. Default is `false`.
        example: false
        explode: true
        in: query
        name: direct_member_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_is_user_group_member_200_response"
          description: Success
      summary: Get user group membership status
      tags:
      - users
  /user_groups/{user_group_id}/deactivate:
    post:
      description: |
        Deactivate a user group. Deactivated user groups cannot be
        used for mentions, permissions, or any other purpose, but can
        be reactivated or renamed.

        Deactivating user groups is preferable to deleting them from
        the database, since the deactivation model allows audit logs
        of changes to sensitive group-valued permissions to be
        maintained.

        **Changes**: New in Zulip 10.0 (feature level 290).
      operationId: deactivate-user-group
      parameters:
      - description: |
          The ID of the target user group.
        example: 38
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deactivate_user_group_400_response"
          description: Bad request.
      summary: Deactivate a user group
      tags:
      - users
  /channel_folders/create:
    post:
      description: |
        Create a new channel folder, that will be used to organize
        channels in left sidebar.

        Only organization administrators can create a new channel
        folder.

        **Changes**: New in Zulip 11.0 (feature level 389).
      operationId: create-channel-folder
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/create_channel_folder_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_channel_folder_200_response"
          description: |
            A success response containing the unique ID of the channel folder.
            This field provides a straightforward way to reference the
            newly created channel folder.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  Error when the user does not have permission
                  to create a channel folder:
                example:
                  result: error
                  msg: Must be an organization administrator
                  code: UNAUTHORIZED_PRINCIPAL
          description: Bad request.
      summary: Create a channel folder
      tags:
      - channels
  /channel_folders:
    get:
      description: |
        Fetches all of the channel folders in the organization.
        The folders are sorted by the `order` field.

        **Changes**: Before Zulip 11.0 (feature level 414),
        these were sorted by ID. (The `order` field didn't exist).

        New in Zulip 11.0 (feature level 389).
      operationId: get-channel-folders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              include_archived:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/get_channel_folders_request"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_channel_folders_200_response"
          description: Success.
      summary: Get channel folders
      tags:
      - channels
    patch:
      description: |
        Given an array of channel folder IDs, this method will set the `order`
        property of all of the channel folders in the organization according to
        the order of the channel folder IDs specified in the request.

        **Changes**: New in Zulip 11.0 (feature level 414).
      operationId: patch-channel-folders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              order:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/patch_channel_folders_request"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response when the order mapping is invalid:
                example:
                  code: BAD_REQUEST
                  msg: Invalid order mapping
                  result: error
          description: Bad request.
      summary: Reorder channel folders
      tags:
      - channels
  /channel_folders/{channel_folder_id}:
    patch:
      description: |
        Update the name or description of a channel folder.

        This endpoint is also used to archive and unarchive
        a channel folder.

        Only organization administrators can update a
        channel folder.

        **Changes**: New in Zulip 11.0 (feature level 389).
      operationId: update-channel-folder
      parameters:
      - description: |
          The ID of the target channel folder.
        example: 1
        explode: false
        in: path
        name: channel_folder_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/update_channel_folder_request"
        required: false
      responses:
        "200":
          $ref: "#/components/responses/SimpleSuccess"
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/CodedError"
                description: |
                  An example JSON response when the channel folder ID is invalid:
                example:
                  code: BAD_REQUEST
                  msg: Invalid channel folder ID
                  result: error
          description: Bad request.
      summary: Update a channel folder
      tags:
      - channels
  /real-time:
    post:
      description: |
        (Ignored)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding:
              event_types:
                contentType: application/json
                style: form
              narrow:
                contentType: application/json
                style: form
              all_public_streams:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/_real_time_post_request"
        required: false
      responses:
        "200":
          description: Success
      security:
      - basicAuth: []
      tags:
      - real_time_events
  /rest-error-handling:
    post:
      description: |
        Common error to many endpoints
      operationId: rest-error-handling
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rest_error_handling_400_response"
          description: |
            Bad request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rest_error_handling_401_response"
          description: |
            Unauthorized.
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitedError"
          description: |
            Rate limit exceeded.
      summary: Error handling
      tags:
      - real_time_events
  /zulip-outgoing-webhook:
    post:
      description: |
        Outgoing webhooks allow you to build or set up Zulip integrations which are
        notified when certain types of messages are sent in Zulip.
      operationId: zulip-outgoing-webhooks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/zulip_outgoing_webhooks_200_response"
          description: |
            Success
      summary: Outgoing webhooks
      tags:
      - webhooks
  /calls/bigbluebutton/create:
    get:
      description: |
        Create a video call URL for a BigBlueButton video call.
        Requires [BigBlueButton 2.4+](/integrations/doc/big-blue-button)
        to be configured on the Zulip server.

        The acting user will be given the moderator role on the call.

        **Changes**: Prior to Zulip 10.0 (feature level 337), every
        user was given the moderator role on BigBlueButton calls, via
        encoding a moderator password in the generated URLs.
      operationId: create-big-blue-button-video-call
      parameters:
      - description: |
          Meeting name for the BigBlueButton video call.
        example: test_channel meeting
        explode: true
        in: query
        name: meeting_name
        required: true
        schema:
          type: string
        style: form
      - description: |
          Configures whether the call is voice-only; if true,
          disables cameras for all users. Only the call
          creator/moderator can edit this configuration.

          **Changes**: New in Zulip 10.0 (feature level 337).
        example: true
        explode: true
        in: query
        name: voice_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_big_blue_button_video_call_200_response"
          description: Success.
      summary: Create BigBlueButton video call
      tags:
      - channels
components:
  parameters:
    UserGroupId:
      description: |
        The ID of the target user group.
      example: 38
      explode: false
      in: path
      name: user_group_id
      required: true
      schema:
        type: integer
      style: simple
    QueueId:
      description: |
        The ID of an event queue that was previously registered via
        `POST /api/v1/register` (see [Register a queue](/api/register-queue)).
      example: fb67bf8a-c031-47cc-84cf-ed80accacda8
      explode: true
      in: query
      name: queue_id
      required: true
      schema:
        type: string
      style: form
    ChannelIdInPath:
      description: |
        The ID of the channel to access.
      example: 1
      explode: false
      in: path
      name: stream_id
      required: true
      schema:
        type: integer
      style: simple
    ClientGravatar:
      description: |
        Whether the client supports computing gravatars URLs. If
        enabled, `avatar_url` will be included in the response only
        if there is a Zulip avatar, and will be `null` for users who
        are using gravatar as their avatar. This option
        significantly reduces the compressed size of user data,
        since gravatar URLs are long, random strings and thus do not
        compress well. The `client_gravatar` field is set to `true` if
        clients can compute their own gravatars.

        **Changes**: The default value of this parameter was `false`
        prior to Zulip 5.0 (feature level 92).
      example: false
      explode: true
      in: query
      name: client_gravatar
      required: false
      schema:
        default: true
        type: boolean
      style: form
    MessageId:
      description: |
        The target message's ID.
      example: 43
      explode: false
      in: path
      name: message_id
      required: true
      schema:
        type: integer
      style: simple
    UserId:
      description: |
        The target user's ID.
      example: 12
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: integer
      style: simple
    MutedUserId:
      description: |
        The ID of the user to mute/unmute.

        **Changes**: Before Zulip 8.0 (feature level 188), bot users could not
        be muted/unmuted, and specifying a bot user's ID returned an error response.
      example: 10
      explode: false
      in: path
      name: muted_user_id
      required: true
      schema:
        type: integer
      style: simple
    IncludeSubscribers:
      description: |
        Whether each returned channel object should include a `subscribers`
        field containing a list of the user IDs of its subscribers.

        Client apps supporting organizations with many thousands of users
        should not pass `true`, because the full subscriber matrix may be
        several megabytes of data. The `partial` value, combined with the
        `subscriber_count` and fetching subscribers for individual channels as
        needed, is recommended to support client app features where
        channel subscriber data is useful.

        If a client passes `partial` for this parameter, the server may,
        for some channels, return a subset of the channel's subscribers
        in the `partial_subscribers` field instead of the `subscribers` field,
        which always contains the complete set of subscribers.

        The server guarantees that it will always return a `subscribers`
        field for channels with fewer than 250 total subscribers. When
        returning a `partial_subscribers` field, the server guarantees
        that all bot users and users active within the last 14 days will
        be included. For other cases, the server may use its discretion
        to determine which channels and users to include, balancing between
        payload size and usefulness of the data provided to the client.

        **Changes**: The `partial` value is new in Zulip 11.0 (feature level 412).

        New in Zulip 2.1.0.
      example: "true"
      explode: true
      in: query
      name: include_subscribers
      required: false
      schema:
        default: "false"
        enum:
        - "true"
        - "false"
        - partial
        type: string
      style: form
    IncludeCustomProfileFields:
      description: |
        Whether the client wants [custom profile field](/help/custom-profile-fields)
        data to be included in the response.

        **Changes**: New in Zulip 2.1.0. Previous versions do not offer these
        data via the API.
      example: true
      explode: true
      in: query
      name: include_custom_profile_fields
      required: false
      schema:
        default: false
        type: boolean
      style: form
    DirectMemberOnly:
      description: |
        Whether to consider only the direct members of user group and not members
        of its subgroups. Default is `false`.
      example: false
      explode: true
      in: query
      name: direct_member_only
      required: false
      schema:
        type: boolean
      style: form
    ChannelFolderId:
      description: |
        The ID of the target channel folder.
      example: 1
      explode: false
      in: path
      name: channel_folder_id
      required: true
      schema:
        type: integer
      style: simple
  requestBodies:
    UpdateUser:
      content:
        application/x-www-form-urlencoded:
          encoding:
            role:
              contentType: application/json
              style: form
            profile_data:
              contentType: application/json
              style: form
          schema:
            $ref: "#/components/schemas/update_user_by_email_request"
      required: false
  responses:
    SimpleSuccess:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JsonSuccess"
      description: Success.
    SuccessIgnoredParameters:
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/schemas/IgnoredParametersSuccess"
      description: Success.
  schemas:
    IgnoredParametersUnsupported:
      description: |
        An array of any parameters sent in the request that are not
        supported by the endpoint.

        See [error handling](/api/rest-error-handling#ignored-parameters) documentation
        for details on this and its change history.
      items:
        type: string
      type: array
    EventIdSchema:
      description: |
        The ID of the event. Events appear in increasing order but may not be consecutive.
      type: integer
    EventTypeSchema:
      description: |
        The event's type, relevant both for client-side dispatch and server-side
        filtering by event type in [POST /register](/api/register-queue).
      type: string
    Anchor:
      type: string
    Attachment:
      additionalProperties: false
      description: |
        Dictionary containing details of a file uploaded by a user.
      example:
        size: 6
        create_time: 1
        path_id: path_id
        name: name
        messages:
        - date_sent: 5
          id: 5
        - date_sent: 5
          id: 5
        id: 0
      properties:
        id:
          description: |
            The unique ID for the attachment.
          type: integer
        name:
          description: |
            Name of the uploaded file.
          type: string
        path_id:
          description: |
            A representation of the path of the file within the
            repository of user-uploaded files. If the `path_id` of a
            file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be:
            `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.
          type: string
        size:
          description: |
            Size of the file in bytes.
          type: integer
        create_time:
          description: |
            Time when the attachment was uploaded as a UNIX timestamp
            multiplied by 1000 (matching the format of getTime() in JavaScript).

            **Changes**: Changed in Zulip 3.0 (feature level 22). This field was
            previously a floating point number.
          type: integer
        messages:
          description: |
            Contains basic details on any Zulip messages that have been
            sent referencing this [uploaded file](/api/upload-file).
            This includes messages sent by any user in the Zulip
            organization who sent a message containing a link to the
            uploaded file.
          items:
            $ref: "#/components/schemas/Attachment_messages_inner"
          type: array
      type: object
    BasicChannel:
      allOf:
      - $ref: "#/components/schemas/BasicChannelBase"
      - additionalProperties: false
        properties:
          creator_id:
            nullable: true
          message_retention_days:
            nullable: true
          first_message_id:
            nullable: true
          folder_id:
            nullable: true
          stream_weekly_traffic:
            description: |
              The average number of messages sent to the channel per week, as
              estimated based on recent weeks, rounded to the nearest integer.

              If `null`, no information is provided on the average traffic.
              This can be because the channel was recently created and there
              is insufficient data to make an estimate, or because the server
              wishes to omit this information for this client, this realm, or
              this endpoint or type of event.

              **Changes**: New in Zulip 8.0 (feature level 199). Previously, this
              statistic was available only in subscription objects.
            nullable: true
            type: integer
        required:
        - can_remove_subscribers_group
        - can_subscribe_group
        - creator_id
        - date_created
        - description
        - first_message_id
        - folder_id
        - history_public_to_subscribers
        - invite_only
        - is_announcement_only
        - is_archived
        - is_recently_active
        - is_web_public
        - message_retention_days
        - name
        - rendered_description
        - stream_id
        - stream_post_policy
        - stream_weekly_traffic
        - subscriber_count
        type: object
      example:
        is_web_public: ""
        stream_weekly_traffic: 8
        description: ""
        can_remove_subscribers_group: ""
        first_message_id: ""
        can_delete_any_message_group: ""
        rendered_description: ""
        stream_id: ""
        can_resolve_topics_group: ""
        is_recently_active: ""
        stream_post_policy: ""
        topics_policy: ""
        date_created: ""
        can_move_messages_within_channel_group: ""
        history_public_to_subscribers: ""
        can_move_messages_out_of_channel_group: ""
        can_delete_own_message_group: ""
        can_subscribe_group: ""
        can_add_subscribers_group: ""
        is_archived: ""
        subscriber_count: ""
        name: ""
        creator_id: ""
        is_announcement_only: ""
        message_retention_days: ""
        folder_id: ""
        can_administer_channel_group: ""
        can_send_message_group: ""
        invite_only: ""
    BasicChannelBase:
      description: |
        Object containing basic details about the channel.
      properties:
        stream_id:
          description: |
            The unique ID of the channel.
          type: integer
        name:
          description: |
            The name of the channel.
          type: string
        is_archived:
          description: |
            A boolean indicating whether the channel is [archived](/help/archive-a-channel).

            **Changes**: New in Zulip 10.0 (feature level 315).
            Previously, this endpoint never returned archived channels.
          type: boolean
        description:
          description: |
            The short description of the channel in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format,
            intended to be used to prepopulate UI for editing a channel's
            description.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the channel was created, in UTC seconds.

            **Changes**: New in Zulip 4.0 (feature level 30).
          type: integer
        creator_id:
          description: |
            The ID of the user who created this channel.

            A `null` value means the channel has no recorded creator, which is often
            because the channel is very old, or because it was created via a data
            import tool or [management command][management-commands].

            **Changes**: New in Zulip 9.0 (feature level 254).

            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        invite_only:
          description: |
            Specifies whether the channel is private or not.
            Only people who have been invited can access a private channel.
          type: boolean
        rendered_description:
          description: |
            The short description of the channel rendered as HTML, intended to
            be used when displaying the channel description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly. And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.
          type: string
        is_web_public:
          description: |
            Whether the channel has been configured to allow unauthenticated
            access to its message history from the web.

            **Changes**: New in Zulip 2.1.0.
          type: boolean
        stream_post_policy:
          deprecated: true
          description: |
            A deprecated representation of a superset of the users who
            have permission to post messages to the channel available
            for backwards-compatibility. Clients should use
            `can_send_message_group` instead.

            It is an enum with the following possible values, corresponding
            to roles/system groups:

            - 1 = Any user can post.
            - 2 = Only administrators can post.
            - 3 = Only [full members][calc-full-member] can post.
            - 4 = Only moderators can post.

            **Changes**: Deprecated in Zulip 10.0 (feature level 333) and
            replaced by `can_send_message_group`, which supports finer
            resolution of configurations, resulting in this property being
            inaccurate following that transition.

            New in Zulip 3.0 (feature level 1), replacing the previous
            `is_announcement_only` boolean.

            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
          type: integer
        message_retention_days:
          description: |
            Number of days that messages sent to this channel will be stored
            before being automatically deleted by the [message retention
            policy](/help/message-retention-policy). There are two special values:

            - `null`, the default, means the channel will inherit the organization
              level setting.
            - `-1` encodes retaining messages in this channel forever.

            **Changes**: New in Zulip 3.0 (feature level 17).
          nullable: true
          type: integer
        history_public_to_subscribers:
          description: |
            Whether the history of the channel is public to its subscribers.

            Currently always true for public channels (i.e. `"invite_only": false` implies
            `"history_public_to_subscribers": true`), but clients should not make that
            assumption, as we may change that behavior in the future.
          type: boolean
        topics_policy:
          $ref: "#/components/schemas/TopicsPolicy"
        first_message_id:
          description: |
            The ID of the first message in the channel.

            Intended to help clients determine whether they need to display
            UI like the "show all topics" widget that would suggest the channel
            has older history that can be accessed.

            Is `null` for channels with no message history.

            **Changes**: New in Zulip 2.1.0.
          nullable: true
          type: integer
        folder_id:
          description: |
            The ID of the folder to which the channel belongs.

            Is `null` if channel does not belong to any folder.

            **Changes**: New in Zulip 11.0 (feature level 389).
          nullable: true
          type: integer
        is_recently_active:
          description: |
            Whether the channel has recent message activity. Clients should use this to implement
            [hide inactive channels](/help/manage-inactive-channels) if
            `demote_inactive_streams` is enabled.

            **Changes**: New in Zulip 10.0 (feature level 323). Previously, clients implemented the
            demote_inactive_streams from local message history, resulting in a choppy loading
            experience.
          type: boolean
        is_announcement_only:
          deprecated: true
          description: |
            Whether the given channel is announcement only or not.

            **Changes**: Deprecated in Zulip 3.0 (feature level 1). Clients
            should use `stream_post_policy` instead.
          type: boolean
        can_add_subscribers_group:
          $ref: "#/components/schemas/ChannelCanAddSubscribersGroup"
        can_remove_subscribers_group:
          $ref: "#/components/schemas/CanRemoveSubscribersGroup"
        can_administer_channel_group:
          $ref: "#/components/schemas/CanAdministerChannelGroup"
        can_delete_any_message_group:
          $ref: "#/components/schemas/CanDeleteAnyMessageGroup"
        can_delete_own_message_group:
          $ref: "#/components/schemas/CanDeleteOwnMessageGroup"
        can_move_messages_out_of_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesOutOfChannelGroup"
        can_move_messages_within_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesWithinChannelGroup"
        can_send_message_group:
          $ref: "#/components/schemas/CanSendMessageGroup"
        can_subscribe_group:
          $ref: "#/components/schemas/CanSubscribeGroup"
        can_resolve_topics_group:
          $ref: "#/components/schemas/CanResolveTopicsGroup"
        subscriber_count:
          description: |
            The total number of non-deactivated users (including bots) who
            are subscribed to the channel. Clients are responsible for updating
            this value using `peer_add` and `peer_remove` events.

            The server's internals cannot guarantee this value is correctly
            synced with `peer_add` and `peer_remove` events for the channel. As
            a result, if a (rare) race occurs between a change in the channel's
            subscribers and fetching this value, it is possible for a client
            that is correctly following the events protocol to end up with a
            permanently off-by-one error in the channel's subscriber count.

            Clients are recommended to fetch full subscriber data for a channel
            in contexts where it is important to avoid this risk. The official
            web application, for example, uses this field primarily while
            waiting to fetch a given channel's full subscriber list from the
            server.

            **Changes**: New in Zulip 11.0 (feature level 394).
          type: number
      type: object
    BasicBot:
      allOf:
      - $ref: "#/components/schemas/BasicBotBase"
      - additionalProperties: false
        properties:
          default_sending_stream:
            nullable: true
          default_events_register_stream:
            nullable: true
          owner_id:
            nullable: true
          is_active:
            description: |
              A boolean describing whether the user account has been deactivated.

              **Changes**: New in Zulip 8.0 (feature level 222). Previously
              we sent `realm_user` event with `op` field set to `remove`
              when deactivating a bot and `realm_user` event with `op`
              field set to `add` when reactivating a bot.
            type: boolean
        type: object
    BasicBotBase:
      properties:
        user_id:
          description: |
            The user ID of the bot.
          type: integer
        full_name:
          description: |
            The full name of the bot.
          type: string
        api_key:
          description: |
            The API key of the bot which it uses to make API requests.
          type: string
        default_sending_stream:
          description: |
            The default sending channel of the bot. If `null`, the bot doesn't
            have a default sending channel.
          nullable: true
          type: string
        default_events_register_stream:
          description: |
            The default channel for which the bot receives events/register data.
            If `null`, the bot doesn't have such a default channel.
          nullable: true
          type: string
        default_all_public_streams:
          description: |
            Whether the bot can send messages to all channels by default.
          type: boolean
        avatar_url:
          description: |
            The URL of the bot's avatar.
          type: string
        owner_id:
          description: |
            The user ID of the bot's owner.

            If `null`, the bot has no owner.
          nullable: true
          type: integer
        services:
          description: |
            An array containing extra configuration fields only relevant for
            outgoing webhook bots and embedded bots. This is always a single-element
            array.

            We consider this part of the Zulip API to be unstable; it is used only
            for UI elements for administering bots and is likely to change.
          items:
            $ref: "#/components/schemas/BasicBotBase_services_inner"
          type: array
      type: object
    Bot:
      allOf:
      - $ref: "#/components/schemas/BasicBotBase"
      - additionalProperties: false
        description: |
          Object containing details of a bot.
        properties:
          default_sending_stream:
            nullable: true
          default_events_register_stream:
            nullable: true
          owner_id:
            nullable: true
          email:
            description: |
              The email of the bot.
            type: string
          bot_type:
            description: |
              An integer describing the type of bot:

              - `1` for a `Generic` bot.
              - `2` for an `Incoming webhook` bot.
              - `3` for an `Outgoing webhook` bot.
              - `4` for an `Embedded` bot.
            nullable: true
            type: integer
          is_active:
            description: |
              A boolean describing whether the user account has been deactivated.
            type: boolean
        type: object
      example:
        default_all_public_streams: ""
        full_name: ""
        is_active: true
        avatar_url: ""
        user_id: ""
        api_key: ""
        owner_id: ""
        bot_type: 3
        default_events_register_stream: ""
        services: ""
        default_sending_stream: ""
        email: email
    BotConfiguration:
      additionalProperties:
        description: |
          `{config_key}`: Description/value of the configuration data key.
        type: string
      description: |
        A dictionary of string key/value pairs, which describe the configuration
        for the bot. These are usually details like API keys, and are unique to
        the integration/bot. Can be an empty dictionary.
      type: object
    WebhookConfigOption:
      description: |
        An array of configuration options that can be set when creating
        a bot user for this incoming webhook integration.

        This is an unstable API. Please discuss in chat.zulip.org before
        using it.

        **Changes**: As of Zulip 11.0 (feature level 403), this
        object is reserved for integration-specific configuration options
        that can be set when creating a bot user. Previously, this object
        also included optional webhook URL parameters, which are now
        specified in the `url_options` object.

        Before Zulip 10.0 (feature level 318), this field was named `config`,
        and was reserved for configuration data key-value pairs.
      items:
        $ref: "#/components/schemas/WebhookConfigOption_inner"
      type: array
    WebhookUrlOption:
      description: |
        An array of optional URL parameter options for the incoming webhook
        integration. In the web app, these are used when
        [generating a URL for an integration](/help/generate-integration-url).

        This is an unstable API expected to be used only by the Zulip web
        app. Please discuss in chat.zulip.org before using it.

        **Changes**: New in Zulip 11.0 (feature level 403). Previously,
        these optional URL parameter options were included in the
        `config_options` object.
      items:
        $ref: "#/components/schemas/WebhookUrlOption_inner"
      type: array
    CustomProfileField:
      additionalProperties: false
      description: |
        Dictionary containing the details of a custom profile field configured
        for this organization.
      example:
        display_in_profile_summary: false
        field_data: field_data
        editable_by_user: true
        hint: hint
        name: name
        id: 0
        type: 6
        required: true
        order: 1
      properties:
        id:
          description: |
            The ID of the custom profile field. This will be referenced in the custom
            profile fields section of user objects.
          type: integer
        type:
          description: |
            An integer indicating the type of the custom profile field, which determines
            how it is configured and displayed to users.

            See the [Custom profile fields](/help/custom-profile-fields#profile-field-types)
            article for details on what each type means.

            - **1**: Short text
            - **2**: Long text
            - **3**: List of options
            - **4**: Date picker
            - **5**: Link
            - **6**: Person picker
            - **7**: External account
            - **8**: Pronouns

            **Changes**: Field type `8` added in Zulip 6.0 (feature level 151).
          type: integer
        order:
          description: |
            Custom profile fields are displayed in both settings UI and
            UI showing users' profiles in increasing `order`.
          type: integer
        name:
          description: |
            The name of the custom profile field.
          type: string
        hint:
          description: |
            The help text to be displayed for the custom profile field in user-facing
            settings UI for configuring custom profile fields.
          type: string
        field_data:
          description: |
            Field types 3 (List of options) and 7 (External account) support storing
            additional configuration for the field type in the `field_data` attribute.

            For field type 3 (List of options), this attribute is a JSON dictionary
            defining the choices and the order they will be displayed in the
            dropdown UI for individual users to select an option.

            The interface for field type 7 is not yet stabilized.
          type: string
        display_in_profile_summary:
          default: false
          description: |
            Whether the custom profile field, display or not on the user card.

            Currently it's value not allowed to be `true` of `Long text` and `Person picker`
            [profile field types](/help/custom-profile-fields#profile-field-types).

            This field is only included when its value is `true`.

            **Changes**: New in Zulip 6.0 (feature level 146).
          type: boolean
        required:
          description: |
            Whether an organization administrator has configured this profile field as
            required.

            Because the required property is mutable, clients cannot assume that a required
            custom profile field has a value. The Zulip web application displays a prominent
            banner to any user who has not set a value for a required field.

            **Changes**: New in Zulip 9.0 (feature level 244).
          type: boolean
        editable_by_user:
          default: true
          description: |
            Whether regular users can edit this profile field on their own account.

            Note that organization administrators can edit custom profile fields for any user
            regardless of this setting.

            **Changes**: New in Zulip 10.0 (feature level 296).
          type: boolean
      required:
      - editable_by_user
      - hint
      - id
      - name
      - order
      - required
      - type
      type: object
    OnboardingStep:
      additionalProperties: false
      description: |
        Dictionary containing details of a single onboarding step.
      example:
        name: name
        type: type
      properties:
        type:
          description: |
            The type of the onboarding step. Valid value is `"one_time_notice"`.

            **Changes**: Removed type `"hotspot"` in Zulip 9.0 (feature level 259).

            New in Zulip 8.0 (feature level 233).
          type: string
        name:
          description: |
            The name of the onboarding step.
          type: string
      type: object
    RealmAuthenticationMethod:
      additionalProperties: false
      description: |
        Dictionary describing the properties of an authentication method for the
        organization - its enabled status and availability for use by the
        organization.
      example:
        available: true
        unavailable_reason: unavailable_reason
        enabled: true
      properties:
        enabled:
          description: |
            Boolean describing whether the authentication method (i.e. its key)
            is enabled in this organization.
          type: boolean
        available:
          description: |
            Boolean describing whether the authentication method is available for use.
            If false, the organization is not eligible to enable the authentication
            method.
          type: boolean
        unavailable_reason:
          description: |
            Reason why the authentication method is unavailable. This field is optional
            and is only present when 'available' is false.
          type: string
      type: object
    RealmEmoji:
      additionalProperties: false
      description: |
        `{emoji_id}`: Object containing details about the emoji with
        the specified ID. It has the following properties:
      example:
        still_url: still_url
        name: name
        id: id
        author_id: 0
        source_url: source_url
        deactivated: true
      properties:
        id:
          description: |
            The ID for this emoji, same as the object's key.
          type: string
        name:
          description: |
            The user-friendly name for this emoji. Users in the organization
            can use this emoji by writing this name between colons (`:name :`).
          type: string
        source_url:
          description: |
            The path relative to the organization's URL where the
            emoji's image can be found.
          type: string
        still_url:
          description: |
            Only non-null when the emoji's image is animated.

            The path relative to the organization's URL where a still
            (not animated) version of the emoji can be found. (This is
            currently always the first frame of the animation).

            This is useful for clients to display the emoji in contexts
            where continuously animating it would be a bad user experience
            (E.g. because it would be distracting).

            **Changes**: New in Zulip 5.0 (added as optional field in
            feature level 97 and then made mandatory, but nullable, in
            feature level 113).
          nullable: true
          type: string
        deactivated:
          description: |
            Whether the emoji has been deactivated or not.
          type: boolean
        author_id:
          description: |
            The user ID of the user who uploaded the custom emoji.
            Will be `null` if the uploader is unknown.

            **Changes**: New in Zulip 3.0 (feature level 7). Previously
            was accessible via an `author` object with an `id` field.
          nullable: true
          type: integer
      type: object
    RealmDomain:
      additionalProperties: false
      description: |
        Object containing details of the newly added domain.
      example:
        allow_subdomains: true
        domain: domain
      properties:
        domain:
          description: |
            The new allowed domain.
          type: string
        allow_subdomains:
          description: |
            Whether subdomains are allowed for this domain.
          type: boolean
      type: object
    RealmPlayground:
      additionalProperties: false
      description: |
        Object containing details about a realm playground.
      example:
        pygments_language: pygments_language
        name: name
        url_template: url_template
        id: 3
      properties:
        id:
          description: |
            The unique ID for the realm playground.
          type: integer
        name:
          description: |
            The user-visible display name of the playground. Clients
            should display this in UI for picking which playground to
            open a code block in, to differentiate between multiple
            configured playground options for a given pygments
            language.

            **Changes**: New in Zulip 4.0 (feature level 49).
          type: string
        pygments_language:
          description: |
            The name of the Pygments language lexer for that
            programming language.
          type: string
        url_template:
          description: |
            The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html)
            compliant URL template for the playground. The template contains
            exactly one variable named `code`, which determines how the
            extracted code should be substituted in the playground URL.

            **Changes**: New in Zulip 8.0 (feature level 196). This replaced the
            `url_prefix` parameter, which was used to construct URLs by just
            concatenating url_prefix and code.
          type: string
      type: object
    RealmExport:
      additionalProperties: false
      description: |
        Object containing details about a
        [data export](/help/export-your-organization).
      example:
        export_type: 2
        failed_timestamp: 5.637376656633329
        acting_user_id: 6
        pending: true
        export_url: export_url
        id: 0
        export_time: 1.4658129805029452
        deleted_timestamp: 5.962133916683182
      properties:
        id:
          description: |
            The ID of the data export.
          type: integer
        acting_user_id:
          description: |
            The ID of the user who created the data export.
          type: integer
        export_time:
          description: |
            The UNIX timestamp of when the data export was started.
          type: number
        deleted_timestamp:
          description: |
            The UNIX timestamp of when the data export was deleted.

            Will be `null` if the data export has not been deleted.
          nullable: true
          type: number
        failed_timestamp:
          description: |
            The UNIX timestamp of when the data export failed.

            Will be `null` if the data export succeeded, or if it's
            still being generated.
          nullable: true
          type: number
        export_url:
          description: |
            The URL to download the generated data export.

            Will be `null` if the data export failed, or if it's
            still being generated.
          nullable: true
          type: string
        pending:
          description: |
            Whether the data export is pending, which indicates it
            is still being generated, or if it succeeded, failed or
            was deleted before being generated.

            Depending on the size of the organization, it can take
            anywhere from seconds to an hour to generate the data
            export.
          type: boolean
        export_type:
          description: |
            Whether the data export is a public or a standard data export.

            - 1 = Public data export.
            - 2 = Standard data export.

            **Changes**: New in Zulip 10.0 (feature level 304). Previously,
            the export type was not included in these objects because only
            public data exports could be created or listed via the API or UI.
          type: integer
      type: object
    UserGroup:
      additionalProperties: false
      description: |
        Object containing the user group's attributes.
      example:
        can_join_group: ""
        is_system_group: true
        date_created: 6
        description: description
        can_mention_group: ""
        deactivated: true
        direct_subgroup_ids:
        - 6
        - 6
        can_leave_group: ""
        can_add_members_group: ""
        members:
        - 2
        - 2
        name: name
        creator_id: 1
        can_remove_members_group: ""
        id: 6
        can_manage_group: ""
      properties:
        name:
          description: |
            The name of the user group.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the user group was created, in UTC seconds.

            A `null` value means the user group has no recorded date, which is often
            because the user group is very old, or because it was created via a data
            import tool or [management command][management-commands].

            **Changes**: New in Zulip 10.0 (feature level 292).
            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        creator_id:
          description: |
            The ID of the user who created this user group.

            A `null` value means the user group has no recorded creator, which is often
            because the user group is very old, or because it was created via a data
            import tool or [management command][management-commands].

            **Changes**: New in Zulip 10.0 (feature level 292).
            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        description:
          description: |
            The description of the user group.
          type: string
        members:
          description: |
            Array containing the ID of the users who are
            members of this user group.

            **Changes**: Prior to Zulip 10.0 (feature level 303), this
            list also included deactivated users who were members of
            the user group before being deactivated.
          items:
            type: integer
          type: array
        direct_subgroup_ids:
          description: |
            Array containing the ID of the direct_subgroups of
            this user group.

            **Changes**: New in Zulip 6.0 (feature level 131).
            Introduced in feature level 127 as `subgroups`, but
            clients can ignore older events as this feature level
            predates subgroups being fully implemented.
          items:
            type: integer
          type: array
        id:
          description: |
            The ID of the user group.
          type: integer
        is_system_group:
          description: |
            Whether the user group is a system group which cannot be
            directly modified by users.

            **Changes**: New in Zulip 5.0 (feature level 93).
          type: boolean
        can_add_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to add members to this user group.

            **Changes**: New in Zulip 10.0 (feature level 305). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_join_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to join this user group.

            **Changes**: New in Zulip 10.0 (feature level 301).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_leave_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to leave this user group.

            **Changes**: New in Zulip 10.0 (feature level 308).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_manage_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [manage this user group][manage-user-groups].

            **Changes**: New in Zulip 10.0 (feature level 283).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [manage-user-groups]: /help/manage-user-groups
        can_mention_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [mention this user group][mentions].

            **Changes**: Before Zulip 9.0 (feature level 258), this setting was
            always the integer form of a [group-setting value][setting-values].

            Before Zulip 8.0 (feature level 198), this setting was named
            `can_mention_group_id`.

            New in Zulip 8.0 (feature level 191). Previously, groups could be
            mentioned only if they were not [system groups][system-groups].

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [mentions]: /help/mention-a-user-or-group
        can_remove_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to remove members from this user group.

            **Changes**: New in Zulip 10.0 (feature level 324). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        deactivated:
          description: |
            Whether the user group is deactivated. Deactivated groups
            cannot be used as a subgroup of another group or used for
            any other purpose.

            **Changes**: New in Zulip 10.0 (feature level 290).
          type: boolean
      type: object
    GroupSettingValue:
      oneOf:
      - description: |
          The ID of the [user group](/help/user-groups) with this permission.
        type: integer
      - $ref: "#/components/schemas/GroupSettingValue_oneOf"
    GroupSettingValueUpdate:
      additionalProperties: false
      properties:
        new:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            The new [group-setting value](/api/group-setting-values) for who would
            have this permission.
        old:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            The expected current [group-setting value](/api/group-setting-values)
            for who has this permission.
      required:
      - new
      type: object
    Invite:
      additionalProperties: false
      description: |
        A dictionary containing details about an [invitation](/help/invite-new-users).
      example:
        invited_as: 5
        expiry_date: 5
        invited: 1
        invited_by_user_id: 6
        link_url: link_url
        is_multiuse: true
        id: 0
        notify_referrer_on_join: true
        email: email
      properties:
        id:
          description: |
            The ID of the invitation.

            Note that email invitations and reusable invitation links are stored
            in different database tables on the server, so each ID is guaranteed
            to be unique in combination with the boolean value of `is_multiuse`,
            e.g. there can only be one invitation with `id: 1` and `is_multiuse:
            true`.
          type: integer
        invited_by_user_id:
          description: |
            The [user ID](/api/get-user) of the user who created the invitation.

            **Changes**: New in Zulip 3.0 (feature level 22), replacing the `ref`
            field which contained the Zulip display email address of the user who
            created the invitation.
          type: integer
        invited:
          description: |
            The UNIX timestamp for when the invitation was created, in UTC seconds.
          type: integer
        expiry_date:
          description: |
            The UNIX timestamp for when the invitation will expire, in UTC seconds.
            If `null`, the invitation never expires.
          nullable: true
          type: integer
        invited_as:
          description: |
            The [organization-level role](/api/roles-and-permissions) of the user that
            is created when the invitation is accepted.
            Possible values are:

            - 100 = Organization owner
            - 200 = Organization administrator
            - 300 = Organization moderator
            - 400 = Member
            - 600 = Guest
          enum:
          - 100
          - 200
          - 300
          - 400
          - 600
          type: integer
        email:
          description: |
            The email address the invitation was sent to. This will not be present when
            `is_multiuse` is `true` (i.e. the invitation is a reusable invitation link).
          type: string
        notify_referrer_on_join:
          description: |
            A boolean indicating whether the referrer has opted to receive a direct
            message from [notification bot](/help/configure-automated-notices) when a user
            account is created using this invitation.

            **Changes**: New in Zulip 9.0 (feature level 267). Previously,
            referrers always received such direct messages.
          type: boolean
        link_url:
          description: |
            The URL of the reusable invitation link. This will not be present when
            `is_multiuse` is `false` (i.e. the invitation is an email invitation).
          type: string
        is_multiuse:
          description: |
            A boolean specifying whether the [invitation](/help/invite-new-users) is a
            reusable invitation link or an email invitation.
          type: boolean
      type: object
    InviteExpirationParameter:
      description: |
        The number of minutes before the invitation will expire. If `null`, the
        invitation will never expire. If unspecified, the server will use a default
        value (based on the `INVITATION_LINK_VALIDITY_MINUTES` server setting, which
        defaults to 14400, i.e. 10 days) for when the invitation will expire.

        **Changes**: New in Zulip 6.0 (feature level 126). Previously, there was an
        `invite_expires_in_days` parameter, which specified the duration in days instead
        of minutes.
      example: 14400
      nullable: true
      type: integer
    InviteRoleParameter:
      default: 400
      description: |
        The [organization-level role](/api/roles-and-permissions) of the user that is
        created when the invitation is accepted.
        Possible values are:

        - 100 = Organization owner
        - 200 = Organization administrator
        - 300 = Organization moderator
        - 400 = Member
        - 600 = Guest

        Users can only create invitation links for
        [roles with equal or stricter restrictions](/api/roles-and-permissions#permission-levels)
        as their own. For example, a moderator cannot invite someone to be an owner
        or administrator, but they can invite them to be a moderator or member.

        **Changes**: In Zulip 4.0 (feature level 61), added support for inviting
        users as moderators.
      enum:
      - 100
      - 200
      - 300
      - 400
      - 600
      example: 600
      type: integer
    Subscription:
      additionalProperties: false
      example:
        push_notifications: true
        is_web_public: true
        color: color
        stream_weekly_traffic: 2
        description: description
        is_muted: true
        in_home_view: true
        first_message_id: 9
        rendered_description: rendered_description
        stream_id: 0
        is_recently_active: true
        stream_post_policy: 2
        topics_policy: inherit
        pin_to_top: true
        date_created: 6
        subscribers:
        - 5
        - 5
        history_public_to_subscribers: true
        wildcard_mentions_notify: true
        desktop_notifications: true
        is_archived: true
        subscriber_count: 4.145608029883936
        name: name
        creator_id: 1
        email_notifications: true
        partial_subscribers:
        - 5
        - 5
        is_announcement_only: true
        message_retention_days: 7
        folder_id: 3
        audible_notifications: true
        invite_only: true
      properties:
        stream_id:
          description: |
            The unique ID of a channel.
          type: integer
        name:
          description: |
            The name of a channel.
          type: string
        description:
          description: |
            The [description](/help/change-the-channel-description) of the channel in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format,
            intended to be used to prepopulate UI for editing a channel's
            description.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.

            See also `rendered_description`.
          type: string
        rendered_description:
          description: |
            The [description](/help/change-the-channel-description) of the channel rendered as HTML, intended to
            be used when displaying the channel description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly. And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.

            See also `description`.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the channel was created, in UTC seconds.

            **Changes**: New in Zulip 4.0 (feature level 30).
          type: integer
        creator_id:
          description: |
            The ID of the user who created this channel.

            A `null` value means the channel has no recorded creator, which is often
            because the channel is very old, or because it was created via a data
            import tool or [management command][management-commands].

            **Changes**: New in Zulip 9.0 (feature level 254).

            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        invite_only:
          description: |
            Specifies whether the channel is private or not.
            Only people who have been invited can access a private channel.
          type: boolean
        subscribers:
          description: |
            A list of user IDs of users who are also subscribed
            to a given channel. Included only if `include_subscribers` is `true`.
          items:
            type: integer
          type: array
        partial_subscribers:
          description: |
            If [`include_subscribers="partial"`](/api/get-subscriptions#parameter-include_subscribers)
            was requested, the server may, at its discretion, send a
            `partial_subscribers` list rather than a `subscribers` list
            for channels with a large number of subscribers.

            The `partial_subscribers` list contains an arbitrary
            subset of the channel's subscribers that is guaranteed
            to include all bot user subscribers as well as all
            users who have been active in the last 14 days, but
            otherwise can be chosen arbitrarily by the server.

            **Changes**: New in Zulip 11.0 (feature level 412).
          items:
            type: integer
          type: array
        desktop_notifications:
          description: |
            A boolean specifying whether desktop notifications
            are enabled for the given channel.

            A `null` value means the value of this setting
            should be inherited from the user-level default
            setting, `enable_stream_desktop_notifications`, for
            this channel.
          nullable: true
          type: boolean
        email_notifications:
          description: |
            A boolean specifying whether email notifications
            are enabled for the given channel.

            A `null` value means the value of this setting
            should be inherited from the user-level default
            setting, `enable_stream_email_notifications`, for
            this channel.
          nullable: true
          type: boolean
        wildcard_mentions_notify:
          description: |
            A boolean specifying whether wildcard mentions
            trigger notifications as though they were personal
            mentions in this channel.

            A `null` value means the value of this setting
            should be inherited from the user-level default
            setting, wildcard_mentions_notify, for
            this channel.
          nullable: true
          type: boolean
        push_notifications:
          description: |
            A boolean specifying whether push notifications
            are enabled for the given channel.

            A `null` value means the value of this setting
            should be inherited from the user-level default
            setting, `enable_stream_push_notifications`, for
            this channel.
          nullable: true
          type: boolean
        audible_notifications:
          description: |
            A boolean specifying whether audible notifications
            are enabled for the given channel.

            A `null` value means the value of this setting
            should be inherited from the user-level default
            setting, `enable_stream_audible_notifications`, for
            this channel.
          nullable: true
          type: boolean
        pin_to_top:
          description: |
            A boolean specifying whether the given channel has been pinned
            to the top.
          type: boolean
        is_muted:
          description: |
            Whether the user has muted the channel. Muted channels do
            not count towards your total unread count and do not show
            up in the `Combined feed` view (previously known as `All messages`).

            **Changes**: Prior to Zulip 2.1.0, this feature was
            represented by the more confusingly named `in_home_view` (with the
            opposite value, `in_home_view=!is_muted`).
          type: boolean
        in_home_view:
          deprecated: true
          description: |
            Legacy property for if the given channel is muted, with inverted meaning.

            **Changes**: Deprecated in Zulip 2.1.0. Clients should use `is_muted`
            where available.
          type: boolean
        is_announcement_only:
          deprecated: true
          description: |
            Whether only organization administrators can post to the channel.

            **Changes**: Deprecated in Zulip 3.0 (feature level 1). Clients
            should use `stream_post_policy` instead.
          type: boolean
        is_web_public:
          description: |
            Whether the channel has been configured to allow unauthenticated
            access to its message history from the web.
          type: boolean
        color:
          description: |
            The user's personal color for the channel.
          type: string
        stream_post_policy:
          deprecated: true
          description: |
            A deprecated representation of a superset of the users who
            have permission to post messages to the channel available
            for backwards-compatibility. Clients should use
            `can_send_message_group` instead.

            It is an enum with the following possible values, corresponding
            to roles/system groups:

            - 1 = Any user can post.
            - 2 = Only administrators can post.
            - 3 = Only [full members][calc-full-member] can post.
            - 4 = Only moderators can post.

            **Changes**: Deprecated in Zulip 10.0 (feature level 333) and
            replaced by `can_send_message_group`, which supports finer
            resolution of configurations, resulting in this property being
            inaccurate following that transition.

            New in Zulip 3.0 (feature level 1), replacing the previous
            `is_announcement_only` boolean.

            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
          type: integer
        message_retention_days:
          description: |
            Number of days that messages sent to this channel will be stored
            before being automatically deleted by the [message retention
            policy](/help/message-retention-policy). There are two special values:

            - `null`, the default, means the channel will inherit the organization
              level setting.
            - `-1` encodes retaining messages in this channel forever.

            **Changes**: New in Zulip 3.0 (feature level 17).
          nullable: true
          type: integer
        history_public_to_subscribers:
          description: |
            Whether the history of the channel is public to its subscribers.

            Currently always true for public channels (i.e. `"invite_only": false` implies
            `"history_public_to_subscribers": true`), but clients should not make that
            assumption, as we may change that behavior in the future.
          type: boolean
        first_message_id:
          description: |
            The ID of the first message in the channel.

            Intended to help clients determine whether they need to display
            UI like the "show all topics" widget that would suggest the channel
            has older history that can be accessed.

            Is `null` for channels with no message history.
          nullable: true
          type: integer
        folder_id:
          description: |
            The ID of the folder to which the channel belongs.

            Is `null` if channel does not belong to any folder.

            **Changes**: New in Zulip 11.0 (feature level 389).
          nullable: true
          type: integer
        topics_policy:
          $ref: "#/components/schemas/TopicsPolicy"
        is_recently_active:
          description: |
            Whether the channel has recent message activity. Clients should use this to implement
            [hiding inactive channels](/help/manage-inactive-channels).

            **Changes**: New in Zulip 10.0 (feature level 323). Previously, clients implemented the
            demote_inactive_streams from local message history, resulting in a choppy loading
            experience.
          type: boolean
        stream_weekly_traffic:
          description: |
            The average number of messages sent to the channel per week, as
            estimated based on recent weeks, rounded to the nearest integer.

            If `null`, the channel was recently created and there is
            insufficient data to estimate the average traffic.
          nullable: true
          type: integer
        can_add_subscribers_group:
          $ref: "#/components/schemas/ChannelCanAddSubscribersGroup"
        can_remove_subscribers_group:
          $ref: "#/components/schemas/CanRemoveSubscribersGroup"
        can_administer_channel_group:
          $ref: "#/components/schemas/CanAdministerChannelGroup"
        can_delete_any_message_group:
          $ref: "#/components/schemas/CanDeleteAnyMessageGroup"
        can_delete_own_message_group:
          $ref: "#/components/schemas/CanDeleteOwnMessageGroup"
        can_move_messages_out_of_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesOutOfChannelGroup"
        can_move_messages_within_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesWithinChannelGroup"
        can_send_message_group:
          $ref: "#/components/schemas/CanSendMessageGroup"
        can_subscribe_group:
          $ref: "#/components/schemas/CanSubscribeGroup"
        can_resolve_topics_group:
          $ref: "#/components/schemas/CanResolveTopicsGroup"
        is_archived:
          description: |
            A boolean indicating whether the channel is [archived](/help/archive-a-channel).

            **Changes**: New in Zulip 10.0 (feature level 315).
            Previously, subscriptions only included active
            channels. Note that some endpoints will never return archived
            channels unless the client declares explicit support for
            them via the `archived_channels` client capability.
          type: boolean
        subscriber_count:
          description: |
            The total number of non-deactivated users (including bots) who
            are subscribed to the channel. Clients are responsible for updating
            this value using `peer_add` and `peer_remove` events.

            The server's internals cannot guarantee this value is correctly
            synced with `peer_add` and `peer_remove` events for the channel. As
            a result, if a (rare) race occurs between a change in the channel's
            subscribers and fetching this value, it is possible for a client
            that is correctly following the events protocol to end up with a
            permanently off-by-one error in the channel's subscriber count.

            Clients are recommended to fetch full subscriber data for a channel
            in contexts where it is important to avoid this risk. The official
            web application, for example, uses this field primarily while
            waiting to fetch a given channel's full subscriber list from the
            server.

            **Changes**: New in Zulip 11.0 (feature level 394).
          type: number
      type: object
    DefaultChannelGroup:
      additionalProperties: false
      description: |
        Dictionary containing details of a default channel
        group.
      example:
        streams:
        - 8
        - 8
        name: name
        description: description
        id: 4
      properties:
        name:
          description: |
            Name of the default channel group.
          type: string
        description:
          description: |
            Description of the default channel group.
          type: string
        id:
          description: |
            The ID of the default channel group.
          type: integer
        streams:
          description: |
            An array of IDs of all the channels in the default stream group.

            **Changes**: Before Zulip 10.0 (feature level 330), we sent array
            of dictionaries where each dictionary contained details about a
            single stream in the default stream group.
          items:
            type: integer
          type: array
      type: object
    EmailAddressVisibility:
      description: |
        The [policy][permission-level] for [which other users][help-email-visibility]
        in this organization can see the user's real email address.

        - 1 = Everyone
        - 2 = Members only
        - 3 = Administrators only
        - 4 = Nobody
        - 5 = Moderators only

        **Changes**: New in Zulip 7.0 (feature level 163), replacing the
        realm-level setting.

        [permission-level]: /api/roles-and-permissions#permission-levels
        [help-email-visibility]: /help/configure-email-visibility
      type: integer
    EmojiReaction:
      allOf:
      - $ref: "#/components/schemas/EmojiBase"
      - additionalProperties: false
        properties:
          user_id:
            description: |
              The ID of the user who added the reaction.

              **Changes**: New in Zulip 3.0 (feature level 2). The `user`
              object is deprecated and will be removed in the future.

              In Zulip 10.0 (feature level 328), the deprecated `user` object
              was removed which contained the following properties: `id`, `email`,
              `full_name` and `is_mirror_dummy`.
            type: integer
        type: object
      example:
        reaction_type: ""
        user_id: 3
        emoji_name: ""
        emoji_code: ""
    EmojiBase:
      properties:
        emoji_name:
          description: |
            Name of the emoji.
          type: string
        emoji_code:
          description: |
            A unique identifier, defining the specific emoji codepoint requested,
            within the namespace of the `reaction_type`.
          type: string
        reaction_type:
          description: |
            A string indicating the type of emoji. Each emoji `reaction_type`
            has an independent namespace for values of `emoji_code`.

            Must be one of the following values:

            - `unicode_emoji` : In this namespace, `emoji_code` will be a
              dash-separated hex encoding of the sequence of Unicode codepoints
              that define this emoji in the Unicode specification.

            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of
              the uploaded [custom emoji](/help/custom-emoji).

            - `zulip_extra_emoji` : These are special emoji included with Zulip.
              In this namespace, `emoji_code` will be the name of the emoji (e.g.
              "zulip").
          enum:
          - unicode_emoji
          - realm_emoji
          - zulip_extra_emoji
          type: string
      type: object
    EmojiReactionEvent:
      allOf:
      - $ref: "#/components/schemas/EmojiBase"
      - properties:
          user_id:
            description: |
              The ID of the user who added the reaction.

              **Changes**: New in Zulip 3.0 (feature level 2). The `user`
              object is deprecated and will be removed in the future.
            type: integer
          user:
            $ref: "#/components/schemas/EmojiReactionEvent_allOf_user"
    MessagesEvent:
      allOf:
      - $ref: "#/components/schemas/MessagesBase"
      - additionalProperties: false
        properties:
          avatar_url:
            nullable: true
        type: object
    MessagesBase:
      description: |
        Object containing details of the message.
      properties:
        avatar_url:
          description: |
            The URL of the message sender's avatar. Can be `null` only if
            the current user has access to the sender's real email address
            and `client_gravatar` was `true`.

            If `null`, then the sender has not uploaded an avatar in Zulip,
            and the client can compute the gravatar URL by hashing the
            sender's email address, which corresponds in this case to their
            real email address.

            **Changes**: Before Zulip 7.0 (feature level 163), access to a
            user's real email address was a realm-level setting. As of this
            feature level, `email_address_visibility` is a user setting.
          nullable: true
          type: string
        client:
          description: |
            A Zulip "client" string, describing what Zulip client
            sent the message.
          type: string
        content:
          description: |
            The content/body of the message.
            When `apply_markdown` is set, it will be in HTML format.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        content_type:
          description: |
            The HTTP `content_type` for the message content. This
            will be `text/html` or `text/x-markdown`, depending on
            whether `apply_markdown` was set.

            See the help center article on [message formatting](/help/format-your-message-using-markdown) for details on Zulip-flavored Markdown.
          type: string
        display_recipient:
          $ref: "#/components/schemas/MessagesBase_display_recipient"
        edit_history:
          description: |
            An array of objects, with each object documenting the
            changes in a previous edit made to the message,
            ordered chronologically from most recent to least recent
            edit.

            Not present if the message has never been edited or moved,
            or if [viewing message edit history][edit-history-access]
            is not allowed in the organization.

            Every object will contain `user_id` and `timestamp`.

            The other fields are optional, and will be present or not
            depending on whether the channel, topic, and/or message
            content were modified in the edit event. For example, if
            only the topic was edited, only `prev_topic` and `topic`
            will be present in addition to `user_id` and `timestamp`.

            [edit-history-access]: /help/restrict-message-edit-history-access

            **Changes**: In Zulip 10.0 (feature level 284), removed the
            `prev_rendered_content_version` field as it is an internal
            server implementation detail not used by any client.
          items:
            $ref: "#/components/schemas/MessagesBase_edit_history_inner"
          type: array
        id:
          description: |
            The unique message ID. Messages should always be
            displayed sorted by ID.
          type: integer
        is_me_message:
          description: |
            Whether the message is a [/me status message][status-messages]

            [status-messages]: /help/format-your-message-using-markdown#status-messages
          type: boolean
        last_edit_timestamp:
          description: |
            The UNIX timestamp for when the message's content was last edited, in
            UTC seconds.

            Not present if the message's content has never been edited.

            Clients should use this field, rather than parsing the `edit_history`
            array, to display an indicator that the message has been edited.

            **Changes**: Prior to Zulip 10.0 (feature level 365), this was the
            time when the message was last edited or moved.
          type: integer
        last_moved_timestamp:
          description: |
            The UNIX timestamp for when the message was last moved to a different
            channel or topic, in UTC seconds.

            Not present if the message has never been moved, or if the only topic
            moves for the message are [resolving or unresolving](/help/resolve-a-topic)
            the message's topic.

            Clients should use this field, rather than parsing the `edit_history`
            array, to display an indicator that the message has been moved.

            **Changes**: New in Zulip 10.0 (feature level 365). Previously,
            parsing the `edit_history` array was required in order to correctly
            display moved message indicators.
          type: integer
        reactions:
          description: |
            Data on any reactions to the message.
          items:
            $ref: "#/components/schemas/EmojiReaction"
          type: array
        recipient_id:
          description: |
            A unique ID for the set of users receiving the
            message (either a channel or group of users). Useful primarily
            for hashing.

            **Changes**: Before Zulip 10.0 (feature level 327), `recipient_id`
            was the same across all incoming 1:1 direct messages. Now, each
            incoming message uniquely shares a `recipient_id` with outgoing
            messages in the same conversation.
          type: integer
        sender_email:
          description: |
            The Zulip API email address of the message's sender.
          type: string
        sender_full_name:
          description: |
            The full name of the message's sender.
          type: string
        sender_id:
          description: |
            The user ID of the message's sender.
          type: integer
        sender_realm_str:
          description: |
            A string identifier for the realm the sender is in. Unique only within
            the context of a given Zulip server.

            E.g. on `example.zulip.com`, this will be `example`.
          type: string
        stream_id:
          description: |
            Only present for channel messages; the ID of the channel.
          type: integer
        subject:
          description: |
            The `topic` of the message. Currently always `""` for direct messages,
            though this could change if Zulip adds support for topics in direct
            message conversations.

            The field name is a legacy holdover from when topics were
            called "subjects" and will eventually change.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            the empty string value is replaced with the value of `realm_empty_topic_display_name`
            found in the [POST /register](/api/register-queue) response, for channel messages.

            **Changes**: Before Zulip 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        submessages:
          description: |
            Data used for certain experimental Zulip integrations.
          items:
            $ref: "#/components/schemas/MessagesBase_submessages_inner"
          type: array
        timestamp:
          description: |
            The UNIX timestamp for when the message was sent,
            in UTC seconds.
          type: integer
        topic_links:
          description: |
            Data on any links to be included in the `topic`
            line (these are generated by [custom linkification
            filters](/help/add-a-custom-linkifier) that match content in the
            message's topic.)

            **Changes**: This field contained a list of urls before
            Zulip 4.0 (feature level 46).

            New in Zulip 3.0 (feature level 1). Previously, this field was called
            `subject_links`; clients are recommended to rename `subject_links` to `topic_links`
            if present for compatibility with older Zulip servers.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_36_topic_links_inner"
          type: array
        type:
          description: |
            The type of the message: `"stream"` or `"private"`.
          type: string
      type: object
    ModernPresenceFormat:
      additionalProperties: false
      description: |
        `{user_id}`: Presence data (modern format) for the user with
        the specified ID.
      example:
        idle_timestamp: 5
        active_timestamp: 1
      properties:
        active_timestamp:
          description: |
            The UNIX timestamp of the last time a client connected
            to Zulip reported that the user was actually present
            (e.g. via focusing a browser window or interacting
            with a computer running the desktop app).

            Clients should display users with a current
            `active_timestamp` as fully present.
          type: integer
        idle_timestamp:
          description: |
            The UNIX timestamp of the last time the user had a
            client connected to Zulip, including idle clients
            where the user hasn't interacted with the system
            recently.

            The Zulip server has no way of distinguishing whether
            an idle web app user is at their computer, but hasn't
            interacted with the Zulip tab recently, or simply left
            their desktop computer on when they left.

            Thus, clients should display users with a current
            `idle_timestamp` but no current `active_timestamp` as
            potentially present.
          type: integer
      type: object
    LegacyPresenceFormat:
      additionalProperties: false
      description: |
        `{client_name}` or `"aggregated"`: Object containing the details of the user's
        presence.

        **Changes**: Starting with Zulip 7.0 (feature level 178), this will always
        contain two keys, `"website"` and `"aggregated"`, with identical data. The
        server no longer stores which client submitted presence updates.

        Previously, the `{client_name}` keys for these objects were the names of the
        different clients where the user was logged in, for example `website` or
        `ZulipDesktop`.
      example:
        pushable: true
        client: client
        status: idle
        timestamp: 6
      properties:
        client:
          description: |
            The client's platform name.

            **Changes**: Starting with Zulip 7.0 (feature level 178), this will
            always be `"website"` as the server no longer stores which client
            submitted presence data.
          type: string
        status:
          description: |
            The status of the user on this client. Will be either `"idle"`
            or `"active"`.
          enum:
          - idle
          - active
          type: string
        timestamp:
          description: |
            The UNIX timestamp of when this client sent the user's presence
            to the server with the precision of a second.
          type: integer
        pushable:
          description: |
            Whether the client is capable of showing mobile/push notifications
            to the user.

            Not present in objects with the `"aggregated"` key.

            **Changes**: Starting with Zulip 7.0 (feature level 178), always
            `false` when present as the server no longer stores which client
            submitted presence data.
          type: boolean
      type: object
    UserStatus:
      additionalProperties: false
      properties:
        away:
          deprecated: true
          description: |
            If present, the user has marked themself "away".

            **Changes**: Deprecated in Zulip 6.0 (feature level 148);
            starting with that feature level, `away` is a legacy way to
            access the user's `presence_enabled` setting, with
            `away = !presence_enabled`. To be removed in a future release.
          type: boolean
        status_text:
          description: |
            If present, the text content of the user's status message.
          type: string
        emoji_name:
          description: |
            If present, the name for the emoji to associate with the user's status.

            **Changes**: New in Zulip 5.0 (feature level 86).
          type: string
        emoji_code:
          description: |
            If present, a unique identifier, defining the specific emoji codepoint
            requested, within the namespace of the `reaction_type`.

            **Changes**: New in Zulip 5.0 (feature level 86).
          type: string
        reaction_type:
          description: |
            If present, a string indicating the type of emoji. Each emoji
            `reaction_type` has an independent namespace for values of `emoji_code`.

            Must be one of the following values:

            - `unicode_emoji` : In this namespace, `emoji_code` will be a
              dash-separated hex encoding of the sequence of Unicode codepoints
              that define this emoji in the Unicode specification.

            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of
              the uploaded [custom emoji](/help/custom-emoji).

            - `zulip_extra_emoji` : These are special emoji included with Zulip.
              In this namespace, `emoji_code` will be the name of the emoji (e.g.
              "zulip").

            **Changes**: New in Zulip 5.0 (feature level 86).
          enum:
          - unicode_emoji
          - realm_emoji
          - zulip_extra_emoji
          type: string
      type: object
    Draft:
      additionalProperties: false
      description: |
        A dictionary for representing a message draft.
      example:
        topic: topic
        id: 0
        to:
        - 6
        - 6
        type: ""
        content: content
        timestamp: 1595479019
      properties:
        id:
          description: |
            The unique ID of the draft. It will only used whenever the drafts are
            fetched. This field should not be specified when the draft is being
            created or edited.
          type: integer
        type:
          description: |
            The type of the draft. Either unaddressed (empty string), `"stream"`,
            or `"private"` (for one-on-one and group direct messages).
          enum:
          - ""
          - stream
          - private
          type: string
        to:
          description: |
            An array of the tentative target audience IDs. For channel
            messages, this should contain exactly 1 ID, the ID of the
            target channel. For direct messages, this should be an array
            of target user IDs. For unaddressed drafts, this is ignored,
            and clients should send an empty array.
          items:
            type: integer
          type: array
        topic:
          description: |
            For channel message drafts, the tentative topic name. For direct
            or unaddressed messages, this will be ignored and should ideally
            be the empty string. Should not contain null bytes.
          type: string
        content:
          description: |
            The body of the draft. Should not contain null bytes.
          type: string
        timestamp:
          description: |
            A Unix timestamp (seconds only) representing when the draft was
            last edited. When creating a draft, this key need not be present
            and it will be filled in automatically by the server.
          example: 1595479019
          type: integer
      required:
      - content
      - to
      - topic
      - type
      type: object
    NavigationView:
      additionalProperties: false
      description: |
        Represents a user's personal configuration for a specific
        navigation view (displayed most visibly at the top of the web
        application's left sidebar).

        Navigation views can be either an override to the default
        behavior of a built-in view, or a custom view.

        **Changes**: New in Zulip 11.0 (feature level 390).
      example:
        fragment: narrow/is/alerted
        name: Alert Words
        is_pinned: true
      properties:
        fragment:
          description: |
            A unique identifier for the view, used to determine navigation
            behavior when clicked.

            Clients should use this value to navigate to the corresponding URL hash.
          example: narrow/is/alerted
          type: string
        is_pinned:
          description: |
            Determines whether the view appears directly in the sidebar or
            is hidden in the "More Views" menu.

            - `true` - Pinned and visible in the sidebar.
            - `false` - Hidden and accessible via the "More Views" menu.
          example: true
          type: boolean
        name:
          description: |
            The user-facing name for custom navigation views. Omit this
            field for built-in views.
          example: Alert Words
          nullable: true
          type: string
      required:
      - fragment
      - is_pinned
      type: object
    SavedSnippet:
      additionalProperties: false
      description: |
        Object containing the details of the saved snippet.
      example:
        date_created: 6
        id: 0
        title: title
        content: content
      properties:
        id:
          description: |
            The unique ID of the saved snippet.
          type: integer
        title:
          description: |
            The title of the saved snippet.
          type: string
        content:
          description: |
            The content of the saved snippet in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            Clients should insert this content into a message when using
            a saved snippet.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the saved snippet was created, in
            UTC seconds.
          type: integer
      type: object
    ScheduledMessageBase:
      additionalProperties: false
      description: |
        Object containing details of the scheduled message.
      properties:
        scheduled_message_id:
          description: |
            The unique ID of the scheduled message, which can be used to
            modify or delete the scheduled message.

            This is different from the unique ID that the message will have
            after it is sent.
          type: integer
        type:
          description: |
            The type of the scheduled message. Either `"stream"` or `"private"`.
          enum:
          - stream
          - private
          type: string
        to:
          $ref: "#/components/schemas/ScheduledMessageBase_to"
        topic:
          description: |
            Only present if `type` is `"stream"`.

            The topic for the channel message.
          type: string
        content:
          description: |
            The content/body of the scheduled message, in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        rendered_content:
          description: |
            The content/body of the scheduled message rendered in HTML.
          type: string
        scheduled_delivery_timestamp:
          description: |
            The UNIX timestamp for when the message will be sent
            by the server, in UTC seconds.
          example: 1595479019
          type: integer
        failed:
          description: |
            Whether the server has tried to send the scheduled message
            and it failed to successfully send.

            Clients that support unscheduling and editing scheduled messages
            should display scheduled messages with `"failed": true` with an
            indicator that the server failed to send the message at the
            scheduled time, so that the user is aware of the failure and can
            get the content of the scheduled message.

            **Changes**: New in Zulip 7.0 (feature level 181).
          type: boolean
      required:
      - content
      - failed
      - rendered_content
      - scheduled_delivery_timestamp
      - scheduled_message_id
      - to
      - type
      type: object
    ScheduledMessage:
      allOf:
      - $ref: "#/components/schemas/ScheduledMessageBase"
      - additionalProperties: false
        properties:
        type: object
      example:
        scheduled_message_id: ""
        rendered_content: ""
        scheduled_delivery_timestamp: ""
        topic: ""
        to: ""
        failed: ""
        type: ""
        content: ""
    Reminder:
      additionalProperties: false
      description: |
        Object containing details of the scheduled message.
      example:
        reminder_target_message_id: 1
        rendered_content: rendered_content
        scheduled_delivery_timestamp: 1595479019
        to:
        - 6
        - 6
        failed: true
        type: private
        reminder_id: 0
        content: content
      properties:
        reminder_id:
          description: |
            The unique ID of the reminder, which can be used to
            delete the reminder.

            This is different from the unique ID that the message would have
            after being sent.
          type: integer
        type:
          description: |
            The type of the reminder. Always set to `"private"`.
          enum:
          - private
          type: string
        to:
          description: |
            Contains the ID of the user who scheduled the reminder,
            and to which the reminder will be sent.
          items:
            type: integer
          type: array
        content:
          description: |
            The content/body of the reminder, in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        rendered_content:
          description: |
            The content/body of the reminder rendered in HTML.
          type: string
        scheduled_delivery_timestamp:
          description: |
            The UNIX timestamp for when the message will be sent
            by the server, in UTC seconds.
          example: 1595479019
          type: integer
        failed:
          description: |
            Whether the server has tried to send the reminder
            and it failed to successfully send.

            Clients that support unscheduling reminders
            should display scheduled messages with `"failed": true` with an
            indicator that the server failed to send the message at the
            scheduled time, so that the user is aware of the failure and can
            get the content of the scheduled message.
          type: boolean
        reminder_target_message_id:
          description: |
            The ID of the message that the reminder is created for.
          type: integer
      required:
      - content
      - failed
      - reminder_id
      - reminder_target_message_id
      - rendered_content
      - scheduled_delivery_timestamp
      - to
      - type
      type: object
    GroupPermissionSetting:
      additionalProperties: false
      description: |
        Configuration for a group permission setting specifying the groups
        to which the setting can be set to and the default values for the
        setting.

        **Changes**: Removed `allow_owners_group` field in Zulip 10.0 (feature level 326), as we now
        support anonymous user groups. Previously, the `role:owners` system group was
        not offered when `allow_owners_group` was false.

        Removed unnecessary `id_field_name` field in Zulip 10.0 (feature level 326). Previously,
        this always had the value of `"{setting_name}_id"`; it was an internal implementation
        detail of the server not intended to be included in the API.
      example:
        require_system_group: true
        default_for_system_groups: default_for_system_groups
        allowed_system_groups:
        - allowed_system_groups
        - allowed_system_groups
        allow_internet_group: true
        allow_nobody_group: true
        allow_everyone_group: true
        default_group_name: default_group_name
      properties:
        require_system_group:
          description: |
            Whether the setting can only be set to a system user group.
          type: boolean
        allow_internet_group:
          description: |
            Whether the setting can be set to `role:internet` system group.
          type: boolean
        allow_nobody_group:
          description: |
            Whether the setting can be set to `role:nobody` system group.
          type: boolean
        allow_everyone_group:
          description: |
            Whether the setting can be set to `role:everyone` system group.

            If false, guest users cannot exercise this permission even if they are part of
            the [group-setting value](/api/group-setting-values) for this setting.
          type: boolean
        default_group_name:
          description: |
            Name of the default group for the setting.
          type: string
        default_for_system_groups:
          description: |
            Name of the default group for the setting for system groups.

            This is non-null only for group-level settings.
          nullable: true
          type: string
        allowed_system_groups:
          description: |
            An array of names of system groups to which the setting can
            be set to.

            If the list is empty, the setting can be set to system groups
            based on the other boolean fields.

            **Changes**: New in Zulip 8.0 (feature level 225).
          items:
            type: string
          type: array
      type: object
    User:
      allOf:
      - $ref: "#/components/schemas/UserBase"
      - additionalProperties: false
        properties:
          delivery_email:
            nullable: true
          bot_type:
            nullable: true
          bot_owner_id:
            nullable: true
          avatar_url:
            nullable: true
        type: object
      example:
        is_active: ""
        role: ""
        avatar_version: ""
        is_guest: ""
        is_owner: ""
        timezone: ""
        bot_owner_id: ""
        profile_data: ""
        is_admin: ""
        full_name: ""
        avatar_url: ""
        user_id: ""
        delivery_email: ""
        bot_type: ""
        date_joined: ""
        is_bot: ""
        email: ""
    UserBase:
      description: |
        A dictionary containing basic data on a given Zulip user.

        **Changes**: Removed `is_billing_admin` field in Zulip 10.0 (feature level 363), as it was
        replaced by the `can_manage_billing_group` realm setting.
      properties:
        user_id:
          description: |
            The unique ID of the user.
          type: integer
        delivery_email:
          description: |
            The user's real email address. This value will be `null` if you cannot
            access user's real email address. For bot users, this field is always
            set to the real email of the bot, because bot users always have
            `email_address_visibility` set to everyone.

            **Changes**: Prior to Zulip 7.0 (feature level 163), this field was
            present only when `email_address_visibility` was restricted and you had
            access to the user's real email. As of this feature level, this field
            is always present, including the case when `email_address_visibility`
            is set to everyone (and therefore not restricted).
          nullable: true
          type: string
        email:
          description: |
            The Zulip API email address of the user or bot.

            If you do not have permission to view the email address of the target user,
            this will be a fake email address that is usable for the Zulip API but nothing else.
          type: string
        full_name:
          description: |
            Full name of the user or bot, used for all display purposes.
          type: string
        date_joined:
          description: |
            The time the user account was created.
          type: string
        is_active:
          description: |
            A boolean specifying whether the user account has been deactivated.
          type: boolean
        is_owner:
          description: |
            A boolean specifying whether the user is an organization owner.
            If true, `is_admin` will also be true.

            **Changes**: New in Zulip 3.0 (feature level 8).
          type: boolean
        is_admin:
          description: |
            A boolean specifying whether the user is an organization administrator.
          type: boolean
        is_guest:
          description: |
            A boolean specifying whether the user is a guest user.
          type: boolean
        is_bot:
          description: |
            A boolean specifying whether the user is a bot or full account.
          type: boolean
        bot_type:
          description: |
            An integer describing the type of bot:

            - `null` if the user isn't a bot.
            - `1` for a `Generic` bot.
            - `2` for an `Incoming webhook` bot.
            - `3` for an `Outgoing webhook` bot.
            - `4` for an `Embedded` bot.
          nullable: true
          type: integer
        bot_owner_id:
          description: |
            If the user is a bot (i.e. `is_bot` is true), then `bot_owner_id`
            is the user ID of the bot's owner (usually, whoever created the bot).

            Will be `null` for legacy bots that do not have an owner.

            **Changes**: New in Zulip 3.0 (feature level 1). In previous
            versions, there was a `bot_owner` field containing the email
            address of the bot's owner.
          nullable: true
          type: integer
        role:
          description: |
            [Organization-level role](/api/roles-and-permissions) of the user.
            Possible values are:

            - 100 = Organization owner
            - 200 = Organization administrator
            - 300 = Organization moderator
            - 400 = Member
            - 600 = Guest

            **Changes**: New in Zulip 4.0 (feature level 59).
          enum:
          - 100
          - 200
          - 300
          - 400
          - 600
          type: integer
        timezone:
          description: |
            The IANA identifier of the user's [profile time zone](/help/change-your-timezone),
            which is used primarily to display the user's local time to other users.
          type: string
        avatar_url:
          description: |
            URL for the user's avatar.

            Will be `null` if the `client_gravatar`
            query parameter was set to `true`, the current user has access to
            this user's real email address, and this user's avatar is hosted by
            the Gravatar provider (i.e. this user has never uploaded an avatar).

            **Changes**: Before Zulip 7.0 (feature level 163), access to a
            user's real email address was a realm-level setting. As of this
            feature level, `email_address_visibility` is a user setting.

            In Zulip 3.0 (feature level 18), if the client has the
            `user_avatar_url_field_optional` capability, this will be missing at
            the server's sole discretion.
          nullable: true
          type: string
        avatar_version:
          description: |
            Version for the user's avatar. Used for cache-busting requests
            for the user's avatar. Clients generally shouldn't need to use this;
            most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.
          type: integer
        profile_data:
          additionalProperties:
            $ref: "#/components/schemas/profile_data_value"
          description: |
            Only present if `is_bot` is false; bots can't have custom profile fields.

            A dictionary containing custom profile field data for the user. Each entry
            maps the integer ID of a custom profile field in the organization to a
            dictionary containing the user's data for that field. Generally the data
            includes just a single `value` key; for those custom profile fields
            supporting Markdown, a `rendered_value` key will also be present.
          type: object
      type: object
    profile_data:
      additionalProperties:
        $ref: "#/components/schemas/profile_data_value"
      description: |
        Only present if `is_bot` is false; bots can't have custom profile fields.

        A dictionary containing custom profile field data for the user. Each entry
        maps the integer ID of a custom profile field in the organization to a
        dictionary containing the user's data for that field. Generally the data
        includes just a single `value` key; for those custom profile fields
        supporting Markdown, a `rendered_value` key will also be present.
      type: object
    ChannelFolder:
      additionalProperties: false
      description: |
        Object containing the channel folder's attributes.
      example:
        rendered_description: rendered_description
        is_archived: true
        date_created: 4
        name: name
        creator_id: 0
        description: description
        id: 4
        order: 6
      properties:
        name:
          description: |
            The name of the channel folder.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the channel folder was created,
            in UTC seconds.
          nullable: true
          type: integer
        creator_id:
          description: |
            The ID of the user who created this channel folder.
          nullable: true
          type: integer
        description:
          description: |
            The description of the channel folder.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        rendered_description:
          description: |
            The description of the channel folder rendered as HTML,
            intended to be used when displaying the channel folder
            description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly. And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.
          type: string
        order:
          description: |
            This value determines in which order the channel folders will be
            displayed in the UI. The value is 0 indexed, and the value with
            the lower order will be displayed first.

            **Changes**: New in Zulip 11.0 (feature level 414).
          type: integer
        id:
          description: |
            The ID of the channel folder.
          type: integer
        is_archived:
          description: |
            Whether the channel folder is archived or not.
          type: boolean
      type: object
    JsonResponseBase:
      properties:
        result:
          type: string
      type: object
    JsonSuccess:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
        properties:
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
    JsonSuccessBase:
      allOf:
      - $ref: "#/components/schemas/JsonResponseBase"
      - properties:
          result:
            enum:
            - success
            type: string
          msg:
            type: string
          ignored_parameters_unsupported:
            $ref: "#/components/schemas/IgnoredParametersUnsupported"
        required:
        - msg
        - result
      description: |
        **Changes**: As of Zulip 7.0 (feature level 167), if any
        parameters sent in the request are not supported by this
        endpoint, a successful JSON response will include an
        [`ignored_parameters_unsupported`][ignored_params] array.

        A typical successful JSON response may look like:

        [ignored_params]: /api/rest-error-handling#ignored-parameters
    IgnoredParametersSuccess:
      allOf:
      - $ref: "#/components/schemas/IgnoredParametersBase"
      - additionalProperties: false
        properties:
        type: object
      description: |
        **Changes**: The [`ignored_parameters_unsupported`][ignored_params]
        array was added as a possible return value for all REST API endpoint
        JSON success responses in Zulip 7.0 (feature level 167).

        Previously, it was added to
        [`POST /users/me/subscriptions/properties`](/api/update-subscription-settings)
        in Zulip 5.0 (feature level 111) and to
        [`PATCH /realm/user_settings_defaults`](/api/update-realm-user-settings-defaults)
        in Zulip 5.0 (feature level 96). The feature was introduced in Zulip 5.0
        (feature level 78) as a return value for the
        [`PATCH /settings`](/api/update-settings) endpoint.

        A typical successful JSON response with ignored parameters may look like:

        [ignored_params]: /api/rest-error-handling#ignored-parameters
      example:
        ignored_parameters_unsupported:
        - invalid_param_1
        - invalid_param_2
        msg: ""
        result: success
    IgnoredParametersBase:
      allOf:
      - $ref: "#/components/schemas/JsonResponseBase"
      - properties:
          result:
            enum:
            - success
            type: string
          msg:
            type: string
          ignored_parameters_unsupported:
            $ref: "#/components/schemas/IgnoredParametersUnsupported"
        required:
        - msg
        - result
    ApiKeyResponse:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          api_key: gjA04ZYcqXKalvYMA8OeXSfzUOLrtbZv
          email: iago@zulip.com
          msg: ""
          result: success
          user_id: 5
        properties:
          api_key:
            description: |
              The API key that can be used to authenticate as the requested user.
            type: string
          email:
            description: |
              The email address of the user who owns the API key.
            type: string
          user_id:
            description: |
              The unique ID of the user who owns the API key.

              **Changes**: New in Zulip 7.0 (feature level 171).
            type: integer
        required:
        - api_key
        - email
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        api_key: api_key
        user_id: 0
        email: email
    CodedError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        properties:
        type: object
      example:
        result: ""
        msg: ""
        code: ""
    CodedErrorBase:
      allOf:
      - $ref: "#/components/schemas/JsonResponseBase"
      - properties:
          result:
            enum:
            - error
            type: string
          msg:
            type: string
          code:
            description: |
              A string that identifies the error.
            type: string
        required:
        - code
        - msg
        - result
    BadEventQueueIdError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        example:
          code: BAD_EVENT_QUEUE_ID
          msg: "Bad event queue ID: fb67bf8a-c031-47cc-84cf-ed80accacda8"
          queue_id: fb67bf8a-c031-47cc-84cf-ed80accacda8
          result: error
        properties:
          queue_id:
            description: |
              The string that identifies the invalid event queue.
            type: string
        type: object
    InvalidMessageError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        example:
          msg: Invalid message(s)
          code: BAD_REQUEST
          result: error
        properties:
        type: object
    InvalidChannelError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        example:
          msg: Invalid channel ID
          code: BAD_REQUEST
          result: error
        properties:
        type: object
    NonExistingChannelNameError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        example:
          code: STREAM_DOES_NOT_EXIST
          msg: Channel 'nonexistent' does not exist
          result: error
          stream: nonexistent
        properties:
          stream:
            description: |
              The name of the channel that could not be found.
            type: string
        type: object
    NonExistingChannelIdError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        example:
          code: STREAM_DOES_NOT_EXIST
          msg: Channel with ID '9' does not exist
          result: error
          stream_id: 9
        properties:
          stream_id:
            description: |
              The channel ID that could not be found.
            type: integer
        type: object
    InvalidApiKeyError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ### Invalid API key

        A typical failed JSON response for when the API key is invalid.
      example:
        code: INVALID_API_KEY
        msg: Invalid API key
        result: error
    InvitationFailedError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        properties:
          errors:
            description: |
              An array of arrays of length 3, where each inner array consists of (a) an email
              address that was skipped while sending invitations, (b) the corresponding error
              message, and (c) a boolean which is `true` when the email address already uses Zulip
              and the corresponding user is deactivated in the organization.
            items:
              items:
                $ref: "#/components/schemas/InvitationFailedError_allOf_errors_inner_inner"
              type: array
            type: array
          sent_invitations:
            description: |
              A boolean specifying whether any invitations were sent.
            type: boolean
          daily_limit_reached:
            description: |
              A boolean specifying whether the limit on the number of invitations that can
              be sent in the organization in a day has been reached.
            type: boolean
          license_limit_reached:
            description: |
              A boolean specifying whether the organization have enough unused Zulip licenses
              to invite specified number of users.
            type: boolean
        type: object
    MissingArgumentError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        description: |
          ### Missing request parameter

          A typical failed JSON response for when a required request parameter
          is not supplied.

          The value of `var_name` contains information about the missing parameter.
        example:
          code: REQUEST_VARIABLE_MISSING
          msg: Missing 'content' argument
          result: error
          var_name: content
        properties:
          var_name:
            description: |
              It contains the information about the missing parameter.
            type: string
        type: object
    IncompatibleParametersError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        description: |
          ### Incompatible request parameters

          A typical failed JSON response for when two or more, optional
          parameters are supplied that are incompatible with each other.

          The value of `parameters` in the response is string containing
          the parameters, separated by commas, that are incompatible.
        example:
          code: BAD_REQUEST
          msg: "Unsupported parameter combination: object_id, object_name"
          result: error
          parameters: "object_id, object_name"
        properties:
          parameters:
            description: |
              A string containing the parameters, separated by commas,
              that are incompatible.
            type: string
        type: object
    UserNotAuthorizedError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ### User not authorized for query

        A typical failed JSON response for when the user is not authorized for
        a query.
      example:
        code: BAD_REQUEST
        msg: User not authorized for this query
        result: error
    UserDeactivatedError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ### User account deactivated

        A typical failed json response for when user's account is deactivated.

        **Changes**: As of Zulip 5.0 (feature level 76), these errors use the
        HTTP 401 status code. Before this feature level, they used the HTTP 403
        status code.
      example:
        code: USER_DEACTIVATED
        msg: Account is deactivated
        result: error
    RateLimitedError:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        description: |
          ### Rate limit exceeded

          A typical failed JSON response for when a rate limit is exceeded.
          Zulip sets a few [HTTP response headers][rate-limit-headers]
          to help with preventing rate limit errors.

          The value of `retry-after` in the response indicates how many
          seconds the client must wait before making additional requests.

          **Changes**: Before Zulip 4.0 (feature level 36), the `code` key
          was not present in rate limit errors.

          [rate-limit-headers]: /api/http-headers#rate-limiting-response-headers
        example:
          code: RATE_LIMIT_HIT
          msg: API usage exceeded rate limit
          result: error
          retry-after: 28.706807374954224
        properties:
          retry-after:
            description: |
              How many seconds the client must wait before making
              additional requests.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        code: ""
        retry-after: 0
    RealmDeactivatedError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ### Realm deactivated

        A typical failed json response for when user's organization is deactivated.

        **Changes**: As of Zulip 5.0 (feature level 76), these errors use the
        HTTP 401 status code. Before this feature level, they used the HTTP 403
        status code.
      example:
        code: REALM_DEACTIVATED
        msg: This organization is deactivated
        result: error
    InvalidPushDeviceTokenError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## Invalid push device token

        A typical failed JSON response for when the push device token is not
        recognized by the Zulip server:
      example:
        code: INVALID_PUSH_DEVICE_TOKEN
        msg: Device not recognized
        result: error
    InvalidRemotePushDeviceTokenError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## Invalid push device token

        A typical failed JSON response for when the push device token is not recognized
        by the push notification bouncer:
      example:
        code: INVALID_REMOTE_PUSH_DEVICE_TOKEN
        msg: Device not recognized by the push bouncer
        result: error
    NoActivePushDeviceError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## No active push device

        A typical failed JSON response for when no registered device is available
        for the user (and `push_account_id`) to receive a push notification.
      example:
        code: NO_ACTIVE_PUSH_DEVICE
        msg: No active registered push device
        result: error
    FailedToConnectBouncerError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## Failed to connect bouncer

        A typical failed JSON response for when a network error occurs
        while the server attempts to connect to the bouncer server.
      example:
        code: FAILED_TO_CONNECT_BOUNCER
        msg: Network error while connecting to Zulip push notification service.
        result: error
    InternalBouncerServerError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## Internal bouncer server error

        A typical failed JSON response for when a 5xx error occurs on the bouncer server.
      example:
        code: INTERNAL_SERVER_ERROR_ON_BOUNCER
        msg: "Internal server error on Zulip push notification service, retry later."
        result: error
    PushNotificationAdminActionRequiredError:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      description: |
        ## Admin action required

        A typical failed JSON response for when there is a push notification
        configuration issue on the server, such as invalid credentials,
        an expired plan, or an unregistered organization. Admin action is required.
      example:
        code: ADMIN_ACTION_REQUIRED
        msg: "Push notification configuration issue on server, contact the server\
          \ administrator or retry later."
        result: error
    Event_types:
      description: |
        A JSON-encoded array indicating which types of events you're interested
        in. Values that you might find useful include:

        - **message** (messages)
        - **subscription** (changes in your subscriptions)
        - **realm_user** (changes to users in the organization and
          their properties, such as their name).

        If you do not specify this parameter, you will receive all
        events, and have to filter out the events not relevant to
        your client in your client code. For most applications, one
        is only interested in messages, so one specifies:
        `"event_types": ["message"]`

        Event types not supported by the server are ignored, in order to simplify
        the implementation of client apps that support multiple server versions.
      example:
      - message
      items:
        type: string
      type: array
    Narrow:
      default: []
      description: |
        A JSON-encoded array of arrays of length 2 indicating the
        [narrow filter(s)](/api/construct-narrow) for which you'd
        like to receive events for.

        For example, to receive events for direct messages (including
        group direct messages) received by the user, one can use
        `"narrow": [["is", "dm"]]`.

        Unlike the API for [fetching messages](/api/get-messages),
        this narrow parameter is simply a filter on messages that the
        user receives through their channel subscriptions (or because
        they are a recipient of a direct message).

        This means that a client that requests a `narrow` filter of
        `[["channel", "Denmark"]]` will receive events for new messages
        sent to that channel while the user is subscribed to that
        channel. The client will not receive any message events at all
        if the user is not subscribed to `"Denmark"`.

        Newly created bot users are not usually subscribed to any
        channels, so bots using this API need to be
        [subscribed](/api/subscribe) to any channels whose messages
        you'd like them to process using this endpoint.

        See the `all_public_streams` parameter for how to process all
        public channel messages in an organization.

        **Changes**: See [changes section](/api/construct-narrow#changes)
        of search/narrow filter documentation.
      example:
      - - channel
        - Denmark
      items:
        items:
          type: string
        type: array
      type: array
    AllPublicChannels:
      default: false
      description: |
        Whether you would like to request message events from all public
        channels. Useful for workflow bots that you'd like to see all new messages
        sent to public channels. (You can also subscribe the user to private channels).
      example: true
      type: boolean
    RequiredContent:
      description: |
        The content of the message.

        Clients should use the `max_message_length` returned by the
        [`POST /register`](/api/register-queue) endpoint to determine
        the maximum message size.
      example: Hello
      type: string
    OptionalContent:
      description: |
        The updated content of the target message.

        Clients should use the `max_message_length` returned by the
        [`POST /register`](/api/register-queue) endpoint to determine
        the maximum message size.

        Note that a message's content and channel cannot be changed at the
        same time, so sending both `content` and `stream_id` parameters will
        throw an error.
      example: Hello
      type: string
    HistoryPublicToSubscribers:
      description: |
        Whether the channel's message history should be available to
        newly subscribed members, or users can only access messages
        they actually received while subscribed to the channel.

        Corresponds to the shared history option for
        [private channels](/help/channel-permissions#private-channels).
      example: false
      type: boolean
    Principals:
      description: |
        A list of user IDs (preferred) or Zulip API email
        addresses of the users to be subscribed to or unsubscribed
        from the channels specified in the `subscriptions` parameter. If
        not provided, then the requesting user/bot is subscribed.

        **Changes**: The integer format is new in Zulip 3.0 (feature level 9).
      example:
      - ZOE@zulip.com
      oneOf:
      - items:
          type: string
        type: array
      - items:
          type: integer
        type: array
    ReactionType:
      description: |
        A string indicating the type of emoji. Each emoji `reaction_type`
        has an independent namespace for values of `emoji_code`.

        If an API client is adding/removing a vote on an existing reaction,
        it should pass this parameter using the value the server provided
        for the existing reaction for specificity. Supported values:

        - `unicode_emoji` : In this namespace, `emoji_code` will be a
          dash-separated hex encoding of the sequence of Unicode codepoints
          that define this emoji in the Unicode specification.

        - `realm_emoji` : In this namespace, `emoji_code` will be the ID of
          the uploaded [custom emoji](/help/custom-emoji).

        - `zulip_extra_emoji` : These are special emoji included with Zulip.
          In this namespace, `emoji_code` will be the name of the emoji (e.g.
          "zulip").

        **Changes**: In Zulip 3.0 (feature level 2), this parameter became
        optional for [custom emoji](/help/custom-emoji);
        previously, this endpoint assumed `unicode_emoji` if this
        parameter was not specified.
      example: unicode_emoji
      type: string
    EmojiCode:
      description: |
        A unique identifier, defining the specific emoji codepoint requested,
        within the namespace of the `reaction_type`.

        For most API clients, you won't need this, but it's important
        for Zulip apps to handle rare corner cases when
        adding/removing votes on an emoji reaction added previously by
        another user.

        If the existing reaction was added when the Zulip server was
        using a previous version of the emoji data mapping between
        Unicode codepoints and human-readable names, sending the
        `emoji_code` in the data for the original reaction allows the
        Zulip server to correctly interpret your upvote as an upvote
        rather than a reaction with a "different" emoji.
      example: 1f419
      type: string
    MessageRetentionDays:
      description: |
        Number of days that messages sent to this channel will be stored
        before being automatically deleted by the [message retention
        policy](/help/message-retention-policy). Two special string format
        values are supported:

        - `"realm_default"`: Return to the organization-level setting.
        - `"unlimited"`: Retain messages forever.

        **Changes**: Prior to Zulip 5.0 (feature level 91), retaining
        messages forever was encoded using `"forever"` instead of
        `"unlimited"`.

        New in Zulip 3.0 (feature level 17).
      example: "20"
      oneOf:
      - type: string
      - type: integer
    TopicsPolicy:
      description: |
        Whether [named topics](/help/introduction-to-topics) and the empty
        topic (i.e., ["general chat" topic](/help/general-chat-topic))
        are enabled in this channel.

        - `"inherit"`: Messages can be sent to named topics in this channel,
          and the [organization-level `realm_topics_policy`][realm-topics-policy]
          is used for whether messages can be sent to the empty topic in this
          channel.
        - `"allow_empty_topic"`: Messages can be sent to both named topics and
          the empty topic in this channel.
        - `"disable_empty_topic"`: Messages can be sent to named topics in this
          channel, but the empty topic is disabled.
        - `"empty_topic_only"`: Messages can be sent to the empty topic in this
          channel, but named topics are disabled. See ["general chat"
          channels](/help/general-chat-channels).

        The `"empty_topic_only"` policy can only be set if all existing messages
        in the channel are already in the empty topic.

        When creating a new channel, if the `topics_policy` is not specified, the
        `"inherit"` option will be set.

        **Changes**: In Zulip 11.0 (feature level 404), the `"empty_topic_only"`
        option was added.

        New in Zulip 11.0 (feature level 392).

        [realm-topics-policy]: /help/require-topics#set-the-default-general-chat-topic-configuration
      enum:
      - inherit
      - allow_empty_topic
      - disable_empty_topic
      - empty_topic_only
      example: inherit
      type: string
    SendNewSubscriptionMessages:
      default: true
      description: |
        Whether any other users newly subscribed via this request should be
        sent a Notification Bot DM notifying them about their new
        subscription.

        The server will never send Notification Bot DMs if more than
        `max_bulk_new_subscription_messages` (available in the [`POST
        /register`](/api/register-queue) response) users were subscribed in
        this request.

        **Changes**: Before Zulip 11.0 (feature level 397), new subscribers
        were always sent a Notification Bot DM, which was unduly expensive
        when bulk-subscribing thousands of users to a channel.
      example: true
      type: boolean
    ChannelCanAddSubscribersGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to add subscribers to this channel.

        Users who can administer the channel or have similar realm-level
        permissions can add subscribers to a public channel regardless
        of the value of this setting.

        Users in this group need not be subscribed to a private channel to
        add subscribers to it.

        Note that a user must [have content access](/help/channel-permissions)
        to a channel and permission to administer the channel in order to
        modify this setting.

        **Changes**: New in Zulip 10.0 (feature level 342). Previously, there was no
        channel-level setting for this permission.

        [setting-values]: /api/group-setting-values
    CanRemoveSubscribersGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to remove subscribers from this channel.

        Organization administrators can unsubscribe others from a channel as though
        they were in this group without being explicitly listed here.

        Note that a user must have metadata access to a channel and permission
        to administer the channel in order to modify this setting.

        **Changes**: Prior to Zulip 10.0 (feature level 349), channel administrators
        could not unsubscribe other users if they were not an organization
        administrator or part of `can_remove_subscribers_group`. Realm administrators
        were not allowed to unsubscribe other users from a private channel if they
        were not subscribed to that channel.

        Prior to Zulip 10.0 (feature level 320), this value was always the integer
        ID of a system group.

        Before Zulip 8.0 (feature level 197), the `can_remove_subscribers_group`
        setting was named `can_remove_subscribers_group_id`.

        New in Zulip 6.0 (feature level 142).

        [setting-values]: /api/group-setting-values
    CanAdministerChannelGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to administer this channel.

        Organization administrators can administer every channel as though they were
        in this group without being explicitly listed here.

        Note that a user must have metadata access to a channel and permission
        to administer the channel in order to modify this setting.

        **Changes**: Prior to Zulip 10.0 (feature level 349) a user needed to
        [have content access](/help/channel-permissions) to a channel in
        order to modify it. The exception to this rule was that organization
        administrators can edit channel names and descriptions without
        having full access to the channel.

        New in Zulip 10.0 (feature level 325). Prior to this
        change, the permission to administer channels was limited to realm
        administrators.

        [setting-values]: /api/group-setting-values
    CanDeleteAnyMessageGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to delete any message in the channel.

        Note that a user must [have content access](/help/channel-permissions) to a
        channel in order to delete any message in the channel.

        Users present in the organization-level `can_delete_any_message_group`
        setting can always delete any message in the channel if they
        [have content access](/help/channel-permissions) to that channel.

        **Changes**: New in Zulip 11.0 (feature level 407). Prior to this
        change, only the users in `can_delete_any_message_group` were able
        delete any message in the organization.

        [setting-values]: /api/group-setting-values
    CanDeleteOwnMessageGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to delete the messages that they have sent in the channel.

        [update-group-setting]: /api/group-setting-values#updating-group-setting-values

        Note that a user must [have content access](/help/channel-permissions) to a
        channel in order to delete their own message in the channel.

        Users with permission to delete any message in the channel
        and users present in the organization-level `can_delete_own_message_group` setting
        can always delete their own messages in the channel if they
        [have content access](/help/channel-permissions) to that channel.

        **Changes**: New in Zulip 11.0 (feature level 407). Prior to this
        change, only the users in the organization-level `can_delete_any_message_group`
        and `can_delete_own_message_group` settings were able delete their own messages in
        the organization.

        [setting-values]: /api/group-setting-values
    CanMoveMessagesOutOfChannelGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to move messages out of this channel.

        Note that a user must [have content access](/help/channel-permissions) to a
        channel in order to move messages out of the channel.

        Channel administrators and users present in the organization-level
        `can_move_messages_between_channels_group` setting can always move messages
        out of the channel if they [have content access](/help/channel-permissions) to
        the channel.

        **Changes**: New in Zulip 11.0 (feature level 396). Prior to this
        change, only the users in `can_move_messages_between_channels_group` were able
        move messages between channels.

        [setting-values]: /api/group-setting-values
    CanMoveMessagesWithinChannelGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to move messages within this channel.

        Note that a user must [have content access](/help/channel-permissions) to a
        channel in order to move messages within the channel.

        Channel administrators and users present in the organization-level
        `can_move_messages_between_topics_group` setting can always move messages
        within the channel if they [have content access](/help/channel-permissions) to
        the channel.

        **Changes**: New in Zulip 11.0 (feature level 396). Prior to this
        change, only the users in `can_move_messages_between_topics_group` were able
        move messages between topics of a channel.

        [setting-values]: /api/group-setting-values
    CanSendMessageGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to post in this channel.

        Note that a user must have metadata access to a channel and permission
        to administer the channel in order to modify this setting.

        **Changes**: New in Zulip 10.0 (feature level 333). Previously
        `stream_post_policy` field used to control the permission to
        post in the channel.

        [setting-values]: /api/group-setting-values
    CanSubscribeGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to subscribe themselves to this channel.

        Everyone, excluding guests, can subscribe to any public channel
        irrespective of this setting.

        Users in this group can subscribe to a private channel as well.

        Note that a user must [have content access](/help/channel-permissions)
        to a channel and permission to administer the channel in order to
        modify this setting.

        **Changes**: New in Zulip 10.0 (feature level 357).

        [setting-values]: /api/group-setting-values
    CanResolveTopicsGroup:
      allOf:
      - $ref: "#/components/schemas/GroupSettingValue"
      description: |
        A [group-setting value][setting-values] defining the set of users
        who have permission to resolve topics in the channel.

        Users who have similar realm-level permissions can resolve topics
        in a channel regardless of the value of this setting.

        **Changes**: New in Zulip 11.0 (feature level 402).

        [setting-values]: /api/group-setting-values
    LinkifierPattern:
      description: |
        The [Python regular
        expression](https://docs.python.org/3/howto/regex.html) that should
        trigger the linkifier.
      example: "#(?P<id>[0-9]+)"
      type: string
    LinkifierURLTemplate:
      description: |
        The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html)
        compliant URL template used for the link.
        If you used named groups in `pattern`, you can insert their
        content here with `{name_of_group}`.

        **Changes**: New in Zulip 7.0 (feature level 176). This replaced
        the `url_format_string` parameter, which was a format string in which
        named groups' content could be inserted with `%(name_of_group)s`.
      example: "https://github.com/zulip/zulip/issues/{id}"
      type: string
    FolderId:
      description: |
        The ID of the folder to which the channel belongs.

        Is `null` if channel does not belong to any folder.

        **Changes**: New in Zulip 11.0 (feature level 389).
      nullable: true
      type: integer
    fetch_api_key_request:
      properties:
        username:
          description: |
            The username to be used for authentication (typically, the email
            address, but depending on configuration, it could be an LDAP username).

            See the `require_email_format_usernames` parameter documented in
            [GET /server_settings](/api/get-server-settings) for details.
          example: iago@zulip.com
          type: string
        password:
          description: |
            The user's Zulip password (or LDAP password, if LDAP authentication is in use).
          example: abcd1234
          type: string
      required:
      - password
      - username
      type: object
    dev_fetch_api_key_request:
      properties:
        username:
          description: |
            The email address for the user that owns the API key.
          example: iago@zulip.com
          type: string
      required:
      - username
      type: object
    get_events_200_response_allOf_events_inner_oneOf:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user's set of configured
        [alert words](/help/dm-mention-alert-notifications#alert-words) have changed.
      example:
        type: alert_words
        alert_words:
        - alert_word
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - alert_words
            type: string
        alert_words:
          description: |
            An array of strings, where each string is an alert word (or phrase)
            configured by the user.
          items:
            type: string
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_1_setting:
      description: |
        New value of the changed setting.
      oneOf:
      - type: boolean
      - type: integer
      - type: string
    get_events_200_response_allOf_events_inner_oneOf_1:
      additionalProperties: false
      deprecated: true
      description: |
        Event sent to clients that have requested the
        `update_display_settings` event type and did not include
        `user_settings_object` in their `client_capabilities` when
        registering the event queue.

        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
        connecting to newer servers should declare the `user_settings_object`
        client capability and process the `user_settings` event type instead.
      example:
        type: update_display_settings
        user: iago@zulip.com
        setting_name: high_contrast_mode
        setting: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - update_display_settings
            type: string
        user:
          description: |
            The Zulip API email of the user.
          type: string
        setting_name:
          description: |
            Name of the changed display setting.
          type: string
        setting:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_1_setting"
        language_name:
          description: |
            Present only if the setting to be changed is
            `default_language`. Contains the name of the
            new default language in English.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_2:
      additionalProperties: false
      deprecated: true
      description: |
        Event sent to a user's clients when that user's [notification
        settings](/api/update-settings) have changed with an additional
        rule that it is only sent to clients that did not include
        `user_settings_object` in their `client_capabilities` when
        registering the event queue.

        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
        connecting to newer servers should declare the `user_settings_object`
        client capability and process the `user_settings` event type instead.
      example:
        type: update_global_notifications
        user: iago@zulip.com
        notification_name: enable_sounds
        setting: true
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - update_global_notifications
            type: string
        user:
          description: |
            The Zulip API email of the user.
          type: string
        notification_name:
          description: |
            Name of the changed notification setting.
          type: string
        setting:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_1_setting"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_3:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user's settings
        have changed.

        **Changes**: New in Zulip 5.0 (feature level 89), replacing the
        previous `update_display_settings` and `update_global_notifications`
        event types, which are still present for backwards compatibility reasons.
      example:
        type: user_settings
        op: update
        property: high_contrast_mode
        value: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_settings
            type: string
        op:
          enum:
          - update
          type: string
        property:
          description: |
            Name of the changed setting.
          type: string
        value:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_1_setting"
        language_name:
          description: |
            Present only if the setting to be changed is
            `default_language`. Contains the name of the
            new default language in English.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf:
      additionalProperties: false
      description: |
        When a user changes their full name.
      properties:
        user_id:
          description: |
            The ID of modified user.
          type: integer
        full_name:
          description: |
            The new full name for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_1:
      additionalProperties: false
      description: |
        When a user changes their avatar.
      properties:
        user_id:
          description: |
            The ID of the user who is affected by this change.
          type: integer
        avatar_url:
          description: |
            The URL of the new avatar for the user.
          type: string
        avatar_source:
          description: |
            The new avatar data source type for the user.

            Value values are `G` (gravatar) and `U` (uploaded by user).
          type: string
        avatar_url_medium:
          description: |
            The new medium-size avatar URL for user.
          type: string
        avatar_version:
          description: |
            The version number for the user's avatar. This is useful
            for cache-busting.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_2:
      additionalProperties: false
      description: |
        When a user changes their [profile time zone](/help/change-your-timezone).
      properties:
        user_id:
          description: |
            The ID of modified user.
          type: integer
        email:
          deprecated: true
          description: |
            The Zulip API email of the user.

            **Deprecated**: This field will be removed in a future
            release as it is redundant with the `user_id`.
          type: string
        timezone:
          description: |
            The IANA identifier of the new profile time zone for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_3:
      additionalProperties: false
      description: |
        When the owner of a bot changes.
      properties:
        user_id:
          description: |
            The ID of the user/bot whose owner has changed.
          type: integer
        bot_owner_id:
          description: |
            The user ID of the new bot owner.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_4:
      additionalProperties: false
      description: |
        When the [role](/help/user-roles) of a user changes.
      properties:
        user_id:
          description: |
            The ID of the user affected by this change.
          type: integer
        role:
          description: |
            The new [role](/api/roles-and-permissions) of the user.
          enum:
          - 100
          - 200
          - 300
          - 400
          - 600
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_5:
      additionalProperties: false
      description: |
        When the value of a user's delivery email as visible to you changes,
        either due to the email address changing or your access to the user's
        email changing via an update to their `email_address_visibility`
        setting.

        **Changes**: Prior to Zulip 7.0 (feature level 163), this event was
        sent only to the affected user, and this event would only be triggered
        by changing the affected user's delivery email.
      properties:
        user_id:
          description: |
            The ID of the user affected by this change.
          type: integer
        delivery_email:
          description: |
            The new delivery email of the user.

            This value can be `null` if the affected user
            changed their `email_address_visibility` setting
            such that you cannot access their real email.

            **Changes**: Before Zulip 7.0 (feature level 163),
            `null` was not a possible value for this event as
            it was only sent to the affected user when their
            email address was changed.
          nullable: true
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_6_custom_profile_field:
      additionalProperties: false
      description: |
        Object containing details about the custom
        profile data change.
      properties:
        id:
          description: |
            The ID of the custom profile field which user updated.
          type: integer
        value:
          description: |
            User's personal value for this custom profile field,
            or `null` if unset.
          nullable: true
          type: string
        rendered_value:
          description: |
            The `value` rendered in HTML. Will only be present for
            custom profile field types that support Markdown rendering.

            This user-generated HTML content should be rendered
            using the same CSS and client-side security protections
            as are used for message content.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_6:
      additionalProperties: false
      description: |
        When the user updates one of their custom profile
        fields.
      properties:
        user_id:
          description: |
            The ID of the user affected by this change.
          type: integer
        custom_profile_field:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_6_custom_profile_field"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_7:
      additionalProperties: false
      description: |
        When the Zulip API email address of a user changes,
        either due to the user's email address changing, or
        due to changes in the user's
        [email address visibility][help-email-visibility].

        [help-email-visibility]: /help/configure-email-visibility
      properties:
        user_id:
          description: |
            The ID of the user affected by this change.
          type: integer
        new_email:
          description: |
            The new value of `email` for the user. The client
            should update any data structures associated
            with this user to use this new value as the
            user's Zulip API email address.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_8:
      additionalProperties: false
      description: |
        When a user is deactivated or reactivated. Only
        users who can access the modified user under the
        organization's `can_access_all_users_group` policy
        will receive this event.

        Clients receiving a deactivation event should
        remove the user from all user groups in their data
        structures, because deactivated users cannot be
        members of groups.

        **Changes**: Prior to Zulip 10.0 (feature level
        303), reactivation events were sent to users who
        could not access the reactivated user due to a
        `can_access_all_users_group` policy. Also,
        previously, Clients were not required to update
        group membership records during user deactivation.

        New in Zulip 8.0 (feature level 222). Previously the server
        sent a `realm_user` event with `op` field set to `remove`
        when deactivating a user and a `realm_user` event with `op`
        field set to `add` when reactivating a user.
      properties:
        user_id:
          description: |
            The ID of the user affected by this change.
          type: integer
        is_active:
          description: |
            A boolean describing whether the user account has been deactivated.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_4_person:
      description: |
        Object containing the changed details of the user.
        It has multiple forms depending on the value changed.

        **Changes**: Removed `is_billing_admin` field in Zulip 10.0
        (feature level 363), as it was replaced by the
        `can_manage_billing_group` realm setting.
      oneOf:
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_1"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_2"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_3"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_4"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_5"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_6"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_7"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person_oneOf_8"
    get_events_200_response_allOf_events_inner_oneOf_4:
      additionalProperties: false
      description: |
        Event sent generally to all users who can access the modified
        user for changes in the set of users or those users metadata.

        **Changes**: Prior to Zulip 8.0 (feature level 228), this event
        was sent to all users in the organization.
      example:
        type: realm_user
        op: update
        person:
          avatar_source: G
          avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=3
          avatar_url_medium: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&s=500&version=3
          avatar_version: 3
          user_id: 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_user
            type: string
        op:
          enum:
          - update
          type: string
        person:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4_person"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_5:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user's channel subscriptions
        have changed (either the set of subscriptions or their properties).
      example:
        type: subscription
        op: add
        subscriptions:
        - name: test
          stream_id: 9
          is_archived: false
          creator_id: null
          description: ""
          rendered_description: ""
          invite_only: false
          is_web_public: false
          stream_post_policy: 1
          history_public_to_subscribers: true
          first_message_id: null
          folder_id: 1
          is_recently_active: true
          message_retention_days: null
          is_announcement_only: false
          color: "#76ce90"
          is_muted: false
          pin_to_top: false
          audible_notifications: null
          desktop_notifications: null
          email_notifications: null
          push_notifications: null
          wildcard_mentions_notify: null
          in_home_view: true
          stream_weekly_traffic: null
          can_add_subscribers_group: 2
          can_remove_subscribers_group: 2
          can_subscribe_group: 2
          subscribers:
          - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - subscription
            type: string
        op:
          enum:
          - add
          type: string
        subscriptions:
          description: |
            A list of dictionaries where each dictionary contains
            information about one of the subscribed channels.

            **Changes**: Removed `email_address` field from the dictionary
            in Zulip 8.0 (feature level 226).

            Removed `role` field from the dictionary
            in Zulip 6.0 (feature level 133).
          items:
            $ref: "#/components/schemas/Subscription"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_6_subscriptions_inner:
      additionalProperties: false
      description: |
        Dictionary containing details about the unsubscribed channel.
      properties:
        stream_id:
          description: |
            The ID of the channel.
          type: integer
        name:
          description: |
            The name of the channel.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_6:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user has been unsubscribed
        from one or more channels.
      example:
        type: subscription
        op: remove
        subscriptions:
        - name: test
          stream_id: 9
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - subscription
            type: string
        op:
          enum:
          - remove
          type: string
        subscriptions:
          description: |
            A list of dictionaries, where each dictionary contains
            information about one of the newly unsubscribed channels.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_6_subscriptions_inner"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_7_value:
      description: |
        The new value of the changed property.
      oneOf:
      - type: integer
      - type: boolean
      - type: string
    get_events_200_response_allOf_events_inner_oneOf_7:
      additionalProperties: false
      description: |
        Event sent to a user's clients when a property of the user's
        subscription to a channel has been updated. This event is used
        only for personal properties like `is_muted` or `pin_to_top`.
        See the [`stream op: update` event](/api/get-events#stream-update)
        for updates to global properties of a channel.
      example:
        op: update
        type: subscription
        property: pin_to_top
        value: true
        stream_id: 11
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - subscription
            type: string
        op:
          enum:
          - update
          type: string
        stream_id:
          description: |
            The ID of the channel whose subscription details have changed.
          type: integer
        property:
          description: |
            The property of the subscription which has changed. For details on the
            various subscription properties that a user can change, see
            [POST /users/me/subscriptions/properties](/api/update-subscription-settings).

            Clients should generally handle an unknown property received here without
            crashing, since that will naturally happen when connecting to a Zulip
            server running a new version that adds a new subscription property.

            **Changes**: As of Zulip 6.0 (feature level 139), updates to the `is_muted`
            property or the deprecated `in_home_view` property will send two `subscription`
            update events, one for each property, to support clients fully migrating to
            use the `is_muted` property. Prior to this feature level, updates to either
            property only sent one event with the deprecated `in_home_view` property.
          type: string
        value:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_7_value"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_8:
      additionalProperties: false
      description: |
        Event sent when another user subscribes to a channel, or their
        subscription is newly visible to the current user.

        When a user subscribes to a channel, the current user will receive this
        event only if they [have permission to see the channel's subscriber
        list](/help/channel-permissions). When the current user gains permission
        to see a given channel's subscriber list, they will receive this event
        for the existing subscriptions to the channel.

        **Changes**: Prior to Zulip 8.0 (feature level 220), this event was
        incorrectly not sent to guest users when subscribers to web-public
        channels and subscribed public channels changed.

        Prior to Zulip 8.0 (feature level 205), this event was not sent when
        a user gained access to a channel due to their [role
        changing](/help/user-roles).

        Prior to Zulip 6.0 (feature level 134), this event was not sent when a
        private channel was made public.

        In Zulip 4.0 (feature level 35), the singular `user_id` and `stream_id`
        integers included in this event were replaced with plural `user_ids` and
        `stream_ids` integer arrays.

        In Zulip 3.0 (feature level 19), the `stream_id` field was added to
        identify the channel the user subscribed to, replacing the `name` field.
      example:
        type: subscription
        op: peer_add
        stream_ids:
        - 9
        user_ids:
        - 12
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - subscription
            type: string
        op:
          enum:
          - peer_add
          type: string
        stream_ids:
          description: |
            The IDs of channels that have new or updated subscriber data.

            **Changes**: New in Zulip 4.0 (feature level 35), replacing
            the `stream_id` integer.
          items:
            type: integer
          type: array
        user_ids:
          description: |
            The IDs of the users who are newly visible as subscribed to
            the specified channels.

            **Changes**: New in Zulip 4.0 (feature level 35), replacing
            the `user_id` integer.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_9:
      additionalProperties: false
      description: |
        Event sent to other users when users have been unsubscribed
        from channels. Sent to all users if the channel is public or to only
        the existing subscribers if the channel is private.

        **Changes**: Prior to Zulip 8.0 (feature level 220), this event was
        incorrectly not sent to guest users when subscribers to web-public
        channels and subscribed public channels changed.

        In Zulip 4.0 (feature level 35), the singular `user_id` and
        `stream_id` integers included in this event were replaced
        with plural `user_ids` and `stream_ids` integer arrays.

        In Zulip 3.0 (feature level 19), the `stream_id` field was
        added to identify the channel the user unsubscribed from,
        replacing the `name` field.
      example:
        type: subscription
        op: peer_remove
        stream_ids:
        - 9
        user_ids:
        - 12
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - subscription
            type: string
        op:
          enum:
          - peer_remove
          type: string
        stream_ids:
          description: |
            The IDs of the channels from which the users have been
            unsubscribed from.

            When a user is deactivated, the server will send this event
            removing the user's subscriptions before the `realm_user` event
            for the user's deactivation.

            **Changes**: Before Zulip 10.0 (feature level 377), this event
            was not sent on user deactivation. Clients supporting older
            server versions and maintaining peer subscriber data need to
            remove all channel subscriptions for a user when processing the
            `realm_user` event with `op="remove"`.

            **Changes**: New in Zulip 4.0 (feature level 35), replacing
            the `stream_id` integer.
          items:
            type: integer
          type: array
        user_ids:
          description: |
            The IDs of the users who have been unsubscribed.

            **Changes**: New in Zulip 4.0 (feature level 35), replacing
            the `user_id` integer.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_10:
      additionalProperties: false
      description: |
        Event type for messages.

        **Changes**: In Zulip 3.1 (feature level 26), the
        `sender_short_name` field was removed from message
        objects.
      example:
        type: message
        message:
          id: 31
          sender_id: 10
          content: <p>First message ...<a href="user_uploads/2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt">zulip.txt</a></p>
          recipient_id: 23
          timestamp: 1594825416
          client: test suite
          subject: test
          topic_links: []
          is_me_message: false
          reactions: []
          submessages: []
          sender_full_name: King Hamlet
          sender_email: user10@zulip.testserver
          sender_realm_str: zulip
          display_recipient: Denmark
          type: stream
          stream_id: 1
          avatar_url: null
          content_type: text/html
        flags: []
        id: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - message
            type: string
        message:
          $ref: "#/components/schemas/MessagesEvent"
        flags:
          description: |
            The user's [message flags][message-flags] for the message.

            Clients should inspect the flags field rather than assuming that
            new messages are unread; [muted users](/api/mute-user), messages
            sent by the current user, and more subtle scenarios can result
            in a new message that the server has already marked as read for
            the user.

            **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned`
            flag was deprecated in favor of the `stream_wildcard_mentioned` and
            `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists
            for backwards compatibility with older clients and equals
            `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients
            supporting older server versions should treat this field as a previous
            name for the `stream_wildcard_mentioned` flag as topic wildcard mentions
            were not available prior to this feature level.

            [message-flags]: /api/update-message-flags#available-flags
          items:
            type: string
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_11:
      additionalProperties: false
      description: |
        Event sent to a user's clients when the user completes the OAuth flow
        for the [Zoom integration](/help/configure-call-provider). Clients need
        to know whether initiating Zoom OAuth is required before creating a Zoom
        call.
      example:
        type: has_zoom_token
        value: true
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - has_zoom_token
            type: string
        value:
          description: |
            A boolean specifying whether the user has zoom
            token or not.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_12:
      additionalProperties: false
      description: |
        A simple event sent when the set of invitations changes.
        This event is sent to organization administrators and the creator of
        the changed invitation; this tells clients they need to refetch
        data from `GET /invites` if they are displaying UI containing active
        invitations.

        **Changes**: Before Zulip 8.0 (feature level 209), this event was
        only sent to organization administrators.
      example:
        type: invites_changed
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - invites_changed
            type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_13:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when a new
        user joins or when a guest user gains access to a user.
        Processing this event is important to being able to display
        basic details on other users given only their ID.

        If the current user is a guest whose access to a newly created user
        is limited by a `can_access_all_users_group` policy, and the event
        queue was registered with the `user_list_incomplete` client
        capability, then the event queue will not receive an event for such
        a new user. If a newly created user is inaccessible to the current
        user via such a policy, but the client lacks `user_list_incomplete`
        client capability, then this event will be delivered to the queue,
        with an "Unknown user" object with the usual format but placeholder
        data whose only variable content is the user ID.

        **Changes**: Before Zulip 8.0 (feature level 232), the
        `user_list_incomplete` client capability did not exist, and so all
        clients whose access to a new user was prevented by
        `can_access_all_users_group` policy would receive a fake "Unknown
        user" event for such a user.

        Starting with Zulip 8.0 (feature level 228),
        this event is also sent when a guest user gains access to
        a user.
      example:
        type: realm_user
        op: add
        person:
          email: foo@zulip.com
          delivery_email: null
          user_id: 38
          avatar_version: 1
          is_admin: false
          is_owner: false
          is_guest: false
          role: 400
          is_bot: false
          full_name: full name
          timezone: ""
          is_active: true
          date_joined: 2020-07-15T15:04:02.030833+00:00
          avatar_url: https://secure.gravatar.com/avatar/c6b5578d4964bd9c5fae593c6868912a?d=identicon&version=1
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_user
            type: string
        op:
          enum:
          - add
          type: string
        person:
          $ref: "#/components/schemas/User"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_14_person:
      additionalProperties: false
      description: |
        Object containing details of the deactivated user.
      properties:
        user_id:
          description: |
            The ID of the deactivated user.
          type: integer
        full_name:
          deprecated: true
          description: |
            The full name of the user.

            **Deprecated**: We expect to remove this field in the future.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_14:
      additionalProperties: false
      description: |
        Event sent to guest users when they lose access to a user.

        **Changes**: As of Zulip 8.0 (feature level 228), this event is no
        longer deprecated.

        In Zulip 8.0 (feature level 222), this event was deprecated and no
        longer sent to clients. Prior to this feature level, it was sent to all
        users in a Zulip organization when a user was deactivated.
      example:
        type: realm_user
        op: remove
        person:
          user_id: 35
          full_name: Foo Bot
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_user
            type: string
        op:
          enum:
          - remove
          type: string
        person:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_14_person"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_15_presence_value:
      additionalProperties: false
      description: |
        `{client_name}`: Object containing the details of the user's
        presence.

        **Changes**: Starting with Zulip 7.0 (feature level 178), this
        will always be `"website"` as the server no longer stores which
        client submitted presence updates.

        Previously, the object key was the client's platform name, for
        example `website` or `ZulipDesktop`.
      properties:
        client:
          description: |
            The client's platform name.

            **Changes**: Starting with Zulip 7.0 (feature level 178), this
            will always be `"website"` as the server no longer stores which
            client submitted presence updates.
          type: string
        status:
          description: |
            The status of the user on this client. Will be either `idle`
            or `active`.
          enum:
          - idle
          - active
          type: string
        timestamp:
          description: |
            The UNIX timestamp of when this client sent the user's presence
            to the server with the precision of a second.
          type: integer
        pushable:
          description: |
            Whether the client is capable of showing mobile/push notifications
            to the user.

            **Changes**: Starting with Zulip 7.0 (feature level 178), this
            will always be `false` as the server no longer stores which
            client submitted presence updates.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_15:
      additionalProperties: false
      description: |
        Event sent to all users in an organization when a user comes back
        online after being offline for a while.

        In addition to handling these events, a client that wants to
        maintain presence data must poll the [main presence
        endpoint](https://zulip.com/api/get-presence). Most updates to
        presence data, refreshing the timestamps of users who are already
        online, do not appear in the event queue. This design is an
        optimization by allowing those updates to be batched up, because
        there is no urgency in the information that an already-online user
        is still online.

        These events are provided because when a user transitions from
        offline to online, that is information the client may want to show
        promptly in the UI to avoid showing a confusing state (for example,
        if the newly-online user sends a message or otherwise demonstrates
        they're online).

        If the client supports the `simplified_presence_events` [client
        capability](/api/register-queue#parameter-client_capabilities),
        these events will include the `presences` field, which provides the
        modified user's presence data in the modern format. Clients are
        strongly encouraged to implement this client capability, as legacy
        format support will be removed in a future release.

        If the `CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE` server-level
        setting is set to `true`, then the event is only sent to users
        who can access the user who came back online.

        **Changes**: Prior to Zulip 11.0 (feature level 419), the
        `simplified_presence_events` client capability did not exist.
        Therefore, all events were in the legacy format, and did not
        include the `presences` field.

        Prior to Zulip 8.0 (feature level 228), this event was sent to all
        users in the organization.
      example:
        type: presence
        user_id: 10
        email: user10@zulip.testserver
        server_timestamp: 1.5948254453200784E9
        presence:
          website:
            client: website
            status: idle
            timestamp: 1594825445
            pushable: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - presence
            type: string
        presences:
          additionalProperties:
            $ref: "#/components/schemas/ModernPresenceFormat"
          description: |
            Only present for clients that support the `simplified_presence_events`
            [client capability](/api/register-queue#parameter-client_capabilities).

            A dictionary mapping user IDs to the presence data (modern
            format) for the modified user(s). Clients should support
            updating multiple users in a single event.

            **Changes**: New in Zulip 11.0 (feature level 419).
          type: object
        user_id:
          description: |
            Not present for clients that support the `simplified_presence_events`
            [client capability](/api/register-queue#parameter-client_capabilities).

            The ID of the modified user.
          type: integer
        email:
          deprecated: true
          description: |
            Not present for clients that support the `simplified_presence_events`
            [client capability](/api/register-queue#parameter-client_capabilities).

            The Zulip API email of the user.

            **Deprecated**: This field will be removed in a future
            release as it is redundant with the `user_id`.
          type: string
        server_timestamp:
          description: |
            Not present for clients that support the `simplified_presence_events`
            [client capability](/api/register-queue#parameter-client_capabilities).

            The timestamp of when the Zulip server received the user's
            presence as a UNIX timestamp.
          type: number
        presence:
          additionalProperties:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_15_presence_value"
          description: |
            Not present for clients that support the `simplified_presence_events`
            [client capability](/api/register-queue#parameter-client_capabilities).

            Object containing the presence data (legacy format) of of the modified
            user.
          type: object
      type: object
    get_events_200_response_allOf_events_inner_oneOf_16:
      additionalProperties: false
      description: |
        Event sent when a new channel is created to users who can see
        the new channel exists (for private channels, only subscribers and
        organization administrators will receive this event).

        This event is also sent when a user gains access to a channel they
        previously [could not access](/help/channel-permissions), such as
        when their [role](/help/user-roles) changes, a
        private channel is made public, or a guest user is subscribed
        to a public (or private) channel.

        This event is also sent when a channel is unarchived but only
        to clients that did not declare the `archived_channels` [client
        capability][client-capabilities].

        Note that organization administrators who are not subscribed will
        not be able to see content on the channel; just that it exists.

        **Changes**: Prior to Zulip 11.0 (feature level 378), this
        event was sent to all the users who could see the channel when it
        was unarchived.

        Prior to Zulip 8.0 (feature level 220), this event was incorrectly
        not sent to guest users a web-public channel was created.

        Prior to Zulip 8.0 (feature level 205), this event was not sent
        when a user gained access to a channel due to their role changing.

        Prior to Zulip 8.0 (feature level 192), this event was not sent
        when guest users gained access to a public channel by being
        subscribed.

        Prior to Zulip 6.0 (feature level 134), this event was not sent
        when a private channel was made public.
      example:
        type: stream
        op: create
        streams:
        - name: private
          stream_id: 12
          is_archived: false
          description: ""
          rendered_description: ""
          date_created: 1691057093
          creator_id: 11
          invite_only: true
          is_web_public: false
          stream_post_policy: 1
          history_public_to_subscribers: false
          first_message_id: null
          folder_id: 1
          is_recently_active: true
          message_retention_days: null
          is_announcement_only: false
          can_add_subscribers_group: 2
          can_remove_subscribers_group: 2
          can_subscribe_group: 2
          stream_weekly_traffic: null
          subscriber_count: 0
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - stream
            type: string
        op:
          enum:
          - create
          type: string
        streams:
          description: |
            Array of objects, each containing
            details about the newly added channel(s).
          items:
            $ref: "#/components/schemas/BasicChannel"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_17_streams_inner:
      additionalProperties: false
      properties:
        stream_id:
          description: |
            ID of the deleted channel.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_17:
      additionalProperties: false
      description: |
        Event sent when a user loses access to a channel they previously
        [could access](/help/channel-permissions) because they are
        unsubscribed from a private channel or their [role](/help/user-roles)
        has changed.

        This event is also sent when a channel is archived but only
        to clients that did not declare the `archived_channels` [client
        capability][client-capabilities].

        **Changes**: Prior to Zulip 11.0 (feature level 378), this
        event was sent to all the users who could see the channel when it
        was archived.

        Prior to Zulip 8.0 (feature level 205), this event was not sent
        when a user lost access to a channel due to their role changing.

        [client-capabilities]: /api/register-queue#parameter-client_capabilities
      example:
        type: stream
        op: delete
        streams:
        - stream_id: 1
        - stream_id: 2
        stream_ids:
        - 1
        - 2
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - stream
            type: string
        op:
          enum:
          - delete
          type: string
        streams:
          deprecated: true
          description: |
            Array of objects, each containing ID of the channel that was deleted.

            **Changes**: **Deprecated** in Zulip 10.0 (feature level 343)
            and will be removed in a future release. Previously, these
            objects additionally contained all the standard fields for a
            channel object.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_17_streams_inner"
          type: array
        stream_ids:
          description: |
            Array containing the IDs of the channels that were deleted.

            **Changes**: New in Zulip 10.0 (feature level 343). Previously,
            these IDs were available only via the legacy `streams` array.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_18_value_oneOf:
      additionalProperties: false
      description: |
        If an object, it will be a [group-setting value][setting-values] with these fields:

        [setting-values]: /api/group-setting-values
      properties:
        direct_members:
          description: |
            The list of IDs of individual users in the collection of users with this permission.
          items:
            type: integer
          type: array
        direct_subgroups:
          description: |
            The list of IDs of the groups in the collection of users with this permission.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_18_value:
      description: |
        The new value of the changed property.

        **Changes**: Starting with Zulip 11.0 (feature level 389),
        this value can be `null` when a channel is removed from the folder.

        Starting with Zulip 10.0 (feature level 320), this
        field can be an object for `can_remove_subscribers_group` property,
        which is a [group-setting value][setting-values], when the setting
        is set to a combination of users and groups.

        [setting-values]: /api/group-setting-values
      oneOf:
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_18_value_oneOf"
      - type: integer
      - type: boolean
      - nullable: true
        type: string
    get_events_200_response_allOf_events_inner_oneOf_18:
      additionalProperties: false
      description: |
        Event sent to all users who can see that a channel exists
        when a property of that channel changes. See
        [GET /streams](/api/get-streams#response) response
        for details on the various properties of a channel.

        This event is also sent when archiving or unarchiving a
        channel to all the users who can see that channel exists
        but only to the clients that declared the `archived_channels`
        [client capability][client-capabilities].

        **Changes**: Prior to Zulip 11.0 (feature level 378),
        this event was never sent when archiving or unarchiving
        a channel.

        Before Zulip 9.0 (feature level 256), this event was never
        sent when the `first_message_id` property of a channel was
        updated because the oldest message that had been sent to it
        changed.

        [client-capabilities]: /api/register-queue#parameter-client_capabilities
      example:
        op: update
        type: stream
        property: invite_only
        value: true
        history_public_to_subscribers: true
        is_web_public: false
        stream_id: 11
        name: test
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - stream
            type: string
        op:
          enum:
          - update
          type: string
        stream_id:
          description: |
            The ID of the channel whose details have changed.
          type: integer
        name:
          description: |
            The name of the channel whose details have changed.
          type: string
        property:
          description: |
            The property of the channel which has changed. See
            [GET /streams](/api/get-streams#response) response for details
            on the various properties of a channel.

            Clients should handle an "unknown" property received here without
            crashing, since that can happen when connecting to a server running a
            newer version of Zulip with new features.
          type: string
        value:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_18_value"
        rendered_description:
          description: |
            Note: Only present if the changed property was `description`.

            The short description of the channel rendered as HTML, intended to
            be used when displaying the channel description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly. And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        history_public_to_subscribers:
          description: |
            Note: Only present if the changed property was `invite_only`.

            Whether the history of the channel is public to its subscribers.

            Currently always true for public channels (i.e. `"invite_only": false` implies
            `"history_public_to_subscribers": true`), but clients should not make that
            assumption, as we may change that behavior in the future.
          type: boolean
        is_web_public:
          description: |
            Note: Only present if the changed property was `invite_only`.

            Whether the channel's history is now readable by web-public spectators.

            **Changes**: New in Zulip 5.0 (feature level 71).
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_19:
      allOf:
      - $ref: "#/components/schemas/EmojiReactionEvent"
      - additionalProperties: false
        example:
          type: reaction
          op: add
          user_id: 10
          user:
            user_id: 10
            email: user10@zulip.testserver
            full_name: King Hamlet
          message_id: 32
          emoji_name: tada
          emoji_code: 1f389
          reaction_type: unicode_emoji
          id: 0
        properties:
          id:
            $ref: "#/components/schemas/EventIdSchema"
          type:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_19_allOf_type"
          op:
            enum:
            - add
            type: string
          message_id:
            description: |
              The ID of the message to which a reaction was
              added.
            type: integer
        type: object
      description: |
        Event sent when a reaction is added to a message.
        Sent to all users who were recipients of the message.
      type: object
    get_events_200_response_allOf_events_inner_oneOf_20:
      allOf:
      - $ref: "#/components/schemas/EmojiReactionEvent"
      - additionalProperties: false
        example:
          type: reaction
          op: remove
          user_id: 10
          user:
            user_id: 10
            email: user10@zulip.testserver
            full_name: King Hamlet
          message_id: 52
          emoji_name: tada
          emoji_code: 1f389
          reaction_type: unicode_emoji
          id: 0
        properties:
          id:
            $ref: "#/components/schemas/EventIdSchema"
          type:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_20_allOf_type"
          op:
            enum:
            - remove
            type: string
          message_id:
            description: |
              The ID of the message from which the reaction was
              removed.
            type: integer
        type: object
      description: |
        Event sent when a reaction is removed from a message.
        Sent to all users who were recipients of the message.
      type: object
    get_events_200_response_allOf_events_inner_oneOf_21:
      additionalProperties: false
      description: |
        Event sent to a user's clients when the user uploads a new file
        in a Zulip message. Useful to implement live update in UI showing all files
        the current user has uploaded.
      example:
        type: attachment
        op: add
        attachment:
          id: 1
          name: zulip.txt
          path_id: 2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt
          size: 6
          create_time: 1594825414000
          messages: []
        upload_space_used: 6
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - attachment
            type: string
        op:
          enum:
          - add
          type: string
        attachment:
          $ref: "#/components/schemas/Attachment"
        upload_space_used:
          description: |
            The total size of all files uploaded by in the organization,
            in bytes.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_22:
      additionalProperties: false
      description: |
        Event sent to a user's clients when details of a file that user
        uploaded are changed. Most updates will be changes in the list of
        messages that reference the uploaded file.
      example:
        type: attachment
        op: update
        attachment:
          id: 1
          name: zulip.txt
          path_id: 2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt
          size: 6
          create_time: 1594825414000
          messages: []
        upload_space_used: 6
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - attachment
            type: string
        op:
          enum:
          - update
          type: string
        attachment:
          $ref: "#/components/schemas/Attachment"
        upload_space_used:
          description: |
            The total size of all files uploaded by in the organization,
            in bytes.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_23_attachment:
      additionalProperties: false
      description: |
        Dictionary containing the ID of the deleted attachment.
      properties:
        id:
          description: |
            The ID of the deleted attachment.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_23:
      additionalProperties: false
      description: |
        Event sent to a user's clients when the user deletes a file
        they had uploaded. Useful primarily for UI showing all the files
        the current user has uploaded.
      example:
        type: attachment
        op: remove
        attachment:
          id: 1
        upload_space_used: 0
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - attachment
            type: string
        op:
          enum:
          - remove
          type: string
        attachment:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_23_attachment"
        upload_space_used:
          description: |
            The total size of all files uploaded by in the organization,
            in bytes.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_24:
      additionalProperties: false
      description: |
        Event sent to a user's clients when the metadata in the
        `push_devices` dictionary for the user changes.

        Helps clients to live-update the `push_devices` dictionary
        returned in [`POST /register`](/api/register-queue) response.

        **Changes**: New in Zulip 11.0 (feature level 406).
      example:
        id: 1
        type: push_device
        push_account_id: "1234"
        status: active
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - push_device
            type: string
        push_account_id:
          description: |
            The push account ID for this client registration.

            See [`POST /mobile_push/register`](/api/register-push-device)
            for details on push account IDs.
          type: string
        status:
          description: |
            The updated registration status. Will be `"active"`, `"failed"`, or
            `"pending"`.
          enum:
          - active
          - failed
          - pending
          type: string
        error_code:
          description: |
            If the status is `"failed"`, a [Zulip API error
            code](/api/rest-error-handling) indicating the type of failure that
            occurred.

            The following error codes have recommended client behavior:

            - `"INVALID_BOUNCER_PUBLIC_KEY"` - Inform the user to update app.
            - `"REQUEST_EXPIRED` - Retry with a fresh payload.
              If the status is "failed", an error code explaining the failure.
          nullable: true
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_25:
      additionalProperties: false
      description: |
        Event sent when a submessage is added to a message.

        Submessages are an **experimental** API used for widgets such as the
        `/poll` widget in Zulip.
      example:
        type: submessage
        msg_type: widget
        message_id: 970461
        submessage_id: 4737
        sender_id: 58
        content: "{\"type\":\"vote\",\"key\":\"58,1\",\"vote\":1}"
        id: 28
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - submessage
            type: string
        msg_type:
          description: |
            The type of the message.
          type: string
        content:
          description: |
            The new content of the submessage.
          type: string
        message_id:
          description: |
            The ID of the message to which the submessage has been added.
          type: integer
        sender_id:
          description: |
            The ID of the user who sent the message.
          type: integer
        submessage_id:
          description: |
            The ID of the submessage.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_26:
      additionalProperties: false
      description: |
        Event sent to all users who can access the modified
        user when the status of a user changes.

        **Changes**: Prior to Zulip 8.0 (feature level 228),
        this event was sent to all users in the organization.
      example:
        type: user_status
        user_id: 10
        away: true
        status_text: out to lunch
        emoji_name: car
        emoji_code: 1f697
        reaction_type: unicode_emoji
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_status
            type: string
        away:
          deprecated: true
          description: |
            Whether the user has marked themself "away" with this status.

            **Changes**: Deprecated in Zulip 6.0 (feature level 148);
            starting with that feature level, `away` is a legacy way to
            access the user's `presence_enabled` setting, with
            `away = !presence_enabled`. To be removed in a future release.
          type: boolean
        status_text:
          description: |
            The text content of the status message.

            This will be `""` for users who set a status without selecting
            or writing a message.
          type: string
        emoji_name:
          description: |
            The [emoji name](/api/update-status#parameter-emoji_name) for
            the emoji the user selected for their new status.

            This will be `""` for users who set a status without selecting
            an emoji.

            **Changes**: New in Zulip 5.0 (feature level 86).
          type: string
        emoji_code:
          description: |
            The [emoji code](/api/update-status#parameter-emoji_code) for
            the emoji the user selected for their new status.

            This will be `""` for users who set a status without selecting
            an emoji.

            **Changes**: New in Zulip 5.0 (feature level 86).
          type: string
        reaction_type:
          description: |
            The [emoji type](/api/update-status#parameter-reaction_type) for
            the emoji the user selected for their new status.

            This will be `""` for users who set a status without selecting
            an emoji.

            **Changes**: New in Zulip 5.0 (feature level 86).
          enum:
          - unicode_emoji
          - realm_emoji
          - zulip_extra_emoji
          type: string
        user_id:
          description: |
            The ID of the user whose status changed.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_27:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when new custom
        profile field types are configured for that Zulip organization.
      example:
        type: custom_profile_fields
        fields:
        - id: 1
          name: Phone number
          type: 1
          hint: ""
          field_data: ""
          order: 1
          required: true
          editable_by_user: true
        - id: 2
          name: Biography
          type: 2
          hint: What are you known for?
          field_data: ""
          order: 2
          required: true
          editable_by_user: true
        - id: 3
          name: Favorite food
          type: 1
          hint: "Or drink, if you'd prefer"
          field_data: ""
          order: 3
          required: false
          editable_by_user: true
        - id: 4
          name: Favorite editor
          type: 3
          hint: ""
          field_data: "{\"0\":{\"text\":\"Vim\",\"order\":\"1\"},\"1\":{\"text\":\"\
            Emacs\",\"order\":\"2\"}}"
          order: 4
          display_in_profile_summary: true
          required: true
          editable_by_user: true
        - id: 5
          name: Birthday
          type: 4
          hint: ""
          field_data: ""
          order: 5
          required: false
          editable_by_user: false
        - id: 6
          name: Favorite website
          type: 5
          hint: Or your personal blog's URL
          field_data: ""
          order: 6
          display_in_profile_summary: true
          required: false
          editable_by_user: true
        - id: 7
          name: Mentor
          type: 6
          hint: ""
          field_data: ""
          order: 7
          required: true
          editable_by_user: false
        - id: 8
          name: GitHub
          type: 7
          hint: Enter your GitHub username
          field_data: "{\"subtype\":\"github\"}"
          order: 8
          required: true
          editable_by_user: true
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - custom_profile_fields
            type: string
        fields:
          description: |
            An array of dictionaries where each dictionary contains
            details of a single new custom profile field for the Zulip
            organization.
          items:
            $ref: "#/components/schemas/CustomProfileField"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_28:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when an organization
        administrator changes the organization's configured default channel groups.

        Default channel groups are an **experimental** feature that is not yet
        stabilized.
      example:
        type: default_stream_groups
        default_stream_groups:
        - name: group1
          id: 2
          description: New description
          streams:
          - 3
          - 1
          - 5
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - default_stream_groups
            type: string
        default_stream_groups:
          description: |
            An array of dictionaries where each dictionary
            contains details about a single default channel group.
          items:
            $ref: "#/components/schemas/DefaultChannelGroup"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_29:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the
        default channels in the organization are changed by an
        organization administrator.
      example:
        type: default_streams
        default_streams:
        - 2
        - 3
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - default_streams
            type: string
        default_streams:
          description: |
            An array of IDs of all the [default channels](/help/set-default-streams-for-new-users)
            in the organization.

            **Changes**: Before Zulip 10.0 (feature level 330),
            we sent array of dictionaries where each dictionary
            contained details about a single default stream for
            the Zulip organization.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_30:
      additionalProperties: false
      description: |
        Event sent when a message has been deleted.

        Sent to all users who currently are subscribed to the
        messages' recipient. May also be sent to additional users
        who had access to it, including, in particular, an
        administrator user deleting messages in a stream that they
        are not subscribed to.

        This means that clients can assume that they will always
        receive an event of this type for deletions that the
        client itself initiated.

        This event is also sent when the user loses access to a message,
        such as when it is [moved to a channel][message-move-channel] that
        the user does not [have permission to access][channel-access].

        **Changes**: Before Zulip 9.0 (feature level 274), this
        event was only sent to subscribers of the message's recipient.

        Before Zulip 5.0 (feature level 77), events
        for direct messages contained additional `sender_id` and
        `recipient_id` fields.

        [message-move-channel]: /help/move-content-to-another-channel
        [channel-access]: /help/channel-permissions
      example:
        type: delete_message
        message_type: private
        message_id: 37
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - delete_message
            type: string
        message_ids:
          description: |
            Only present for clients that support the `bulk_message_deletion`
            [client capability][client-capabilities].

            A sorted list containing the IDs of the newly deleted messages.

            **Changes**: Before Zulip 11.0 (feature level 393), this list was
            not guaranteed to be sorted.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          items:
            type: integer
          type: array
        message_id:
          description: |
            Only present for clients that do not support the `bulk_message_deletion`
            [client capability][client-capabilities].

            The ID of the newly deleted message.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: integer
        message_type:
          description: |
            The type of message. Either `"stream"` or `"private"`.
          enum:
          - private
          - stream
          type: string
        stream_id:
          description: |
            Only present if `message_type` is `"stream"`.

            The ID of the channel to which the message was sent.
          type: integer
        topic:
          description: |
            Only present if `message_type` is `"stream"`.

            The topic to which the message was sent.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual topic name was empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner:
      oneOf:
      - type: string
      - type: integer
    get_events_200_response_allOf_events_inner_oneOf_31:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user's set of
        configured muted topics have changed.
      example:
        type: muted_topics
        muted_topics:
        - - Denmark
          - topic
          - 1594825442
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - muted_topics
            type: string
        muted_topics:
          deprecated: true
          description: |
            Array of tuples, where each tuple describes a muted topic.
            The first element of the tuple is the channel name in which the topic
            has to be muted, the second element is the topic name to be muted
            and the third element is an integer UNIX timestamp representing
            when the topic was muted.

            **Changes**: Deprecated in Zulip 6.0 (feature level
            134). Starting with this version, clients that explicitly
            requested the replacement `user_topic` event type when
            registering their event queue will not receive this legacy
            event type.

            Before Zulip 3.0 (feature level 1), the `muted_topics`
            array objects were 2-item tuples and did not include the timestamp
            information for when the topic was muted.
          items:
            items:
              $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner"
            type: array
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_32:
      additionalProperties: false
      description: |
        Event sent to a user's clients when the user mutes/unmutes
        a topic, or otherwise modifies their personal per-topic
        configuration.

        **Changes**: New in Zulip 6.0 (feature level 134). Previously,
        clients were notified about changes in muted topic
        configuration via the `muted_topics` event type.
      example:
        id: 1
        type: user_topic
        stream_id: 1
        topic_name: topic
        last_updated: 1594825442
        visibility_policy: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_topic
            type: string
        stream_id:
          description: |
            The ID of the channel to which the topic belongs.
          type: integer
        topic_name:
          description: |
            The name of the topic.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual topic name is empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        last_updated:
          description: |
            An integer UNIX timestamp representing when the user-topic
            relationship was last changed.
          type: integer
        visibility_policy:
          description: |
            An integer indicating the user's visibility
            preferences for the topic, such as whether the topic
            is muted.

            - 0 = None. Used to indicate that the user no
              longer has a special visibility policy for this topic.
            - 1 = Muted. Used to record [muted topics](/help/mute-a-topic).
            - 2 = Unmuted. Used to record unmuted topics.
            - 3 = Followed. Used to record [followed topics](/help/follow-a-topic).

            **Changes**: In Zulip 7.0 (feature level 219), added followed as
            a visibility policy option.

            In Zulip 7.0 (feature level 170), added unmuted as a visibility
            policy option.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_33_muted_users_inner:
      additionalProperties: false
      description: |
        Object containing the user ID and timestamp of a muted user.
      example:
        id: 9
        timestamp: 9
      properties:
        id:
          description: |
            The ID of the muted user.
          type: integer
        timestamp:
          description: |
            An integer UNIX timestamp representing when the user was muted.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_33:
      additionalProperties: false
      description: |
        Event sent to a user's clients when that user's set of
        configured [muted users](/api/mute-user) have changed.

        **Changes**: New in Zulip 4.0 (feature level 48).
      example:
        type: muted_users
        muted_users:
        - id: 1
          timestamp: 1594825442
        - id: 22
          timestamp: 1654865392
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - muted_users
            type: string
        muted_users:
          description: |
            A list of dictionaries where each dictionary describes
            a muted user.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_33_muted_users_inner"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_34:
      additionalProperties: false
      description: |
        Heartbeat events are sent by the server to avoid
        longpolling connections being affected by networks that
        kill idle HTTP connections.

        Clients do not need to do anything to process these
        events, beyond the common `last_event_id` accounting.
      example:
        type: heartbeat
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - heartbeat
            type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_35:
      additionalProperties: false
      description: |
        Event sent when the set of onboarding steps to show for the current user
        has changed (e.g. because the user dismissed one).

        Clients that feature a similar tutorial experience to the Zulip web app
        may want to handle these events.

        **Changes**: Before Zulip 8.0 (feature level 233), this event was named
        `hotspots`. Prior to this feature level, one-time notice onboarding
        steps were not supported.
      example:
        type: onboarding_steps
        onboarding_steps:
        - type: one_time_notice
          name: visibility_policy_banner
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - onboarding_steps
            type: string
        onboarding_steps:
          description: |
            An array of dictionaries where each dictionary contains details about a
            single onboarding step.

            **Changes**: Before Zulip 8.0 (feature level 233), this array was named
            `hotspots`. Prior to this feature level, one-time notice onboarding
            steps were not supported, and the `type` field in these objects did not
            exist as all onboarding steps were implicitly hotspots.
          items:
            $ref: "#/components/schemas/OnboardingStep"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_36_topic_links_inner:
      additionalProperties: false
      example:
        text: text
        url: url
      properties:
        text:
          description: |
            The original link text present in the topic.
          type: string
        url:
          description: |
            The expanded target url which the link points to.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_36:
      additionalProperties: false
      description: |
        Event sent when a message's content, topic and/or
        channel has been edited or when a message's content
        has a rendering update, such as for an
        [inline URL preview][inline-url-previews].
        Sent to all users who had received the original
        message.

        [inline-url-previews]: https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#inline-url-previews

        **Changes**: In Zulip 10.0 (feature level 284), removed the
        `prev_rendered_content_version` field as it is an internal
        server implementation detail not used by any client.
      example:
        type: update_message
        user_id: 10
        edit_timestamp: 1594825451
        message_id: 58
        stream_name: Verona
        orig_content: hello
        orig_rendered_content: <p>hello</p>
        content: new content
        rendered_content: <p>new content</p>
        is_me_message: false
        propagate_mode: change_all
        stream_id: 5
        orig_subject: test
        subject: new_topic
        topic_links: []
        message_ids:
        - 57
        - 58
        flags: []
        rendering_only: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - update_message
            type: string
        user_id:
          description: |
            The ID of the user who sent the message.

            Is `null` when event is for a rendering update of the original message,
            such as for an [inline URL preview][inline-url-previews].

            **Changes**: As of Zulip 5.0 (feature level 114), this field
            is present for all `update_message` events. Previously, this
            field was omitted for [inline URL preview][inline-url-previews]
            updates.
          nullable: true
          type: integer
        rendering_only:
          description: |
            Whether the event only updates the rendered content of the message.

            This field should be used by clients to determine if the event
            only provides a rendering update to the message content,
            such as for an [inline URL preview][inline-url-previews].
            When `true`, the event does not reflect a user-generated edit
            and does not modify the message history.

            **Changes**: New in Zulip 5.0 (feature level 114). Clients can
            correctly identify these rendering update event with earlier
            Zulip versions by checking whether the `user_id` field was omitted.
          type: boolean
        message_id:
          description: |
            The ID of the message which was edited or updated.

            This field should be used to apply content edits to the client's
            cached message history, or to apply rendered content updates.

            If the channel or topic was changed, the set of moved messages is
            encoded in the separate `message_ids` field, which is guaranteed
            to include `message_id`.
          type: integer
        message_ids:
          description: |
            A sorted list of IDs of messages to which any channel or topic
            changes encoded in this event should be applied.

            This list always includes `message_id`, even when there are no
            channel or topic changes to apply.

            These messages are guaranteed to have all been previously sent
            to channel `stream_id` with topic `orig_subject`, and have been
            moved to `new_stream_id` with topic `subject` (if those fields
            are present in the event).

            Clients processing these events should update all cached message
            history associated with the moved messages (including adjusting
            `unread_msgs` data structures, where the client may not have the
            message itself in its history) to reflect the new channel and
            topic.

            Content changes should be applied only to the single message
            indicated by `message_id`.

            **Changes**: Before Zulip 11.0 (feature level 393), this list
            was not guaranteed to be sorted.
          items:
            type: integer
          type: array
        flags:
          description: |
            The user's personal [message flags][message-flags] for the
            message with ID `message_id` following the edit.

            A client application should compare these to the original flags
            to identify cases where a mention or alert word was added by the
            edit.

            **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned`
            flag was deprecated in favor of the `stream_wildcard_mentioned` and
            `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists
            for backwards compatibility with older clients and equals
            `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients
            supporting older server versions should treat this field as a previous
            name for the `stream_wildcard_mentioned` flag as topic wildcard mentions
            were not available prior to this feature level.

            [message-flags]: /api/update-message-flags#available-flags
          items:
            type: string
          type: array
        edit_timestamp:
          description: |
            The time when this message edit operation was processed by the
            server.

            **Changes**: As of Zulip 5.0 (feature level 114), this field
            is present for all `update_message` events. Previously, this
            field was omitted for [inline URL preview][inline-url-previews]
            updates.
          type: integer
        stream_name:
          description: |
            Only present if the message was edited and originally sent to a channel.

            The name of the channel that the message was sent to. Clients
            are recommended to use the `stream_id` field instead.
          type: string
        stream_id:
          description: |
            Only present if the message was edited and originally sent to a channel.

            The pre-edit channel for all of the messages with IDs in
            `message_ids`.

            **Changes**: As of Zulip 5.0 (feature level 112), this field
            is present for all edits to a channel message. Previously, it
            was not present when only the content of the channel message was
            edited.
          type: integer
        new_stream_id:
          description: |
            Only present if message(s) were moved to a different channel.

            The post-edit channel for all of the messages with IDs in
            `message_ids`.
          type: integer
        propagate_mode:
          description: |
            Only present if this event moved messages to a different
            topic and/or channel.

            The choice the editing user made about which messages should be
            affected by a channel/topic edit:

            - `"change_one"`: Just change the one indicated in `message_id`.
            - `"change_later"`: Change messages in the same topic that had
              been sent after this one.
            - `"change_all"`: Change all messages in that topic.

            This parameter should be used to decide whether to change
            navigation and compose box state in response to the edit. For
            example, if the user was previously in topic narrow, and the
            topic was edited with `"change_later"` or `"change_all"`, the Zulip
            web app will automatically navigate to the new topic narrow.
            Similarly, a message being composed to the old topic should
            have its recipient changed to the new topic.

            This navigation makes it much more convenient to move content
            between topics without disruption or messages continuing
            to be sent to the pre-edit topic by accident.
          enum:
          - change_one
          - change_later
          - change_all
          type: string
        orig_subject:
          description: |
            Only present if this event moved messages to a different
            topic and/or channel.

            The pre-edit topic for all of the messages with IDs in
            `message_ids`.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual pre-edit topic name is empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        subject:
          description: |
            Only present if this event moved messages to a different topic;
            this field will not be present when moving messages to the same
            topic name in a different channel.

            The post-edit topic for all of the messages with IDs in
            `message_ids`.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual post-edit topic name is empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        topic_links:
          description: |
            Only present if this event moved messages to a different topic;
            this field will not be present when moving messages to the same
            topic name in a different channel.

            Data on any links to be included in the `topic`
            line (these are generated by
            [custom linkification filter](/help/add-a-custom-linkifier)
            that match content in the message's topic.), corresponding
            to the post-edit topic.

            **Changes**: This field contained a list of urls before
            Zulip 4.0 (feature level 46).

            New in Zulip 3.0 (feature level 1). Previously, this field
            was called `subject_links`; clients are recommended to
            rename `subject_links` to `topic_links` if present for
            compatibility with older Zulip servers.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_36_topic_links_inner"
          type: array
        orig_content:
          description: |
            Only present if this event changed the message content.

            The original content of the message with ID `message_id`
            immediately prior to this edit, in the original [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.
          type: string
        orig_rendered_content:
          description: |
            Only present if this event changed the message content.

            The original content of the message with ID `message_id`
            immediately prior to this edit, rendered as HTML.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        content:
          description: |
            Only present if this event changed the message content or
            updated the message content for an
            [inline URL preview][inline-url-previews].

            The new content of the message with ID `message_id`, in the
            original [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.
          type: string
        rendered_content:
          description: |
            Only present if this event changed the message content or
            updated the message content for an
            [inline URL preview][inline-url-previews].

            The new content of the message with ID `message_id`,
            rendered in HTML.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        is_me_message:
          description: |
            Only present if this event changed the message content.

            Whether the message with ID `message_id` is now a
            [/me status message][status-messages].

            [status-messages]: /help/format-your-message-using-markdown#status-messages
          type: boolean
      required:
      - edit_timestamp
      - flags
      - id
      - message_id
      - message_ids
      - rendering_only
      - type
      - user_id
      type: object
    get_events_200_response_allOf_events_inner_oneOf_37_sender:
      additionalProperties: false
      description: |
        Object describing the user who is typing the message.
      properties:
        user_id:
          description: |
            The user's ID.
          type: integer
        email:
          description: |
            The Zulip API email address for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_37_recipients_inner:
      additionalProperties: false
      description: |
        Object containing the user ID and Zulip API email of a recipient.
      properties:
        user_id:
          description: |
            The ID of the user.
          type: integer
        email:
          description: |
            The Zulip API email address for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_37:
      additionalProperties: false
      description: |
        Event sent when a user starts typing a message.

        Sent to all clients for users who would receive the
        message being typed, with the additional rule that typing
        notifications for channel messages are only sent to clients
        that included `stream_typing_notifications` in their
        [client capabilities][client-capabilities] when registering
        the event queue.

        See [POST /typing](/api/set-typing-status) endpoint for more details.

        **Changes**: Typing notifications for channel messages are new in
        Zulip 4.0 (feature level 58).

        [client-capabilities]: /api/register-queue#parameter-client_capabilities
      example:
        type: typing
        op: start
        message_type: direct
        sender:
          user_id: 10
          email: user10@zulip.testserver
        recipients:
        - user_id: 8
          email: user8@zulip.testserver
        - user_id: 10
          email: user10@zulip.testserver
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - typing
            type: string
        op:
          enum:
          - start
          type: string
        message_type:
          description: |
            Type of message being composed. Must be `"stream"` or `"direct"`.

            **Changes**: In Zulip 8.0 (feature level 215), replaced the
            value `"private"` with `"direct"`.

            New in Zulip 4.0 (feature level 58). Previously, all typing
            notifications were implicitly direct messages.
          enum:
          - direct
          - stream
          type: string
        sender:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_37_sender"
        recipients:
          description: |
            Only present if `message_type` is `"direct"`.

            Array of dictionaries describing the set of users who would be
            recipients of the message being typed. Each dictionary contains
            details about one of the recipients. The sending user is guaranteed
            to appear among the recipients.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_37_recipients_inner"
          type: array
        stream_id:
          description: |
            Only present if `message_type` is `"stream"`.

            The unique ID of the channel to which message is being typed.

            **Changes**: New in Zulip 4.0 (feature level 58). Previously,
            typing notifications were only for direct messages.
          type: integer
        topic:
          description: |
            Only present if `message_type` is `"stream"`.

            Topic within the channel where the message is being typed.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual topic name is empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            New in Zulip 4.0 (feature level 58). Previously, typing notifications
            were only for direct messages.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_38_sender:
      additionalProperties: false
      description: |
        Object describing the user who was previously typing the message.
      properties:
        user_id:
          description: |
            The user's ID.
          type: integer
        email:
          description: |
            The Zulip API email address for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_38_recipients_inner:
      additionalProperties: false
      description: |
        Object containing the user ID and email of a recipient.
      properties:
        user_id:
          description: |
            The ID of the user.
          type: integer
        email:
          description: |
            The Zulip API email address for the user.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_38:
      additionalProperties: false
      description: |
        Event sent when a user stops typing a message.

        Sent to all clients for users who would receive the message
        that was previously being typed, with the additional rule
        that typing notifications for channel messages are only sent to
        clients that included `stream_typing_notifications` in their
        [client capabilities][client-capabilities] when registering
        the event queue.

        See [POST /typing](/api/set-typing-status) endpoint for more details.

        **Changes**: Typing notifications for channel messages are new in
        Zulip 4.0 (feature level 58).

        [client-capabilities]: /api/register-queue#parameter-client_capabilities
      example:
        type: typing
        op: stop
        message_type: direct
        sender:
          user_id: 10
          email: user10@zulip.testserver
        recipients:
        - user_id: 8
          email: user8@zulip.testserver
        - user_id: 10
          email: user10@zulip.testserver
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - typing
            type: string
        op:
          enum:
          - stop
          type: string
        message_type:
          description: |
            Type of message being composed. Must be `"stream"` or `"direct"`.

            **Changes**: In Zulip 8.0 (feature level 215), replaced the
            value `"private"` with `"direct"`.

            New in Zulip 4.0 (feature level 58). Previously all typing
            notifications were implicitly direct messages.
          enum:
          - direct
          - stream
          type: string
        sender:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_38_sender"
        recipients:
          description: |
            Only present if `message_type` is `"direct"`.

            Array of dictionaries describing the set of users who would be
            recipients of the message that was previously being typed. Each
            dictionary contains details about one of the recipients. The
            sending user is guaranteed to appear among the recipients.
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_38_recipients_inner"
          type: array
        stream_id:
          description: |
            Only present if `message_type` is `"stream"`.

            The unique ID of the channel to which message is being typed.

            **Changes**: New in Zulip 4.0 (feature level 58). Previously,
            typing notifications were only for direct messages.
          type: integer
        topic:
          description: |
            Only present if `message_type` is `"stream"`.

            Topic within the channel where the message is being typed.

            **Changes**: New in Zulip 4.0 (feature level 58). Previously,
            typing notifications were only for direct messages.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_39_recipient:
      additionalProperties: false
      description: |
        Object containing details about recipients of message edit typing notification.
      properties:
        type:
          description: |
            Type of message being composed. Must be `"channel"` or `"direct"`.
          enum:
          - direct
          - channel
          type: string
        channel_id:
          description: |
            Only present if `type` is `"channel"`.

            The unique ID of the channel to which message is being edited.
          type: integer
        topic:
          description: |
            Only present if `type` is `"channel"`.

            Topic within the channel where the message is being edited.
          type: string
        user_ids:
          description: |
            Present only if `type` is `direct`.

            The user IDs of every recipient of this direct message.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_39:
      additionalProperties: false
      description: |
        Event sent when a user starts editing a message.
        Event sent when a user starts typing in a textarea to edit the
        content of a message. See the [edit message typing notifications
        endpoint](/api/set-typing-status-for-message-edit).

        Clients requesting `typing_edit_message` event type that have
        `receives_typing_notifications` enabled will receive this event if
        they would have been notified if the message's content edit were to
        be saved (E.g., because they were a direct message recipient or
        are a subscribe to the channel).

        **Changes**: New in Zulip 10.0 (feature level 351). Previously,
        typing notifications were not available when editing messages.
      example:
        type: typing_edit_message
        op: start
        sender_id: 10
        recipient:
          type: direct
          user_ids:
          - 8
          - 10
        message_id: 7
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - typing_edit_message
            type: string
        op:
          enum:
          - start
          type: string
        sender_id:
          description: |
            The ID of the user who is typing the edit of the
            message.

            Clients should be careful to display this user as the person who
            is typing, not that of the sender of the message, in case a
            collaborative editing feature be might be added in the future.
          type: integer
        message_id:
          description: |
            Indicates the message id of the message that is being edited.
          type: integer
        recipient:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_39_recipient"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_40:
      additionalProperties: false
      description: |
        Event sent when a user stops typing in a textarea to edit the
        content of a message. See the [edit message typing notifications
        endpoint](/api/set-typing-status-for-message-edit).

        Clients requesting `typing_edit_message` event type that have
        `receives_typing_notifications` enabled will receive this event if
        they would have been notified if the message's content edit were to
        be saved (E.g., because they were a direct message recipient or
        are a subscribe to the channel).

        **Changes**: New in Zulip 10.0 (feature level 351). Previously,
        typing notifications were not available when editing messages.
      example:
        type: typing_edit_message
        op: stop
        sender_id: 10
        message_id: 31
        recipient:
          type: direct
          user_ids:
          - 8
          - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - typing_edit_message
            type: string
        op:
          enum:
          - stop
          type: string
        sender_id:
          description: |
            The ID of the user who sent the message.
          type: integer
        message_id:
          description: |
            Indicates the message id of the message that is being edited.
          type: integer
        recipient:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_39_recipient"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_41:
      additionalProperties: false
      description: |
        Event sent to a user when [message flags][message-flags] are added
        to messages.

        This can reflect a direct user action, or can be the indirect
        consequence of another action. Whatever the cause, if there's a change
        in the set of message flags that the user has for a message, then an
        `update_message_flags` event will be sent with the change. Note
        that this applies when the user already had access to the message, and
        continues to have access to it. When a message newly appears or
        disappears, a [`message`][message-event] or
        [`delete_message`][message-delete] event is sent instead.

        Some examples of actions that trigger an `update_message_flags`
        event:

        - The `"starred"` flag is added when the user chooses to [star a
          message](/help/star-a-message).
        - The `"read"` flag is added when the user marks messages as read by
          scrolling through them, or uses [Mark all messages as read][all-read]
          on a conversation.
        - The `"read"` flag is added when the user [mutes](/help/mute-a-user) a
          message's sender.
        - The `"read"` flag is added after the user unsubscribes from a channel,
          or messages are moved to a not-subscribed channel, provided the user
          can still access the messages at all. Note a
          [`delete_message`][message-delete] event is sent in the case where the
          user can no longer access the messages.

        In some cases, a change in message flags that's caused by another change
        may happen a short while after the original change, rather than
        simultaneously. For example, when messages that were unread are moved to
        a channel where the user is not subscribed, the resulting change in
        message flags (and the corresponding `update_message_flags` event with
        flag `"read"`) may happen later than the message move itself. The delay
        in that example is typically at most a few hundred milliseconds and can
        in rare cases be minutes or longer.

        [message-flags]: /api/update-message-flags#available-flags
        [message-event]: /api/get-events#message
        [message-delete]: /api/get-events#delete_message
        [all-read]: /help/marking-messages-as-read#mark-messages-in-multiple-topics-and-channels-as-read
      example:
        type: update_message_flags
        op: add
        operation: add
        flag: starred
        messages:
        - 63
        all: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - update_message_flags
            type: string
        op:
          enum:
          - add
          type: string
        operation:
          deprecated: true
          description: |
            Old name for the `op` field in this event type.

            **Deprecated** in Zulip 4.0 (feature level 32), and
            replaced by the `op` field.
          enum:
          - add
          type: string
        flag:
          description: |
            The [flag][message-flags] that was added.
          type: string
        messages:
          description: |
            Array containing the IDs of all messages to which
            the flag was added.
          items:
            type: integer
          type: array
        all:
          description: |
            Whether the specified flag was added to all messages.
            This field is only relevant for the `"read"` flag, and
            will be `false` for all other flags.

            When `true` for the `"read"` flag, then the `messages`
            array will be empty.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_42_message_details_value:
      additionalProperties: false
      description: |
        `{message_id}`: Object containing details about the
        message with the specified ID.
      properties:
        type:
          description: |
            The type of this message. Either `"stream"` or `"private"`.
          enum:
          - private
          - stream
          type: string
        mentioned:
          description: |
            A flag which indicates whether the message contains a mention
            of the user.

            Present only if the message mentions the current user.
          type: boolean
        user_ids:
          description: |
            Present only if `type` is `private`.

            The user IDs of every recipient of this direct message, excluding yourself.
            Will be the empty list for a message you had sent to only yourself.
          items:
            type: integer
          type: array
        stream_id:
          description: |
            Present only if `type` is `"stream"`.

            The ID of the channel where the message was sent.
          type: integer
        topic:
          description: |
            Present only if `type` is `"stream"`.

            Name of the topic where the message was sent.

            For clients that don't support the `empty_topic_name` [client capability][client-capabilities],
            if the actual topic name is empty string, this field's value will instead
            be the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response.

            **Changes**: Before 10.0 (feature level 334), `empty_topic_name`
            client capability didn't exist and empty string as the topic name for
            channel messages wasn't allowed.

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        unmuted_stream_msg:
          deprecated: true
          description: |
            **Deprecated** internal implementation detail. Clients should
            ignore this field as it will be removed in the future.
          type: boolean
      required:
      - type
      type: object
    get_events_200_response_allOf_events_inner_oneOf_42:
      additionalProperties: false
      description: |
        Event sent to a user when [message flags][message-flags] are
        removed from messages.

        See the description for the [`update_message_flags` op:
        `add`](/api/get-events#update_message_flags-add) event for
        more details about these events.

        [message-flags]: /api/update-message-flags#available-flags
      example:
        type: update_message_flags
        op: remove
        operation: remove
        flag: starred
        messages:
        - 63
        message_details:
          "63":
            type: stream
            stream_id: 22
            topic: lunch
        all: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - update_message_flags
            type: string
        op:
          enum:
          - remove
          type: string
        operation:
          deprecated: true
          description: |
            Old name for the `op` field in this event type.

            **Deprecated** in Zulip 4.0 (feature level 32), and
            replaced by the `op` field.
          enum:
          - remove
          type: string
        flag:
          description: |
            The [flag][message-flags] to be removed.
          type: string
        messages:
          description: |
            Array containing the IDs of the messages from which the flag
            was removed.
          items:
            type: integer
          type: array
        all:
          deprecated: true
          description: |
            Will be `false` for all specified flags.

            **Deprecated** and will be removed in a future release.
          type: boolean
        message_details:
          additionalProperties:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_42_message_details_value"
          description: |
            Only present if the specified `flag` is `"read"`.

            A set of data structures describing the messages that
            are being marked as unread with additional details to
            allow clients to update the `unread_msgs` data
            structure for these messages (which may not be
            otherwise known to the client).

            **Changes**: New in Zulip 5.0 (feature level 121). Previously,
            marking already read messages as unread was not
            supported by the Zulip API.
          type: object
      type: object
    get_events_200_response_allOf_events_inner_oneOf_43:
      additionalProperties: false
      description: |
        Event sent to users in an organization when a [user group](/help/user-groups) is created.
      example:
        type: user_group
        op: add
        group:
          name: backend
          members:
          - 12
          creator_id: 9
          date_created: 1717484476
          description: Backend team
          id: 2
          is_system_group: false
          can_add_members_group: 16
          can_join_group: 16
          can_leave_group: 15
          can_manage_group: 16
          can_mention_group: 11
          can_remove_members_group: 16
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - add
          type: string
        group:
          $ref: "#/components/schemas/UserGroup"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_44_data:
      additionalProperties: false
      description: |
        Dictionary containing the changed details of the user group.
      properties:
        name:
          description: |
            The new name of the user group. Only present if the group's name changed.
          type: string
        description:
          description: |
            The new description of the group. Only present if the description
            changed.
          type: string
        can_add_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to add members to this group. Only present if this user
            group permission setting changed.

            **Changes**: New in Zulip 10.0 (feature level 305). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_join_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to join this group. Only present if this user group
            permission setting changed.

            **Changes**: New in Zulip 10.0 (feature level 301).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_leave_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to leave this group. Only present if this user group
            permission setting changed.

            **Changes**: New in Zulip 10.0 (feature level 308).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_manage_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [manage this group][manage-user-groups]. Only present
            if this user group permission setting changed.

            **Changes**: New in Zulip 10.0 (feature level 283).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [manage-user-groups]: /help/manage-user-groups
        can_mention_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [mention this user group][mentions]. Only present
            if this user group permission setting changed.

            **Changes**: Before Zulip 9.0 (feature level 258), this setting was
            always the integer form of a [group-setting value][setting-values].

            Before Zulip 8.0 (feature level 198), this setting was named
            `can_mention_group_id`.

            New in Zulip 8.0 (feature level 191). Previously, groups could be
            mentioned only if they were not [system groups][system-groups].

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [mentions]: /help/mention-a-user-or-group
        can_remove_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to remove members from this group. Only present if this
            user group permission setting changed.

            **Changes**: New in Zulip 10.0 (feature level 324). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        deactivated:
          description: |
            Whether the user group is deactivated. Deactivated groups
            cannot be used as a subgroup of another group or used for
            any other purpose.

            **Changes**: New in Zulip 10.0 (feature level 290).
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_44:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization
        when a property of a user group is changed.

        For group deactivation, this event is only sent
        if `include_deactivated_groups` client capability
        is set to `true`.

        This event is also sent when deactivating or reactivating
        a user for settings set to anonymous user groups which the
        user is direct member of. When deactivating the user, event
        is only sent to users who cannot access the deactivated user.

        **Changes**: Starting with Zulip 10.0 (feature level 303), this
        event can also be sent when deactivating or reactivating a user.

        Prior to Zulip 10.0 (feature level 294), this event was sent to
        all clients when a user group was deactivated.
      example:
        type: user_group
        op: update
        group_id: 2
        data:
          description: Mention this group to get the security team's attention.
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - update
          type: string
        group_id:
          description: |
            The ID of the user group whose details have changed.
          type: integer
        data:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_44_data"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_45:
      additionalProperties: false
      description: |
        Event sent to all users when users have been added to a user group.

        This event is also sent when reactivating a user for all the user
        groups the reactivated user was a member of before being deactivated.

        **Changes**: Starting with Zulip 10.0 (feature level 303), this
        event can also be sent when reactivating a user.
      example:
        type: user_group
        op: add_members
        group_id: 2
        user_ids:
        - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - add_members
          type: string
        group_id:
          description: |
            The ID of the user group with new members.
          type: integer
        user_ids:
          description: |
            Array containing the IDs of the users who have been added
            to the user group.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_46:
      additionalProperties: false
      description: |
        Event sent to all users when users have been removed from
        a user group.

        This event is also sent when deactivating a user, for all
        the user groups the deactivated user is a member of, but only
        to the users who cannot access the deactivated user.

        **Changes**: Starting with Zulip 10.0 (feature level 303),
        this event can also be sent when deactivating a user.
      example:
        type: user_group
        op: remove_members
        group_id: 2
        user_ids:
        - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - remove_members
          type: string
        group_id:
          description: |
            The ID of the user group whose details have changed.
          type: integer
        user_ids:
          description: |
            Array containing the IDs of the users who have been removed
            from the user group.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_47:
      additionalProperties: false
      description: |
        Event sent to all users when subgroups have been added to
        a user group.

        **Changes**: New in Zulip 6.0 (feature level 127).
      example:
        type: user_group
        op: add_subgroups
        group_id: 2
        direct_subgroup_ids:
        - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - add_subgroups
          type: string
        group_id:
          description: |
            The ID of the user group whose details have changed.
          type: integer
        direct_subgroup_ids:
          description: |
            Array containing the IDs of the subgroups that have been added
            to the user group.

            **Changes**: New in Zulip 6.0 (feature level 131).
            Previously, this was called `subgroup_ids`, but
            clients can ignore older events as this feature level
            predates subgroups being fully implemented.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_48:
      additionalProperties: false
      description: |
        Event sent to all users when subgroups have been removed from
        a user group.

        **Changes**: New in Zulip 6.0 (feature level 127).
      example:
        type: user_group
        op: remove_subgroups
        group_id: 2
        direct_subgroup_ids:
        - 10
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - remove_subgroups
          type: string
        group_id:
          description: |
            The ID of the user group whose details have changed.
          type: integer
        direct_subgroup_ids:
          description: |
            Array containing the IDs of the subgroups that have been
            removed from the user group.

            **Changes**: New in Zulip 6.0 (feature level 131).
            Previously, this was called `subgroup_ids`, but
            clients can ignore older events as this feature level
            predates subgroups being fully implemented.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_49:
      additionalProperties: false
      description: |
        Event sent when a user group is deactivated but only to clients
        with `include_deactivated_groups` client capability set to `false`.

        **Changes**: Prior to Zulip 10.0 (feature level 294), this
        event was sent when a user group was deleted.
      example:
        type: user_group
        op: remove
        group_id: 2
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - user_group
            type: string
        op:
          enum:
          - remove
          type: string
        group_id:
          description: |
            The ID of the group which has been deleted.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_50_realm_linkifiers_inner:
      additionalProperties: false
      properties:
        pattern:
          description: |
            The [Python regular expression](https://docs.python.org/3/howto/regex.html)
            that represents the pattern that should be linkified by this linkifier.
          type: string
        url_template:
          description: |
            The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html) compliant
            URL template to be used for linkifying matches.

            **Changes**: New in Zulip 7.0 (feature level 176). This replaced `url_format`,
            which contained a URL format string.
          type: string
        id:
          description: |
            The ID of the linkifier.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_50:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the
        set of configured [linkifiers](/help/add-a-custom-linkifier)
        for the organization has changed.

        Processing this event is important for doing Markdown local echo
        correctly.

        Clients will not receive this event unless the event queue is
        registered with the client capability
        `{"linkifier_url_template": true}`.
        See [`POST /register`](/api/register-queue#parameter-client_capabilities)
        for how client capabilities can be specified.

        **Changes**: Before Zulip 7.0 (feature level 176), the
        `linkifier_url_template` client capability was not required. The
        requirement was added because linkifiers were updated to contain
        a URL template instead of a URL format string, which was not a
        backwards-compatible change.

        New in Zulip 4.0 (feature level 54), replacing the deprecated
        `realm_filters` event type.
      example:
        type: realm_linkifiers
        realm_linkifiers:
        - pattern: "#(?P<id>[123])"
          url_template: "https://realm.com/my_realm_filter/{id}"
          id: 1
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_linkifiers
            type: string
        realm_linkifiers:
          description: |
            An ordered array of dictionaries where each dictionary contains
            details about a single linkifier.

            Clients should always process linkifiers in the order given;
            this is important if the realm has linkifiers with overlapping
            patterns. The order can be modified using [`PATCH
            /realm/linkifiers`](/api/reorder-linkifiers).
          items:
            $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_50_realm_linkifiers_inner"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_51_realm_filters_inner_inner:
      oneOf:
      - type: integer
      - type: string
    get_events_200_response_allOf_events_inner_oneOf_51:
      additionalProperties: false
      deprecated: true
      description: |
        Legacy event type that is no longer sent to clients. Previously, sent
        to all users in a Zulip organization when the set of configured
        [linkifiers](/help/add-a-custom-linkifier) for the organization was
        changed.

        **Changes**: Prior to Zulip 7.0 (feature level 176), this event type
        was sent to clients.

        **Deprecated** in Zulip 4.0 (feature level 54), and replaced by the
        `realm_linkifiers` event type, which has a clearer name and format.
      example:
        type: realm_filters
        realm_filters: []
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_filters
            type: string
        realm_filters:
          description: |
            An array of tuples, where each tuple described a linkifier. The first
            element of the tuple was a string regex pattern which represented the
            pattern to be linkified on matching, for example `"#(?P<id>[123])"`.
            The second element was the URL format string that the pattern should be
            linkified with. A URL format string for the above example would be
            `"https://realm.com/my_realm_filter/%(id)s"`. And the third element
            was the ID of the realm filter.
          items:
            items:
              $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_51_realm_filters_inner_inner"
            type: array
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_52:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the
        set of configured [code playgrounds](/help/code-blocks#code-playgrounds)
        for the organization has changed.

        **Changes**: New in Zulip 4.0 (feature level 49).
      example:
        type: realm_playgrounds
        realm_playgrounds:
        - id: 1
          name: Python playground
          pygments_language: Python
          url_template: https://python.example.com
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_playgrounds
            type: string
        realm_playgrounds:
          description: |
            An array of dictionaries where each dictionary contains
            data about a single playground entry.
          items:
            $ref: "#/components/schemas/RealmPlayground"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_53:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when
        a [custom emoji](/help/custom-emoji) has been updated,
        typically when a new emoji has been added or an old one
        has been deactivated. The event contains all custom emoji
        configured for the organization, not just the updated
        custom emoji.
      example:
        type: realm_emoji
        op: update
        realm_emoji:
          "2":
            id: "2"
            name: my_emoji
            source_url: /user_avatars/2/emoji/images/2.png
            deactivated: true
            author_id: 11
          "1":
            id: "1"
            name: green_tick
            source_url: /user_avatars/2/emoji/images/1.png
            deactivated: false
            author_id: 11
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_emoji
            type: string
        op:
          enum:
          - update
          type: string
        realm_emoji:
          additionalProperties:
            $ref: "#/components/schemas/RealmEmoji"
          description: |
            An object in which each key describes a realm emoji.
          type: object
      type: object
    get_events_200_response_allOf_events_inner_oneOf_54:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the set of
        [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)
        has changed.
      example:
        type: realm_domains
        op: add
        realm_domain:
          domain: zulip.org
          allow_subdomains: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_domains
            type: string
        op:
          enum:
          - add
          type: string
        realm_domain:
          $ref: "#/components/schemas/RealmDomain"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_55_realm_domain:
      additionalProperties: false
      description: |
        Object containing details of the edited domain.
      properties:
        domain:
          description: |
            The domain whose settings have changed.
          type: string
        allow_subdomains:
          description: |
            Whether subdomains are allowed for this domain.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_55:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the set of
        [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)
        has changed.
      example:
        type: realm_domains
        op: change
        realm_domain:
          domain: zulip.org
          allow_subdomains: true
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_domains
            type: string
        op:
          enum:
          - change
          type: string
        realm_domain:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_55_realm_domain"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_56:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the set of
        [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)
        has changed.
      example:
        type: realm_domains
        op: remove
        domain: zulip.org
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_domains
            type: string
        op:
          enum:
          - remove
          type: string
        domain:
          description: |
            The domain to be removed.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_57:
      additionalProperties: false
      description: |
        Event sent to the user who requested a
        [data export](/help/export-your-organization)
        when the status of the data export changes.
      example:
        type: realm_export
        exports:
        - id: 107
          export_time: 1.594825443656797E9
          acting_user_id: 10
          export_url: null
          deleted_timestamp: null
          failed_timestamp: 1.594825444436336E9
          pending: false
          export_type: 1
        id: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_export
            type: string
        exports:
          description: |
            An array of dictionaries where each dictionary contains
            details about a data export of the organization.

            **Changes**: Prior to Zulip 10.0 (feature level 304), `export_type`
            parameter was not present as only public data export was supported via API.
          items:
            $ref: "#/components/schemas/RealmExport"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_58:
      additionalProperties: false
      description: |
        Event sent to administrators when the [data export
        consent][help-export-consent] status for a user changes, whether due
        to a user changing their consent preferences or a user being created
        or reactivated (since user creation/activation events do not contain
        these data).

        [help-export-consent]: /help/export-your-organization#configure-whether-administrators-can-export-your-private-data

        **Changes**: New in Zulip 10.0 (feature level 312). Previously,
        there was not event available to administrators with these data.
      example:
        type: realm_export_consent
        user_id: 1
        consented: true
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_export_consent
            type: string
        user_id:
          description: |
            The ID of the user whose setting was changed.
          type: integer
        consented:
          description: |
            Whether the user has consented for their private data export.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_59:
      additionalProperties: false
      description: |
        Event sent to users who can administer a newly created bot
        user. Clients will also receive a `realm_user` event that
        contains basic details (but not the API key).

        The `realm_user` events are sufficient for clients that
        only need to interact with the bot; this `realm_bot` event
        type is relevant only for administering bots.

        Only organization administrators and the user who owns the bot will
        receive this event.
      example:
        type: realm_bot
        op: add
        bot:
          email: test-bot@zulip.testserver
          user_id: 36
          full_name: Foo Bot
          bot_type: 1
          is_active: true
          api_key: 6hc6MC9mpNFvoo0gSOWnZEq4aJEn8UNK
          default_sending_stream: null
          default_events_register_stream: null
          default_all_public_streams: false
          avatar_url: https://secure.gravatar.com/avatar/af8abc2537d283b212a6bd4d1289956d?d=identicon&version=1
          services: []
          owner_id: 10
        id: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_bot
            type: string
        op:
          enum:
          - add
          type: string
        bot:
          $ref: "#/components/schemas/Bot"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_60:
      additionalProperties: false
      description: |
        Event sent to users who can administer a bot user when the bot is
        configured. Clients may also receive a `realm_user` event that
        for changes in public data about the bot (name, etc.).

        The `realm_user` events are sufficient for clients that
        only need to interact with the bot; this `realm_bot` event
        type is relevant only for administering bots.

        Only organization administrators and the user who owns the bot will
        receive this event.
      example:
        type: realm_bot
        op: update
        bot:
          user_id: 37
          services:
          - base_url: http://hostname.domain2.com
            interface: 2
            token: grr8I2APXRmVL0FRTMRYAE4DRPQ5Wlaw
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_bot
            type: string
        op:
          enum:
          - update
          type: string
        bot:
          allOf:
          - $ref: "#/components/schemas/BasicBot"
          description: |
            Object containing details about the changed bot.
            It contains two properties: the user ID of the bot and
            the property to be changed. The changed property is one
            of the remaining properties listed below.
      type: object
    get_events_200_response_allOf_events_inner_oneOf_61_bot:
      additionalProperties: false
      description: |
        Object containing details about the deactivated bot.
      properties:
        user_id:
          description: |
            The user ID of the deactivated bot.
          type: integer
        full_name:
          description: |
            The full name of the deactivated bot.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_61:
      additionalProperties: false
      description: |
        Event sent to all users when a bot has been deactivated.

        **Changes**: Deprecated and no longer sent since Zulip 8.0 (feature level 222).

        Previously, this event was sent to all users in a Zulip organization when a
        bot was deactivated.
      example:
        type: realm_bot
        op: remove
        bot:
          user_id: 35
          full_name: Foo Bot
        id: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_bot
            type: string
        op:
          enum:
          - remove
          type: string
        bot:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_61_bot"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_62_bot:
      additionalProperties: false
      description: |
        Object containing details about the deactivated bot.
      properties:
        user_id:
          description: |
            The user ID of the deactivated bot.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_62:
      additionalProperties: false
      description: |
        Event sent to all users when a bot has been deactivated.
        Note that this is very similar to the bot_remove event
        and one of them will be removed soon.
      example:
        type: realm_bot
        op: delete
        bot:
          user_id: 35
        id: 1
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_bot
            type: string
        op:
          enum:
          - delete
          type: string
        bot:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_62_bot"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_63_value:
      description: |
        The new value of the property.
      oneOf:
      - type: string
      - type: boolean
      - nullable: true
        type: integer
    get_events_200_response_allOf_events_inner_oneOf_63:
      additionalProperties: false
      description: |
        The simpler of two possible event types sent to all users
        in a Zulip organization when the configuration of the
        organization (realm) has changed.

        Often individual settings are migrated from this format to
        the [realm/update_dict](#realm-update_dict) event format when additional realm
        settings are added whose values are coupled to each other
        in some way. The specific values supported by this event
        type are documented in the [realm/update_dict](#realm-update_dict)
        documentation.

        A correct client implementation should convert these
        events into the corresponding [realm/update_dict](#realm-update_dict)
        event and then process that.

        **Changes**: Removed `extra_data` optional property in Zulip 10.0
        (feature level 306). The `extra_data` used to include an
        `upload_quota` field when changed property was `plan_type`. The
        server now sends a standard `realm/update_dict` event for plan
        changes.
      example:
        type: realm
        op: update
        property: disallow_disposable_email_addresses
        value: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm
            type: string
        op:
          enum:
          - update
          type: string
        property:
          description: |
            The name of the property that was changed.
          type: string
        value:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_63_value"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_64:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the
        organization (realm) is deactivated. Its main purpose is to
        flush active longpolling connections so clients can immediately
        show the organization as deactivated.

        Clients cannot rely on receiving this event, because they will
        no longer be able to authenticate to the Zulip API due to the
        deactivation, and thus can miss it if they did not have an active
        longpolling connection at the moment of deactivation.

        Correct handling of realm deactivations requires that clients
        parse authentication errors from GET /events; if that is done
        correctly, the client can ignore this event type and rely on its
        handling of the `GET /events` request it will do immediately
        after processing this batch of events.
      example:
        type: realm
        op: deactivated
        realm_id: 2
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm
            type: string
        op:
          enum:
          - deactivated
          type: string
        realm_id:
          description: |
            The ID of the deactivated realm.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_65:
      additionalProperties: false
      description: |
        Event sent to all the users whenever the Zulip server restarts.

        Specifically, this event is sent whenever the Tornado process
        for the user is restarted; in particular, this will always happen
        when the Zulip server is upgraded.

        Clients should use this event to update their tracking of the
        server's capabilities, and to decide if they wish to get a new
        event queue after a server upgrade. Clients doing so must
        implement a random delay strategy to spread such restarts over 5
        minutes or more to avoid creating a synchronized thundering herd
        effect.

        **Changes**: Removed the `immediate` flag, which was only used by
        web clients in development, in Zulip 9.0 (feature level 240).
      example:
        id: 0
        server_generation: 1619334181
        type: restart
        zulip_feature_level: 57
        zulip_version: 5.0-dev-1650-gc3fd37755f
        zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - restart
            type: string
        zulip_version:
          description: |
            The Zulip version number, in the format where this appears
            in the [server_settings](/api/get-server-settings) and
            [register](/api/register-queue) responses.

            **Changes**: New in Zulip 4.0 (feature level 59).
          type: string
        zulip_merge_base:
          description: |
            The Zulip merge base number, in the format where this appears
            in the [server_settings](/api/get-server-settings) and
            [register](/api/register-queue) responses.

            **Changes**: New in Zulip 5.0 (feature level 88).
          type: string
        zulip_feature_level:
          description: |
            The [Zulip feature level](/api/changelog) of the server
            after the restart.

            Clients should use this to update their tracking of the
            server's capabilities, and may choose to refetch their state
            and create a new event queue when the API feature level has
            changed in a way that the client finds significant. Clients
            choosing to do so must implement a random delay strategy to
            spread such restarts over 5 or more minutes to avoid creating
            a synchronized thundering herd effect.

            **Changes**: New in Zulip 4.0 (feature level 59).
          type: integer
        server_generation:
          description: |
            The timestamp at which the server started.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_66:
      additionalProperties: false
      description: |
        An event which signals the official Zulip web/desktop app to update,
        by reloading the page and fetching a new queue; this will generally
        follow a `restart` event. Clients which do not obtain their code
        from the server (e.g. mobile and terminal clients, which store their
        code locally) should ignore this event.

        Clients choosing to reload the application must implement a random
        delay strategy to spread such restarts over 5 or more minutes to
        avoid creating a synchronized thundering herd effect.

        **Changes**: New in Zulip 9.0 (feature level 240).
      example:
        id: 0
        type: web_reload_client
        immediate: true
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - web_reload_client
            type: string
        immediate:
          description: |
            Whether the client should fetch a new event queue immediately,
            rather than using a backoff strategy to avoid thundering herds.
            A Zulip development server uses this parameter to reload
            clients immediately.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_67_data:
      additionalProperties: false
      description: |
        An object containing the properties that have changed.

        **Changes**: In Zulip 10.0 (feature level 316), `edit_topic_policy`
        property was removed and replaced by `can_move_messages_between_topics_group`
        realm setting.

        In Zulip 7.0 (feature level 183), the
        `community_topic_editing_limit_seconds` property was removed.
        It was documented as potentially returned as a changed property
        in this event, but in fact it was only ever returned in the
        [`POST /register`](/api/register-queue) response.

        Before Zulip 6.0 (feature level 150), on changing any of
        `allow_message_editing`, `message_content_edit_limit_seconds`, or
        `edit_topic_policy` settings, this object included all the three settings
        irrespective of which of these settings were changed. Now, a separate event
        is sent for each changed setting.
      properties:
        allow_message_editing:
          description: |
            Whether this organization's [message edit policy][config-message-editing]
            allows editing the content of messages.

            See [`PATCH /messages/{message_id}`](/api/update-message) for details and
            history of how message editing permissions work.

            [config-message-editing]: /help/restrict-message-editing-and-deletion
          type: boolean
        authentication_methods:
          additionalProperties:
            $ref: "#/components/schemas/RealmAuthenticationMethod"
          description: |
            Dictionary of authentication method keys mapped to dictionaries that
            describe the properties of the named authentication method for the
            organization - its enabled status and availability for use by the
            organization.

            Clients should use this to implement server-settings UI to change which
            methods are enabled for the organization. For authentication UI itself,
            clients should use the pre-authentication metadata returned by
            [`GET /server_settings`](/api/get-server-settings).

            **Changes**: In Zulip 9.0 (feature level 243), the values in this
            dictionary were changed. Previously, the values were a simple boolean
            indicating whether the backend is enabled or not.
          type: object
        can_access_all_users_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the
            set of users who are allowed to access all users in the
            organization.

            **Changes**: Prior to Zulip 10.0 (feature level 314), this value used
            to be of type integer and did not accept anonymous user groups.

            New in Zulip 8.0 (feature level 225).
        can_create_groups:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create user
            groups in this organization.

            **Changes**: New in Zulip 10.0 (feature level 299). Previously
            `user_group_edit_policy` field used to control the permission
            to create user groups.
        can_create_bots_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create all types of bot users
            in the organization. See also `can_create_write_only_bots_group`.

            **Changes**: New in Zulip 10.0 (feature level 344). Previously, this
            permission was controlled by the enum `bot_creation_policy`. Values
            were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
        can_create_write_only_bots_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create bot users that
            can only send messages in the organization, i.e. incoming webhooks,
            in addition to the users who are present in `can_create_bots_group`.

            **Changes**: New in Zulip 10.0 (feature level 344). Previously, this
            permission was controlled by the enum `bot_creation_policy`. Values
            were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
        can_create_public_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create public
            channels in this organization.

            **Changes**: New in Zulip 9.0 (feature level 264). Previously
            `realm_create_public_stream_policy` field used to control the
            permission to create public channels.
        can_create_private_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create private
            channels in this organization.

            **Changes**: New in Zulip 9.0 (feature level 266). Previously
            `realm_create_private_stream_policy` field used to control the
            permission to create private channels.
        can_create_web_public_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to create web-public
            channels in this organization.

            **Changes**: New in Zulip 10.0 (feature level 280). Previously
            `realm_create_web_public_stream_policy` field used to control
            the permission to create web-public channels.
        can_add_custom_emoji_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to add custom emoji in the organization.

            **Changes**: New in Zulip 10.0 (feature level 307). Previously, this
            permission was controlled by the enum `add_custom_emoji_policy`. Values
            were 1=Members, 2=Admins, 3=Full members, 4=Moderators.

            Before Zulip 5.0 (feature level 85), the `realm_add_emoji_by_admins_only`
            boolean setting controlled this permission; `true` corresponded to `Admins`,
            and `false` to `Everyone`.
        can_add_subscribers_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to add subscribers to channels in the organization.

            **Changes**: New in Zulip 10.0 (feature level 341). Previously, this
            permission was controlled by the enum `invite_to_stream_policy`. Values
            were 1=Members, 2=Admins, 3=Full members, 4=Moderators.
        can_delete_any_message_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to delete any message in the organization.

            **Changes**: New in Zulip 10.0 (feature level 281). Previously, this
            permission was limited to administrators only and was uneditable.
        can_delete_own_message_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to delete messages that they have sent in the
            organization.

            **Changes**: New in Zulip 10.0 (feature level 291). Previously, this
            permission was controlled by the enum `delete_own_message_policy`. Values
            were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone.

            Before Zulip 5.0 (feature level 101), the `allow_message_deleting` boolean
            setting controlled this permission; `true` corresponded to `Everyone`, and
            `false` to `Admins`.
        can_set_delete_message_policy_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to change per-channel `can_delete_any_message_group`
            and `can_delete_own_message_group` permission settings. Note that the user
            must be a member of both this group and the `can_administer_channel_group`
            of the channel whose message delete settings they want to change.

            Organization administrators can always change these settings of
            every channel.

            **Changes**: New in Zulip 11.0 (feature level 407).
        can_set_topics_policy_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to change per-channel `topics_policy` setting. Note that
            the user must be a member of both this group and the `can_administer_channel_group`
            of the channel whose `topics_policy` they want to change.

            Organization administrators can always change the `topics_policy` setting of
            every channel.

            **Changes**: New in Zulip 11.0 (feature level 392).
        can_invite_users_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to send email invitations for inviting other users
            to the organization.

            **Changes**: New in Zulip 10.0 (feature level 321). Previously, this
            permission was controlled by the enum `invite_to_realm_policy`. Values
            were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.

            Before Zulip 4.0 (feature level 50), the `invite_by_admins_only` boolean
            setting controlled this permission; `true` corresponded to `Admins`, and
            `false` to `Members`.
        can_mention_many_users_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to use wildcard mentions in large channels.

            All users will receive a warning/reminder when using mentions in large
            channels, even when permitted to do so.

            **Changes**: New in Zulip 10.0 (feature level 352). Previously, this
            permission was controlled by the enum `wildcard_mention_policy`.
        can_move_messages_between_channels_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to move messages from one channel to another
            in the organization.

            **Changes**: New in Zulip 10.0 (feature level 310). Previously, this
            permission was controlled by the enum `move_messages_between_streams_policy`.
            Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.

            In Zulip 7.0 (feature level 159), `Nobody` was added as an option to
            `move_messages_between_streams_policy` enum.
        can_move_messages_between_topics_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to move messages from one topic to another
            within a channel in the organization.

            **Changes**: New in Zulip 10.0 (feature level 316). Previously, this
            permission was controlled by the enum `edit_topic_policy`. Values were
            1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone, 6=Nobody.

            In Zulip 7.0 (feature level 159), `Nobody` was added as an option to
            `edit_topic_policy` enum.
        can_resolve_topics_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining
            the set of users who have permission to [resolve topics](/help/resolve-a-topic)
            in the organization.

            **Changes**: New in Zulip 10.0 (feature level 367). Previously, permission to
            resolve topics was controlled by the more general
            can_move_messages_between_topics_group permission for moving messages.
        can_manage_all_groups:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values)
            defining the set of users who have permission to
            administer all existing groups in this organization.

            **Changes**: Prior to Zulip 10.0 (feature level 305), only users who
            were a member of the group or had the moderator role or above could
            exercise the permission on a given group.

            New in Zulip 10.0 (feature level 299). Previously the
            `user_group_edit_policy` field controlled the permission
            to manage user groups. Valid values were as follows:

            - 1 = All members can create and edit user groups
            - 2 = Only organization administrators can create and edit
              user groups
            - 3 = Only [full members][calc-full-member] can create and
              edit user groups.
            - 4 = Only organization administrators and moderators can
              create and edit user groups.

            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
        can_manage_billing_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to manage plans and billing in the organization.

            **Changes**: New in Zulip 10.0 (feature level 363). Previously, only owners
            and users with `is_billing_admin` property set to `true` were allowed to
            manage plans and billing.
        can_summarize_topics_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the
            set of users who are allowed to use AI summarization.

            **Changes**: New in Zulip 10.0 (feature level 350).
        create_multiuse_invite_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the
            set of users who are allowed to create [reusable invitation
            links](/help/invite-new-users#create-a-reusable-invitation-link)
            to the organization.

            **Changes**: Prior to Zulip 10.0 (feature level 314), this value used
            to be of type integer and did not accept anonymous user groups.

            New in Zulip 8.0 (feature level 209).
        default_code_block_language:
          description: |
            The default pygments language code to be used for code blocks in this
            organization. If an empty string, no default has been set.

            **Changes**: Prior to Zulip 8.0 (feature level 195), a server bug meant
            that both `null` and an empty string could represent that no default was
            set for this realm setting in the [`POST /register`](/api/register-queue)
            response. The documentation for both that endpoint and this event
            incorrectly stated that the only representation for no default language
            was `null`. This event in fact uses the empty string to indicate that no
            default has been set in all server versions.
          type: string
        default_language:
          description: |
            The default language for the organization.
          type: string
        description:
          description: |
            The description of the organization, used on login and registration pages.
          type: string
        digest_emails_enabled:
          description: |
            Whether the organization has enabled [weekly digest emails](/help/digest-emails).
          type: boolean
        digest_weekday:
          description: |
            The day of the week when the organization will send
            its weekly digest email to inactive users.
          type: integer
        direct_message_initiator_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to start a new direct message conversation
            involving other non-bot users. Users who are outside this group and attempt
            to send the first direct message to a given collection of recipient users
            will receive an error, unless all other recipients are bots or the sender.

            **Changes**: New in Zulip 9.0 (feature level 270).

            Previously, access to send direct messages was controlled by the
            `private_message_policy` realm setting, which supported values of
            1 (enabled) and 2 (disabled).
        direct_message_permission_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value](/api/group-setting-values) defining the set of
            users who have permission to fully use direct messages. Users outside
            this group can only send direct messages to conversations where all the
            recipients are in this group, are bots, or are the sender, ensuring that
            every direct message conversation will be visible to at least one user in
            this group.

            **Changes**: New in Zulip 9.0 (feature level 270).

            Previously, access to send direct messages was controlled by the
            `private_message_policy` realm setting, which supported values of
            1 (enabled) and 2 (disabled).
        disallow_disposable_email_addresses:
          description: |
            Whether the organization disallows disposable email
            addresses.
          type: boolean
        email_changes_disabled:
          description: |
            Whether users are allowed to change their own email address in this
            organization. This is typically disabled for organizations that
            synchronize accounts from LDAP or a similar corporate database.
          type: boolean
        enable_read_receipts:
          description: |
            Whether read receipts is enabled in the organization or not.

            If disabled, read receipt data will be unavailable to clients, regardless
            of individual users' personal read receipt settings. See also the
            `send_read_receipts` setting within `realm_user_settings_defaults`.

            **Changes**: New in Zulip 6.0 (feature level 137).
          type: boolean
        emails_restricted_to_domains:
          description: |
            Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions)
            this organization are required to have an email
            address in one of the `realm_domains` configured for the organization.
          type: boolean
        enable_guest_user_dm_warning:
          description: |
            Whether clients should show a warning when a user is composing
            a DM to a guest user in this organization.

            **Changes**: New in Zulip 10.0 (feature level 348).
          type: boolean
        enable_guest_user_indicator:
          description: |
            Whether clients should display "(guest)" after the names of
            guest users to prominently highlight their status.

            **Changes**: New in Zulip 8.0 (feature level 216).
          type: boolean
        enable_spectator_access:
          description: |
            Whether web-public channels are enabled in this organization.

            Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED`
            [server setting][server-settings] is enabled on the Zulip
            server. See also the `can_create_web_public_channel_group`
            realm setting.

            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html

            **Changes**: New in Zulip 5.0 (feature level 109).
          type: boolean
        giphy_rating:
          description: |
            Maximum rating of the GIFs that will be retrieved from GIPHY.

            **Changes**: New in Zulip 4.0 (feature level 55).
          type: integer
        icon_source:
          description: |
            String indicating whether the organization's
            [profile icon](/help/create-your-organization-profile) was uploaded
            by a user or is the default. Useful for UI allowing editing the organization's icon.

            - "G" means generated by Gravatar (the default).
            - "U" means uploaded by an organization administrator.
          type: string
        icon_url:
          description: |
            The URL of the organization's [profile icon](/help/create-your-organization-profile).
          type: string
        inline_image_preview:
          description: |
            Whether this organization has been configured to enable
            [previews of linked images](/help/image-video-and-website-previews).
          type: boolean
        inline_url_embed_preview:
          description: |
            Whether this organization has been configured to enable
            [previews of linked websites](/help/image-video-and-website-previews).
          type: boolean
        invite_required:
          description: |
            Whether an invitation is required to join this organization.
          type: boolean
        jitsi_server_url:
          description: |
            The URL of the custom Jitsi Meet server configured in this organization's
            settings.

            `null`, the default, means that the organization is using the should use the
            server-level configuration, `server_jitsi_server_url`.

            **Changes**: New in Zulip 8.0 (feature level 212). Previously, this was only
            available as a server-level configuration, and required a server restart to
            change.
          nullable: true
          type: string
        logo_source:
          description: |
            String indicating whether the organization's
            [profile wide logo](/help/create-your-organization-profile) was uploaded
            by a user or is the default. Useful for UI allowing editing the
            organization's wide logo.

            - "D" means the logo is the default Zulip logo.
            - "U" means uploaded by an organization administrator.
          type: string
        logo_url:
          description: |
            The URL of the organization's wide logo configured in the
            [organization profile](/help/create-your-organization-profile).
          type: string
        topics_policy:
          description: |
            The organization's default policy for sending channel messages to the
            [empty "general chat" topic](/help/general-chat-topic).

            - `"allow_empty_topic"`: Channel messages can be sent to the empty topic.
            - `"disable_empty_topic"`: Channel messages cannot be sent to the empty topic.

            **Changes**: New in Zulip 11.0 (feature level 392). Previously, this was
            controlled by the boolean realm `mandatory_topics` setting, which is now
            deprecated.
          enum:
          - allow_empty_topic
          - disable_empty_topic
          type: string
        mandatory_topics:
          deprecated: true
          description: |
            Whether [topics are required](/help/require-topics) for messages in this
            organization.

            **Changes**: Deprecated in Zulip 11.0 (feature level 392). This is now
            controlled by the realm `topics_policy` setting.
          type: boolean
        max_file_upload_size_mib:
          description: |
            The new maximum file size that can be uploaded to this Zulip organization.

            **Changes**: New in Zulip 10.0 (feature level 306). Previously, this field of
            the core state did not support being updated via the events system, as it was
            typically hardcoded for a given Zulip installation.
          type: integer
        message_content_allowed_in_email_notifications:
          description: |
            Whether notification emails in this organization are allowed to
            contain Zulip the message content, or simply indicate that a new
            message was sent.
          type: boolean
        message_content_delete_limit_seconds:
          description: |
            Messages sent more than this many seconds ago cannot be deleted
            with this organization's
            [message deletion policy](/help/restrict-message-editing-and-deletion).

            Will not be 0. A `null` value means no limit: messages can be deleted
            regardless of how long ago they were sent.

            **Changes**: No limit was represented using the
            special value `0` before Zulip 5.0 (feature level 100).
          nullable: true
          type: integer
        message_content_edit_limit_seconds:
          description: |
            Messages sent more than this many seconds ago cannot be edited
            with this organization's
            [message edit policy](/help/restrict-message-editing-and-deletion).

            Will not be `0`. A `null` value means no limit, so messages can be edited
            regardless of how long ago they were sent.

            See [`PATCH /messages/{message_id}`](/api/update-message) for details and
            history of how message editing permissions work.

            **Changes**: Before Zulip 6.0 (feature level 138), no limit was
            represented using the special value `0`.
          nullable: true
          type: integer
        message_edit_history_visibility_policy:
          description: |
            Which type of message edit history is configured to allow users to
            access [message edit history](/help/view-a-messages-edit-history).

            - "all" = All edit history is visible.
            - "moves" = Only moves are visible.
            - "none" = No edit history is visible.

            **Changes**: New in Zulip 10.0 (feature level 358), replacing the previous
            `allow_edit_history` boolean setting; `true` corresponds to `all`,
            and `false` to `none`.
          type: string
        moderation_request_channel_id:
          description: |
            The ID of the private channel to which messages flagged by users for
            moderation are sent. Moderators can use this channel to review and
            act on reported content.

            Will be `-1` if moderation requests are disabled.

            Clients should check whether moderation requests are disabled to
            determine whether to present a "report message" feature in their UI
            within a given organization.

            **Changes**: New in Zulip 10.0 (feature level 331). Previously,
            no "report message" features existed in Zulip.
          type: integer
        move_messages_within_stream_limit_seconds:
          description: |
            Messages sent more than this many seconds ago cannot be moved within a
            channel to another topic by users who have permission to do so based on this
            organization's [topic edit policy](/help/restrict-moving-messages). This
            setting does not affect moderators and administrators.

            Will not be `0`. A `null` value means no limit, so message topics can be
            edited regardless of how long ago they were sent.

            See [`PATCH /messages/{message_id}`](/api/update-message) for details and
            history of how message editing permissions work.

            **Changes**: New in Zulip 7.0 (feature level 162). Previously, this time
            limit was always 72 hours for users who were not administrators or
            moderators.
          nullable: true
          type: integer
        move_messages_between_streams_limit_seconds:
          description: |
            Messages sent more than this many seconds ago cannot be moved between
            channels by users who have permission to do so based on this organization's
            [message move policy](/help/restrict-moving-messages). This setting does
            not affect moderators and administrators.

            Will not be `0`. A `null` value means no limit, so messages can be moved
            regardless of how long ago they were sent.

            See [`PATCH /messages/{message_id}`](/api/update-message) for details and
            history of how message editing permissions work.

            **Changes**: New in Zulip 7.0 (feature level 162). Previously, there was
            no time limit for moving messages between channels for users with permission
            to do so.
          nullable: true
          type: integer
        name:
          description: |
            The name of the organization, used in login pages etc.
          type: string
        name_changes_disabled:
          description: |
            Indicates whether users are
            [allowed to change](/help/restrict-name-and-email-changes) their name
            via the Zulip UI in this organization. Typically disabled
            in organizations syncing this type of account information from
            an external user database like LDAP.
          type: boolean
        night_logo_source:
          description: |
            String indicating whether the organization's dark theme
            [profile wide logo](/help/create-your-organization-profile) was uploaded
            by a user or is the default. Useful for UI allowing editing the
            organization's wide logo.

            - "D" means the logo is the default Zulip logo.
            - "U" means uploaded by an organization administrator.
          type: string
        night_logo_url:
          description: |
            The URL of the organization's dark theme wide-format logo configured in the
            [organization profile](/help/create-your-organization-profile).
          type: string
        new_stream_announcements_stream_id:
          description: |
            The ID of the channel to which automated messages announcing the
            [creation of new channels][new-channel-announce] are sent.

            Will be `-1` if such automated messages are disabled.

            Since these automated messages are sent by the server, this field is
            primarily relevant to clients containing UI for changing it.

            [new-channel-announce]: /help/configure-automated-notices#new-channel-announcements

            **Changes**: In Zulip 9.0 (feature level 241), renamed `notifications_stream_id`
            to `new_stream_announcements_stream_id`.
          type: integer
        org_type:
          description: |
            The [organization type](/help/organization-type)
            for the realm.

            - 0 = Unspecified
            - 10 = Business
            - 20 = Open-source project
            - 30 = Education (non-profit)
            - 35 = Education (for-profit)
            - 40 = Research
            - 50 = Event or conference
            - 60 = Non-profit (registered)
            - 70 = Government
            - 80 = Political group
            - 90 = Community
            - 100 = Personal
            - 1000 = Other

            **Changes**: New in Zulip 6.0 (feature level 128).
          type: integer
        plan_type:
          description: |
            The plan type of the organization.

            - 1 = Self-hosted organization (SELF_HOSTED)
            - 2 = Zulip Cloud free plan (LIMITED)
            - 3 = Zulip Cloud Standard plan (STANDARD)
            - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
          type: integer
        presence_disabled:
          description: |
            Whether online presence of other users is shown in this
            organization.
          type: boolean
        push_notifications_enabled:
          description: |
            Whether push notifications are enabled for this organization. Typically
            `true` for Zulip Cloud and self-hosted realms that have a valid
            registration for the [Mobile push notifications
            service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html),
            and `false` for self-hosted servers that do not.

            **Changes**: New in Zulip 8.0 (feature level 231).
            Previously, this value was never updated via events.
          type: boolean
        push_notifications_enabled_end_timestamp:
          description: |
            If the server expects the realm's push notifications access to end at a
            definite time in the future, the time at which this is expected to happen.
            Mobile clients should use this field to display warnings to users when the
            indicated timestamp is near.

            **Changes**: New in Zulip 8.0 (feature level 231).
          nullable: true
          type: integer
        require_e2ee_push_notifications:
          description: |
            Whether this realm is configured to disallow sending mobile
            push notifications with message content through the legacy
            mobile push notifications APIs. The new API uses end-to-end
            encryption to protect message content and metadata from
            being accessible to the push bouncer service, APNs, and
            FCM. Clients that support the new E2EE API will use it
            automatically regardless of this setting.

            If `true`, mobile push notifications sent to clients that
            lack support for E2EE push notifications will always have
            "New message" as their content. Note that these legacy
            mobile notifications will still contain metadata, which may
            include the message's ID, the sender's name, email address,
            and avatar.

            In a future release, once the official mobile apps have
            implemented fully validated their E2EE protocol support,
            this setting will become strict, and disable the legacy
            protocol entirely.

            **Changes**: New in Zulip 11.0 (feature level 409). Previously,
            this behavior was available only via the
            `PUSH_NOTIFICATION_REDACT_CONTENT` global server setting.
          type: boolean
        require_unique_names:
          description: |
            Indicates whether the organization is configured to require users to have
            unique full names. If true, the server will reject attempts to create a
            new user, or change the name of an existing user, where doing so would
            lead to two users whose names are identical modulo case and unicode
            normalization.

            **Changes**: New in Zulip 9.0 (feature level 246). Previously, the Zulip
            server could not be configured to enforce unique names.
          type: boolean
        send_welcome_emails:
          description: |
            Whether or not this organization is configured to send the standard Zulip
            [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
          type: boolean
        signup_announcements_stream_id:
          description: |
            The ID of the channel to which automated messages announcing
            that [new users have joined the organization][new-user-announce] are sent.

            Will be `-1` if such automated messages are disabled.

            Since these automated messages are sent by the server, this field is
            primarily relevant to clients containing UI for changing it.

            [new-user-announce]: /help/configure-automated-notices#new-user-announcements

            **Changes**: In Zulip 9.0 (feature level 241), renamed
            `signup_notifications_stream_id` to `signup_announcements_stream_id`.
          type: integer
        upload_quota_mib:
          description: |
            The new upload quota for the Zulip organization.

            If `null`, there is no limit.

            **Changes**: New in Zulip 10.0 (feature level 306). Previously,
            this was present changed via an `upload_quota` field in `extra_data` property
            of [realm/update](#realm-update) event format for `plan_type` events.
          nullable: true
          type: integer
        video_chat_provider:
          description: |
            The configured [video call provider](/help/configure-call-provider) for the
            organization.

            - 0 = None
            - 1 = Jitsi Meet
            - 3 = Zoom (User OAuth integration)
            - 4 = BigBlueButton
            - 5 = Zoom (Server to Server OAuth integration)

            Note that only one of the [Zoom integrations][zoom-video-calls] can
            be configured on a Zulip server.

            **Changes**: In Zulip 10.0 (feature level 353), added the Zoom Server
            to Server OAuth option.

            In Zulip 3.0 (feature level 1), added the None option
            to disable video call UI.

            [zoom-video-calls]: https://zulip.readthedocs.io/en/latest/production/video-calls.html#zoom
          type: integer
        waiting_period_threshold:
          description: |
            Members whose accounts have been created at least this many days ago
            will be treated as [full members][calc-full-member]
            for the purpose of settings that restrict access to new members.

            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
          type: integer
        want_advertise_in_communities_directory:
          description: |
            Whether the organization has given permission to be advertised in the
            Zulip [communities directory](/help/communities-directory).

            **Changes**: New in Zulip 6.0 (feature level 129).
          type: boolean
        welcome_message_custom_text:
          description: |
            This organization's configured custom message for Welcome Bot
            to send to new user accounts, in Zulip Markdown format.

            Maximum length is 8000 characters.

            **Changes**: New in Zulip 11.0 (feature level 416).
          type: string
        zulip_update_announcements_stream_id:
          description: |
            The ID of the channel to which automated messages announcing
            new features or other end-user updates about the Zulip software are sent.

            Will be `-1` if such automated messages are disabled.

            Since these automated messages are sent by the server, this field is
            primarily relevant to clients containing UI for changing it.

            **Changes**: New in Zulip 9.0 (feature level 242).
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_67:
      additionalProperties: false
      description: |
        The more general of two event types that may be used when
        sending an event to all users in a Zulip organization when
        the configuration of the organization (realm) has changed.

        Unlike the simpler [realm/update](#realm-update) event format, this
        event type supports multiple properties being changed in a
        single event.

        This event is also sent when deactivating or reactivating a user
        for settings set to anonymous user groups which the user is direct
        member of. When deactivating the user, event is only sent to users
        who cannot access the deactivated user.

        **Changes**: Starting with Zulip 10.0 (feature level 303), this
        event can also be sent when deactivating or reactivating a user.

        In Zulip 7.0 (feature level 163), the realm setting
        `email_address_visibility` was removed. It was replaced by a [user
        setting](/api/update-settings#parameter-email_address_visibility) with
        a [realm user default][user-defaults], with the encoding of different
        values preserved. Clients can support all versions by supporting the
        current API and treating every user as having the realm's
        `email_address_visibility` value.

        [user-defaults]: /api/update-realm-user-settings-defaults#parameter-email_address_visibility
      example:
        type: realm
        op: update_dict
        property: default
        data:
          message_content_edit_limit_seconds: 600
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm
            type: string
        op:
          enum:
          - update_dict
          type: string
        property:
          deprecated: true
          description: |
            Always `"default"`. Present for backwards-compatibility with older
            clients that predate the `update_dict` event style.

            **Deprecated** and will be removed in a future release.
          type: string
        data:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_67_data"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_68_value:
      description: |
        The new value of the property.
      oneOf:
      - type: boolean
      - type: integer
      - type: string
    get_events_200_response_allOf_events_inner_oneOf_68:
      additionalProperties: false
      description: |
        Event sent to all users in a Zulip organization when the
        [default settings for new users][new-user-defaults]
        of the organization (realm) have changed.

        [new-user-defaults]: /help/configure-default-new-user-settings

        See [PATCH /realm/user_settings_defaults](/api/update-realm-user-settings-defaults)
        for details on possible properties.

        **Changes**: New in Zulip 5.0 (feature level 95).
      example:
        type: realm_user_settings_defaults
        op: update
        property: left_side_userlist
        value: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - realm_user_settings_defaults
            type: string
        op:
          enum:
          - update
          type: string
        property:
          description: |
            The name of the property that was changed.
          type: string
        value:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_68_value"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_69:
      additionalProperties: false
      description: |
        Event containing details of newly created drafts.
      example:
        type: drafts
        op: add
        drafts:
        - id: 17
          type: private
          to:
          - 6
          topic: ""
          content: Hello there!
          timestamp: 15954790200
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - drafts
            type: string
        op:
          enum:
          - add
          type: string
        drafts:
          description: |
            An array containing objects for the newly created drafts.
          items:
            $ref: "#/components/schemas/Draft"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_70:
      additionalProperties: false
      description: |
        Event containing details for an edited draft.
      example:
        type: drafts
        op: update
        draft:
          id: 17
          type: private
          to:
          - 6
          - 7
          - 8
          - 9
          - 10
          topic: ""
          content: Hello everyone!
          timestamp: 15954790200
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - drafts
            type: string
        op:
          enum:
          - update
          type: string
        draft:
          $ref: "#/components/schemas/Draft"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_71:
      additionalProperties: false
      description: |
        Event containing the ID of a deleted draft.
      example:
        type: drafts
        op: remove
        draft_id: 17
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - drafts
            type: string
        op:
          enum:
          - remove
          type: string
        draft_id:
          description: |
            The ID of the draft that was just deleted.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_72:
      additionalProperties: false
      description: |
        Event containing details of a newly configured navigation view.

        **Changes**: New in Zulip 11.0 (feature level 390).
      example:
        type: navigation_view
        op: add
        navigation_view:
          fragment: narrow/is/alerted
          is_pinned: true
          name: Alert Words
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - navigation_view
            type: string
        op:
          enum:
          - add
          type: string
        navigation_view:
          $ref: "#/components/schemas/NavigationView"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_73_data:
      additionalProperties: false
      description: |
        A dictionary containing the updated properties of the navigation view.
      properties:
        name:
          description: |
            The user-facing name for custom navigation views. Omit this field for built-in views.
          nullable: true
          type: string
        is_pinned:
          description: |
            Determines whether the view is pinned (true) or hidden in the menu (false).
          nullable: true
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_73:
      additionalProperties: false
      description: |
        Event containing details of an update to an existing navigation view.

        **Changes**: New in Zulip 11.0 (feature level 390).
      example:
        type: navigation_view
        op: update
        fragment: narrow/is/alerted
        data:
          is_pinned: false
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - navigation_view
            type: string
        op:
          enum:
          - update
          type: string
        fragment:
          description: |
            The unique URL hash of the navigation view being updated.
          type: string
        data:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_73_data"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_74:
      additionalProperties: false
      description: |
        Event containing the fragment of a deleted navigation view.

        **Changes**: New in Zulip 11.0 (feature level 390).
      example:
        type: navigation_view
        op: remove
        fragment: narrow/is/mentioned
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - navigation_view
            type: string
        op:
          enum:
          - remove
          type: string
        fragment:
          description: |
            The unique URL hash of the navigation view that was just deleted.
          type: string
      type: object
    get_events_200_response_allOf_events_inner_oneOf_75:
      additionalProperties: false
      description: |
        Event containing details of a newly created saved snippet.

        **Changes**: New in Zulip 10.0 (feature level 297).
      example:
        type: saved_snippets
        op: add
        saved_snippet:
          id: 1
          title: Example
          content: Welcome to the organization.
          date_created: 1681662420
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - saved_snippets
            type: string
        op:
          enum:
          - add
          type: string
        saved_snippet:
          $ref: "#/components/schemas/SavedSnippet"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_76:
      additionalProperties: false
      description: |
        Event containing details of the edited saved snippet.

        Clients should update the existing saved snippet with the
        ID provided in the `saved_snippet` object.

        **Changes**: New in Zulip 10.0 (feature level 368).
      example:
        type: saved_snippets
        op: update
        saved_snippet:
          id: 1
          title: Example
          content: Welcome to the organization.
          date_created: 1681662420
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - saved_snippets
            type: string
        op:
          enum:
          - update
          type: string
        saved_snippet:
          $ref: "#/components/schemas/SavedSnippet"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_77:
      additionalProperties: false
      description: |
        Event containing the ID of a deleted saved snippet.

        **Changes**: New in Zulip 10.0 (feature level 297).
      example:
        type: saved_snippets
        op: remove
        saved_snippet_id: 17
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - saved_snippets
            type: string
        op:
          enum:
          - remove
          type: string
        saved_snippet_id:
          description: |
            The ID of the saved snippet that was just deleted.

            **Changes**: New in Zulip 10.0 (feature level 297).
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_78:
      additionalProperties: false
      description: |
        Event sent to a user's clients when a reminder is scheduled.

        **Changes**: New in Zulip 11.0 (feature level 399).
      example:
        type: reminders
        op: add
        reminders:
        - reminder_id: 17
          type: private
          to:
          - 6
          content: Hello there!
          rendered_content: <p>Hello there!</p>
          scheduled_delivery_timestamp: 1681662420
          failed: false
          reminder_target_message_id: 42
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - reminders
            type: string
        op:
          enum:
          - add
          type: string
        reminders:
          description: |
            An array of objects containing details of the newly created
            reminders.
          items:
            $ref: "#/components/schemas/Reminder"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_79:
      additionalProperties: false
      description: |
        Event sent to a user's clients when a reminder
        is deleted.

        **Changes**: New in Zulip 11.0 (feature level 399).
      example:
        type: reminders
        op: remove
        reminder_id: 17
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - reminders
            type: string
        op:
          enum:
          - remove
          type: string
        reminder_id:
          description: |
            The ID of the reminder that was deleted.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_80:
      additionalProperties: false
      description: |
        Event sent to a user's clients when scheduled messages
        are created.

        **Changes**: New in Zulip 7.0 (feature level 179).
      example:
        type: scheduled_messages
        op: add
        scheduled_messages:
        - scheduled_message_id: 17
          type: private
          to:
          - 6
          content: Hello there!
          rendered_content: <p>Hello there!</p>
          scheduled_delivery_timestamp: 1681662420
          failed: false
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - scheduled_messages
            type: string
        op:
          enum:
          - add
          type: string
        scheduled_messages:
          description: |
            An array of objects containing details of the newly created
            scheduled messages.
          items:
            $ref: "#/components/schemas/ScheduledMessage"
          type: array
      type: object
    get_events_200_response_allOf_events_inner_oneOf_81:
      additionalProperties: false
      description: |
        Event sent to a user's clients when a scheduled message
        is edited.

        **Changes**: New in Zulip 7.0 (feature level 179).
      example:
        type: scheduled_messages
        op: update
        scheduled_message:
          scheduled_message_id: 17
          type: private
          to:
          - 6
          content: Hello there!
          rendered_content: <p>Hello there!</p>
          scheduled_delivery_timestamp: 1681662420
          failed: false
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - scheduled_messages
            type: string
        op:
          enum:
          - update
          type: string
        scheduled_message:
          $ref: "#/components/schemas/ScheduledMessage"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_82:
      additionalProperties: false
      description: |
        Event sent to a user's clients when a scheduled message
        is deleted.

        **Changes**: New in Zulip 7.0 (feature level 179).
      example:
        type: scheduled_messages
        op: remove
        scheduled_message_id: 17
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - scheduled_messages
            type: string
        op:
          enum:
          - remove
          type: string
        scheduled_message_id:
          description: |
            The ID of the scheduled message that was deleted.
          type: integer
      type: object
    get_events_200_response_allOf_events_inner_oneOf_83:
      additionalProperties: false
      description: |
        Event sent to users in an organization when a channel folder is created.

        **Changes**: New in Zulip 11.0 (feature level 389).
      example:
        type: channel_folder
        op: add
        channel_folder:
          name: fronted
          creator_id: 9
          date_created: 1717484476
          description: Channels for frontend discussions
          rendered_description: <p>Channels for frontend discussions</p>
          order: 1
          id: 2
          is_archived: false
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - channel_folder
            type: string
        op:
          enum:
          - add
          type: string
        channel_folder:
          $ref: "#/components/schemas/ChannelFolder"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_84_data:
      additionalProperties: false
      description: |
        Dictionary containing the changed details of the channel folder.
      properties:
        name:
          description: |
            The new name of the channel folder. Only present if the channel
            folder's name changed.
          type: string
        description:
          description: |
            The new description of the channel folder. Only present if the
            description changed.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        rendered_description:
          description: |
            The new rendered description of the channel folder. Only present
            if the description changed.
          type: string
        is_archived:
          description: |
            Whether the channel folder is archived or not. Only present if
            the channel folder is archived or unarchived.
          type: boolean
      type: object
    get_events_200_response_allOf_events_inner_oneOf_84:
      additionalProperties: false
      description: |
        Event sent to users in an organization when a channel folder is updated.

        **Changes**: New in Zulip 11.0 (feature level 389).
      example:
        type: channel_folder
        op: update
        data:
          name: New frontend
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - channel_folder
            type: string
        op:
          enum:
          - update
          type: string
        channel_folder_id:
          description: |
            ID of the updated channel folder.
          type: number
        data:
          $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_84_data"
      type: object
    get_events_200_response_allOf_events_inner_oneOf_85:
      additionalProperties: false
      description: |
        Event sent to users in an organization when channel folders are reordered.

        **Changes**: New in Zulip 11.0 (feature level 418).
      example:
        type: channel_folder
        op: reorder
        order:
        - 3
        - 1
        - 2
        id: 0
      properties:
        id:
          description: |
            The ID of the event. Events appear in increasing order but may not be consecutive.
          type: integer
        type:
          allOf:
          - $ref: "#/components/schemas/EventTypeSchema"
          - enum:
            - channel_folder
            type: string
        op:
          enum:
          - reorder
          type: string
        order:
          description: |
            A list of channel folder IDs representing the new order.
          items:
            type: integer
          type: array
      type: object
    get_events_200_response_allOf_events_inner:
      oneOf:
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_1"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_2"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_3"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_4"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_5"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_6"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_7"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_8"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_9"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_10"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_11"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_12"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_13"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_14"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_15"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_16"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_17"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_18"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_19"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_20"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_21"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_22"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_23"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_24"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_25"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_26"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_27"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_28"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_29"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_30"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_31"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_32"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_33"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_34"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_35"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_36"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_37"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_38"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_39"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_40"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_41"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_42"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_43"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_44"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_45"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_46"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_47"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_48"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_49"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_50"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_51"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_52"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_53"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_54"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_55"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_56"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_57"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_58"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_59"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_60"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_61"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_62"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_63"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_64"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_65"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_66"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_67"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_68"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_69"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_70"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_71"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_72"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_73"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_74"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_75"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_76"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_77"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_78"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_79"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_80"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_81"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_82"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_83"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_84"
      - $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_85"
    get_events_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          queue_id: fb67bf8a-c031-47cc-84cf-ed80accacda8
          events:
          - id: 0
            message:
              avatar_url: https://url/for/othello-bots/avatar
              client: website
              content: "I come not, friends, to steal away your hearts."
              content_type: text/x-markdown
              display_recipient: Denmark
              id: 12345678
              recipient_id: 12314
              sender_email: othello-bot@example.com
              sender_full_name: Othello Bot
              sender_id: 13215
              sender_realm_str: example
              topic_links: []
              timestamp: 1375978403
              type: stream
            type: message
          - id: 1
            message:
              avatar_url: https://url/for/othello-bots/avatar
              client: website
              content: With mirth and laughter let old wrinkles come.
              content_type: text/x-markdown
              display_recipient:
              - email: hamlet@example.com
                full_name: Hamlet of Denmark
                id: 31572
              id: 12345679
              recipient_id: 18391
              sender_email: othello-bot@example.com
              sender_full_name: Othello Bot
              sender_id: 13215
              sender_realm_str: example
              subject: ""
              topic_links: []
              timestamp: 1375978404
              type: private
            type: message
          msg: ""
          result: success
        properties:
          events:
            description: |
              An array of `event` objects (possibly zero-length if `dont_block` is
              set) with IDs newer than `last_event_id`. Event IDs are
              guaranteed to be increasing, but they are not guaranteed to be
              consecutive.
            items:
              $ref: "#/components/schemas/get_events_200_response_allOf_events_inner"
            type: array
          queue_id:
            description: |
              The ID of the registered queue.
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        events:
        - type: alert_words
          alert_words:
          - alert_word
          id: 0
        - type: alert_words
          alert_words:
          - alert_word
          id: 0
        queue_id: queue_id
    delete_queue_request:
      properties:
        queue_id:
          description: |
            The ID of an event queue that was previously registered via
            `POST /api/v1/register` (see [Register a queue](/api/register-queue)).
          example: fb67bf8a-c031-47cc-84cf-ed80accacda8
          type: string
      required:
      - queue_id
      type: object
    get_stream_id_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          stream_id: 15
        properties:
          stream_id:
            description: |
              The ID of the given channel.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        stream_id: 0
    mark_all_as_read_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          complete: true
        properties:
          complete:
            description: |
              Whether all unread messages were marked as read.

              Will be `false` if the request successfully marked
              some, but not all, messages as read.
            type: boolean
        required:
        - complete
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        complete: true
    mark_stream_as_read_request:
      properties:
        stream_id:
          description: |
            The ID of the channel to access.
          example: 43
          type: integer
      required:
      - stream_id
      type: object
    mark_topic_as_read_request:
      properties:
        stream_id:
          description: |
            The ID of the channel to access.
          example: 43
          type: integer
        topic_name:
          description: |
            The name of the topic whose messages should be marked as read.

            Note: When the value of `realm_empty_topic_display_name` found in
            the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            **Changes**: Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.
          example: new coffee machine
          type: string
      required:
      - stream_id
      - topic_name
      type: object
    get_attachments_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          attachments:
          - id: 1
            name: 166050.jpg
            path_id: 2/ce/DfOkzwdg_IwlrN3myw3KGtiJ/166050.jpg
            size: 571946
            create_time: 1588145417000
            messages:
            - id: 102
              date_sent: 1588145424000
            - id: 103
              date_sent: 1588145448000
          upload_space_used: 571946
        properties:
          attachments:
            description: |
              A list of `attachment` objects, each containing
              details about a file uploaded by the user.
            items:
              $ref: "#/components/schemas/Attachment"
            type: array
          upload_space_used:
            description: |
              The total size of all files uploaded by users in the organization,
              in bytes.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        attachments:
        - size: 6
          create_time: 1
          path_id: path_id
          name: name
          messages:
          - date_sent: 5
            id: 5
          - date_sent: 5
            id: 5
          id: 0
        - size: 6
          create_time: 1
          path_id: path_id
          name: name
          messages:
          - date_sent: 5
            id: 5
          - date_sent: 5
            id: 5
          id: 0
        upload_space_used: 2
    get_drafts_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          count: 3
          drafts:
          - id: 1
            type: stream
            to:
            - 3
            topic: sync drafts
            content: Let's add backend support for syncing drafts.
            timestamp: 1595479019
          - id: 2
            type: private
            to:
            - 4
            topic: ""
            content: What if we made it possible to sync drafts in Zulip?
            timestamp: 1595479019
          - id: 3
            type: private
            to:
            - 4
            - 10
            topic: ""
            content: What if we made it possible to sync drafts in Zulip?
            timestamp: 1595479019
        properties:
          count:
            description: |
              The number of drafts the user currently has. Also the
              number of drafts returned under "drafts".
            example: 3
            type: integer
          drafts:
            description: |
              Returns all of the current user's drafts, in order of last edit time
              (with the most recently edited draft appearing first).
            items:
              $ref: "#/components/schemas/Draft"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        count: 3
        drafts:
        - topic: topic
          id: 0
          to:
          - 6
          - 6
          type: ""
          content: content
          timestamp: 1595479019
        - topic: topic
          id: 0
          to:
          - 6
          - 6
          type: ""
          content: content
          timestamp: 1595479019
    create_drafts_request:
      properties:
        drafts:
          description: |
            A JSON-encoded list of containing new draft objects.
          example:
          - type: stream
            to:
            - 1
            topic: questions
            content: What are the contribution guidelines for this project?
            timestamp: 1595479019
          items:
            $ref: "#/components/schemas/Draft"
          type: array
      type: object
    create_drafts_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          ids:
          - 1
          - 2
          - 3
        properties:
          ids:
            description: |
              An array of the IDs for the drafts that were just created in the same
              order as they were submitted.
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        ids:
        - 0
        - 0
    edit_draft_request:
      properties:
        draft:
          allOf:
          - $ref: "#/components/schemas/Draft"
          description: |
            A JSON-encoded object containing a replacement draft object for this ID.
          example:
            type: stream
            to:
            - 1
            topic: questions
            content: how tough is a Lamy Safari?
            timestamp: 1595479019
      required:
      - draft
      type: object
    get_navigation_views_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          navigation_views:
          - fragment: narrow/is/alerted
            is_pinned: false
            name: Alert Words
        properties:
          navigation_views:
            description: |
              An array of dictionaries containing the user's navigation views.
            items:
              $ref: "#/components/schemas/NavigationView"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported:
        - null
        - null
        navigation_views:
        - fragment: narrow/is/alerted
          name: Alert Words
          is_pinned: true
        - fragment: narrow/is/alerted
          name: Alert Words
          is_pinned: true
    add_navigation_view_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
        properties:
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported:
        - null
        - null
    edit_navigation_view_request:
      anyOf: []
      nullable: true
      properties:
        is_pinned:
          description: |
            Determines whether the view is pinned (true) or hidden in
            the menu (false).
          example: true
          type: boolean
        name:
          description: |
            The user-facing name for custom navigation views. Omit this
            field for built-in views.
          example: Watched Phrases
          type: string
      type: object
    get_saved_snippets_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          saved_snippets:
          - id: 1
            title: Example
            content: Welcome to the organization.
            date_created: 1681662420
        properties:
          saved_snippets:
            description: |
              An array of dictionaries containing data on all of the current user's
              saved snippets.
            items:
              $ref: "#/components/schemas/SavedSnippet"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        saved_snippets:
        - date_created: 6
          id: 0
          title: title
          content: content
        - date_created: 6
          id: 0
          title: title
          content: content
    create_saved_snippet_request:
      properties:
        title:
          description: |
            The title of the saved snippet.
          example: Example title
          type: string
        content:
          description: |
            The content of the saved snippet in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            Clients should insert this content into a message when using
            a saved snippet.
          example: Welcome to the organization.
          type: string
      required:
      - content
      - title
      type: object
    create_saved_snippet_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          saved_snippet_id: 1
        properties:
          saved_snippet_id:
            description: |
              The unique ID of the saved snippet created.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        saved_snippet_id: 0
    edit_saved_snippet_request:
      properties:
        title:
          description: |
            The title of the saved snippet.
          example: Welcome message
          type: string
        content:
          description: |
            The content of the saved snippet in the original [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            Clients should insert this content into a message when using
            a saved snippet.
          example: Welcome to the organization.
          type: string
      type: object
    get_reminders_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          reminders:
          - reminder_id: 27
            to:
            - 6
            type: private
            content: Hi
            rendered_content: <p>Hi</p>
            scheduled_delivery_timestamp: 1681662420
            failed: false
            reminder_target_message_id: 42
        properties:
          reminders:
            description: |
              Returns all of the current user's undelivered reminders,
              ordered by `scheduled_delivery_timestamp` (ascending).
            items:
              $ref: "#/components/schemas/Reminder"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        reminders:
        - reminder_target_message_id: 1
          rendered_content: rendered_content
          scheduled_delivery_timestamp: 1595479019
          to:
          - 6
          - 6
          failed: true
          type: private
          reminder_id: 0
          content: content
        - reminder_target_message_id: 1
          rendered_content: rendered_content
          scheduled_delivery_timestamp: 1595479019
          to:
          - 6
          - 6
          failed: true
          type: private
          reminder_id: 0
          content: content
        ignored_parameters_unsupported: ""
    create_message_reminder_request:
      properties:
        message_id:
          description: |
            The ID of the previously sent message to reference in the reminder message.
          example: 1
          type: integer
        scheduled_delivery_timestamp:
          description: |
            The UNIX timestamp for when the reminder will be sent,
            in UTC seconds.
          example: 5681662420
          type: integer
        note:
          description: |
            A note associated with the reminder shown in the Notification Bot message.

            **Changes**: New in Zulip 11.0 (feature level 415).
          example: This is a reminder note.
          type: string
      type: object
    create_message_reminder_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          reminder_id: 42
          result: success
        properties:
          reminder_id:
            description: |
              Unique ID of the scheduled message reminder.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        reminder_id: 0
    get_scheduled_messages_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          scheduled_messages:
          - scheduled_message_id: 27
            to: 14
            type: stream
            content: Hi
            rendered_content: <p>Hi</p>
            topic: Introduction
            scheduled_delivery_timestamp: 1681662420
            failed: false
        properties:
          scheduled_messages:
            description: |
              Returns all of the current user's undelivered scheduled
              messages, ordered by `scheduled_delivery_timestamp`
              (ascending).
            items:
              $ref: "#/components/schemas/ScheduledMessage"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        scheduled_messages:
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
    create_scheduled_message_request_to:
      description: |
        The scheduled message's tentative target audience.

        For channel messages, the integer ID of the channel.
        For direct messages, a list containing integer user IDs.
      example:
      - 9
      - 10
      oneOf:
      - type: integer
      - items:
          type: integer
        minLength: 1
        type: array
    create_scheduled_message_request:
      properties:
        type:
          description: |
            The type of scheduled message to be sent. `"direct"` for a direct
            message and `"stream"` or `"channel"` for a channel message.

            Note that, while `"private"` is supported for scheduling direct
            messages, clients are encouraged to use to the modern convention of
            `"direct"` to indicate this message type, because support for
            `"private"` may eventually be removed.

            **Changes**: In Zulip 9.0 (feature level 248), `"channel"` was added as
            an additional value for this parameter to indicate the type of a channel
            message.
          enum:
          - direct
          - channel
          - stream
          - private
          example: direct
          type: string
        to:
          $ref: "#/components/schemas/create_scheduled_message_request_to"
        content:
          $ref: "#/components/schemas/RequiredContent"
        topic:
          description: |
            The topic of the message. Only required for channel messages
            (`"type": "stream"` or `"type": "channel"`), ignored otherwise.

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length.

            Note: When `"(no topic)"` or the value of `realm_empty_topic_display_name`
            found in the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            When [topics are required](/help/require-topics), this parameter can't
            be `"(no topic)"`, an empty string, or the value of `realm_empty_topic_display_name`.

            **Changes**: Before Zulip 10.0 (feature level 370), `"(no topic)"`
            was not interpreted as an empty string.

            Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.
          example: Castle
          type: string
        scheduled_delivery_timestamp:
          description: |
            The UNIX timestamp for when the message will be sent,
            in UTC seconds.
          example: 3165826990
          type: integer
        read_by_sender:
          description: |
            Whether the message should be initially marked read by its
            sender. If unspecified, the server uses a heuristic based
            on the client name and the recipient.

            **Changes**: New in Zulip 8.0 (feature level 236).
          example: true
          type: boolean
      required:
      - content
      - scheduled_delivery_timestamp
      - to
      - type
      type: object
    create_scheduled_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          scheduled_message_id: 42
          result: success
        properties:
          scheduled_message_id:
            description: |
              The unique ID of the scheduled message.

              This is different from the unique ID that the message will have
              after it is sent.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        scheduled_message_id: 0
    create_scheduled_message_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/NonExistingChannelIdError"
        description: |
          A typical failed JSON response for when a channel message is scheduled
          to be sent to a channel that does not exist:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when a direct message is scheduled
          to be sent to a user that does not exist:
        example:
          code: BAD_REQUEST
          msg: Invalid user ID 10
          result: error
    update_scheduled_message_request_to:
      description: |
        The scheduled message's tentative target audience.

        For channel messages, the integer ID of the channel.
        For direct messages, a list containing integer user IDs.

        Required when updating the `type` of the scheduled message.
      example: 11
      oneOf:
      - type: integer
      - items:
          type: integer
        minLength: 1
        type: array
    update_scheduled_message_request:
      properties:
        type:
          description: |
            The type of scheduled message to be sent. `"direct"` for a direct
            message and `"stream"` or `"channel"` for a channel message.

            When updating the type of the scheduled message, the `to` parameter
            is required. And, if updating the type of the scheduled message to
            `"stream"`/`"channel"`, then the `topic` parameter is also required.

            Note that, while `"private"` is supported for scheduling direct
            messages, clients are encouraged to use to the modern convention of
            `"direct"` to indicate this message type, because support for
            `"private"` may eventually be removed.

            **Changes**: In Zulip 9.0 (feature level 248), `"channel"` was added as
            an additional value for this parameter to indicate the type of a channel
            message.
          enum:
          - direct
          - channel
          - stream
          - private
          example: stream
          type: string
        to:
          $ref: "#/components/schemas/update_scheduled_message_request_to"
        content:
          description: |
            The updated content of the scheduled message.

            Clients should use the `max_message_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum message size.
          example: Hello
          type: string
        topic:
          description: |
            The updated topic of the scheduled message.

            Required when updating the `type` of the scheduled message to
            `"stream"` or `"channel"`. Ignored when the existing or updated
            `type` of the scheduled message is `"direct"` (or `"private"`).

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length.

            Note: When `"(no topic)"` or the value of `realm_empty_topic_display_name`
            found in the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            When [topics are required](/help/require-topics), this parameter can't
            be `"(no topic)"`, an empty string, or the value of `realm_empty_topic_display_name`.

            **Changes**: Before Zulip 10.0 (feature level 370), `"(no topic)"`
            was not interpreted as an empty string.

            Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.
          example: Castle
          type: string
        scheduled_delivery_timestamp:
          description: |
            The UNIX timestamp for when the message will be sent,
            in UTC seconds.

            Required when updating a scheduled message that the server
            has already tried and failed to send. This state is indicated
            with `"failed": true` in `scheduled_messages` objects; see
            response description at
            [`GET /scheduled_messages`](/api/get-scheduled-messages#response).
          example: 3165826990
          type: integer
      type: object
    update_scheduled_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
        properties:
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
    add_default_stream_request:
      properties:
        stream_id:
          description: |
            The ID of the target channel.
          example: 10
          type: integer
      required:
      - stream_id
      type: object
    add_default_stream_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/InvalidChannelError"
        description: |
          A typical failed JSON response for when an invalid channel ID is passed:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when a user tries to add a private channel
          to the default channels set:
        example:
          code: BAD_REQUEST
          msg: Private channels cannot be made default.
          result: error
    get_messages_200_response_allOf_messages_inner:
      allOf:
      - $ref: "#/components/schemas/MessagesBase"
      - additionalProperties: false
        properties:
          avatar_url:
            nullable: true
          flags:
            description: |
              The user's [message flags][message-flags] for the message.

              **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned`
              flag was deprecated in favor of the `stream_wildcard_mentioned` and
              `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists
              for backwards compatibility with older clients and equals
              `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients
              supporting older server versions should treat this field as a previous
              name for the `stream_wildcard_mentioned` flag as topic wildcard mentions
              were not available prior to this feature level.

              [message-flags]: /api/update-message-flags#available-flags
            items:
              type: string
            type: array
          match_content:
            description: |
              Only present if keyword search was included among the narrow parameters.

              HTML content of a queried message that matches the narrow, with
              `<span class="highlight">` elements wrapping the matches for the
              search keywords.
            type: string
          match_subject:
            description: |
              Only present if keyword search was included among the narrow parameters.

              HTML-escaped topic of a queried message that matches the narrow, with
              `<span class="highlight">` elements wrapping the matches for the
              search keywords.
            type: string
        type: object
      example:
        edit_history: ""
        display_recipient: ""
        subject: ""
        last_moved_timestamp: ""
        flags:
        - flags
        - flags
        match_content: match_content
        type: ""
        content: ""
        sender_id: ""
        content_type: ""
        stream_id: ""
        last_edit_timestamp: ""
        client: ""
        match_subject: match_subject
        id: ""
        recipient_id: ""
        sender_email: ""
        timestamp: ""
        topic_links: ""
        sender_realm_str: ""
        avatar_url: ""
        sender_full_name: ""
        submessages: ""
        reactions: ""
        is_me_message: ""
    get_messages_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          anchor: 21
          found_newest: true
          found_anchor: true
          result: success
          msg: ""
          messages:
          - subject: ""
            sender_realm_str: zulip
            type: private
            content: "<p>Security experts agree that relational algorithms are an\
              \ interesting new topic in the field of networking, and scholars concur.</p>"
            flags:
            - read
            id: 16
            display_recipient:
            - id: 4
              is_mirror_dummy: false
              email: hamlet@zulip.com
              full_name: King Hamlet
            - id: 5
              is_mirror_dummy: false
              email: iago@zulip.com
              full_name: Iago
            - id: 8
              is_mirror_dummy: false
              email: prospero@zulip.com
              full_name: Prospero from The Tempest
            content_type: text/html
            is_me_message: false
            timestamp: 1527921326
            sender_id: 4
            sender_full_name: King Hamlet
            recipient_id: 27
            topic_links: []
            client: ZulipDataImport
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            submessages: []
            sender_email: hamlet@zulip.com
            reactions: []
          - subject: Verona3
            stream_id: 5
            sender_realm_str: zulip
            type: stream
            content: "<p>Wait, is this from the frontend js code or backend python\
              \ code</p>"
            flags:
            - read
            id: 21
            display_recipient: Verona
            content_type: text/html
            is_me_message: false
            timestamp: 1527939746
            sender_id: 4
            sender_full_name: King Hamlet
            recipient_id: 20
            topic_links: []
            client: ZulipDataImport
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            submessages: []
            sender_email: hamlet@zulip.com
            reactions: []
        properties:
          anchor:
            description: |
              The same `anchor` specified in the request (or the computed one, if
              `use_first_unread_anchor` is `true`).

              Only present if `message_ids` is not provided.
            type: integer
          found_newest:
            description: |
              Whether the server promises that the `messages` list includes the very
              newest messages matching the narrow (used by clients that paginate their
              requests to decide whether there may be more messages to fetch).
            type: boolean
          found_oldest:
            description: |
              Whether the server promises that the `messages` list includes the very
              oldest messages matching the narrow (used by clients that paginate their
              requests to decide whether there may be more messages to fetch).
            type: boolean
          found_anchor:
            description: |
              Whether the anchor message is included in the
              response. If the message with the ID specified
              in the request does not exist, did not match
              the narrow, or was excluded via
              `"include_anchor": false`, this will be false.
            type: boolean
          history_limited:
            description: |
              Whether the message history was limited due to
              plan restrictions. This flag is set to `true`
              only when the oldest messages(`found_oldest`)
              matching the narrow is fetched.
            type: boolean
          messages:
            description: |
              An array of `message` objects.

              **Changes**: In Zulip 3.1 (feature level 26), the
              `sender_short_name` field was removed from message
              objects.
            items:
              $ref: "#/components/schemas/get_messages_200_response_allOf_messages_inner"
            type: array
        required:
        - messages
        - msg
        - result
        type: object
      example:
        result: ""
        msg: ""
        found_anchor: true
        ignored_parameters_unsupported: ""
        history_limited: true
        found_oldest: true
        anchor: 0
        found_newest: true
        messages:
        - edit_history: ""
          display_recipient: ""
          subject: ""
          last_moved_timestamp: ""
          flags:
          - flags
          - flags
          match_content: match_content
          type: ""
          content: ""
          sender_id: ""
          content_type: ""
          stream_id: ""
          last_edit_timestamp: ""
          client: ""
          match_subject: match_subject
          id: ""
          recipient_id: ""
          sender_email: ""
          timestamp: ""
          topic_links: ""
          sender_realm_str: ""
          avatar_url: ""
          sender_full_name: ""
          submessages: ""
          reactions: ""
          is_me_message: ""
        - edit_history: ""
          display_recipient: ""
          subject: ""
          last_moved_timestamp: ""
          flags:
          - flags
          - flags
          match_content: match_content
          type: ""
          content: ""
          sender_id: ""
          content_type: ""
          stream_id: ""
          last_edit_timestamp: ""
          client: ""
          match_subject: match_subject
          id: ""
          recipient_id: ""
          sender_email: ""
          timestamp: ""
          topic_links: ""
          sender_realm_str: ""
          avatar_url: ""
          sender_full_name: ""
          submessages: ""
          reactions: ""
          is_me_message: ""
    send_message_request_to:
      description: |
        For channel messages, either the name or integer ID of the channel. For
        direct messages, either a list containing integer user IDs or a list
        containing string Zulip API email addresses.

        **Changes**: Support for using user/channel IDs was added in Zulip 2.0.0.
      example:
      - 9
      - 10
      oneOf:
      - type: string
      - type: integer
      - items:
          type: string
        type: array
      - items:
          type: integer
        minLength: 1
        type: array
    send_message_request:
      properties:
        type:
          description: |
            The type of message to be sent.

            `"direct"` for a direct message and `"stream"` or `"channel"` for a
            channel message.

            **Changes**: In Zulip 9.0 (feature level 248), `"channel"` was added as
            an additional value for this parameter to request a channel message.

            In Zulip 7.0 (feature level 174), `"direct"` was added as
            the preferred way to request a direct message, deprecating the original
            `"private"`. While `"private"` is still supported for requesting direct
            messages, clients are encouraged to use to the modern convention with
            servers that support it, because support for `"private"` will eventually
            be removed.
          enum:
          - direct
          - channel
          - stream
          - private
          example: direct
          type: string
        to:
          $ref: "#/components/schemas/send_message_request_to"
        content:
          $ref: "#/components/schemas/RequiredContent"
        topic:
          description: |
            The topic of the message. Only required for channel messages
            (`"type": "stream"` or `"type": "channel"`), ignored otherwise.

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length.

            Note: When `"(no topic)"` or the value of `realm_empty_topic_display_name`
            found in the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            When [topics are required](/help/require-topics), this parameter can't
            be `"(no topic)"`, an empty string, or the value of `realm_empty_topic_display_name`.

            **Changes**: Before Zulip 10.0 (feature level 370), `"(no topic)"`
            was not interpreted as an empty string.

            Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.

            New in Zulip 2.0.0. Previous Zulip releases encoded
            this as `subject`, which is currently a deprecated alias.
          example: Castle
          type: string
        queue_id:
          description: |
            For clients supporting
            [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo),
            the [event queue](/api/register-queue)
            ID for the client. If passed, `local_id` is required. If the message is
            successfully sent, the server will include `local_id` in the `message` event
            that the client with this `queue_id` will receive notifying it of the new message
            via [`GET /events`](/api/get-events). This lets the client know unambiguously
            that it should replace the locally echoed message, rather than adding this new
            message (which would be correct if the user had sent the new message from another
            device).
          example: fb67bf8a-c031-47cc-84cf-ed80accacda8
          type: string
        local_id:
          description: |
            For clients supporting local echo, a unique string-format identifier
            chosen freely by the client; the server will pass it back to the client without
            inspecting it, as described in the `queue_id` description.
          example: "100.01"
          type: string
        read_by_sender:
          description: |
            Whether the message should be initially marked read by its
            sender. If unspecified, the server uses a heuristic based
            on the client name.

            **Changes**: New in Zulip 8.0 (feature level 236).
          example: true
          type: boolean
      required:
      - content
      - to
      - type
      type: object
    send_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          id: 42
          automatic_new_visibility_policy: 2
          result: success
        properties:
          id:
            description: |
              The unique ID assigned to the sent message.
            type: integer
          automatic_new_visibility_policy:
            description: |
              If the message's sender had configured their [visibility policy settings](/help/mute-a-topic)
              to potentially automatically follow or unmute topics when sending messages,
              and one of these policies did in fact change the user's visibility policy
              for the topic where this message was sent, the new value for that user's
              visibility policy for the recipient topic.

              Only present if the sender's visibility was in fact changed.

              The value can be either [unmuted or followed](/api/update-user-topic#parameter-visibility_policy).

              Clients will also be notified about the change in policy via a
              `user_topic` event as usual. This field is intended to be used by clients
              to explicitly inform the user when a topic's visibility policy was changed
              automatically due to sending a message.

              For example, the Zulip web application uses this field to decide whether
              to display a warning or notice suggesting to unmute the topic after
              sending a message to a muted channel. Such a notice would be confusing in
              the event that the act of sending the message had already resulted in the
              user automatically unmuting or following the topic in question.

              **Changes**: New in Zulip 8.0 (feature level 218).
            enum:
            - 2
            - 3
            type: integer
        required:
        - id
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        automatic_new_visibility_policy: 6
        id: 0
    send_message_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/NonExistingChannelNameError"
        description: |
          A typical failed JSON response for when a channel message is sent to a channel
          that does not exist:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when a direct message is sent to a user
          that does not exist:
        example:
          code: BAD_REQUEST
          msg: Invalid email 'eeshan@zulip.com'
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the message was rejected because
          the message contains a stream wildcard mention, but the user doesn't have
          permission to use such a mention in this channel as the user is not present
          in `can_mention_many_users_group` and the channel contains a large number
          of subscribers.

          **Changes**: New in Zulip 8.0 (feature level 229). Previously, this
          error returned the `"BAD_REQUEST"` code.
        example:
          result: error
          msg: You do not have permission to use channel wildcard mentions in this
            channel.
          code: STREAM_WILDCARD_MENTION_NOT_ALLOWED
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the message was rejected because
          the message contains a topic wildcard mention, but the user doesn't have
          permission to use such a mention in this topic as the user is not present
          in `can_mention_many_users_group` and the topic contains a large number
          of participants.

          **Changes**: New in Zulip 8.0 (feature level 229). Previously,
          `wildcard_mention_policy` was not enforced for topic mentions.
        example:
          result: error
          msg: You do not have permission to use topic wildcard mentions in this topic.
          code: TOPIC_WILDCARD_MENTION_NOT_ALLOWED
    get_message_history_200_response_allOf_message_history_inner:
      additionalProperties: false
      example:
        content_html_diff: content_html_diff
        stream: 0
        rendered_content: rendered_content
        user_id: 1
        prev_content: prev_content
        prev_topic: prev_topic
        topic: topic
        prev_rendered_content: prev_rendered_content
        prev_stream: 6
        content: content
        timestamp: 5
      properties:
        topic:
          description: |
            The topic of the message immediately
            after this edit event.
          type: string
        prev_topic:
          description: |
            Only present if message's topic was edited.

            The topic of the message immediately
            prior to this edit event.
          type: string
        stream:
          description: |
            Only present if message's channel was edited.

            The ID of the channel containing the message
            immediately after this edit event.

            **Changes**: New in Zulip 5.0 (feature level 118).
          type: integer
        prev_stream:
          description: |
            Only present if message's channel was edited.

            The ID of the channel containing the message immediately
            prior to this edit event.

            **Changes**: New in Zulip 3.0 (feature level 1).
          type: integer
        content:
          description: |
            The raw [Zulip-flavored Markdown](/help/format-your-message-using-markdown) content of the message
            immediately after this edit event.
          type: string
        rendered_content:
          description: |
            The rendered HTML representation of `content`.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        prev_content:
          description: |
            Only present if message's content was edited.

            The raw [Zulip-flavored Markdown](/help/format-your-message-using-markdown) content of the message immediately
            prior to this edit event.
          type: string
        prev_rendered_content:
          description: |
            Only present if message's content was edited.

            The rendered HTML representation of `prev_content`.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        user_id:
          description: |
            The ID of the user that made the edit.

            Will be `null` only for edit history
            events predating March 2017.

            Clients can display edit history events where this
            is `null` as modified by either the sender (for content
            edits) or an unknown user (for topic edits).
          nullable: true
          type: integer
        content_html_diff:
          description: |
            Only present if message's content was edited.

            An HTML diff between this version of the message
            and the previous one.
          type: string
        timestamp:
          description: |
            The UNIX timestamp for this edit.
          type: integer
      type: object
    get_message_history_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          message_history:
          - content: Hello!
            topic: party at my houz
            rendered_content: <p>Hello!</p>
            timestamp: 1530129122
            user_id: 5
          - topic: party at my house
            content: Howdy!
            prev_content: Hello!
            rendered_content: <p>Howdy!</p>
            user_id: 5
            prev_rendered_content: <p>Hello!</p>
            content_html_diff: <div><p><span class="highlight_text_inserted">Howdy!</span></p>
              <p><span class="highlight_text_deleted">Hello!</span></p></div>
            prev_topic: party at my houz
            timestamp: 1530129134
          msg: ""
          result: success
        properties:
          message_history:
            description: |
              A chronologically sorted, oldest to newest, array
              of `snapshot` objects, each one with the values of
              the message after the edit.
            items:
              $ref: "#/components/schemas/get_message_history_200_response_allOf_message_history_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        message_history:
        - content_html_diff: content_html_diff
          stream: 0
          rendered_content: rendered_content
          user_id: 1
          prev_content: prev_content
          prev_topic: prev_topic
          topic: topic
          prev_rendered_content: prev_rendered_content
          prev_stream: 6
          content: content
          timestamp: 5
        - content_html_diff: content_html_diff
          stream: 0
          rendered_content: rendered_content
          user_id: 1
          prev_content: prev_content
          prev_topic: prev_topic
          topic: topic
          prev_rendered_content: prev_rendered_content
          prev_stream: 6
          content: content
          timestamp: 5
    update_message_flags_request:
      properties:
        messages:
          description: |
            An array containing the IDs of the target messages.
          example:
          - 4
          - 8
          - 15
          items:
            type: integer
          type: array
        op:
          description: |
            Whether to `add` the flag or `remove` it.
          enum:
          - add
          - remove
          example: add
          type: string
        flag:
          description: |
            The flag that should be added/removed.
          example: read
          type: string
      required:
      - flag
      - messages
      - op
      type: object
    update_message_flags_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          messages:
          - 4
          - 18
          - 15
          ignored_because_not_subscribed_channels:
          - 12
          - 13
          - 9
          result: success
        properties:
          messages:
            description: |
              An array with the IDs of the modified messages.
            items:
              type: integer
            type: array
          ignored_because_not_subscribed_channels:
            description: |
              Only present if the flag is `read` and the operation is `remove`.

              Zulip has an invariant that all unread messages must be in channels
              the user is subscribed to. This field will contain a list of the
              channels whose messages were skipped to mark as unread because the
              user is not subscribed to them.

              **Changes**: New in Zulip 10.0 (feature level 355).
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        ignored_because_not_subscribed_channels:
        - 6
        - 6
        messages:
        - 0
        - 0
    update_message_flags_for_narrow_request_narrow_inner_oneOf_operand:
      oneOf:
      - type: string
      - type: integer
      - items:
          type: integer
        type: array
    update_message_flags_for_narrow_request_narrow_inner_oneOf:
      additionalProperties: false
      properties:
        operator:
          type: string
        operand:
          $ref: "#/components/schemas/update_message_flags_for_narrow_request_narrow_inner_oneOf_operand"
        negated:
          type: boolean
      required:
      - operand
      - operator
      type: object
    update_message_flags_for_narrow_request_narrow_inner:
      oneOf:
      - $ref: "#/components/schemas/update_message_flags_for_narrow_request_narrow_inner_oneOf"
      - items:
          type: string
        maxItems: 2
        minItems: 2
        type: array
    update_message_flags_for_narrow_request:
      properties:
        anchor:
          allOf:
          - $ref: "#/components/schemas/Anchor"
          description: |
            Integer message ID to anchor updating of flags. Supports special
            string values for when the client wants the server to compute the anchor
            to use:

            - `newest`: The most recent message.
            - `oldest`: The oldest message.
            - `first_unread`: The oldest unread message matching the
              query, if any; otherwise, the most recent message.
          example: "43"
        include_anchor:
          default: true
          description: |
            Whether a message with the specified ID matching the narrow
            should be included in the update range.
          example: false
          type: boolean
        num_before:
          description: |
            Limit the number of messages preceding the anchor in the
            update range. The server may decrease this to bound
            transaction sizes.
          example: 4
          minimum: 0
          type: integer
        num_after:
          description: |
            Limit the number of messages following the anchor in the
            update range. The server may decrease this to bound
            transaction sizes.
          example: 8
          minimum: 0
          type: integer
        narrow:
          default: []
          description: |
            The narrow you want update flags within. See how to
            [construct a narrow](/api/construct-narrow).

            Note that, when adding the `read` flag to messages, clients should
            consider including a narrow with the `is:unread` filter as an
            optimization. Including that filter takes advantage of the fact that
            the server has a database index for unread messages.

            **Changes**: See [changes section](/api/construct-narrow#changes)
            of search/narrow filter documentation.
          example:
          - operand: Denmark
            operator: channel
          items:
            $ref: "#/components/schemas/update_message_flags_for_narrow_request_narrow_inner"
          type: array
        op:
          description: |
            Whether to `add` the flag or `remove` it.
          enum:
          - add
          - remove
          example: add
          type: string
        flag:
          description: |
            The flag that should be added/removed. See [available
            flags](/api/update-message-flags#available-flags).
          example: read
          type: string
      required:
      - anchor
      - flag
      - narrow
      - num_after
      - num_before
      - op
      type: object
    update_message_flags_for_narrow_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          processed_count: 11
          updated_count: 8
          first_processed_id: 35
          last_processed_id: 55
          found_oldest: false
          found_newest: true
          ignored_because_not_subscribed_channels:
          - 12
          - 13
          - 9
        properties:
          processed_count:
            description: |
              The number of messages that were within the
              update range (at most `num_before + 1 +
              num_after`).
            type: integer
          updated_count:
            description: |
              The number of messages where the flag's
              value was changed (at most
              `processed_count`).
            type: integer
          first_processed_id:
            description: |
              The ID of the oldest message within the
              update range, or `null` if the range was
              empty.
            nullable: true
            type: integer
          last_processed_id:
            description: |
              The ID of the newest message within the
              update range, or `null` if the range was
              empty.
            nullable: true
            type: integer
          found_oldest:
            description: |
              Whether the update range reached backward
              far enough to include very oldest message
              matching the narrow (used by clients doing a
              bulk update to decide whether to issue
              another request anchored at
              `first_processed_id`).
            type: boolean
          found_newest:
            description: |
              Whether the update range reached forward far
              enough to include very oldest message
              matching the narrow (used by clients doing a
              bulk update to decide whether to issue
              another request anchored at
              `last_processed_id`).
            type: boolean
          ignored_because_not_subscribed_channels:
            description: |
              Only present if the flag is `read` and the operation is `remove`.

              Zulip has an invariant that all unread messages must be in channels
              the user is subscribed to. This field will contain a list of the
              channels whose messages were skipped to mark as unread because the
              user is not subscribed to them.

              **Changes**: New in Zulip 10.0 (feature level 355).
            items:
              type: integer
            type: array
        required:
        - first_processed_id
        - found_newest
        - found_oldest
        - last_processed_id
        - processed_count
        - updated_count
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported:
        - null
        - null
        updated_count: 6
        first_processed_id: 1
        ignored_because_not_subscribed_channels:
        - 5
        - 5
        found_oldest: true
        found_newest: true
        processed_count: 0
        last_processed_id: 5
    render_message_request:
      properties:
        content:
          $ref: "#/components/schemas/RequiredContent"
      required:
      - content
      type: object
    render_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          rendered: <p><strong>foo</strong></p>
          result: success
        properties:
          rendered:
            description: |
              The rendered HTML.
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        rendered: rendered
    add_reaction_request:
      properties:
        emoji_name:
          description: |
            The target emoji's human-readable name.

            To find an emoji's name, hover over a message to reveal
            three icons on the right, then click the smiley face icon.
            Images of available reaction emojis appear. Hover over the
            emoji you want, and note that emoji's text name.
          example: octopus
          type: string
        emoji_code:
          $ref: "#/components/schemas/EmojiCode"
        reaction_type:
          $ref: "#/components/schemas/ReactionType"
      required:
      - emoji_name
      type: object
    add_reaction_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the emoji code is invalid:
        example:
          result: error
          msg: Invalid emoji code
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the reaction already exists.

          **Changes**: New in Zulip 8.0 (feature level 193). Previously, this
          error returned the `"BAD_REQUEST"` code.
        example:
          result: error
          msg: Reaction already exists.
          code: REACTION_ALREADY_EXISTS
    remove_reaction_request:
      properties:
        emoji_name:
          description: |
            The target emoji's human-readable name.

            To find an emoji's name, hover over a message to reveal
            three icons on the right, then click the smiley face icon.
            Images of available reaction emojis appear. Hover over the
            emoji you want, and note that emoji's text name.
          example: octopus
          type: string
        emoji_code:
          $ref: "#/components/schemas/EmojiCode"
        reaction_type:
          $ref: "#/components/schemas/ReactionType"
      type: object
    remove_reaction_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the emoji code is invalid:
        example:
          result: error
          msg: Invalid emoji code
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the reaction does not exist.

          **Changes**: New in Zulip 8.0 (feature level 193). Previously, this
          error returned the `"BAD_REQUEST"` code.
        example:
          result: error
          msg: Reaction doesn't exist.
          code: REACTION_DOES_NOT_EXIST
    get_read_receipts_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          user_ids:
          - 3
          - 7
          - 9
        properties:
          user_ids:
            description: |
              An array of IDs of users who have marked the target message as
              read and whose read status is available to the current user.

              The IDs of users who have disabled sending read receipts
              (`"send_read_receipts": false`) will never appear in the response,
              nor will the message's sender. Additionally, the IDs of any users
              who have been muted by the current user or who have muted the
              current user will not be included in the response.

              The current user's ID will appear if they have marked the target
              message as read.

              **Changes**: Prior to Zulip 6.0 (feature level 143), the IDs of
              users who have been muted by or have muted the current user were
              included in the response.
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        user_ids:
        - 0
        - 0
    check_messages_match_narrow_200_response_allOf_messages_value:
      additionalProperties: false
      description: |
        `message_id`: The ID of the message that matches the narrow. No record will be returned
        for queried messages that do not match the narrow.
      example:
        match_content: match_content
        match_subject: match_subject
      properties:
        match_content:
          description: |
            HTML content of a queried message that matches the narrow. If the
            narrow is a search narrow, `<span class="highlight">` elements
            will be included, wrapping the matches for the search keywords.
          type: string
        match_subject:
          description: |
            HTML-escaped topic of a queried message that matches the narrow. If the
            narrow is a search narrow, `<span class="highlight">` elements
            will be included wrapping the matches for the search keywords.
          type: string
      type: object
    check_messages_match_narrow_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          messages:
            "31":
              match_content: <p><a href="http://foo.com" target="_blank" title="http://foo.com">http://foo.com</a></p>
              match_subject: test_topic
        properties:
          messages:
            additionalProperties:
              $ref: "#/components/schemas/check_messages_match_narrow_200_response_allOf_messages_value"
            description: |
              A dictionary with a key for each queried message that matches the narrow,
              with message IDs as keys and search rendering data as values.
            type: object
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        messages:
          key:
            match_content: match_content
            match_subject: match_subject
    get_message_200_response_allOf_message:
      allOf:
      - $ref: "#/components/schemas/MessagesBase"
      - additionalProperties: false
        properties:
          avatar_url:
            nullable: true
          flags:
            description: |
              The user's [message flags][message-flags] for the message.

              **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned`
              flag was deprecated in favor of the `stream_wildcard_mentioned` and
              `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists
              for backwards compatibility with older clients and equals
              `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients
              supporting older server versions should treat this field as a previous
              name for the `stream_wildcard_mentioned` flag as topic wildcard mentions
              were not available prior to this feature level.

              [message-flags]: /api/update-message-flags#available-flags
            items:
              type: string
            type: array
        type: object
      description: |
        An object containing details of the message.

        **Changes**: New in Zulip 5.0 (feature level 120).
      example:
        edit_history: ""
        display_recipient: ""
        topic_links: ""
        subject: ""
        last_moved_timestamp: ""
        flags:
        - flags
        - flags
        type: ""
        content: ""
        sender_id: ""
        sender_realm_str: ""
        avatar_url: ""
        content_type: ""
        stream_id: ""
        last_edit_timestamp: ""
        sender_full_name: ""
        submessages: ""
        client: ""
        reactions: ""
        id: ""
        is_me_message: ""
        recipient_id: ""
        sender_email: ""
        timestamp: ""
    get_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          raw_content: '**Don''t** forget your towel!'
          result: success
          msg: ""
          message:
            subject: ""
            sender_realm_str: zulip
            type: private
            content: "<p>Security experts agree that relational algorithms are an\
              \ interesting new topic in the field of networking, and scholars concur.</p>"
            flags:
            - read
            id: 16
            display_recipient:
            - id: 4
              is_mirror_dummy: false
              email: hamlet@zulip.com
              full_name: King Hamlet
            - id: 5
              is_mirror_dummy: false
              email: iago@zulip.com
              full_name: Iago
            - id: 8
              is_mirror_dummy: false
              email: prospero@zulip.com
              full_name: Prospero from The Tempest
            content_type: text/html
            is_me_message: false
            timestamp: 1527921326
            sender_id: 4
            sender_full_name: King Hamlet
            recipient_id: 27
            topic_links: []
            client: ZulipDataImport
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            submessages: []
            sender_email: hamlet@zulip.com
            reactions: []
        properties:
          raw_content:
            deprecated: true
            description: |
              The raw Markdown content of the message.

              See the help center article on [message formatting](/help/format-your-message-using-markdown) for details on Zulip-flavored Markdown.

              **Deprecated** and to be removed once no longer required for
              legacy clients. Modern clients should prefer passing
              `"apply_markdown": false` to request raw message content.
            type: string
          message:
            $ref: "#/components/schemas/get_message_200_response_allOf_message"
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        raw_content: raw_content
        message:
          edit_history: ""
          display_recipient: ""
          topic_links: ""
          subject: ""
          last_moved_timestamp: ""
          flags:
          - flags
          - flags
          type: ""
          content: ""
          sender_id: ""
          sender_realm_str: ""
          avatar_url: ""
          content_type: ""
          stream_id: ""
          last_edit_timestamp: ""
          sender_full_name: ""
          submessages: ""
          client: ""
          reactions: ""
          id: ""
          is_me_message: ""
          recipient_id: ""
          sender_email: ""
          timestamp: ""
    delete_message_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/InvalidMessageError"
        description: |
          An example JSON response for when the specified message does not exist:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user making the query does not
          have permission to delete the message:
        example:
          code: BAD_REQUEST
          msg: You don't have permission to delete this message
          result: error
    update_message_request:
      properties:
        topic:
          description: |
            The topic to move the message(s) to, to request changing the topic.

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length

            Should only be sent when changing the topic, and will throw an error
            if the target message is not a channel message.

            Note: When the value of `realm_empty_topic_display_name` found in
            the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            When [topics are required](/help/require-topics), this parameter can't
            be `"(no topic)"`, an empty string, or the value of `realm_empty_topic_display_name`.

            You can [resolve topics](/help/resolve-a-topic) by editing the topic to
            `✔ {original_topic}` with the `propagate_mode` parameter set to
            `"change_all"`. The empty string topic cannot be marked as resolved.

            **Changes**: Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.

            New in Zulip 2.0.0. Previous Zulip releases encoded this as `subject`,
            which is currently a deprecated alias.
          example: Castle
          type: string
        propagate_mode:
          default: change_one
          description: |
            Which message(s) should be edited:

            - `"change_later"`: The target message and all following messages.
            - `"change_one"`: Only the target message.
            - `"change_all"`: All messages in this topic.

            Only the default value of `"change_one"` is valid when editing
            only the content of a message.

            This parameter determines both which messages get moved and also whether
            clients that are currently narrowed to the topic containing the message
            should navigate or adjust their compose box recipient to point to the
            post-edit channel/topic.
          enum:
          - change_one
          - change_later
          - change_all
          example: change_all
          type: string
        send_notification_to_old_thread:
          default: false
          description: |
            Whether to send an automated message to the old topic to
            notify users where the messages were moved to.

            **Changes**: Before Zulip 6.0 (feature level 152), this parameter
            had a default of `true` and was ignored unless the channel was changed.

            New in Zulip 3.0 (feature level 9).
          example: true
          type: boolean
        send_notification_to_new_thread:
          default: true
          description: |
            Whether to send an automated message to the new topic to
            notify users where the messages came from.

            If the move is just [resolving/unresolving a topic](/help/resolve-a-topic),
            this parameter will not trigger an additional notification.

            **Changes**: Before Zulip 6.0 (feature level 152), this parameter
            was ignored unless the channel was changed.

            New in Zulip 3.0 (feature level 9).
          example: true
          type: boolean
        content:
          $ref: "#/components/schemas/OptionalContent"
        prev_content_sha256:
          description: |
            An optional SHA-256 hash of the previous raw content of the message
            that the client has at the time of the request.

            If provided, the server will return an error if it does not match the
            SHA-256 hash of the message's content stored in the database.

            Clients can use this feature to prevent races where multiple clients
            save conflicting edits to a message.

            **Changes**: New in Zulip 11.0 (feature level 379).
          example: 6ae8a75555209fd6c44157c0aed8016e763ff435a19cf186f76863140143ff72
          type: string
        stream_id:
          description: |
            The channel ID to move the message(s) to, to request moving
            messages to another channel.

            Should only be sent when changing the channel, and will throw an error
            if the target message is not a channel message.

            Note that a message's content and channel cannot be changed at the
            same time, so sending both `content` and `stream_id` parameters will
            throw an error.

            **Changes**: New in Zulip 3.0 (feature level 1).
          example: 43
          type: integer
      type: object
    update_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          detached_uploads:
          - id: 3
            name: 1253601-1.jpg
            path_id: 2/5d/BD5NRptFxPDKY3RUKwhhup8r/1253601-1.jpg
            size: 1339060
            create_time: 1687984706000
            messages: []
        properties:
          detached_uploads:
            description: |
              Details on all files uploaded by the acting user whose only references
              were removed when editing this message. Clients should ask the acting user
              if they wish to delete the uploaded files returned in this response,
              which might otherwise remain visible only in message edit history.

              Note that [access to message edit history][edit-history-access]
              is configurable; this detail may be important in presenting the
              question clearly to users.

              New in Zulip 10.0 (feature level 285).

              [edit-history-access]: /help/restrict-message-edit-history-access
            items:
              $ref: "#/components/schemas/Attachment"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        detached_uploads:
        - size: 6
          create_time: 1
          path_id: path_id
          name: name
          messages:
          - date_sent: 5
            id: 5
          - date_sent: 5
            id: 5
          id: 0
        - size: 6
          create_time: 1
          path_id: path_id
          name: name
          messages:
          - date_sent: 5
            id: 5
          - date_sent: 5
            id: 5
          id: 0
    update_message_400_response_oneOf:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      - description: |
          A typical JSON response for when one doesn't have the permission to
          edit a particular message:
        example:
          code: BAD_REQUEST
          msg: You don't have permission to edit this message
          result: error
        properties:
          msg:
            enum:
            - Your organization has turned off message editing
            - You don't have permission to edit this message
            - The time limit for editing this message has past
            - Nothing to change
            - Topic can't be empty
            type: string
      example:
        result: ""
        msg: Your organization has turned off message editing
        code: ""
    update_message_400_response:
      oneOf:
      - $ref: "#/components/schemas/update_message_400_response_oneOf"
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A special failed JSON response (`"code": "MOVE_MESSAGES_TIME_LIMIT_EXCEEDED"`)
          for when the user has permission to move
          the target message, but asked to move all messages in a topic
          (`"propagate_mode": "change_all"`) and the user does not have permission
          to move the entire topic.

          This happens when the topic contains some messages that are older than an
          applicable time limit for the requested topic move (see
          `move_messages_within_stream_limit_seconds` and/or
          `move_messages_between_streams_limit_seconds` in the
          [`POST /register`](/api/register-queue) response).

          The error response contains data on which portion of this topic the user has
          permission to move. `first_message_id_allowed_to_move` is the oldest message
          ID in this topic that the user has permission to move.
          There are `total_messages_in_topic` in the topic, but the user only has
          permission to move the (most recent) `total_messages_allowed_to_move`
          messages.

          Clients should support this error code with
          `"first_message_id_allowed_to_move": null` for forward compatibility
          with future server versions that may use this error code with other
          propagation modes where the user does not have permission to move any
          messages, or where the server did not calculate the total message counts
          noted above.

          Clients can either only present the error to the user or, if
          `first_message_id_allowed_to_move` is not `null`, prompt the user to adjust
          their query with the above information.

          If clients choose to present a prompt for this error code, they should
          recommend the option of cancelling and (manually) asking a moderator to
          move the entire topic, since that's often a better experience than
          partially moving a topic. This API supports a client that wishes to allow
          the user to repeat the request with a `change_later` propagation mode and
          a target message ID of `first_message_id_allowed_to_move`, if the user
          desires to move only the portion of the topic that they can.

          Note that in a [private channel with protected history][private-channels],
          the Zulip security model requires that the above calculations only include
          messages the acting user has access to. So in the rare case of a user
          attempting to move a topic that started before the user joined a private
          channel with protected history, this API endpoint might move only the portion
          of a topic that they have access to, without this error or any confirmation
          dialog.

          **Changes**: New in Zulip 7.0 (feature level 172).

          [private-channels]: /help/channel-permissions#private-channels
        example:
          code: MOVE_MESSAGES_TIME_LIMIT_EXCEEDED
          first_message_id_allowed_to_move: 123
          msg: You only have permission to move the 2/5 most recent messages in this
            topic.
          result: error
          total_messages_allowed_to_move: 2
          total_messages_in_topic: 5
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the message was rejected because
          the message contains a stream wildcard mention, but the user doesn't have
          permission to use such a mention in this channel as the user is not present
          in `can_mention_many_users_group` and the channel contains a large number
          of subscribers.

          **Changes**: New in Zulip 8.0 (feature level 229). Previously, this
          error returned the `"BAD_REQUEST"` code.
        example:
          result: error
          msg: You do not have permission to use channel wildcard mentions in this
            channel.
          code: STREAM_WILDCARD_MENTION_NOT_ALLOWED
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the message was rejected because
          the message contains a topic wildcard mention, but the user doesn't have
          permission to use such a mention in this topic as the user is not present
          in `can_mention_many_users_group` and the topic contains a large number
          of participants.

          **Changes**: New in Zulip 8.0 (feature level 229). Previously,
          `wildcard_mention_policy` was not enforced for topic mentions.
        example:
          result: error
          msg: You do not have permission to use topic wildcard mentions in this topic.
          code: TOPIC_WILDCARD_MENTION_NOT_ALLOWED
    report_message_request:
      properties:
        report_type:
          description: |
            The reason that best describes why the current user is reporting the
            target message for moderation.
          enum:
          - spam
          - harassment
          - inappropriate
          - norms
          - other
          example: harassment
          type: string
        description:
          description: |
            A short description with additional context about why the current user
            is reporting the target message for moderation.

            Clients should limit this string to a maximum length of 1000 characters.

            If the `report_type` parameter is `"other"`, this parameter is required,
            and its value cannot be an empty string.
          example: "This message insults and mocks Frodo, which is against the code\
            \ of conduct."
          type: string
      required:
      - report_type
      type: object
    upload_file_request:
      properties:
        filename:
          example: !!binary |-
            L3BhdGgvdG8vZmlsZQ==
          format: binary
          type: string
      type: object
    upload_file_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          uri: /user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
          url: /user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
          filename: zulip.txt
        properties:
          uri:
            deprecated: true
            description: |
              The URL of the uploaded file. Alias of `url`.

              **Changes**: Deprecated in Zulip 9.0 (feature level 272). The term
              "URI" is deprecated in [web standards](https://url.spec.whatwg.org/#goals).
            type: string
          url:
            description: |
              The URL of the uploaded file.

              **Changes**: New in Zulip 9.0 (feature level 272). Previously,
              this property was only available under the legacy `uri` name.
            type: string
          filename:
            description: |
              The filename that Zulip stored the upload as. This usually
              differs from the basename of the URL when HTML escaping is
              required to generate a valid URL.

              Clients generating a Markdown link to a newly uploaded file
              should do so by combining the `url` and `filename` fields in the
              response as follows: `[{filename}]({url})`, with care taken to
              clean `filename` of `[` and `]` characters that might break
              Markdown rendering.

              **Changes**: New in Zulip 10.0 (feature level 285).
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        filename: filename
        uri: uri
        url: url
    get_file_temporary_url_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          url: /user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55
        properties:
          url:
            description: |
              A temporary URL that can be used to access the uploaded file
              without Zulip's normal API authentication.
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        url: url
    get_users_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          members:
          - is_active: true
            email: AARON@zulip.com
            delivery_email: null
            is_admin: false
            is_owner: false
            role: 400
            avatar_url: https://secure.gravatar.com/avatar/818c212b9f8830dfef491b3f7da99a14?d=identicon&version=1
            bot_type: null
            timezone: ""
            is_bot: false
            user_id: 7
            is_guest: false
            date_joined: 2019-10-20T07:50:53.728864+00:00
            full_name: aaron
          - date_joined: 2019-10-20T07:50:53.729659+00:00
            full_name: King Hamlet
            is_guest: false
            profile_data:
              "4":
                value: "0"
              "2":
                value: |-
                  I am:
                  * The prince of Denmark
                  * Nephew to the usurping Claudius
                rendered_value: |-
                  <p>I am:</p>
                  <ul>
                  <li>The prince of Denmark</li>
                  <li>Nephew to the usurping Claudius</li>
                  </ul>
              "5":
                value: 1900-01-01
              "7":
                value: "[11]"
              "6":
                value: https://blog.zulig.org
              "1":
                value: +0-11-23-456-7890
                rendered_value: <p>+0-11-23-456-7890</p>
              "8":
                value: zulipbot
              "3":
                rendered_value: <p>Dark chocolate</p>
                value: Dark chocolate
            user_id: 10
            is_bot: false
            bot_type: null
            timezone: ""
            is_admin: false
            is_owner: false
            role: 400
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            is_active: true
            email: hamlet@zulip.com
            delivery_email: null
          - bot_owner_id: 11
            is_guest: false
            date_joined: 2019-10-20T12:52:17.862053+00:00
            full_name: Iago's Bot
            email: iago-bot@zulipdev.com
            delivery_email: iago-bot@zulipdev.com
            is_active: true
            avatar_url: https://secure.gravatar.com/avatar/7328586831cdbb1627649bd857b1ee8c?d=identicon&version=1
            is_admin: false
            is_owner: false
            role: 400
            user_id: 23
            bot_type: 1
            timezone: ""
            is_bot: true
        properties:
          members:
            description: |
              A list of `user` objects, each containing details about a user in the
              organization.
            items:
              $ref: "#/components/schemas/User"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        members:
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
    create_user_request:
      properties:
        email:
          description: |
            The email address of the new user.
          example: username@example.com
          type: string
        password:
          description: |
            The password of the new user.
          example: abcd1234
          type: string
        full_name:
          description: |
            The full name of the new user.
          example: New User
          type: string
      required:
      - email
      - full_name
      - password
      type: object
    create_user_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          user_id: 25
        properties:
          user_id:
            description: |
              The ID assigned to the newly created user.

              **Changes**: New in Zulip 4.0 (feature level 30).
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        user_id: 0
    get_user_status_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          status:
            status_text: on vacation
            emoji_name: car
            emoji_code: 1f697
            reaction_type: unicode_emoji
        properties:
          status:
            allOf:
            - $ref: "#/components/schemas/UserStatus"
            description: |
              The status set by the user. Note that, if the user doesn't have a status
              currently set, then the returned dictionary will be empty as none of the
              keys listed below will be present.
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        status: ""
    update_status_for_user_request:
      properties:
        status_text:
          description: |
            The text content of the status message. Sending the empty string
            will clear the user's status.

            **Note**: The limit on the size of the message is 60 characters.
          example: on vacation
          type: string
        emoji_name:
          description: |
            The name for the emoji to associate with this status.

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: car
          type: string
        emoji_code:
          description: |
            A unique identifier, defining the specific emoji codepoint requested,
            within the namespace of the `reaction_type`.

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: 1f697
          type: string
        reaction_type:
          description: |
            A string indicating the type of emoji. Each emoji `reaction_type`
            has an independent namespace for values of `emoji_code`.

            Must be one of the following values:

            - `unicode_emoji` : In this namespace, `emoji_code` will be a
              dash-separated hex encoding of the sequence of Unicode codepoints
              that define this emoji in the Unicode specification.

            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of
              the uploaded [custom emoji](/help/custom-emoji).

            - `zulip_extra_emoji` : These are special emoji included with Zulip.
              In this namespace, `emoji_code` will be the name of the emoji (e.g.
              "zulip").

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: unicode_emoji
          type: string
      type: object
    update_status_for_user_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response user making request does not have permission to update other user's status.:
        example:
          result: error
          msg: Insufficient permission
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when no changes were requested:
        example:
          result: error
          msg: Client did not pass any new values.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the
          `status_text` message exceeds the limit of
          60 characters:
        example:
          result: error
          msg: "status_text is too long (limit: 60 characters)"
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when `emoji_name` is not specified
          but `emoji_code` or `reaction_type` is specified:
        example:
          result: error
          msg: Client must pass emoji_name if they pass either emoji_code or reaction_type.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the emoji name does not exist:
        example:
          result: error
          msg: Emoji 'invalid' does not exist
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the emoji name is invalid:
        example:
          result: error
          msg: Invalid emoji name.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the custom emoji is invalid:
        example:
          result: error
          msg: Invalid custom emoji.
          code: BAD_REQUEST
    get_user_presence_200_response_allOf_presence_value:
      additionalProperties: false
      description: |
        `{client_name}` or `"aggregated"`: Object containing the details of the user's
        presence.

        **Changes**: Starting with Zulip 7.0 (feature level 178), this will always
        contain two keys, `"website"` and `"aggregated"`, with identical data. The
        server no longer stores which client submitted presence updates.

        Previously, the `{client_name}` keys for these objects were the names of the
        different clients where the user was logged in, for example `website` or
        `ZulipDesktop`.
      example:
        timestamp: 0
        status: status
      properties:
        timestamp:
          description: |
            When this update was received. If the timestamp
            is more than a few minutes in the past, the user is offline.
          type: integer
        status:
          description: |
            Whether the user had recently interacted with Zulip at the time
            of the timestamp.

            Will be either `"active"` or `"idle"`
          type: string
      type: object
    get_user_presence_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          presence:
            website:
              timestamp: 1532697622
              status: active
            aggregated:
              timestamp: 1532697622
              status: active
          result: success
          msg: ""
        properties:
          presence:
            additionalProperties:
              $ref: "#/components/schemas/get_user_presence_200_response_allOf_presence_value"
            description: |
              An object containing the presence details for the user.
            type: object
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        presence:
          key:
            timestamp: 0
            status: status
    get_own_user_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          avatar_url: https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon&version=1
          avatar_version: 1
          email: iago@zulip.com
          delivery_email: iago@zulip.com
          full_name: Iago
          is_admin: true
          is_owner: false
          role: 200
          is_guest: false
          is_bot: false
          is_active: true
          timezone: ""
          date_joined: 2019-10-20T07:50:53.728864+00:00
          max_message_id: 30
          msg: ""
          result: success
          user_id: 5
          profile_data:
            "5":
              value: 2000-01-01
            "4":
              value: emacs
            "7":
              value: "[10]"
            "1":
              value: +1-234-567-8901
              rendered_value: <p>+1-234-567-8901</p>
            "2":
              rendered_value: <p>Betrayer of Othello.</p>
              value: Betrayer of Othello.
            "8":
              value: zulip
            "3":
              value: Apples
              rendered_value: <p>Apples</p>
            "6":
              value: https://zulip.readthedocs.io/en/latest/
        properties:
          avatar_url:
            description: |
              URL for the requesting user's avatar.

              **Changes**: New in Zulip 2.1.0.
            example: x
            type: string
          avatar_version:
            description: |
              Version for the requesting user's avatar. Used for cache-busting requests
              for the user's avatar. Clients generally shouldn't need to use this;
              most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.

              **Changes**: New in Zulip 3.0 (feature level 10).
            example: 1
            type: integer
          email:
            description: |
              Zulip API email of the requesting user.
            example: iago@zulip.com
            type: string
          full_name:
            description: |
              Full name of the requesting user.
            example: Iago
            type: string
          is_admin:
            description: |
              A boolean indicating if the requesting user is an admin.
            example: true
            type: boolean
          is_owner:
            description: |
              A boolean indicating if the requesting user is
              an organization owner.

              **Changes**: New in Zulip 3.0 (feature level 8).
            example: false
            type: boolean
          role:
            description: |
              [Organization-level role](/api/roles-and-permissions) of
              the requesting user.
              Possible values are:

              - 100 = Organization owner
              - 200 = Organization administrator
              - 300 = Organization moderator
              - 400 = Member
              - 600 = Guest

              **Changes**: New in Zulip 4.0 (feature level 59).
            enum:
            - 100
            - 200
            - 300
            - 400
            - 600
            type: integer
          is_guest:
            description: |
              A boolean indicating if the requesting user is a guest.

              **Changes**: New in Zulip 3.0 (feature level 10).
            example: false
            type: boolean
          is_bot:
            description: |
              A boolean indicating if the requesting user is a bot.
            example: false
            type: boolean
          is_active:
            description: |
              A boolean specifying whether the requesting user account
              has been deactivated.

              **Changes**: New in Zulip 3.0 (feature level 10).
            example: true
            type: boolean
          timezone:
            description: |
              The IANA identifier of the requesting user's [profile time zone](/help/change-your-timezone),
              which is used primarily to display the user's local time to other users.

              **Changes**: New in Zulip 3.0 (feature level 10).
            example: ""
            type: string
          date_joined:
            description: |
              The time the requesting user's account was created.

              **Changes**: New in Zulip 3.0 (feature level 10).
            example: 2019-10-20T07:50:53.728864+00:00
            type: string
          max_message_id:
            deprecated: true
            description: |
              The integer ID of the last message received by the requesting
              user's account.

              **Deprecated**. We plan to remove this in favor of recommending
              using `GET /messages` with `"anchor": "newest"`.
            example: 30
            type: integer
          user_id:
            description: |
              The user's ID.
            example: 1
            type: integer
          delivery_email:
            description: |
              The requesting user's real email address.

              **Changes**: Prior to Zulip 7.0 (feature level 163), this field was
              present only when `email_address_visibility` was restricted and the
              requesting user had permission to access realm users' emails. As of
              this feature level, this field is always present.
            type: string
          profile_data:
            $ref: "#/components/schemas/profile_data"
        type: object
      example:
        msg: ""
        avatar_version: 1
        role: 0
        is_active: true
        is_guest: false
        is_owner: false
        timezone: ""
        profile_data: null
        result: ""
        is_admin: true
        ignored_parameters_unsupported: ""
        full_name: Iago
        avatar_url: x
        user_id: 1
        delivery_email: delivery_email
        date_joined: 2019-10-20T07:50:53.728864+00:00
        is_bot: false
        email: iago@zulip.com
        max_message_id: 30
    deactivate_own_user_400_response:
      allOf:
      - $ref: "#/components/schemas/CodedErrorBase"
      - additionalProperties: false
        description: |
          If the current user is the only organization owner or only user in the
          organization, their account cannot be deactivated and an error response
          will be returned. The `is_last_owner` field in the error response
          indicates whether the user is the only owner (`true`) or the only user
          (`false`). The `entity` field in the error response is a internationalized
          string that notes if the current user is the only organization owner or
          the only user.

          An example JSON error response when the current user is the only
          organization owner in the organization:
        example:
          code: CANNOT_DEACTIVATE_LAST_USER
          msg: Cannot deactivate the only organization owner
          result: error
          entity: organization owner
          is_last_owner: true
        properties:
          entity:
            description: |
              An internationalized string that notes if the current user is the only
              organization owner or the only user in the organization.
            type: string
          is_last_owner:
            description: |
              Whether the current user is the only organization owner (meaning there
              are other active users in the organization) or the only active user in the
              organization.
            type: boolean
        required:
        - entity
        - is_last_owner
        type: object
      example:
        result: ""
        msg: ""
        is_last_owner: true
        code: ""
        entity: entity
    get_alert_words_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          alert_words:
          - natural
          - illustrious
        properties:
          alert_words:
            description: |
              An array of strings, where each string is an alert word (or phrase)
              configured by the user.
            items:
              type: string
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        alert_words:
        - alert_words
        - alert_words
    add_alert_words_request:
      properties:
        alert_words:
          description: |
            An array of strings to be added to the user's set of configured
            alert words. Strings already present in the user's set of alert words
            already are ignored.

            Alert words are case insensitive.
          example:
          - foo
          - bar
          items:
            type: string
          type: array
      required:
      - alert_words
      type: object
    add_alert_words_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          alert_words:
          - foo
          - bar
          - natural
          - illustrious
        properties:
          alert_words:
            description: |
              An array of strings, where each string is an alert word (or phrase)
              configured by the user.
            items:
              type: string
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        alert_words:
        - alert_words
        - alert_words
    remove_alert_words_request:
      properties:
        alert_words:
          description: |
            An array of strings to be removed from the user's set of configured
            alert words. Strings that are not in the user's set of alert words
            are ignored.
          example:
          - foo
          items:
            type: string
          type: array
      required:
      - alert_words
      type: object
    remove_alert_words_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          alert_words:
          - bar
          - natural
          - illustrious
        properties:
          alert_words:
            description: |
              An array of strings, where each string is an alert word (or phrase)
              configured by the user.
            items:
              type: string
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        alert_words:
        - alert_words
        - alert_words
    update_presence_request:
      properties:
        last_update_id:
          description: |
            The identifier that specifies what presence data the client already
            has received, which allows the server to only return more recent
            user presence data.

            This should be set to `-1` during initialization of the client in
            order to fetch all user presence data, unless the client is obtaining
            initial user presence metadata from the
            [`POST /register`](/api/register-queue) endpoint.

            In subsequent queries to this endpoint, this value should be set to the
            most recent value of `presence_last_update_id` returned by the server
            in this endpoint's response, which implements incremental fetching
            of user presence data.

            When this parameter is passed, the user presence data in the response
            will always be in the modern format.

            **Changes**: New in Zulip 9.0 (feature level 263). Previously, the
            server sent user presence data for all users who had been active in the
            last two weeks unconditionally.
          example: 5
          type: integer
        history_limit_days:
          description: |
            Limits how far back in time to fetch user presence data. If not specified,
            defaults to 14 days. A value of N means that the oldest presence data
            fetched will be from at most N days ago.

            Note that this is only useful during the initial user presence data fetch,
            as subsequent fetches should use the `last_update_id` parameter, which
            will act as the limit on how much presence data is returned. `history_limit_days`
            is ignored if `last_update_id` is passed with a value greater than `0`,
            indicating that the client already has some presence data.

            **Changes**: New in Zulip 10.0 (feature level 288).
          example: 365
          type: integer
        new_user_input:
          default: false
          description: |
            Whether the user has interacted with the client (e.g. moved the mouse,
            used the keyboard, etc.) since the previous presence request from this
            client.

            The server uses data from this parameter to implement certain [usage
            statistics](/help/analytics).

            User interface clients that might run in the background, without the
            user ever interacting with them, should be careful to only pass `true`
            if the user has actually interacted with the client in order to avoid
            corrupting usage statistics graphs.
          example: false
          type: boolean
        ping_only:
          default: false
          description: |
            Whether the client is sending a ping-only request, meaning it only
            wants to update the user's presence `status` on the server.

            Otherwise, also requests the server return user presence data for all
            users in the organization, which is further specified by the
            [`last_update_id`](#parameter-last_update_id) parameter.
          example: false
          type: boolean
        slim_presence:
          default: false
          deprecated: true
          description: |
            Legacy parameter for configuring the format (modern or legacy) in
            which the server will return user presence data for the organization.

            Modern clients should use
            [`last_update_id`](#parameter-last_update_id), which guarantees that
            user presence data will be returned in the modern format, and
            should not pass this parameter as `true` unless interacting with an
            older server.

            Legacy clients that do not yet support `last_update_id` may use the
            value of `true` to request the modern format for user presence data.

            **Note**: The legacy format for user presence data will be removed
            entirely in a future release.

            **Changes**: **Deprecated** in Zulip 9.0 (feature level 263). Using
            the modern `last_update_id` parameter is the recommended way to
            request the modern format for user presence data.

            New in Zulip 3.0 (no feature level as it was an unstable API at that
            point).
          example: false
          type: boolean
        status:
          description: |
            The status of the user on this client.

            Clients should report the user as `"active"` on this device if the client
            knows that the user is presently using the device (and thus would
            potentially see a notification immediately), even if the user
            has not directly interacted with the Zulip client.

            Otherwise, it should report the user as `"idle"`.

            See the related [`new_user_input`](#parameter-new_user_input) parameter
            for how a client should report whether the user is actively using the
            Zulip client.
          enum:
          - idle
          - active
          example: active
          type: string
      required:
      - status
      type: object
    update_presence_200_response_allOf_presences_value:
      description: |
        Will be one of these two formats (modern or legacy) for user
        presence data:
      oneOf:
      - $ref: "#/components/schemas/ModernPresenceFormat"
      - additionalProperties:
          $ref: "#/components/schemas/LegacyPresenceFormat"
        description: |
          `{user_email}`: Presence data (legacy format) for the user with
          the specified Zulip API email.
        type: object
    update_presence_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        properties:
          presence_last_update_id:
            description: |
              The identifier for the latest user presence data returned in
              the `presences` data of the response.

              If a value was passed for `last_update_id`, then this is
              guaranteed to be equal to or greater than that value. If it
              is the same value, then that indicates to the client that
              there were no updates to previously received user presence
              data.

              The client should then pass this value as the `last_update_id`
              parameter when it next queries this endpoint, in order to only
              receive new user presence data and avoid redundantly fetching
              already known information.

              This will be `-1` if no value was passed for
              [`last_update_id`](#parameter-last_update_id) and no user
              presence data was returned by the server. This can happen, for
              example, if an organization has disabled presence.

              **Changes**: New in Zulip 9.0 (feature level 263).
            type: integer
          server_timestamp:
            description: |
              Only present if `ping_only` is `false`.

              The time when the server fetched the `presences` data included
              in the response.
            type: number
          presences:
            additionalProperties:
              $ref: "#/components/schemas/update_presence_200_response_allOf_presences_value"
            description: |
              Only present if `ping_only` is `false`.

              A dictionary where each entry describes the presence details
              of a user in the Zulip organization. Entries can be in either
              the modern presence format or the legacy presence format.

              These entries will be the modern presence format when the
              `last_updated_id` parameter is passed, or when the deprecated
              `slim_presence` parameter is `true`.

              If the deprecated `slim_presence` parameter is `false` and the
              `last_updated_id` parameter is omitted, the entries will be in
              the legacy presence API format.

              **Note**: The legacy presence format should only be used when
              interacting with old servers. It will be removed as soon as
              doing so is practical.
            type: object
          zephyr_mirror_active:
            deprecated: true
            description: |
              Legacy property for a part of the Zephyr mirroring system.

              **Deprecated**. Clients should ignore this field.
            type: boolean
        required:
        - msg
        - result
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        server_timestamp: 6.027456183070403
        presences:
          key:
            idle_timestamp: 5
            active_timestamp: 1
        zephyr_mirror_active: true
        presence_last_update_id: 0
    update_status_request:
      properties:
        status_text:
          description: |
            The text content of the status message. Sending the empty string
            will clear the user's status.

            **Note**: The limit on the size of the message is 60 characters.
          example: on vacation
          type: string
        away:
          deprecated: true
          description: |
            Whether the user should be marked as "away".

            **Changes**: Deprecated in Zulip 6.0 (feature level 148);
            starting with that feature level, `away` is a legacy way to
            access the user's `presence_enabled` setting, with
            `away = !presence_enabled`. To be removed in a future release.
          example: true
          type: boolean
        emoji_name:
          description: |
            The name for the emoji to associate with this status.

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: car
          type: string
        emoji_code:
          description: |
            A unique identifier, defining the specific emoji codepoint requested,
            within the namespace of the `reaction_type`.

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: 1f697
          type: string
        reaction_type:
          description: |
            A string indicating the type of emoji. Each emoji `reaction_type`
            has an independent namespace for values of `emoji_code`.

            Must be one of the following values:

            - `unicode_emoji` : In this namespace, `emoji_code` will be a
              dash-separated hex encoding of the sequence of Unicode codepoints
              that define this emoji in the Unicode specification.

            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of
              the uploaded [custom emoji](/help/custom-emoji).

            - `zulip_extra_emoji` : These are special emoji included with Zulip.
              In this namespace, `emoji_code` will be the name of the emoji (e.g.
              "zulip").

            **Changes**: New in Zulip 5.0 (feature level 86).
          example: unicode_emoji
          type: string
      type: object
    update_status_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when no changes were requested:
        example:
          result: error
          msg: Client did not pass any new values.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the
          `status_text` message exceeds the limit of
          60 characters:
        example:
          result: error
          msg: "status_text is too long (limit: 60 characters)"
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when `emoji_name` is not specified
          but `emoji_code` or `reaction_type` is specified:
        example:
          result: error
          msg: Client must pass emoji_name if they pass either emoji_code or reaction_type.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the emoji name does not exist:
        example:
          result: error
          msg: Emoji 'invalid' does not exist
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the emoji name is invalid:
        example:
          result: error
          msg: Invalid emoji name.
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response when the custom emoji is invalid:
        example:
          result: error
          msg: Invalid custom emoji.
          code: BAD_REQUEST
    get_stream_topics_200_response_allOf_topics_inner:
      additionalProperties: false
      example:
        name: name
        max_id: 0
      properties:
        max_id:
          description: |
            The message ID of the last message sent to this topic.
          type: integer
        name:
          description: |
            The name of the topic.
          type: string
      type: object
    get_stream_topics_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          topics:
          - max_id: 26
            name: Denmark3
          - max_id: 23
            name: Denmark1
          - max_id: 6
            name: Denmark2
        properties:
          topics:
            description: |
              An array of objects with information about user-accessible
              topics in the specified channel, sorted by recency (i.e.,
              the topic with the most recent message is ordered first).
            items:
              $ref: "#/components/schemas/get_stream_topics_200_response_allOf_topics_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        topics:
        - name: name
          max_id: 0
        - name: name
          max_id: 0
    get_subscriptions_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          subscriptions:
          - audible_notifications: true
            color: "#e79ab5"
            creator_id: null
            description: A Scandinavian country
            desktop_notifications: true
            is_archived: false
            is_muted: false
            invite_only: false
            name: Denmark
            pin_to_top: false
            push_notifications: false
            stream_id: 1
            subscribers:
            - 7
            - 10
            - 11
            - 12
            - 14
          - audible_notifications: true
            color: "#e79ab5"
            creator_id: 8
            description: Located in the United Kingdom
            desktop_notifications: true
            is_archived: false
            is_muted: false
            invite_only: false
            name: Scotland
            pin_to_top: false
            push_notifications: false
            stream_id: 3
            subscribers:
            - 7
            - 11
            - 12
            - 14
        properties:
          subscriptions:
            description: |
              A list of dictionaries where each dictionary contains
              information about one of the subscribed channels.

              **Changes**: Removed `email_address` field from the dictionary
              in Zulip 8.0 (feature level 226).

              Removed `role` field from the dictionary
              in Zulip 6.0 (feature level 133).
            items:
              $ref: "#/components/schemas/Subscription"
            type: array
        required:
        - subscriptions
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        subscriptions:
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
    subscribe_request_subscriptions_inner:
      additionalProperties: false
      example:
        no-description:
          value:
            name: Verona
        with-description:
          value:
            name: Verona
            description: Italian city
      properties:
        name:
          description: |
            The name of the channel.

            Clients should use the `max_stream_name_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum channel name length.
          type: string
        description:
          description: |
            The [description](/help/change-the-channel-description)
            to use for a new channel being created, in text/markdown format.

            See the help center article on [message formatting](/help/format-your-message-using-markdown) for details on Zulip-flavored Markdown.

            Clients should use the `max_stream_description_length` returned
            by the [`POST /register`](/api/register-queue) endpoint to
            determine the maximum channel description length.
          type: string
      required:
      - name
      type: object
    subscribe_request:
      properties:
        subscriptions:
          description: |
            A list of dictionaries containing the key `name` and value
            specifying the name of the channel to subscribe. If the channel does not
            exist a new channel is created. The description of the channel created can
            be specified by setting the dictionary key `description` with an
            appropriate value.
          example:
          - name: Verona
            description: Italian city
          items:
            $ref: "#/components/schemas/subscribe_request_subscriptions_inner"
          type: array
        principals:
          $ref: "#/components/schemas/Principals"
        authorization_errors_fatal:
          default: true
          description: |
            A boolean specifying whether authorization errors (such as when the
            requesting user is not authorized to access a private channel) should be
            considered fatal or not. When `true`, an authorization error is reported
            as such. When set to `false`, the response will be a 200 and any channels
            where the request encountered an authorization error will be listed
            in the `unauthorized` key.
          example: false
          type: boolean
        announce:
          default: false
          description: |
            If one of the channels specified did not exist previously and is thus created
            by this call, this determines whether [notification bot](/help/configure-automated-notices)
            will send an announcement about the new channel's creation.
          example: true
          type: boolean
        invite_only:
          default: false
          description: |
            As described above, this endpoint will create a new channel if passed
            a channel name that doesn't already exist. This parameters and the ones
            that follow are used to request an initial configuration of a created
            channel; they are ignored for channels that already exist.

            This parameter determines whether any newly created channels will be
            private channels.
          example: true
          type: boolean
        is_web_public:
          default: false
          description: |
            This parameter determines whether any newly created channels will be
            web-public channels.

            Note that creating web-public channels requires the
            `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings]
            to be enabled on the Zulip server in question, the organization
            to have enabled the `enable_spectator_access` realm setting, and
            the current use to have permission under the organization's
            `can_create_web_public_channel_group` realm setting.

            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html

            **Changes**: New in Zulip 5.0 (feature level 98).
          example: true
          type: boolean
        is_default_stream:
          default: false
          description: |
            This parameter determines whether any newly created channels will be
            added as [default channels][default-channels] for new users joining
            the organization.

            [default-channels]: /help/set-default-channels-for-new-users

            **Changes**: New in Zulip 8.0 (feature level 200). Previously, default channel status
            could only be changed using the [dedicated API endpoint](/api/add-default-stream).
          example: true
          type: boolean
        history_public_to_subscribers:
          $ref: "#/components/schemas/HistoryPublicToSubscribers"
        message_retention_days:
          $ref: "#/components/schemas/MessageRetentionDays"
        topics_policy:
          $ref: "#/components/schemas/TopicsPolicy"
        can_add_subscribers_group:
          $ref: "#/components/schemas/ChannelCanAddSubscribersGroup"
        can_remove_subscribers_group:
          $ref: "#/components/schemas/CanRemoveSubscribersGroup"
        can_administer_channel_group:
          $ref: "#/components/schemas/CanAdministerChannelGroup"
        can_delete_any_message_group:
          $ref: "#/components/schemas/CanDeleteAnyMessageGroup"
        can_delete_own_message_group:
          $ref: "#/components/schemas/CanDeleteOwnMessageGroup"
        can_move_messages_out_of_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesOutOfChannelGroup"
        can_move_messages_within_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesWithinChannelGroup"
        can_send_message_group:
          $ref: "#/components/schemas/CanSendMessageGroup"
        can_subscribe_group:
          $ref: "#/components/schemas/CanSubscribeGroup"
        can_resolve_topics_group:
          $ref: "#/components/schemas/CanResolveTopicsGroup"
        folder_id:
          description: |
            This parameter determines the folder to which the newly
            created channel will be added.

            If the value is `None`, the channel will not be added to
            any folder.

            **Changes**: New in Zulip 11.0 (feature level 389).
          example: 1
          type: integer
        send_new_subscription_messages:
          $ref: "#/components/schemas/SendNewSubscriptionMessages"
      required:
      - subscriptions
      type: object
    subscribe_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          already_subscribed:
            "1":
            - testing-help
          msg: ""
          result: success
          subscribed:
            "2":
            - testing-help
        properties:
          subscribed:
            additionalProperties:
              description: |
                `{id}`: List of the names of the channels that were subscribed
                to as a result of the query.
              items:
                type: string
              type: array
            description: |
              A dictionary where the key is the ID of the user and the value
              is a list of the names of the channels that user was subscribed
              to as a result of the request.

              **Changes**: Before Zulip 10.0 (feature level 289), the user
              keys were Zulip API email addresses, not user ID.
            type: object
          already_subscribed:
            additionalProperties:
              description: |
                `{id}`: List of the names of the channels that the user is
                already subscribed to.
              items:
                type: string
              type: array
            description: |
              A dictionary where the key is the ID of the user and the value
              is a list of the names of the channels that where the user was
              not added as a subscriber in this request, because they were
              already a subscriber.

              **Changes**: Before Zulip 10.0 (feature level 289), the user
              keys were Zulip API email addresses, not user IDs.
            type: object
          unauthorized:
            description: |
              A list of names of channels that the requesting user/bot was not
              authorized to subscribe to. Only present if `"authorization_errors_fatal": false`.
            items:
              type: string
            type: array
          new_subscription_messages_sent:
            description: |
              Only present if the parameter `send_new_subscription_messages`
              in the request was `true`.

              Whether Notification Bot DMs in fact sent to the added
              subscribers as requested by the `send_new_subscription_messages`
              parameter. Clients may find this value useful to communicate
              with users about the effect of this request.

              **Changes**: New in Zulip 11.0 (feature level 397).
            type: boolean
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        subscribed:
          key:
          - subscribed
          - subscribed
        new_subscription_messages_sent: true
        unauthorized:
        - unauthorized
        - unauthorized
        already_subscribed:
          key:
          - already_subscribed
          - already_subscribed
    unsubscribe_request:
      properties:
        subscriptions:
          description: |
            A list of channel names to unsubscribe from. This parameter is called
            `streams` in our Python API.
          example:
          - Verona
          - Denmark
          items:
            type: string
          type: array
        principals:
          $ref: "#/components/schemas/Principals"
      required:
      - subscriptions
      type: object
    unsubscribe_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          not_removed: []
          removed:
          - testing-help
          result: success
        properties:
          not_removed:
            description: |
              A list of the names of channels that the user is already unsubscribed
              from, and hence doesn't need to be unsubscribed.
            items:
              type: string
            type: array
          removed:
            description: |
              A list of the names of channels which were unsubscribed from as a result
              of the query.
            items:
              type: string
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        removed:
        - removed
        - removed
        not_removed:
        - not_removed
        - not_removed
    update_subscriptions_request_add_inner:
      additionalProperties: false
      properties:
        name:
          type: string
        color:
          type: string
        description:
          type: string
      type: object
    update_subscriptions_request:
      properties:
        delete:
          description: |
            A list of channel names to unsubscribe from.
          example:
          - Verona
          - Denmark
          items:
            type: string
          type: array
        add:
          description: |
            A list of objects describing which channels to subscribe to, optionally
            including per-user subscription parameters (e.g. color) and if the
            channel is to be created, its description.
          example:
          - name: Verona
          - name: Denmark
            color: "#e79ab5"
            description: A Scandinavian country
          items:
            $ref: "#/components/schemas/update_subscriptions_request_add_inner"
          type: array
      type: object
    update_subscriptions_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          already_subscribed:
            iago@zulip.com:
            - Verona
          not_removed: []
          removed:
          - testing-help
          result: success
        properties:
          subscribed:
            additionalProperties:
              description: |
                `{email_id}`: A list of the names of channels that
                the user was subscribed to as a result of the query.
              items:
                type: string
              type: array
            description: |
              A dictionary where the key is the Zulip API email
              address of the user/bot and the value is a
              list of the names of the channels that were
              subscribed to as a result of the query.
            type: object
          already_subscribed:
            additionalProperties:
              description: |
                `{email_id}`: A list of the names of channels that
                the user was already subscribed to.
              items:
                type: string
              type: array
            description: |
              A dictionary where the key is the Zulip API email
              address of the user/bot and the value is a
              list of the names of the channels that the
              user/bot is already subscribed to.
            type: object
          not_removed:
            description: |
              A list of the names of channels that the user
              is already unsubscribed from, and hence
              doesn't need to be unsubscribed.
            items:
              type: string
            type: array
          removed:
            description: |
              A list of the names of channels which were unsubscribed
              from as a result of the query.
            items:
              type: string
            type: array
          new_subscription_messages_sent:
            description: |
              Only present if the parameter `send_new_subscription_messages`
              in the request was `true`.

              Whether Notification Bot DMs in fact sent to the added
              subscribers as requested by the `send_new_subscription_messages`
              parameter. Clients may find this value useful to communicate
              with users about the effect of this request.

              **Changes**: New in Zulip 11.0 (feature level 397).
            type: boolean
        required:
        - already_subscribed
        - removed
        - subscribed
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        subscribed:
          key:
          - subscribed
          - subscribed
        new_subscription_messages_sent: true
        removed:
        - removed
        - removed
        not_removed:
        - not_removed
        - not_removed
        already_subscribed:
          key:
          - already_subscribed
          - already_subscribed
    mute_topic_request:
      properties:
        stream_id:
          description: |
            The ID of the channel to access.

            Clients must provide either `stream` or `stream_id` as a parameter
            to this endpoint, but not both.

            **Changes**: New in Zulip 2.0.0.
          example: 43
          type: integer
        stream:
          description: |
            The name of the channel to access.

            Clients must provide either `stream` or `stream_id` as a parameter
            to this endpoint, but not both. Clients should use `stream_id`
            instead of the `stream` parameter when possible.
          example: Denmark
          type: string
        topic:
          description: |
            The topic to (un)mute. Note that the request will succeed regardless of
            whether any messages have been sent to the specified topic.

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length.
          example: dinner
          type: string
        op:
          description: |
            Whether to mute (`add`) or unmute (`remove`) the provided topic.
          enum:
          - add
          - remove
          example: add
          type: string
      required:
      - op
      - topic
      type: object
    test_notify_request:
      properties:
        token:
          description: |
            The push token for the device to which to send the test notification.

            If this parameter is not submitted, the test notification will be sent
            to all of the user's devices registered on the server.

            A mobile client should pass this parameter, to avoid triggering a test
            notification for other clients.
          example: "111222"
          type: string
      type: object
    test_notify_400_response:
      oneOf:
      - $ref: "#/components/schemas/InvalidPushDeviceTokenError"
      - $ref: "#/components/schemas/InvalidRemotePushDeviceTokenError"
    e2ee_test_notify_request:
      properties:
        push_account_id:
          description: |
            The push account ID for the device to which to send the test notification.

            If this parameter is not submitted, the E2EE test notification will
            be sent to all of the user's devices registered on the server.

            A mobile client should pass this parameter, to avoid triggering a test
            notification for other clients.

            See [`POST /mobile_push/register`](/api/register-push-device)
            for details on push account IDs.
          example: 111222
          type: integer
      type: object
    e2ee_test_notify_502_response:
      oneOf:
      - $ref: "#/components/schemas/FailedToConnectBouncerError"
      - $ref: "#/components/schemas/InternalBouncerServerError"
    register_push_device_request:
      properties:
        token_kind:
          description: |
            Whether the token was generated by FCM or APNs.
          enum:
          - fcm
          - apns
          example: fcm
          type: string
        push_account_id:
          description: |
            A random integer generated by the client that will be included
            in mobile push notifications along with encrypted payloads to
            identify pushes as being related to this registration.
            Must be unique in the client's table of accounts.
          example: 2408
          type: integer
        push_public_key:
          description: |
            Public part of the asymmetric key pair generated by the client
            using NaCl (the Networking and Cryptography Library), encoded
            using a RFC 4648 standard base64 encoder.

            It is used to encrypt notifications for delivery to the client.
          example: push-public-key
          type: string
        bouncer_public_key:
          description: |
            Which of the bouncer's public keys the client used to encrypt the
            `PushRegistration` dictionary.

            When the bouncer rotates the key, a new asymmetric key pair is created,
            and the new public key is baked into a new client release. Because
            the bouncer routinely rotates key, this field clarifies which
            public key the client is using.
          example: bouncer-public-key
          type: string
        encrypted_push_registration:
          description: |
            Ciphertext generated by encrypting a `PushRegistration` dictionary
            using the `bouncer_public_key`, encoded using a RFC 4648 standard
            base64 encoder.

            The `PushRegistration` dictionary contains the fields `token`,
            `token_kind`, `timestamp`, and (for iOS devices) `ios_app_id`.
            The dictionary is JSON-encoded before encryption.
          example: encrypted-push-registration-data
          type: string
      required:
      - bouncer_public_key
      - encrypted_push_registration
      - push_account_id
      - push_public_key
      - token_kind
      type: object
    update_user_topic_request:
      properties:
        stream_id:
          description: |
            The ID of the channel to access.
          example: 1
          type: integer
        topic:
          description: |
            The topic for which the personal preferences needs to be updated.
            Note that the request will succeed regardless of whether
            any messages have been sent to the specified topic.

            Clients should use the `max_topic_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum topic length.

            Note: When the value of `realm_empty_topic_display_name` found in
            the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            **Changes**: Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.
          example: dinner
          type: string
        visibility_policy:
          description: |
            Controls which visibility policy to set.

            - 0 = None. Removes the visibility policy previously set for the topic.
            - 1 = Muted. [Mutes the topic](/help/mute-a-topic) in a channel.
            - 2 = Unmuted. [Unmutes the topic](/help/mute-a-topic) in a muted channel.
            - 3 = Followed. [Follows the topic](/help/follow-a-topic).

            In an unmuted channel, a topic visibility policy of unmuted will have the
            same effect as the "None" visibility policy.

            **Changes**: In Zulip 7.0 (feature level 219), added followed as
            a visibility policy option.
          enum:
          - 0
          - 1
          - 2
          - 3
          example: 1
          type: integer
      required:
      - stream_id
      - topic
      - visibility_policy
      type: object
    mute_user_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user ID is the current
          user's ID:
        example:
          code: BAD_REQUEST
          msg: Cannot mute self
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user is nonexistent or inaccessible:
        example:
          code: BAD_REQUEST
          msg: No such user
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user is already muted:
        example:
          code: BAD_REQUEST
          msg: User already muted
          result: error
    unmute_user_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user is nonexistent or inaccessible:
        example:
          code: BAD_REQUEST
          msg: No such user
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when the user is not previously muted:
        example:
          code: BAD_REQUEST
          msg: User is not muted
          result: error
    add_apns_token_request:
      properties:
        token:
          description: |
            The token provided by the device.
          example: c0ffee
          type: string
        appid:
          description: |
            The ID of the Zulip app that is making the request.

            **Changes**: In Zulip 8.0 (feature level 223), this parameter was made
            required. Previously, if it was unspecified, the server would use a default
            value (based on the `ZULIP_IOS_APP_ID` server setting, which
            defaulted to `"org.zulip.Zulip"`).
          example: org.zulip.Zulip
          type: string
      required:
      - appid
      - token
      type: object
    add_apns_token_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the token's length is invalid
          or it is empty:
        example:
          result: error
          msg: Empty or invalid length token
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the APNs token is invalid:
        example:
          result: error
          msg: Invalid APNS token
          code: BAD_REQUEST
    remove_apns_token_request:
      properties:
        token:
          description: |
            The token provided by the device.
          example: c0ffee
          type: string
      required:
      - token
      type: object
    remove_apns_token_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the token's length is invalid
          or it is empty:
        example:
          result: error
          msg: Empty or invalid length token
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the token does not exist:
        example:
          result: error
          msg: Token does not exist
          code: BAD_REQUEST
    add_fcm_token_request:
      properties:
        token:
          description: |
            The token provided by the device.
          example: android-token
          type: string
      required:
      - token
      type: object
    remove_fcm_token_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the token's length is invalid
          or is empty:
        example:
          result: error
          msg: Empty or invalid length token
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the token does not exist:
        example:
          result: error
          msg: Token does not exist
          code: BAD_REQUEST
    get_subscription_status_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          is_subscribed: false
        properties:
          is_subscribed:
            description: |
              Whether the user is subscribed to the channel.
            type: boolean
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        is_subscribed: true
    upload_custom_emoji_request:
      properties:
        filename:
          example: !!binary |-
            L3BhdGgvdG8vaW1nLnBuZw==
          format: binary
          type: string
      type: object
    get_custom_emoji_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          emoji:
            "1":
              id: "1"
              name: green_tick
              source_url: /user_avatars/1/emoji/images/1.png
              deactivated: false
              author_id: 5
        properties:
          emoji:
            additionalProperties:
              $ref: "#/components/schemas/RealmEmoji"
            description: |
              An object that contains `emoji` objects, each identified with their
              emoji ID as the key.
            type: object
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        emoji:
          key:
            still_url: still_url
            name: name
            id: id
            author_id: 0
            source_url: source_url
            deactivated: true
    get_presence_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          presences:
            iago@zulip.com:
              website:
                client: website
                pushable: false
                status: active
                timestamp: 1656958485
              aggregated:
                client: website
                status: active
                timestamp: 1656958485
          result: success
          server_timestamp: 1.6569585396287155E9
        properties:
          server_timestamp:
            description: |
              The time when the server fetched the `presences` data included
              in the response.
            type: number
          presences:
            additionalProperties:
              additionalProperties:
                $ref: "#/components/schemas/LegacyPresenceFormat"
              description: |
                `{user_email}`: Object containing the details of a user's presence.
                The object's key is the user's Zulip API email.
              type: object
            description: |
              A dictionary where each entry describes the presence details
              of a user in the Zulip organization.
            type: object
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        server_timestamp: 0.8008281904610115
        presences:
          key:
            key:
              pushable: true
              client: client
              status: idle
              timestamp: 6
    get_custom_profile_fields_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          custom_fields:
          - id: 1
            name: Phone number
            type: 1
            hint: ""
            field_data: ""
            order: 1
            required: true
            editable_by_user: false
          - id: 2
            name: Biography
            type: 2
            hint: What are you known for?
            field_data: ""
            order: 2
            required: true
            editable_by_user: true
          - id: 3
            name: Favorite food
            type: 1
            hint: "Or drink, if you'd prefer"
            field_data: ""
            order: 3
            required: false
            editable_by_user: true
          - id: 4
            name: Favorite editor
            type: 3
            hint: ""
            field_data: "{\"0\":{\"text\":\"Vim\",\"order\":\"1\"},\"1\":{\"text\"\
              :\"Emacs\",\"order\":\"2\"}}"
            order: 4
            display_in_profile_summary: true
            required: true
            editable_by_user: true
          - id: 5
            name: Birthday
            type: 4
            hint: ""
            field_data: ""
            order: 5
            required: false
            editable_by_user: false
          - id: 6
            name: Favorite website
            type: 5
            hint: Or your personal blog's URL
            field_data: ""
            order: 6
            display_in_profile_summary: true
            required: false
            editable_by_user: true
          - id: 7
            name: Mentor
            type: 6
            hint: ""
            field_data: ""
            order: 7
            required: true
            editable_by_user: false
          - id: 8
            name: GitHub
            type: 7
            hint: Enter your GitHub username
            field_data: "{\"subtype\":\"github\"}"
            order: 8
            required: true
            editable_by_user: true
          - id: 9
            name: Pronouns
            type: 8
            hint: What pronouns should people use to refer to you?
            order: 9
            required: false
            editable_by_user: true
        properties:
          custom_fields:
            description: |
              An array containing all the custom profile fields defined in this
              Zulip organization.
            items:
              $ref: "#/components/schemas/CustomProfileField"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        custom_fields:
        - display_in_profile_summary: false
          field_data: field_data
          editable_by_user: true
          hint: hint
          name: name
          id: 0
          type: 6
          required: true
          order: 1
        - display_in_profile_summary: false
          field_data: field_data
          editable_by_user: true
          hint: hint
          name: name
          id: 0
          type: 6
          required: true
          order: 1
    create_custom_profile_field_request:
      properties:
        name:
          description: |
            The name of the custom profile field, which will appear both in
            user-facing settings UI for configuring custom profile fields and
            in UI displaying a user's profile.
          example: Favorite programming language
          type: string
        hint:
          description: |
            The help text to be displayed for the custom profile field in user-facing
            settings UI for configuring custom profile fields.
          example: Your favorite programming language.
          type: string
        field_type:
          description: |
            The field type can be any of the supported custom profile field types. See the
            [custom profile fields documentation](/help/custom-profile-fields)
            for more details on what each type means.

            - **1**: Short text
            - **2**: Long text
            - **3**: List of options
            - **4**: Date picker
            - **5**: Link
            - **6**: Person picker
            - **7**: External account
            - **8**: Pronouns

            **Changes**: Field type `8` added in Zulip 6.0 (feature level 151).
          example: 3
          type: integer
        field_data:
          description: |
            Field types 3 (List of options) and 7 (External account) support storing
            additional configuration for the field type in the `field_data` attribute.

            For field type 3 (List of options), this attribute is a JSON dictionary
            defining the choices and the order they will be displayed in the
            dropdown UI for individual users to select an option.

            The interface for field type 7 is not yet stabilized.
          example:
            python:
              text: Python
              order: "1"
            java:
              text: Java
              order: "2"
          type: object
        display_in_profile_summary:
          description: |
            Whether clients should display this profile field in a summary section of a
            user's profile (or in a more easily accessible "small profile").

            At most 2 profile fields may have this property be true in a given
            organization. The "Long text" [profile field types][profile-field-types]
            profile field types cannot be selected to be displayed in profile summaries.

            The "Person picker" profile field is also not supported, but that is likely to
            be temporary.

            [profile-field-types]: /help/custom-profile-fields#profile-field-types

            **Changes**: New in Zulip 6.0 (feature level 146).
          example: true
          type: boolean
        required:
          description: |
            Whether an organization administrator has configured this profile field as
            required.

            Because the required property is mutable, clients cannot assume that a required
            custom profile field has a value. The Zulip web application displays a prominent
            banner to any user who has not set a value for a required field.

            **Changes**: New in Zulip 9.0 (feature level 244).
          example: true
          type: boolean
        editable_by_user:
          description: |
            Whether regular users can edit this profile field on their own account.

            Note that organization administrators can edit custom profile fields for any user
            regardless of this setting.

            **Changes**: New in Zulip 10.0 (feature level 296).
          example: true
          type: boolean
      required:
      - field_type
      type: object
    create_custom_profile_field_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          id: 9
        properties:
          id:
            description: |
              The ID for the custom profile field.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        id: 0
    reorder_custom_profile_fields_request:
      properties:
        order:
          description: |
            A list of the IDs of all the custom profile fields defined in this
            organization, in the desired new order.
          example:
          - 11
          - 10
          - 9
          - 8
          - 7
          - 6
          - 5
          - 4
          - 3
          - 2
          - 1
          items:
            type: integer
          type: array
      required:
      - order
      type: object
    update_realm_user_settings_defaults_request:
      properties:
        starred_message_counts:
          description: |
            Whether clients should display the [number of starred
            messages](/help/star-a-message#display-the-number-of-starred-messages).
          example: true
          type: boolean
        receives_typing_notifications:
          description: |
            Whether the user is configured to receive typing notifications from other users.
            The server will only deliver typing notifications events to users who for whom this
            is enabled.

            **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were
            only options to disable sending typing notifications.
          example: true
          type: boolean
        web_suggest_update_timezone:
          description: |
            Whether the user should be shown an alert, offering to update their
            [profile time zone](/help/change-your-timezone), when the time displayed
            for the profile time zone differs from the current time displayed by the
            time zone configured on their device.

            **Changes**: New in Zulip 10.0 (feature level 329).
          example: true
          type: boolean
        fluid_layout_width:
          description: |
            Whether to use the [maximum available screen width](/help/enable-full-width-display)
            for the web app's center panel (message feed, recent conversations) on wide screens.
          example: true
          type: boolean
        high_contrast_mode:
          description: |
            This setting is reserved for use to control variations in Zulip's design
            to help visually impaired users.
          example: true
          type: boolean
        web_mark_read_on_scroll_policy:
          description: |
            Whether or not to mark messages as read when the user scrolls through their
            feed.

            - 1 - Always
            - 2 - Only in conversation views
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 175). Previously, there was no
            way for the user to configure this behavior on the web, and the Zulip web and
            desktop apps behaved like the "Always" setting when marking messages as read.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        web_channel_default_view:
          description: |
            Web/desktop app setting controlling the default navigation
            behavior when clicking on a channel link.

            - 1 - Top topic in the channel
            - 2 - Channel feed
            - 3 - List of topics
            - 4 - Top unread topic in channel

            **Changes**: The "Top unread topic in channel" is new in Zulip 11.0
            (feature level 401).

            The "List of topics" option is new in Zulip 11.0 (feature level 383).

            New in Zulip 9.0 (feature level 269). Previously, this
            was not configurable, and every user had the "Channel feed" behavior.
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        web_font_size_px:
          description: |
            User-configured primary `font-size` for the web application, in pixels.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, font size was
            only adjustable via browser zoom. Note that this setting was not fully
            implemented at this feature level.
          example: 14
          type: integer
        web_line_height_percent:
          description: |
            User-configured primary `line-height` for the web application, in percent, so a
            value of 120 represents a `line-height` of 1.2.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, line height was
            not user-configurable. Note that this setting was not fully implemented at this
            feature level.
          example: 122
          type: integer
        color_scheme:
          description: |
            Controls which [color theme](/help/dark-theme) to use.

            - 1 - Automatic
            - 2 - Dark theme
            - 3 - Light theme

            Automatic detection is implementing using the standard `prefers-color-scheme`
            media query.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        enable_drafts_synchronization:
          description: |
            A boolean parameter to control whether synchronizing drafts is enabled for
            the user. When synchronization is disabled, all drafts stored in the server
            will be automatically deleted from the server.

            This does not do anything (like sending events) to delete local copies of
            drafts stored in clients.
          example: true
          type: boolean
        translate_emoticons:
          description: |
            Whether to [translate emoticons to emoji](/help/configure-emoticon-translations)
            in messages the user sends.
          example: true
          type: boolean
        display_emoji_reaction_users:
          description: |
            Whether to display the names of reacting users on a message.

            When enabled, clients should display the names of reacting users, rather than
            a count, for messages with few total reactions. The ideal cutoff may depend on
            the space available for displaying reactions; the official web application
            displays names when 3 or fewer total reactions are present with this setting
            enabled.

            **Changes**: New in Zulip 6.0 (feature level 125).
          example: false
          type: boolean
        web_home_view:
          description: |
            The [home view](/help/configure-home-view) used when opening a new
            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

            - "recent_topics" - Recent conversations view
            - "inbox" - Inbox view
            - "all_messages" - Combined feed view

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was
            called `default_view`, which was new in Zulip 4.0 (feature level 42).
          example: all_messages
          type: string
        web_escape_navigates_to_home_view:
          description: |
            Whether the escape key navigates to the
            [configured home view](/help/configure-home-view).

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was called
            `escape_navigates_to_default_view`, which was new in Zulip 5.0 (feature level 107).
          example: true
          type: boolean
        left_side_userlist:
          description: |
            Whether the users list on left sidebar in narrow windows.

            This feature is not heavily used and is likely to be reworked.
          example: true
          type: boolean
        emojiset:
          description: |
            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
            used to display emoji to the user everywhere they appear in the UI.

            - "google" - Google
            - "twitter" - Twitter
            - "text" - Plain text
            - "google-blob" - Google blobs
          example: google
          type: string
        demote_inactive_streams:
          description: |
            Whether to [hide inactive channels](/help/manage-inactive-channels) in the left sidebar.

            - 1 - Automatic
            - 2 - Always
            - 3 - Never
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        user_list_style:
          description: |
            The style selected by the user for the right sidebar user list.

            - 1 - Compact
            - 2 - With status
            - 3 - With avatar and status

            **Changes**: New in Zulip 6.0 (feature level 141).
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        web_animate_image_previews:
          description: |
            Controls how animated images should be played in the message feed in the web/desktop application.

            - "always" - Always play the animated images in the message feed.
            - "on_hover" - Play the animated images on hover over them in the message feed.
            - "never" - Never play animated images in the message feed.

            **Changes**: New in Zulip 9.0 (feature level 275). Previously, animated images
            always used to play in the message feed by default. This setting controls this
            behaviour.
          enum:
          - always
          - on_hover
          - never
          example: on_hover
          type: string
        web_stream_unreads_count_display_policy:
          description: |
            Configuration for which channels should be displayed with a numeric unread count in the left sidebar.
            Channels that do not have an unread count will have a simple dot indicator for whether there are any
            unread messages.

            - 1 - All channels
            - 2 - Unmuted channels and topics
            - 3 - No channels

            **Changes**: New in Zulip 8.0 (feature level 210).
          enum:
          - 1
          - 2
          - 3
          example: 2
          type: integer
        hide_ai_features:
          description: |
            Controls whether user wants AI features like topic summarization to
            be hidden in all Zulip clients.

            **Changes**: New in Zulip 10.0 (feature level 350).
          type: boolean
        web_left_sidebar_show_channel_folders:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            any channel folders configured by the organization.

            **Changes**: New in Zulip 11.0 (feature level 411).
          example: true
          type: boolean
        web_left_sidebar_unreads_count_summary:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            the unread message count summary.

            **Changes**: New in Zulip 11.0 (feature level 398).
          example: true
          type: boolean
        enable_stream_desktop_notifications:
          description: |
            Enable visual desktop notifications for channel messages.
          example: true
          type: boolean
        enable_stream_email_notifications:
          description: |
            Enable email notifications for channel messages.
          example: true
          type: boolean
        enable_stream_push_notifications:
          description: |
            Enable mobile notifications for channel messages.
          example: true
          type: boolean
        enable_stream_audible_notifications:
          description: |
            Enable audible desktop notifications for channel messages.
          example: true
          type: boolean
        notification_sound:
          description: |
            Notification sound name.
          example: ding
          type: string
        enable_desktop_notifications:
          description: |
            Enable visual desktop notifications for direct messages and @-mentions.
          example: true
          type: boolean
        enable_sounds:
          description: |
            Enable audible desktop notifications for direct messages and
            @-mentions.
          example: true
          type: boolean
        enable_followed_topic_desktop_notifications:
          description: |
            Enable visual desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        enable_followed_topic_email_notifications:
          description: |
            Enable email notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        enable_followed_topic_push_notifications:
          description: |
            Enable push notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: false
          type: boolean
        enable_followed_topic_audible_notifications:
          description: |
            Enable audible desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: false
          type: boolean
        email_notifications_batching_period_seconds:
          description: |
            The duration (in seconds) for which the server should wait to batch
            email notifications before sending them.
          example: 120
          type: integer
        enable_offline_email_notifications:
          description: |
            Enable email notifications for direct messages and @-mentions received
            when the user is offline.
          example: true
          type: boolean
        enable_offline_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is offline.
          example: true
          type: boolean
        enable_online_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is online.
          example: true
          type: boolean
        enable_digest_emails:
          description: |
            Enable digest emails when the user is away.
          example: true
          type: boolean
        message_content_in_email_notifications:
          description: |
            Include the message's content in email notifications for new messages.
          example: true
          type: boolean
        pm_content_in_desktop_notifications:
          description: |
            Include content of direct messages in desktop notifications.
          example: true
          type: boolean
        wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (E.g. @**all**) should send notifications
            like a personal mention.
          example: true
          type: boolean
        enable_followed_topic_wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (e.g., @**all**) in messages sent to followed topics
            should send notifications like a personal mention.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        desktop_icon_count_display:
          description: |
            Unread count badge (appears in desktop sidebar and browser tab)

            - 1 - All unread messages
            - 2 - DMs, mentions, and followed topics
            - 3 - DMs and mentions
            - 4 - None

            **Changes**: In Zulip 8.0 (feature level 227), added `DMs, mentions, and followed
            topics` option, renumbering the options to insert it in order.
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        realm_name_in_email_notifications_policy:
          description: |
            Whether to [include organization name in subject of message notification
            emails](/help/email-notifications#include-organization-name-in-subject-line).

            - 1 - Automatic
            - 2 - Always
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 168), replacing the
            previous `realm_name_in_notifications` boolean;
            `true` corresponded to `Always`, and `false` to `Never`.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        automatically_follow_topics_policy:
          description: |
            Which [topics to follow automatically](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        automatically_unmute_topics_in_muted_streams_policy:
          description: |
            Which [topics to unmute automatically in muted channels](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        automatically_follow_topics_where_mentioned:
          description: |
            Whether the server will automatically mark the user as following
            topics where the user is mentioned.

            **Changes**: New in Zulip 8.0 (feature level 235).
          example: true
          type: boolean
        resolved_topic_notice_auto_read_policy:
          description: |
            Controls whether the resolved-topic notices are marked as read.

            - "always" - Always mark resolved-topic notices as read.
            - "except_followed" - Mark resolved-topic notices as read in topics not followed by the user.
            - "never" - Never mark resolved-topic notices as read.

            **Changes**: New in Zulip 11.0 (feature level 385).
          enum:
          - always
          - except_followed
          - never
          example: except_followed
          type: string
        presence_enabled:
          description: |
            Display the presence status to other users when online.
          example: true
          type: boolean
        enter_sends:
          description: |
            Whether pressing Enter in the compose box sends a message
            (or saves a message edit).
          example: true
          type: boolean
        twenty_four_hour_time:
          description: |
            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

            **Changes**: New in Zulip 5.0 (feature level 99).
            Previously, this default was edited using the
            `default_twenty_four_hour_time` parameter to the `PATCH /realm` endpoint.
          example: true
          type: boolean
        send_private_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            direct messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        send_stream_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            channel messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        send_read_receipts:
          description: |
            Whether other users are allowed to see whether you've
            read messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        email_address_visibility:
          description: |
            The [policy][permission-level] for [which other users][help-email-visibility]
            in this organization can see the user's real email address.

            - 1 = Everyone
            - 2 = Members only
            - 3 = Administrators only
            - 4 = Nobody
            - 5 = Moderators only

            **Changes**: New in Zulip 7.0 (feature level 163), replacing the
            realm-level setting.

            [permission-level]: /api/roles-and-permissions#permission-levels
            [help-email-visibility]: /help/configure-email-visibility
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          example: 1
          type: integer
        web_navigate_to_sent_message:
          description: |
            Web/desktop app setting for whether the user's view should
            automatically go to the conversation where they sent a message.

            **Changes**: New in Zulip 9.0 (feature level 268). Previously,
            this behavior was not configurable.
          example: true
          type: boolean
      type: object
    update_subscription_settings_request_subscription_data_inner_value:
      description: |
        The new value of the property being modified.

        If the property is `"color"`, then `value` is a string
        representing the hex value of the user's display
        color for the channel. For all other above properties,
        `value` is a boolean.
      oneOf:
      - type: boolean
      - type: string
    update_subscription_settings_request_subscription_data_inner:
      additionalProperties: false
      example:
        stream_id: 2
        property: is_muted
        value: true
      properties:
        stream_id:
          description: |
            The unique ID of a channel.
          type: integer
        property:
          description: |
            One of the channel properties described below:

            - `"color"`: The hex value of the user's display color for the channel.

            - `"is_muted"`: Whether the channel is [muted](/help/mute-a-channel).<br>
              **Changes**: As of Zulip 6.0 (feature level 139), updating either
              `"is_muted"` or `"in_home_view"` generates two [subscription update
              events](/api/get-events#subscription-update), one for each property,
              that are sent to clients. Prior to this feature level, updating either
              property only generated a subscription update event for
              `"in_home_view"`. <br>
              Prior to Zulip 2.1.0, this feature was represented
              by the more confusingly named `"in_home_view"` (with the
              opposite value: `in_home_view=!is_muted`); for
              backwards-compatibility, modern Zulip still accepts that property.

            - `"pin_to_top"`: Whether to pin the channel at the top of the channel list.

            - `"desktop_notifications"`: Whether to show desktop notifications
              for all messages sent to the channel.

            - `"audible_notifications"`: Whether to play a sound
              notification for all messages sent to the channel.

            - `"push_notifications"`: Whether to trigger a mobile push
              notification for all messages sent to the channel.

            - `"email_notifications"`: Whether to trigger an email
              notification for all messages sent to the channel.

            - `"wildcard_mentions_notify"`: Whether wildcard mentions trigger
              notifications as though they were personal mentions in this channel.
          enum:
          - color
          - is_muted
          - in_home_view
          - pin_to_top
          - desktop_notifications
          - audible_notifications
          - push_notifications
          - email_notifications
          - wildcard_mentions_notify
          type: string
        value:
          $ref: "#/components/schemas/update_subscription_settings_request_subscription_data_inner_value"
      required:
      - property
      - stream_id
      - value
      type: object
    update_subscription_settings_request:
      properties:
        subscription_data:
          description: |
            A list of objects that describe the changes that should be applied in
            each subscription. Each object represents a subscription, and must have
            a `stream_id` key that identifies the channel, as well as the `property`
            being modified and its new `value`.
          example:
          - stream_id: 1
            property: pin_to_top
            value: true
          - stream_id: 3
            property: color
            value: "#f00f00"
          items:
            $ref: "#/components/schemas/update_subscription_settings_request_subscription_data_inner"
          type: array
      required:
      - subscription_data
      type: object
    get_user_by_email_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          user:
            date_joined: 2019-10-20T07:50:53.729659+00:00
            full_name: King Hamlet
            is_guest: false
            profile_data:
              "4":
                value: "0"
              "2":
                value: |-
                  I am:
                  * The prince of Denmark
                  * Nephew to the usurping Claudius
                rendered_value: |-
                  <p>I am:</p>
                  <ul>
                  <li>The prince of Denmark</li>
                  <li>Nephew to the usurping Claudius</li>
                  </ul>
              "5":
                value: 1900-01-01
              "7":
                value: "[11]"
              "6":
                value: https://blog.zulig.org
              "1":
                value: +0-11-23-456-7890
                rendered_value: <p>+0-11-23-456-7890</p>
              "8":
                value: zulipbot
              "3":
                rendered_value: <p>Dark chocolate</p>
                value: Dark chocolate
            user_id: 10
            is_bot: false
            bot_type: null
            timezone: ""
            is_admin: false
            is_owner: false
            role: 400
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            is_active: true
            email: hamlet@zulip.com
            delivery_email: null
        properties:
          user:
            $ref: "#/components/schemas/User"
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        user:
          is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
    update_user_by_email_request:
      properties:
        full_name:
          description: |
            The user's full name.

            **Changes**: Removed unnecessary JSON-encoding of this parameter in
            Zulip 5.0 (feature level 106).
          example: NewName
          type: string
        role:
          description: |
            New [role](/api/roles-and-permissions) for the user. Roles are encoded as:

            - Organization owner: 100
            - Organization administrator: 200
            - Organization moderator: 300
            - Member: 400
            - Guest: 600

            Only organization owners can add or remove the owner role.

            The owner role cannot be removed from the only organization owner.

            **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous
            pair of `is_admin` and `is_guest` boolean parameters. Organization moderator
            role added in Zulip 4.0 (feature level 60).
          example: 400
          type: integer
        profile_data:
          description: |
            A dictionary containing the updated custom profile field data for the user.
          example:
          - id: 4
            value: "0"
          - id: 5
            value: 1909-04-05
          items:
            type: object
          type: array
        new_email:
          description: |
            New email address for the user. Requires the user making the request
            to be an organization owner and additionally have the `.can_change_user_emails`
            special permission.

            **Changes**: New in Zulip 10.0 (feature level 285).
          example: username@example.com
          type: string
      type: object
    deactivate_user_request:
      properties:
        deactivation_notification_comment:
          description: |
            If not `null`, requests that the deactivated user receive
            a notification email about their account deactivation.

            If not `""`, encodes custom text written by the administrator
            to be included in the notification email.

            **Changes**: New in Zulip 5.0 (feature level 135).
          example: |
            Farewell!
          type: string
      type: object
    get_linkifiers_200_response_allOf_linkifiers_inner:
      additionalProperties: false
      example:
        pattern: pattern
        url_template: url_template
        id: 0
      properties:
        pattern:
          description: |
            The string regex pattern which represents the pattern that
            should be linkified by this linkifier.
          type: string
        url_template:
          description: |
            The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html) compliant
            URL template to be used for linkifying matches.

            **Changes**: New in Zulip 7.0 (feature level 176). This replaced `url_format`,
            which contained a URL format string.
          type: string
        id:
          description: |
            The ID of the linkifier.
          type: integer
      type: object
    get_linkifiers_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          linkifiers:
          - pattern: "#(?P<id>[0-9]+)"
            url_template: "https://github.com/zulip/zulip/issues/{id}"
            id: 1
          result: success
        properties:
          linkifiers:
            description: |
              An ordered array of objects, where each object
              describes a linkifier.

              Clients should always process linkifiers in the order given;
              this is important if the realm has linkifiers with overlapping
              patterns. The order can be modified using [`PATCH
              /realm/linkifiers`](/api/reorder-linkifiers).
            items:
              $ref: "#/components/schemas/get_linkifiers_200_response_allOf_linkifiers_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        linkifiers:
        - pattern: pattern
          url_template: url_template
          id: 0
        - pattern: pattern
          url_template: url_template
          id: 0
        ignored_parameters_unsupported: ""
    reorder_linkifiers_request:
      properties:
        ordered_linkifier_ids:
          description: |
            A list of the IDs of all the linkifiers defined in this
            organization, in the desired new order.
          example:
          - 3
          - 2
          - 1
          - 5
          items:
            type: integer
          type: array
      required:
      - ordered_linkifier_ids
      type: object
    add_linkifier_request:
      properties:
        pattern:
          $ref: "#/components/schemas/LinkifierPattern"
        url_template:
          $ref: "#/components/schemas/LinkifierURLTemplate"
      required:
      - pattern
      - url_template
      type: object
    add_linkifier_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          id: 42
          result: success
          msg: ""
        properties:
          id:
            description: |
              The numeric ID assigned to this filter.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        id: 0
    add_code_playground_request:
      properties:
        name:
          description: |
            The user-visible display name of the playground which can be
            used to pick the target playground, especially when multiple
            playground options exist for that programming language.
          example: Python playground
          type: string
        pygments_language:
          description: |
            The name of the Pygments language lexer for that
            programming language.
          example: Python
          type: string
        url_template:
          description: |
            The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html)
            compliant URL template for the playground. The template should
            contain exactly one variable named `code`, which determines how the
            extracted code should be substituted in the playground URL.

            **Changes**: New in Zulip 8.0 (feature level 196). This replaced the
            `url_prefix` parameter, which was used to construct URLs by just
            concatenating `url_prefix` and `code`.
          example: "https://python.example.com?code={code}"
          type: string
      required:
      - name
      - pygments_language
      - url_template
      type: object
    add_code_playground_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          id: 1
          result: success
          msg: ""
        properties:
          id:
            description: |
              The numeric ID assigned to this playground.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        id: 0
    get_realm_exports_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          exports:
          - acting_user_id: 11
            deleted_timestamp: null
            export_type: 1
            export_time: 1.722243168134179E9
            export_url: http://example.zulipchat.com/user_avatars/exports/2/FprbwiF0c_sCN0O-rf-ryFtc/zulip-export-p6yuxc45.tar.gz
            id: 323
            failed_timestamp: null
            pending: false
          msg: ""
          result: success
        properties:
          exports:
            description: |
              An array of dictionaries where each dictionary contains
              details about a data export of the organization.
            items:
              $ref: "#/components/schemas/RealmExport"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        exports:
        - export_type: 2
          failed_timestamp: 5.637376656633329
          acting_user_id: 6
          pending: true
          export_url: export_url
          id: 0
          export_time: 1.4658129805029452
          deleted_timestamp: 5.962133916683182
        - export_type: 2
          failed_timestamp: 5.637376656633329
          acting_user_id: 6
          pending: true
          export_url: export_url
          id: 0
          export_time: 1.4658129805029452
          deleted_timestamp: 5.962133916683182
    export_realm_request:
      properties:
        export_type:
          default: 1
          description: |
            Whether to create a public or a standard data export.

            - 1 = Public data export.
            - 2 = Standard data export.

            If not specified, defaults to 1.

            **Changes**: New in Zulip 10.0 (feature level 304). Previously,
            all export requests were public data exports.
          enum:
          - 1
          - 2
          example: 2
          type: integer
      type: object
    export_realm_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          id: 1
          result: success
          msg: ""
        properties:
          id:
            description: |
              The ID of the data export created.

              **Changes**: New in Zulip 7.0 (feature level 182).
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        id: 0
    get_realm_export_consents_200_response_allOf_export_consents_inner:
      additionalProperties: false
      example:
        user_id: 0
        consented: true
      properties:
        user_id:
          description: |
            The user ID.
          type: integer
        consented:
          description: |
            Whether the user has consented for their private data export.
          type: boolean
      type: object
    get_realm_export_consents_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          export_consents:
          - user_id: 11
            consented: true
          - user_id: 6
            consented: false
          msg: ""
          result: success
        properties:
          export_consents:
            description: |
              An array of objects where each object contains a user ID and
              whether the user has consented for their private data to be exported.
            items:
              $ref: "#/components/schemas/get_realm_export_consents_200_response_allOf_export_consents_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        export_consents:
        - user_id: 0
          consented: true
        - user_id: 0
          consented: true
    get_invites_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          invites:
          - email: example@zulip.com
            expiry_date: null
            id: 1
            invited: 1710606654
            invited_as: 200
            invited_by_user_id: 9
            notify_referrer_on_join: true
            is_multiuse: false
          - expiry_date: 1711463862
            id: 1
            invited: 1710599862
            invited_as: 400
            invited_by_user_id: 9
            is_multiuse: true
            notify_referrer_on_join: true
            link_url: https://example.zulipchat.com/join/yddhtzk4jgl7rsmazc5fyyyy/
        properties:
          invites:
            description: |
              An array of objects, each representing a single unexpired
              [invitation](/help/invite-new-users).
            items:
              $ref: "#/components/schemas/Invite"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        invites:
        - invited_as: 5
          expiry_date: 5
          invited: 1
          invited_by_user_id: 6
          link_url: link_url
          is_multiuse: true
          id: 0
          notify_referrer_on_join: true
          email: email
        - invited_as: 5
          expiry_date: 5
          invited: 1
          invited_by_user_id: 6
          link_url: link_url
          is_multiuse: true
          id: 0
          notify_referrer_on_join: true
          email: email
    send_invites_request:
      properties:
        invitee_emails:
          description: |
            The string containing the email addresses, separated by commas or
            newlines, that will be sent an invitation.
          example: "example@zulip.com, logan@zulip.com"
          type: string
        invite_expires_in_minutes:
          $ref: "#/components/schemas/InviteExpirationParameter"
        invite_as:
          $ref: "#/components/schemas/InviteRoleParameter"
        stream_ids:
          description: |
            A list containing the [IDs of the channels](/api/get-stream-id) that the
            newly created user will be automatically subscribed to if the invitation
            is accepted, in addition to any default channels that the new user may
            be subscribed to based on the `include_realm_default_subscriptions`
            parameter.

            Requested channels must either be default channels for the
            organization, or ones the acting user has permission to add
            subscribers to.

            This list must be empty if the current user has the unlikely
            configuration of being able to send invitations while lacking
            permission to [subscribe other users to channels][can-subscribe-others].

            **Changes**: Prior to Zulip 10.0 (feature level 342), default channels
            that the acting user did not directly have permission to add
            subscribers to would be rejected.

            Before Zulip 7.0 (feature level 180), specifying `stream_ids` as an
            empty list resulted in an error.

            [can-subscribe-others]: /help/configure-who-can-invite-to-channels
          example:
          - 1
          - 10
          items:
            type: integer
          type: array
        group_ids:
          description: |
            A list containing the [IDs of the user groups](/api/get-user-groups) that
            the newly created user will be automatically added to if the invitation
            is accepted. If the list is empty, then the new user will not be
            added to any user groups. The acting user must have permission to add users
            to the groups listed in this request.

            **Changes**: New in Zulip 10.0 (feature level 322).
          example: []
          items:
            type: integer
          type: array
        include_realm_default_subscriptions:
          default: false
          description: |
            Boolean indicating whether the newly created user should be subscribed
            to the [default channels][default-channels] for the organization.

            Note that this parameter can be `true` even if the user creating the
            invitation does not generally have permission to [subscribe other
            users to channels][can-subscribe-others].

            **Changes**: New in Zulip 9.0 (feature level 261). Previous versions
            of Zulip behaved as though this parameter was always `false`; clients
            needed to include the organization's default channels in the
            `stream_ids` parameter for a newly created user to be automatically
            subscribed to them.

            [default-channels]: /help/set-default-channels-for-new-users
            [can-subscribe-others]: /help/configure-who-can-invite-to-channels
          example: false
          type: boolean
        notify_referrer_on_join:
          default: true
          description: |
            A boolean indicating whether the referrer would like to receive a
            direct message from [notification
            bot](/help/configure-automated-notices) when a user account is created
            using this invitation.

            **Changes**: New in Zulip 9.0 (feature level 267). Previously,
            referrers always received such direct messages.
          example: false
          type: boolean
        welcome_message_custom_text:
          description: |
            Custom message text, in Zulip Markdown format, to be sent by the
            Welcome Bot to new users that join the organization via this
            invitation.

            Maximum length is 8000 characters.

            Only organization administrators can use this feature; for other
            users, the value is always `null`.

            - `null`: the organization's default `welcome_message_custom_text` is used.
            - Empty string: no Welcome Bot custom message is sent.
            - Otherwise, the provided string is the custom message.

            **Changes**: New in Zulip 11.0 (feature level 416).
          example: Welcome to Zulip! We're excited to have you on board.
          nullable: true
          type: string
      required:
      - invitee_emails
      - stream_ids
      type: object
    send_invites_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
        properties:
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
    send_invites_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/InvitationFailedError"
        description: |
          An example JSON error response for when some of the specified email addresses
          have existing Zulip accounts.
        example:
          result: error
          msg: "Some of those addresses are already using Zulip, so we didn't send\
            \ them an invitation. We did send invitations to everyone else!"
          errors:
          - - hamlet@zulip.com
            - Already has an account.
            - false
          sent_invitations: true
          license_limit_reached: false
          daily_limit_reached: false
          code: INVITATION_FAILED
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the user doesn't have permission
          to send invitations.
        example:
          code: BAD_REQUEST
          msg: Insufficient permission
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when no email address is specified.
        example:
          code: BAD_REQUEST
          msg: You must specify at least one email address.
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when any of the specified channels
          does not exist or the user does not have permission to access one of
          the targeted channels.
        example:
          code: BAD_REQUEST
          msg: Invalid channel ID 11. No invites were sent.
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the user doesn't have permission
          to subscribe other users to channels and `stream_ids` is not empty.
        example:
          code: BAD_REQUEST
          msg: You do not have permission to subscribe other users to channels.
          result: error
    create_invite_link_request:
      properties:
        invite_expires_in_minutes:
          $ref: "#/components/schemas/InviteExpirationParameter"
        invite_as:
          $ref: "#/components/schemas/InviteRoleParameter"
        stream_ids:
          default: []
          description: |
            A list containing the [IDs of the channels](/api/get-stream-id) that the
            newly created user will be automatically subscribed to if the invitation
            is accepted, in addition to any default channels that the new user may
            be subscribed to based on the `include_realm_default_subscriptions`
            parameter.

            Requested channels must either be default channels for the
            organization, or ones the acting user has permission to add
            subscribers to.

            This list must be empty if the current user has the unlikely
            configuration of being able to create reusable invitation links while
            lacking permission to [subscribe other users to
            channels][can-subscribe-others].

            **Changes**: Prior to Zulip 10.0 (feature level 342), default channels
            that the acting user did not directly have permission to add
            subscribers to would be rejected.

            [can-subscribe-others]: /help/configure-who-can-invite-to-channels
          example:
          - 1
          - 10
          items:
            type: integer
          type: array
        group_ids:
          default: []
          description: |
            A list containing the [IDs of the user groups](/api/get-user-groups) that
            the newly created user will be automatically added to if the invitation
            is accepted. If the list is empty, then the new user will not be
            added to any user groups. The acting user must have permission to add users
            to the groups listed in this request.

            **Changes**: New in Zulip 10.0 (feature level 322).
          example: []
          items:
            type: integer
          type: array
        include_realm_default_subscriptions:
          default: false
          description: |
            Boolean indicating whether the newly created user should be subscribed
            to the [default channels][default-channels] for the organization.

            Note that this parameter can be `true` even if the current user does
            not generally have permission to [subscribe other users to
            channels][can-subscribe-others].

            **Changes**: New in Zulip 9.0 (feature level 261). Previous versions
            of Zulip behaved as though this parameter was always `false`; clients
            needed to include the organization's default channels in the
            `stream_ids` parameter for a newly created user to be automatically
            subscribed to them.

            [default-channels]: /help/set-default-channels-for-new-users
            [can-subscribe-others]: /help/configure-who-can-invite-to-channels
          example: false
          type: boolean
        welcome_message_custom_text:
          description: |
            Custom message text, in Zulip Markdown format, to be sent by the
            Welcome Bot to new users that join the organization via this
            invitation.

            Maximum length is 8000 characters.

            Only organization administrators can use this feature; for other
            users, the value is always `null`.

            - `null`: the organization's default `welcome_message_custom_text` is used.
            - Empty string: no Welcome Bot custom message is sent.
            - Otherwise, the provided string is the custom message.

            **Changes**: New in Zulip 11.0 (feature level 416).
          example: Welcome to Zulip! We're excited to have you on board.
          nullable: true
          type: string
      type: object
    create_invite_link_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          invite_link: https://example.zulipchat.com/join/yddhtzk4jgl7rsmazc5fyyyy/
        properties:
          invite_link:
            description: |
              The URL of the [reusable invitation link](/help/invite-new-users#create-a-reusable-invitation-link)
              that was created by this request.
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        invite_link: invite_link
    create_invite_link_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the user doesn't have permission
          to send invitations.
        example:
          code: BAD_REQUEST
          msg: Insufficient permission
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when any of the specified channels
          does not exist or the user does not have permission to access one of
          the targeted channels.
        example:
          code: BAD_REQUEST
          msg: Invalid channel ID 11. No invites were sent.
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON error response for when the user doesn't have permission
          to subscribe other users to channels and `stream_ids` is not empty.
        example:
          code: BAD_REQUEST
          msg: You do not have permission to subscribe other users to channels.
          result: error
    revoke_invite_link_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for an invalid invitation link ID:
        example:
          result: error
          msg: No such invitation
          code: BAD_REQUEST
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          A typical failed JSON response for when the invitation link has already
          been revoked:
        example:
          result: error
          msg: Invitation has already been revoked
          code: BAD_REQUEST
    test_welcome_bot_custom_message_request:
      properties:
        welcome_message_custom_text:
          description: |
            Custom message text, in Zulip Markdown format, to be used for
            this test message.

            Maximum length is 8000 characters.
          example: Welcome to Zulip! We're excited to have you on board.
          maxLength: 8000
          type: string
      required:
      - welcome_message_custom_text
      type: object
    test_welcome_bot_custom_message_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          message_id: 1
        properties:
          message_id:
            description: |
              The message_id of the test welcome bot custom message.
            type: integer
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        message_id: 0
    register_queue_request:
      properties:
        apply_markdown:
          default: false
          description: |
            Set to `true` if you would like the content to be rendered in HTML
            format (otherwise the API will return the raw text that the user
            entered)
          example: true
          type: boolean
        client_gravatar:
          description: |
            Whether the client supports computing gravatars URLs. If
            enabled, `avatar_url` will be included in the response only
            if there is a Zulip avatar, and will be `null` for users who
            are using gravatar as their avatar. This option
            significantly reduces the compressed size of user data,
            since gravatar URLs are long, random strings and thus do not
            compress well. The `client_gravatar` field is set to `true` if
            clients can compute their own gravatars.

            The default value is `true` for authenticated requests and
            `false` for [unauthenticated
            requests](/help/public-access-option). Passing `true` in
            an unauthenticated request is an error.

            **Changes**: Before Zulip 6.0 (feature level 149), this
            parameter was silently ignored and processed as though it
            were `false` in unauthenticated requests.
          example: false
          type: boolean
        include_subscribers:
          default: "false"
          description: |
            Whether each returned channel object should include a `subscribers`
            field containing a list of the user IDs of its subscribers.

            Client apps supporting organizations with many thousands of users
            should not pass `true`, because the full subscriber matrix may be
            several megabytes of data. The `partial` value, combined with the
            `subscriber_count` and fetching subscribers for individual channels as
            needed, is recommended to support client app features where channel
            subscriber data is useful.

            If a client passes `partial` for this parameter, the server may,
            for some channels, return a subset of the channel's subscribers
            in the `partial_subscribers` field instead of the `subscribers` field,
            which always contains the complete set of subscribers.

            The server guarantees that it will always return a `subscribers`
            field for channels with fewer than 250 total subscribers. When
            returning a `partial_subscribers` field, the server guarantees
            that all bot users and users active within the last 14 days will
            be included. For other cases, the server may use its discretion
            to determine which channels and users to include, balancing between
            payload size and usefulness of the data provided to the client.

            Passing `true` in an [unauthenticated
            request](/help/public-access-option) is an error.

            **Changes**: The `partial` value is new in Zulip 11.0 (feature level 412).

            Before Zulip 6.0 (feature level 149), this parameter was silently
            ignored and processed as though it were `false` in unauthenticated
            requests.

            New in Zulip 2.1.0.
          enum:
          - "true"
          - "false"
          - partial
          example: "true"
          type: string
        slim_presence:
          default: false
          description: |
            If `true`, the `presences` object returned in the response will be keyed
            by user ID and the entry for each user's presence data will be in the
            modern format.

            **Changes**: New in Zulip 3.0 (no feature level; API unstable).
          example: true
          type: boolean
        presence_history_limit_days:
          description: |
            Limits how far back in time to fetch user presence data. If not specified,
            defaults to 14 days. A value of N means that the oldest presence data
            fetched will be from at most N days ago.

            **Changes**: New in Zulip 10.0 (feature level 288).
          example: 365
          type: integer
        event_types:
          $ref: "#/components/schemas/Event_types"
        all_public_streams:
          $ref: "#/components/schemas/AllPublicChannels"
        client_capabilities:
          description: |
            Dictionary containing details on features the client supports that are
            relevant to the format of responses sent by the server.

            - `notification_settings_null`: Boolean for whether the
              client can handle the current API with `null` values for
              channel-level notification settings (which means the channel
              is not customized and should inherit the user's global
              notification settings for channel messages).
              <br />
              **Changes**: New in Zulip 2.1.0. In earlier Zulip releases,
              channel-level notification settings were simple booleans.

            - `bulk_message_deletion`: Boolean for whether the client's
              handler for the `delete_message` event type has been
              updated to process the new bulk format (with a
              `message_ids`, rather than a singleton `message_id`).
              Otherwise, the server will send `delete_message` events
              in a loop.
              <br />
              **Changes**: New in Zulip 3.0 (feature level 13). This
              capability is for backwards-compatibility; it will be
              required in a future server release.

            - `user_avatar_url_field_optional`: Boolean for whether the
              client required avatar URLs for all users, or supports
              using `GET /avatar/{user_id}` to access user avatars. If the
              client has this capability, the server may skip sending a
              `avatar_url` field in the `realm_user` at its sole discretion
              to optimize network performance. This is an important optimization
              in organizations with 10,000s of users.
              <br />
              **Changes**: New in Zulip 3.0 (feature level 18).

            - `stream_typing_notifications`: Boolean for whether the client
              supports channel typing notifications.
              <br />
              **Changes**: New in Zulip 4.0 (feature level 58). This capability is
              for backwards-compatibility; it will be required in a
              future server release.

            - `user_settings_object`: Boolean for whether the client supports the modern
              `user_settings` event type. If false, the server will additionally send the
              legacy `update_global_notifications` and `update_display_settings` event
              types.
              <br />
              **Changes**: New in Zulip 5.0 (feature level 89). This capability is for
              backwards-compatibility; it will be removed in a future server release.
              Because the feature level 89 API changes were merged together, clients can
              safely make a request with this client capability and also request all three
              event types (`user_settings`, `update_display_settings`,
              `update_global_notifications`), and get exactly one copy of settings data on
              any server version. Clients can then use the `zulip_feature_level` in the
              `/register` response or the presence/absence of a `user_settings` key to
              determine where to look for the data.

            - `linkifier_url_template`: Boolean for whether the client accepts
              [linkifiers][help-linkifiers] that use [RFC 6570][rfc6570] compliant
              URL templates for linkifying matches. If false or unset, then the
              `realm_linkifiers` array in the `/register` response will be empty
              if present, and no `realm_linkifiers` [events][events-linkifiers]
              will be sent to the client.
              <br />
              **Changes**: New in Zulip 7.0 (feature level 176). This capability
              is for backwards-compatibility.

            - `user_list_incomplete`: Boolean for whether the client supports not having an
              incomplete user database. If true, then the `realm_users` array in the `register`
              response will not include data for inaccessible users and clients of guest users will
              not receive `realm_user op:add` events for newly created users that are not accessible
              to the current user.
              <br />
              **Changes**: New in Zulip 8.0 (feature level 232). This
              capability is for backwards-compatibility.

            - `include_deactivated_groups`: Boolean for whether the client can handle
              deactivated user groups by themselves. If false, then the `realm_user_groups`
              array in the `/register` response will only include active groups, clients
              will receive a `remove` event instead of `update` event when a group is
              deactivated and no `update` event will be sent to the client if a deactivated
              user group is renamed.
              <br />
              **Changes**: New in Zulip 10.0 (feature level 294). This
              capability is for backwards-compatibility.

            - `archived_channels`: Boolean for whether the client supports processing
              [archived channels](/help/archive-a-channel) in the `stream` and
              `subscription` event types. If `false`, the server will not include data
              related to archived channels in the `register` response or in events.
              <br />
              **Changes**: New in Zulip 10.0 (feature level 315). This allows clients to
              access archived channels, without breaking backwards-compatibility for
              existing clients.

            - `empty_topic_name`: Boolean for whether the client supports processing
              the empty string as a topic name. Clients not declaring this capability
              will be sent the value of `realm_empty_topic_display_name` found in the
              [POST /register](/api/register-queue) response instead of the empty string
              wherever topic names appear in the register response or events involving
              topic names.
              <br/>
              **Changes**: New in Zulip 10.0 (feature level 334). Previously,
              the empty string was not a valid topic name.

            - `simplified_presence_events`: Boolean for whether the client supports
              receiving the [`presence` event type](/api/get-events#presence) with
              user presence data in the modern format. If true, the server will
              send these events with the `presences` field that has the user presence
              data in the modern format. Otherwise, these event will contain fields
              with legacy format user presence data.
              <br />
              **Changes**: New in Zulip 11.0 (feature level 419).

            [help-linkifiers]: /help/add-a-custom-linkifier
            [rfc6570]: https://www.rfc-editor.org/rfc/rfc6570.html
            [events-linkifiers]: /api/get-events#realm_linkifiers
          example:
            notification_settings_null: true
          type: object
        fetch_event_types:
          description: |
            Same as the `event_types` parameter except that the values in
            `fetch_event_types` are used to fetch initial data. If
            `fetch_event_types` is not provided, `event_types` is used and if
            `event_types` is not provided, this parameter defaults to `null`.

            Event types not supported by the server are ignored, in order to simplify
            the implementation of client apps that support multiple server versions.
          example:
          - message
          items:
            type: string
          type: array
        narrow:
          $ref: "#/components/schemas/Narrow"
      type: object
    register_queue_200_response_allOf_custom_profile_field_types_value:
      additionalProperties: false
      description: |
        `{FIELD_TYPE}`: Dictionary which contains the details
        of the field type with the field type as the name of the
        property itself. The current supported field types are as follows:

        - `SHORT_TEXT`
        - `LONG_TEXT`
        - `DATE` for date-based fields.
        - `SELECT` for a list of options.
        - `URL` for links.
        - `EXTERNAL_ACCOUNT` for external accounts.
        - `USER` for selecting a user for the field.
        - `PRONOUNS` for a short text field with convenient typeahead for one's preferred pronouns.

        **Changes**: `PRONOUNS` type added in Zulip 6.0 (feature level 151).
      example:
        name: name
        id: 1
      properties:
        id:
          description: |
            The ID of the custom profile field type.
          type: integer
        name:
          description: |
            The name of the custom profile field type.
          type: string
      type: object
    register_queue_200_response_allOf_presences_value:
      description: |
        Will be one of these two formats (modern or legacy) for user
        presence data:
      oneOf:
      - $ref: "#/components/schemas/ModernPresenceFormat"
      - additionalProperties:
          $ref: "#/components/schemas/LegacyPresenceFormat"
        description: |
          `{user_email}`: Presence data (legacy format) for the user with
          the specified Zulip API email.
        type: object
      type: object
    register_queue_200_response_allOf_realm_linkifiers_inner:
      additionalProperties: false
      example:
        pattern: pattern
        url_template: url_template
        id: 9
      properties:
        pattern:
          description: |
            The [Python regular expression](https://docs.python.org/3/howto/regex.html)
            pattern which represents the pattern that should be linkified on matching.
          type: string
        url_template:
          description: |
            The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html) compliant URL
            template with which the pattern matching string should be linkified.

            **Changes**: New in Zulip 7.0 (feature level 176). This replaced `url_format`,
            which contained a URL format string.
          type: string
        id:
          description: |
            The ID of the linkifier.
          type: integer
      type: object
    register_queue_200_response_allOf_realm_embedded_bots_inner:
      additionalProperties: false
      description: |
        Object containing details of an embedded bot. Embedded bots are an experimental
        feature not enabled in production yet.
      example:
        name: name
        config:
          key: config
      properties:
        name:
          description: |
            The name of the bot.
          type: string
        config:
          additionalProperties:
            description: |
              `{config_key}`: Description/value of the configuration data key.
            type: string
          description: |
            A dictionary of string key/value pairs, which describe the configuration
            for the bot. These are usually details like API keys, and are unique to
            the integration/bot. Can be an empty dictionary.
          type: object
      type: object
    register_queue_200_response_allOf_realm_incoming_webhook_bots_inner:
      additionalProperties: false
      description: |
        Object containing details of the bot.
      example:
        all_event_types:
        - all_event_types
        - all_event_types
        url_options:
        - validator: validator
          label: label
          key: key
        - validator: validator
          label: label
          key: key
        config_options:
        - validator: validator
          label: label
          key: key
        - validator: validator
          label: label
          key: key
        name: name
        display_name: display_name
      properties:
        name:
          description: |
            A machine-readable unique name identifying the integration, all-lower-case without
            spaces.
          type: string
        display_name:
          description: |
            A human-readable display name identifying the integration that this bot implements,
            intended to be used in menus for selecting which integration to create.

            **Changes**: New in Zulip 8.0 (feature level 207).
          type: string
        all_event_types:
          description: |
            For incoming webhook integrations that support the Zulip server filtering incoming
            events, the list of event types supported by it.

            A null value will be present if this incoming webhook integration doesn't support
            such filtering.

            **Changes**: New in Zulip 8.0 (feature level 207).
          items:
            type: string
          nullable: true
          type: array
        config_options:
          description: |
            An array of configuration options that can be set when creating
            a bot user for this incoming webhook integration.

            This is an unstable API. Please discuss in chat.zulip.org before
            using it.

            **Changes**: As of Zulip 11.0 (feature level 403), this
            object is reserved for integration-specific configuration options
            that can be set when creating a bot user. Previously, this object
            also included optional webhook URL parameters, which are now
            specified in the `url_options` object.

            Before Zulip 10.0 (feature level 318), this field was named `config`,
            and was reserved for configuration data key-value pairs.
          items:
            $ref: "#/components/schemas/WebhookConfigOption_inner"
          type: array
        url_options:
          description: |
            An array of optional URL parameter options for the incoming webhook
            integration. In the web app, these are used when
            [generating a URL for an integration](/help/generate-integration-url).

            This is an unstable API expected to be used only by the Zulip web
            app. Please discuss in chat.zulip.org before using it.

            **Changes**: New in Zulip 11.0 (feature level 403). Previously,
            these optional URL parameter options were included in the
            `config_options` object.
          items:
            $ref: "#/components/schemas/WebhookUrlOption_inner"
          type: array
      type: object
    register_queue_200_response_allOf_recent_private_conversations_inner:
      additionalProperties: false
      description: |
        Object describing a single recent direct conversation in the user's history.
      example:
        user_ids:
        - 0
        - 0
        max_message_id: 7
      properties:
        max_message_id:
          description: |
            The highest message ID of the conversation, intended to support sorting
            the conversations by recency.
          type: integer
        user_ids:
          description: |
            The list of users other than the current user in the direct message
            conversation. This will be an empty list for direct messages sent to
            oneself.
          items:
            type: integer
          type: array
      type: object
    register_queue_200_response_allOf_never_subscribed_inner:
      allOf:
      - $ref: "#/components/schemas/BasicChannelBase"
      - additionalProperties: false
        properties:
          creator_id:
            nullable: true
          message_retention_days:
            nullable: true
          first_message_id:
            nullable: true
          folder_id:
            nullable: true
          stream_weekly_traffic:
            description: |
              The average number of messages sent to the channel per week, as
              estimated based on recent weeks, rounded to the nearest integer.

              If `null`, the channel was recently created and there is
              insufficient data to estimate the average traffic.
            nullable: true
            type: integer
          subscribers:
            description: |
              A list of user IDs of users who are subscribed
              to the channel. Included only if `include_subscribers` is `true`.

              If a user is not allowed to know the subscribers for
              a channel, we will send an empty array. API authors
              should use other data to determine whether users like
              guest users are forbidden to know the subscribers.
            items:
              type: integer
            type: array
          partial_subscribers:
            description: |
              If [`include_subscribers="partial"`](/api/get-subscriptions#parameter-include_subscribers)
              was requested, the server may, at its discretion, send a
              `partial_subscribers` list rather than a `subscribers` list
              for channels with a large number of subscribers.

              The `partial_subscribers` list contains an arbitrary
              subset of the channel's subscribers that is guaranteed
              to include all bot user subscribers as well as all
              users who have been active in the last 14 days, but
              otherwise can be chosen arbitrarily by the server.

              If a user is not allowed to know the subscribers for
              a channel, we will send an empty array. API authors
              should use other data to determine whether users like
              guest users are forbidden to know the subscribers.

              **Changes**: New in Zulip 11.0 (feature level 412).
            items:
              type: integer
            type: array
        type: object
      example:
        is_web_public: ""
        stream_weekly_traffic: 7
        description: ""
        can_remove_subscribers_group: ""
        first_message_id: ""
        can_delete_any_message_group: ""
        rendered_description: ""
        stream_id: ""
        can_resolve_topics_group: ""
        is_recently_active: ""
        stream_post_policy: ""
        topics_policy: ""
        date_created: ""
        can_move_messages_within_channel_group: ""
        subscribers:
        - 5
        - 5
        history_public_to_subscribers: ""
        can_move_messages_out_of_channel_group: ""
        can_delete_own_message_group: ""
        can_subscribe_group: ""
        can_add_subscribers_group: ""
        is_archived: ""
        subscriber_count: ""
        name: ""
        creator_id: ""
        partial_subscribers:
        - 3
        - 3
        is_announcement_only: ""
        message_retention_days: ""
        folder_id: ""
        can_administer_channel_group: ""
        can_send_message_group: ""
        invite_only: ""
    register_queue_200_response_allOf_unread_msgs_pms_inner:
      additionalProperties: false
      example:
        other_user_id: 4
        sender_id: 7
        unread_message_ids:
        - 9
        - 9
      properties:
        other_user_id:
          description: |
            The user ID of the other participant in this one-on-one direct
            message conversation. Will be the current user's ID for messages
            that they sent in a one-on-one direct message conversation with
            themself.

            **Changes**: New in Zulip 5.0 (feature level 119), replacing
            the less clearly named `sender_id` field.
          type: integer
        sender_id:
          deprecated: true
          description: |
            Old name for the `other_user_id` field. Clients should access
            this field in Zulip server versions that do not yet support
            `other_user_id`.

            **Changes**: Deprecated in Zulip 5.0 (feature level 119).
            We expect to provide a next version of the full `unread_msgs`
            API before removing this legacy name.
          type: integer
        unread_message_ids:
          description: |
            The message IDs of the recent unread direct messages sent
            by either user in this one-on-one direct message conversation,
            sorted in ascending order.
          items:
            type: integer
          type: array
      type: object
    register_queue_200_response_allOf_unread_msgs_streams_inner:
      additionalProperties: false
      example:
        stream_id: 0
        topic: topic
        unread_message_ids:
        - 9
        - 9
      properties:
        topic:
          description: |
            The topic under which the messages were sent.

            Note that the empty string topic may have been rewritten by the server
            to the value of `realm_empty_topic_display_name` found in the
            [`POST /register`](/api/register-queue) response depending on the value
            of the `empty_topic_name` [client capability][client-capabilities].

            **Changes**: The `empty_topic_name` client capability is new in
            Zulip 10.0 (feature level 334).

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        stream_id:
          description: |
            The ID of the channel to which the messages were sent.
          type: integer
        unread_message_ids:
          description: |
            The message IDs of the recent unread messages sent in this channel,
            sorted in ascending order.
          items:
            type: integer
          type: array
      type: object
    register_queue_200_response_allOf_unread_msgs_huddles_inner:
      additionalProperties: false
      example:
        user_ids_string: user_ids_string
        unread_message_ids:
        - 0
        - 0
      properties:
        user_ids_string:
          description: |
            A string containing the IDs of all users in the group
            direct message conversation, including the current user,
            separated by commas and sorted numerically; for example:
            `"1,2,3"`.
          type: string
        unread_message_ids:
          description: |
            The message IDs of the recent unread messages which have been sent in
            this group direct message conversation, sorted in ascending order.
          items:
            type: integer
          type: array
      type: object
    register_queue_200_response_allOf_unread_msgs:
      additionalProperties: false
      description: |
        Present if `message` and `update_message_flags` are both present in
        `event_types`.

        A set of data structures describing the conversations containing
        the 50000 most recent unread messages the user has received. This will usually
        contain every unread message the user has received, but clients should support
        users with even more unread messages (and not hardcode the number 50000).
      example:
        huddles:
        - user_ids_string: user_ids_string
          unread_message_ids:
          - 0
          - 0
        - user_ids_string: user_ids_string
          unread_message_ids:
          - 0
          - 0
        pms:
        - other_user_id: 4
          sender_id: 7
          unread_message_ids:
          - 9
          - 9
        - other_user_id: 4
          sender_id: 7
          unread_message_ids:
          - 9
          - 9
        streams:
        - stream_id: 0
          topic: topic
          unread_message_ids:
          - 9
          - 9
        - stream_id: 0
          topic: topic
          unread_message_ids:
          - 9
          - 9
        mentions:
        - 7
        - 7
        count: 1
        old_unreads_missing: true
      properties:
        count:
          description: |
            The total number of unread messages to display. This includes one-on-one and group
            direct messages, as well as channel messages that are not [muted](/help/mute-a-topic).

            **Changes**: Before Zulip 8.0 (feature level 213), the unmute and follow
            topic features were not handled correctly in calculating this field.
          type: integer
        pms:
          description: |
            An array of objects where each object contains details of unread
            one-on-one direct messages with a specific user.

            Note that it is possible for a message that the current user sent
            to the specified user to be marked as unread and thus appear here.
          items:
            $ref: "#/components/schemas/register_queue_200_response_allOf_unread_msgs_pms_inner"
          type: array
        streams:
          description: |
            An array of dictionaries where each dictionary contains details of all
            unread messages of a single subscribed channel. This includes muted channels
            and muted topics, even though those messages are excluded from `count`.

            **Changes**: Prior to Zulip 5.0 (feature level 90), these objects
            included a `sender_ids` property, which listed the set of IDs of
            users who had sent the unread messages.
          items:
            $ref: "#/components/schemas/register_queue_200_response_allOf_unread_msgs_streams_inner"
          type: array
        huddles:
          description: |
            An array of objects where each object contains details of unread
            group direct messages with a specific group of users.
          items:
            $ref: "#/components/schemas/register_queue_200_response_allOf_unread_msgs_huddles_inner"
          type: array
        mentions:
          description: |
            Array containing the IDs of all unread messages in which the user was
            mentioned directly, and unread [non-muted](/help/mute-a-topic) messages
            in which the user was mentioned through a wildcard.

            **Changes**: Before Zulip 8.0 (feature level 213), the unmute and follow
            topic features were not handled correctly in calculating this field.
          items:
            type: integer
          type: array
        old_unreads_missing:
          description: |
            Whether this data set was truncated because the user has too many
            unread messages. When truncation occurs, only the most recent
            `MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered
            when forming this response. When `true`, we recommend that clients
            display a warning, as they are likely to produce erroneous results
            until reloaded with the user having fewer than `MAX_UNREAD_MESSAGES`
            unread messages.

            **Changes**: New in Zulip 4.0 (feature level 44).
          type: boolean
      type: object
    register_queue_200_response_allOf_user_settings_emojiset_choices_inner:
      additionalProperties: false
      description: |
        Object describing a emoji set.
      example:
        text: text
        key: key
      properties:
        key:
          description: |
            The key or the name of the emoji set which will be the value
            of `emojiset` if this emoji set is chosen.
          type: string
        text:
          description: |
            The text describing the emoji set.
          type: string
      type: object
    register_queue_200_response_allOf_user_settings:
      additionalProperties: false
      description: |
        Present if `user_settings` is present in `fetch_event_types`.

        A dictionary containing the user's personal settings.

        **Changes**: Removed `dense_mode` setting in Zulip 10.0
        (feature level 364) as we now have `web_font_size_px` and
        `web_line_height_percent` settings for more control.

        New in Zulip 5.0 (feature level 89). Previously, these
        settings appeared in the top-level object, where they are
        available for clients without the `user_settings_object` client
        capability for backwards-compatibility.
      example:
        fluid_layout_width: true
        enable_sounds: true
        high_contrast_mode: true
        user_list_style: 8
        receives_typing_notifications: true
        web_left_sidebar_show_channel_folders: true
        enter_sends: true
        enable_followed_topic_email_notifications: true
        enable_followed_topic_audible_notifications: true
        emojiset: emojiset
        resolved_topic_notice_auto_read_policy: resolved_topic_notice_auto_read_policy
        enable_stream_audible_notifications: true
        enable_followed_topic_wildcard_mentions_notify: true
        enable_drafts_synchronization: true
        enable_login_emails: true
        color_scheme: 3
        enable_stream_push_notifications: true
        twenty_four_hour_time: true
        web_left_sidebar_unreads_count_summary: true
        send_private_typing_notifications: true
        default_language: default_language
        hide_ai_features: true
        wildcard_mentions_notify: true
        web_navigate_to_sent_message: true
        enable_marketing_emails: true
        available_notification_sounds:
        - available_notification_sounds
        - available_notification_sounds
        starred_message_counts: true
        web_stream_unreads_count_display_policy: 0
        send_stream_typing_notifications: true
        enable_desktop_notifications: true
        presence_enabled: true
        web_escape_navigates_to_home_view: true
        timezone: timezone
        enable_stream_email_notifications: true
        enable_offline_email_notifications: true
        notification_sound: notification_sound
        enable_offline_push_notifications: true
        web_channel_default_view: 1
        web_font_size_px: 14
        web_home_view: web_home_view
        pm_content_in_desktop_notifications: true
        enable_followed_topic_desktop_notifications: true
        automatically_unmute_topics_in_muted_streams_policy: 3
        emojiset_choices:
        - text: text
          key: key
        - text: text
          key: key
        web_line_height_percent: 122
        display_emoji_reaction_users: true
        enable_stream_desktop_notifications: true
        web_animate_image_previews: web_animate_image_previews
        desktop_icon_count_display: 5
        enable_online_push_notifications: true
        left_side_userlist: true
        realm_name_in_email_notifications_policy: 8
        translate_emoticons: true
        message_content_in_email_notifications: true
        email_notifications_batching_period_seconds: 5
        email_address_visibility: 3
        enable_followed_topic_push_notifications: true
        send_read_receipts: true
        web_mark_read_on_scroll_policy: 9
        automatically_follow_topics_policy: 7
        web_suggest_update_timezone: true
        enable_digest_emails: true
        demote_inactive_streams: 9
        automatically_follow_topics_where_mentioned: true
        allow_private_data_export: true
      properties:
        twenty_four_hour_time:
          description: |
            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

            A `null` value indicates that the client should use the default time
            format for the user's locale.

            **Changes**: Prior to Zulip 11.0 (feature level 408), `null`
            was not a valid value for this setting. Note that it was not possible
            to actually set the time format to `null` at this feature level.
          nullable: true
          type: boolean
        web_mark_read_on_scroll_policy:
          description: |
            Whether or not to mark messages as read when the user scrolls through their
            feed.

            - 1 - Always
            - 2 - Only in conversation views
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 175). Previously, there was no
            way for the user to configure this behavior on the web, and the Zulip web and
            desktop apps behaved like the "Always" setting when marking messages as read.
          type: integer
        web_channel_default_view:
          description: |
            Web/desktop app setting controlling the default navigation
            behavior when clicking on a channel link.

            - 1 - Top topic in the channel
            - 2 - Channel feed
            - 3 - List of topics
            - 4 - Top unread topic in channel

            **Changes**: The "Top unread topic in channel" is new in Zulip 11.0
            (feature level 401).

            The "List of topics" option is new in Zulip 11.0 (feature level 383).

            New in Zulip 9.0 (feature level 269). Previously, this
            was not configurable, and every user had the "Channel feed" behavior.
          type: integer
        starred_message_counts:
          description: |
            Whether clients should display the [number of starred
            messages](/help/star-a-message#display-the-number-of-starred-messages).
          type: boolean
        receives_typing_notifications:
          description: |
            Whether the user is configured to receive typing notifications from
            other users. The server will only deliver typing notifications events
            to users who for whom this is enabled.

            **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were
            only options to disable sending typing notifications.
          type: boolean
        web_suggest_update_timezone:
          description: |
            Whether the user should be shown an alert, offering to update their
            [profile time zone](/help/change-your-timezone), when the time displayed
            for the profile time zone differs from the current time displayed by the
            time zone configured on their device.

            **Changes**: New in Zulip 10.0 (feature level 329).
          type: boolean
        fluid_layout_width:
          description: |
            Whether to use the [maximum available screen width](/help/enable-full-width-display)
            for the web app's center panel (message feed, recent conversations) on wide screens.
          type: boolean
        high_contrast_mode:
          description: |
            This setting is reserved for use to control variations in Zulip's design
            to help visually impaired users.
          type: boolean
        web_font_size_px:
          description: |
            User-configured primary `font-size` for the web application, in pixels.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, font size was
            only adjustable via browser zoom. Note that this setting was not fully
            implemented at this feature level.
          example: 14
          type: integer
        web_line_height_percent:
          description: |
            User-configured primary `line-height` for the web application, in percent, so a
            value of 120 represents a `line-height` of 1.2.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, line height was
            not user-configurable. Note that this setting was not fully implemented at this
            feature level.
          example: 122
          type: integer
        color_scheme:
          description: |
            Controls which [color theme](/help/dark-theme) to use.

            - 1 - Automatic
            - 2 - Dark theme
            - 3 - Light theme

            Automatic detection is implementing using the standard `prefers-color-scheme`
            media query.
          type: integer
        translate_emoticons:
          description: |
            Whether to [translate emoticons to emoji](/help/configure-emoticon-translations)
            in messages the user sends.
          type: boolean
        display_emoji_reaction_users:
          description: |
            Whether to display the names of reacting users on a message.

            When enabled, clients should display the names of reacting
            users, rather than a count, for messages with few total
            reactions. The ideal cutoff may depend on the space
            available for displaying reactions; the official web
            application displays names when 3 or fewer total reactions
            are present with this setting enabled.

            **Changes**: New in Zulip 6.0 (feature level 125).
          type: boolean
        default_language:
          description: |
            What [default language](/help/change-your-language) to use for the account.

            This controls both the Zulip UI as well as email notifications sent to the user.

            The value needs to be a standard language code that the Zulip server has
            translation data for; for example, `"en"` for English or `"de"` for German.
          type: string
        web_home_view:
          description: |
            The [home view](/help/configure-home-view) used when opening a new
            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

            - "recent_topics" - Recent conversations view
            - "inbox" - Inbox view
            - "all_messages" - Combined feed view

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was
            called `default_view`, which was new in Zulip 4.0 (feature level 42).
          type: string
        web_escape_navigates_to_home_view:
          description: |
            Whether the escape key navigates to the
            [configured home view](/help/configure-home-view).

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this
            was called `escape_navigates_to_default_view`, which was new in Zulip
            5.0 (feature level 107).
          type: boolean
        left_side_userlist:
          description: |
            Whether the users list on left sidebar in narrow windows.

            This feature is not heavily used and is likely to be reworked.
          type: boolean
        emojiset:
          description: |
            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
            used to display emoji to the user everywhere they appear in the UI.

            - "google" - Google modern
            - "google-blob" - Google classic
            - "twitter" - Twitter
            - "text" - Plain text
          type: string
        demote_inactive_streams:
          description: |
            Whether to [hide inactive channels](/help/manage-inactive-channels) in the left sidebar.

            - 1 - Automatic
            - 2 - Always
            - 3 - Never
          type: integer
        user_list_style:
          description: |
            The style selected by the user for the right sidebar user list.

            - 1 - Compact
            - 2 - With status
            - 3 - With avatar and status

            **Changes**: New in Zulip 6.0 (feature level 141).
          type: integer
        web_animate_image_previews:
          description: |
            Controls how animated images should be played in the message feed in the web/desktop application.

            - "always" - Always play the animated images in the message feed.
            - "on_hover" - Play the animated images on hover over them in the message feed.
            - "never" - Never play animated images in the message feed.

            **Changes**: New in Zulip 9.0 (feature level 275).
          type: string
        web_stream_unreads_count_display_policy:
          description: |
            Configuration for which channels should be displayed with a numeric unread count in the left sidebar.
            Channels that do not have an unread count will have a simple dot indicator for whether there are any
            unread messages.

            - 1 - All channels
            - 2 - Unmuted channels and topics
            - 3 - No channels

            **Changes**: New in Zulip 8.0 (feature level 210).
          type: integer
        hide_ai_features:
          description: |
            Controls whether user wants AI features like topic summarization to
            be hidden in all Zulip clients.

            **Changes**: New in Zulip 10.0 (feature level 350).
          type: boolean
        web_left_sidebar_show_channel_folders:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            any channel folders configured by the organization.

            **Changes**: New in Zulip 11.0 (feature level 411).
          type: boolean
        web_left_sidebar_unreads_count_summary:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            the unread message count summary.

            **Changes**: New in Zulip 11.0 (feature level 398).
          type: boolean
        timezone:
          description: |
            The IANA identifier of the user's [profile time zone](/help/change-your-timezone),
            which is used primarily to display the user's local time to other users.
          type: string
        enter_sends:
          description: |
            Whether the user setting for [sending on pressing Enter](/help/configure-send-message-keys)
            in the compose box is enabled.
          type: boolean
        enable_drafts_synchronization:
          description: |
            A boolean parameter to control whether synchronizing drafts is enabled for
            the user. When synchronization is disabled, all drafts stored in the server
            will be automatically deleted from the server.

            This does not do anything (like sending events) to delete local copies of
            drafts stored in clients.
          type: boolean
        enable_stream_desktop_notifications:
          description: |
            Enable visual desktop notifications for channel messages.
          type: boolean
        enable_stream_email_notifications:
          description: |
            Enable email notifications for channel messages.
          type: boolean
        enable_stream_push_notifications:
          description: |
            Enable mobile notifications for channel messages.
          type: boolean
        enable_stream_audible_notifications:
          description: |
            Enable audible desktop notifications for channel messages.
          type: boolean
        notification_sound:
          description: |
            Notification sound name.
          type: string
        enable_desktop_notifications:
          description: |
            Enable visual desktop notifications for direct messages and @-mentions.
          type: boolean
        enable_sounds:
          description: |
            Enable audible desktop notifications for direct messages and
            @-mentions.
          type: boolean
        enable_followed_topic_desktop_notifications:
          description: |
            Enable visual desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_email_notifications:
          description: |
            Enable email notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_push_notifications:
          description: |
            Enable push notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_audible_notifications:
          description: |
            Enable audible desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        email_notifications_batching_period_seconds:
          description: |
            The duration (in seconds) for which the server should wait to batch
            email notifications before sending them.
          type: integer
        enable_offline_email_notifications:
          description: |
            Enable email notifications for direct messages and @-mentions received
            when the user is offline.
          type: boolean
        enable_offline_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is offline.
          type: boolean
        enable_online_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is online.
          type: boolean
        enable_digest_emails:
          description: |
            Enable digest emails when the user is away.
          type: boolean
        enable_marketing_emails:
          description: |
            Enable marketing emails. Has no function outside Zulip Cloud.
          type: boolean
        enable_login_emails:
          description: |
            Enable email notifications for new logins to account.
          type: boolean
        message_content_in_email_notifications:
          description: |
            Include the message's content in email notifications for new messages.
          type: boolean
        pm_content_in_desktop_notifications:
          description: |
            Include content of direct messages in desktop notifications.
          type: boolean
        wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (E.g. @**all**) should send notifications
            like a personal mention.
          type: boolean
        enable_followed_topic_wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (e.g., @**all**) in messages sent to followed topics
            should send notifications like a personal mention.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        desktop_icon_count_display:
          description: |
            Unread count badge (appears in desktop sidebar and browser tab)

            - 1 - All unread messages
            - 2 - DMs, mentions, and followed topics
            - 3 - DMs and mentions
            - 4 - None

            **Changes**: In Zulip 8.0 (feature level 227), added `DMs, mentions,
            and followed topics` option, renumbering the options to insert it in
            order.
          type: integer
        realm_name_in_email_notifications_policy:
          description: |
            Whether to [include organization name in subject of message notification
            emails](/help/email-notifications#include-organization-name-in-subject-line).

            - 1 - Automatic
            - 2 - Always
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 168), replacing the
            previous `realm_name_in_notifications` boolean;
            `true` corresponded to `Always`, and `false` to `Never`.
          type: integer
        automatically_follow_topics_policy:
          description: |
            Which [topics to follow automatically](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          type: integer
        automatically_unmute_topics_in_muted_streams_policy:
          description: |
            Which [topics to unmute automatically in muted channels](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          type: integer
        automatically_follow_topics_where_mentioned:
          description: |
            Whether the server will automatically mark the user as following
            topics where the user is mentioned.

            **Changes**: New in Zulip 8.0 (feature level 235).
          type: boolean
        resolved_topic_notice_auto_read_policy:
          description: |
            Controls whether the resolved-topic notices are marked as read.

            - "always" - Always mark resolved-topic notices as read.
            - "except_followed" - Mark resolved-topic notices as read in topics not followed by the user.
            - "never" - Never mark resolved-topic notices as read.

            **Changes**: New in Zulip 11.0 (feature level 385).
          type: string
        presence_enabled:
          description: |
            Display the presence status to other users when online.
          type: boolean
        available_notification_sounds:
          description: |
            Array containing the names of the notification sound options
            supported by this Zulip server. Only relevant to support UI
            for configuring notification sounds.
          items:
            type: string
          type: array
        emojiset_choices:
          description: |
            Array of dictionaries where each dictionary describes an emoji set
            supported by this version of the Zulip server.

            Only relevant to clients with configuration UI for choosing an emoji set;
            the currently selected emoji set is available in the `emojiset` key.

            See [PATCH /settings](/api/update-settings) for details on
            the meaning of this setting.
          items:
            $ref: "#/components/schemas/register_queue_200_response_allOf_user_settings_emojiset_choices_inner"
          type: array
        send_private_typing_notifications:
          description: |
            Whether the user has chosen to send [typing
            notifications](/help/typing-notifications)
            when composing direct messages. The client should send typing
            notifications for direct messages if and only if this setting is enabled.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        send_stream_typing_notifications:
          description: |
            Whether the user has chosen to send [typing
            notifications](/help/typing-notifications)
            when composing channel messages. The client should send typing
            notifications for channel messages if and only if this setting is enabled.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        send_read_receipts:
          description: |
            Whether other users are allowed to see whether you've
            read messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        allow_private_data_export:
          description: |
            Whether organization administrators are allowed to
            export your private data.

            **Changes**: New in Zulip 10.0 (feature level 293).
          type: boolean
        email_address_visibility:
          description: |
            The [policy][permission-level] for [which other users][help-email-visibility]
            in this organization can see the user's real email address.

            - 1 = Everyone
            - 2 = Members only
            - 3 = Administrators only
            - 4 = Nobody
            - 5 = Moderators only

            **Changes**: New in Zulip 7.0 (feature level 163), replacing the
            realm-level setting.

            [permission-level]: /api/roles-and-permissions#permission-levels
            [help-email-visibility]: /help/configure-email-visibility
          type: integer
        web_navigate_to_sent_message:
          description: |
            Web/desktop app setting for whether the user's view should
            automatically go to the conversation where they sent a message.

            **Changes**: New in Zulip 9.0 (feature level 268). Previously,
            this behavior was not configurable.
          type: boolean
      type: object
    register_queue_200_response_allOf_user_topics_inner:
      additionalProperties: false
      description: |
        Object describing the user's configuration for a given topic.
      example:
        last_updated: 5
        stream_id: 9
        topic_name: topic_name
        visibility_policy: 7
      properties:
        stream_id:
          description: |
            The ID of the channel to which the topic belongs.
          type: integer
        topic_name:
          description: |
            The name of the topic.

            Note that the empty string topic may have been rewritten by the server to
            the value of `realm_empty_topic_display_name` found in the [`POST /register`](/api/register-queue)
            response depending on the value of the `empty_topic_name` [client capability][client-capabilities].

            **Changes**: The `empty_topic_name` client capability is new in
            Zulip 10.0 (feature level 334).

            [client-capabilities]: /api/register-queue#parameter-client_capabilities
          type: string
        last_updated:
          description: |
            An integer UNIX timestamp representing when the user-topic
            relationship was changed.
          type: integer
        visibility_policy:
          description: |
            An integer indicating the user's visibility configuration for
            the topic.

            - 1 = Muted. Used to record [muted topics](/help/mute-a-topic).
            - 2 = Unmuted. Used to record [unmuted topics](/help/mute-a-topic).
            - 3 = Followed. Used to record [followed topics](/help/follow-a-topic).

            **Changes**: In Zulip 7.0 (feature level 219), added followed as
            a visibility policy option.

            In Zulip 7.0 (feature level 170), added unmuted as a visibility
            policy option.
          type: integer
      type: object
    register_queue_200_response_allOf_push_devices_value:
      additionalProperties: false
      description: |
        `{push_account_id}`: Dictionary containing the details of
        a push device with the push account ID as the key.
      example:
        error_code: error_code
        status: status
      properties:
        status:
          description: |
            The push account's registration status.
            Either `"active"`, `"pending"`, or `"failed"`.
          type: string
        error_code:
          description: |
            If the status is `"failed"`, a [Zulip API error
            code](/api/rest-error-handling) indicating the type of failure that
            occurred.

            The following error codes have recommended client behavior:

            - `"INVALID_BOUNCER_PUBLIC_KEY"` - Inform the user to update app.
            - `"REQUEST_EXPIRED` - Retry with a fresh payload.
          nullable: true
          type: string
      type: object
    register_queue_200_response_allOf_realm_available_video_chat_providers_value:
      additionalProperties: false
      description: |
        `{provider_name}`: Dictionary containing the details of the
        video call provider with the name of the chat provider as
        the key.
      example:
        name: name
        id: 3
      properties:
        name:
          description: |
            The name of the video call provider.
          type: string
        id:
          description: |
            The ID of the video call provider.
          type: integer
      type: object
    register_queue_200_response_allOf_realm_default_external_accounts_value:
      additionalProperties: false
      description: |
        `{site_name}`: Dictionary containing the details of the
        default external account provider with the name of the
        website as the key.
      example:
        url_pattern: url_pattern
        hint: hint
        name: name
        text: text
      properties:
        name:
          description: |
            The name of the external account provider
          type: string
        text:
          description: |
            The text describing the external account.
          type: string
        hint:
          description: |
            The help text to be displayed for the
            custom profile field in user-facing
            settings UI for configuring custom
            profile fields for this account.
          type: string
        url_pattern:
          description: |
            The regex pattern of the URL of a profile page
            on the external site.
          type: string
      type: object
    register_queue_200_response_allOf_giphy_rating_options_value:
      additionalProperties: false
      description: |
        `{rating_name}`: Dictionary containing the details of the
        rating with the name of the rating as
        the key.
      example:
        name: name
        id: 9
      properties:
        name:
          description: |
            The description of the rating option.
          type: string
        id:
          description: |
            The ID of the rating option.
          type: integer
      type: object
    register_queue_200_response_allOf_server_thumbnail_formats_inner:
      additionalProperties: false
      example:
        max_width: 7
        name: name
        format: format
        animated: true
        max_height: 9
      properties:
        name:
          description: |
            The file path component of the thumbnail format.
          type: string
        max_width:
          description: |
            The maximum width of this format.
          type: integer
        max_height:
          description: |
            The maximum height of this format.
          type: integer
        format:
          description: |
            The extension of this format.
          type: string
        animated:
          description: |
            If this file format is animated. These formats
            are only generated for uploaded imates which
            themselves are animated.
          type: boolean
      type: object
    register_queue_200_response_allOf_realm_billing:
      additionalProperties: false
      description: |
        Present if `realm_billing` is present in `fetch_event_types`.

        A dictionary containing billing information of the organization.

        **Changes**: New in Zulip 10.0 (feature level 363).
      example:
        has_pending_sponsorship_request: true
      properties:
        has_pending_sponsorship_request:
          description: |
            Whether there is a pending sponsorship request for the organization. Note that
            this field will always be `false` if the user is not in `can_manage_billing_group`.

            **Changes**: New in Zulip 10.0 (feature level 363).
          type: boolean
      type: object
    register_queue_200_response_allOf_realm_user_settings_defaults:
      additionalProperties: false
      description: |
        Present if `realm_user_settings_defaults` is present in `fetch_event_types`.

        A dictionary containing the default values of settings for new users.

        **Changes**: New in Zulip 5.0 (feature level 95).
      example:
        fluid_layout_width: true
        enable_sounds: true
        high_contrast_mode: true
        user_list_style: 4
        receives_typing_notifications: true
        web_left_sidebar_show_channel_folders: true
        enter_sends: true
        enable_followed_topic_email_notifications: true
        enable_followed_topic_audible_notifications: true
        emojiset: emojiset
        resolved_topic_notice_auto_read_policy: resolved_topic_notice_auto_read_policy
        enable_stream_audible_notifications: true
        enable_followed_topic_wildcard_mentions_notify: true
        enable_drafts_synchronization: true
        enable_login_emails: true
        color_scheme: 8
        enable_stream_push_notifications: true
        twenty_four_hour_time: true
        web_left_sidebar_unreads_count_summary: true
        send_private_typing_notifications: true
        default_language: default_language
        hide_ai_features: true
        wildcard_mentions_notify: true
        web_navigate_to_sent_message: true
        enable_marketing_emails: true
        available_notification_sounds:
        - available_notification_sounds
        - available_notification_sounds
        starred_message_counts: true
        web_stream_unreads_count_display_policy: 8
        send_stream_typing_notifications: true
        enable_desktop_notifications: true
        presence_enabled: true
        web_escape_navigates_to_home_view: true
        enable_stream_email_notifications: true
        enable_offline_email_notifications: true
        notification_sound: notification_sound
        enable_offline_push_notifications: true
        web_channel_default_view: 4
        web_font_size_px: 14
        web_home_view: web_home_view
        pm_content_in_desktop_notifications: true
        enable_followed_topic_desktop_notifications: true
        automatically_unmute_topics_in_muted_streams_policy: 2
        emojiset_choices:
        - text: text
          key: key
        - text: text
          key: key
        web_line_height_percent: 122
        display_emoji_reaction_users: true
        enable_stream_desktop_notifications: true
        web_animate_image_previews: web_animate_image_previews
        desktop_icon_count_display: 2
        enable_online_push_notifications: true
        left_side_userlist: true
        realm_name_in_email_notifications_policy: 6
        translate_emoticons: true
        message_content_in_email_notifications: true
        email_notifications_batching_period_seconds: 5
        email_address_visibility: 0
        enable_followed_topic_push_notifications: true
        send_read_receipts: true
        web_mark_read_on_scroll_policy: 9
        automatically_follow_topics_policy: 0
        web_suggest_update_timezone: true
        enable_digest_emails: true
        demote_inactive_streams: 6
        automatically_follow_topics_where_mentioned: true
        allow_private_data_export: true
      properties:
        twenty_four_hour_time:
          description: |
            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

            A `null` value indicates that the client should use the default time
            format for the user's locale.

            **Changes**: Prior to Zulip 11.0 (feature level 408), `null`
            was not a valid value for this setting. Note that it was not possible
            to actually set the time format to `null` at this feature level.

            New in Zulip 5.0 (feature level 99). This value was previously
            available as `realm_default_twenty_four_hour_time` in the top-level
            response object (only when `realm` was present in
            `fetch_event_types`).
          nullable: true
          type: boolean
        web_mark_read_on_scroll_policy:
          description: |
            Whether or not to mark messages as read when the user scrolls through their
            feed.

            - 1 - Always
            - 2 - Only in conversation views
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 175). Previously, there was no
            way for the user to configure this behavior on the web, and the Zulip web and
            desktop apps behaved like the "Always" setting when marking messages as read.
          type: integer
        web_channel_default_view:
          description: |
            Web/desktop app setting controlling the default navigation
            behavior when clicking on a channel link.

            - 1 - Top topic in the channel
            - 2 - Channel feed
            - 3 - List of topics
            - 4 - Top unread topic in channel

            **Changes**: The "Top unread topic in channel" is new in Zulip 11.0
            (feature level 401).

            In Zulip 11.0 (feature level 383), we added a new option "List of topics"
            to this setting.

            New in Zulip 9.0 (feature level 269). Previously, this
            was not configurable, and every user had the "Channel feed" behavior.
          type: integer
        starred_message_counts:
          description: |
            Whether clients should display the [number of starred
            messages](/help/star-a-message#display-the-number-of-starred-messages).
          type: boolean
        receives_typing_notifications:
          description: |
            Whether the user is configured to receive typing notifications from
            other users. The server will only deliver typing notifications events
            to users who for whom this is enabled.

            **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were
            only options to disable sending typing notifications.
          type: boolean
        web_suggest_update_timezone:
          description: |
            Whether the user should be shown an alert, offering to update their
            [profile time zone](/help/change-your-timezone), when the time displayed
            for the profile time zone differs from the current time displayed by the
            time zone configured on their device.

            **Changes**: New in Zulip 10.0 (feature level 329).
          type: boolean
        fluid_layout_width:
          description: |
            Whether to use the [maximum available screen width](/help/enable-full-width-display)
            for the web app's center panel (message feed, recent conversations) on wide screens.
          type: boolean
        high_contrast_mode:
          description: |
            This setting is reserved for use to control variations in Zulip's design
            to help visually impaired users.
          type: boolean
        web_font_size_px:
          description: |
            User-configured primary `font-size` for the web application, in pixels.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, font size was
            only adjustable via browser zoom. Note that this setting was not fully
            implemented at this feature level.
          example: 14
          type: integer
        web_line_height_percent:
          description: |
            User-configured primary `line-height` for the web application, in percent, so a
            value of 120 represents a `line-height` of 1.2.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, line height was
            not user-configurable. Note that this setting was not fully implemented at this
            feature level.
          example: 122
          type: integer
        color_scheme:
          description: |
            Controls which [color theme](/help/dark-theme) to use.

            - 1 - Automatic
            - 2 - Dark theme
            - 3 - Light theme

            Automatic detection is implementing using the standard `prefers-color-scheme`
            media query.
          type: integer
        translate_emoticons:
          description: |
            Whether to [translate emoticons to emoji](/help/configure-emoticon-translations)
            in messages the user sends.
          type: boolean
        display_emoji_reaction_users:
          description: |
            Whether to display the names of reacting users on a message.

            When enabled, clients should display the names of reacting
            users, rather than a count, for messages with few total
            reactions. The ideal cutoff may depend on the space
            available for displaying reactions; the official web
            application displays names when 3 or fewer total reactions
            are present with this setting enabled.

            **Changes**: New in Zulip 6.0 (feature level 125).
          type: boolean
        default_language:
          description: |
            What [default language](/help/change-your-language) to use for the account.

            This controls both the Zulip UI as well as email notifications sent to the user.

            The value needs to be a standard language code that the Zulip server has
            translation data for; for example, `"en"` for English or `"de"` for German.
          type: string
        web_home_view:
          description: |
            The [home view](/help/configure-home-view) used when opening a new
            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

            - "recent_topics" - Recent conversations view
            - "inbox" - Inbox view
            - "all_messages" - Combined feed view

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was
            called `default_view`, which was new in Zulip 4.0 (feature level 42).
          type: string
        web_escape_navigates_to_home_view:
          description: |
            Whether the escape key navigates to the
            [configured home view](/help/configure-home-view).

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this
            was called `escape_navigates_to_default_view`, which was new in Zulip
            5.0 (feature level 107).
          type: boolean
        left_side_userlist:
          description: |
            Whether the users list on left sidebar in narrow windows.

            This feature is not heavily used and is likely to be reworked.
          type: boolean
        emojiset:
          description: |
            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
            used to display emoji to the user everywhere they appear in the UI.

            - "google" - Google modern
            - "google-blob" - Google classic
            - "twitter" - Twitter
            - "text" - Plain text
          type: string
        demote_inactive_streams:
          description: |
            Whether to [hide inactive channels](/help/manage-inactive-channels) in the left sidebar.

            - 1 - Automatic
            - 2 - Always
            - 3 - Never
          type: integer
        user_list_style:
          description: |
            The style selected by the user for the right sidebar user list.

            - 1 - Compact
            - 2 - With status
            - 3 - With avatar and status

            **Changes**: New in Zulip 6.0 (feature level 141).
          type: integer
        web_animate_image_previews:
          description: |
            Controls how animated images should be played in the message feed in the web/desktop application.

            - "always" - Always play the animated images in the message feed.
            - "on_hover" - Play the animated images on hover over them in the message feed.
            - "never" - Never play animated images in the message feed.

            **Changes**: New in Zulip 9.0 (feature level 275).
          type: string
        web_stream_unreads_count_display_policy:
          description: |
            Configuration for which channels should be displayed with a numeric unread count in the left sidebar.
            Channels that do not have an unread count will have a simple dot indicator for whether there are any
            unread messages.

            - 1 - All channels
            - 2 - Unmuted channels and topics
            - 3 - No channels

            **Changes**: New in Zulip 8.0 (feature level 210).
          type: integer
        hide_ai_features:
          description: |
            Controls whether user wants AI features like topic summarization to
            be hidden in all Zulip clients.

            **Changes**: New in Zulip 10.0 (feature level 350).
          type: boolean
        web_left_sidebar_show_channel_folders:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            any channel folders configured by the organization.

            **Changes**: New in Zulip 11.0 (feature level 411).
          type: boolean
        web_left_sidebar_unreads_count_summary:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            the unread message count summary.

            **Changes**: New in Zulip 11.0 (feature level 398).
          type: boolean
        enable_stream_desktop_notifications:
          description: |
            Enable visual desktop notifications for channel messages.
          type: boolean
        enable_stream_email_notifications:
          description: |
            Enable email notifications for channel messages.
          type: boolean
        enable_stream_push_notifications:
          description: |
            Enable mobile notifications for channel messages.
          type: boolean
        enable_stream_audible_notifications:
          description: |
            Enable audible desktop notifications for channel messages.
          type: boolean
        notification_sound:
          description: |
            Notification sound name.
          type: string
        enable_desktop_notifications:
          description: |
            Enable visual desktop notifications for direct messages and @-mentions.
          type: boolean
        enable_sounds:
          description: |
            Enable audible desktop notifications for direct messages and
            @-mentions.
          type: boolean
        enable_offline_email_notifications:
          description: |
            Enable email notifications for direct messages and @-mentions received
            when the user is offline.
          type: boolean
        enable_offline_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is offline.
          type: boolean
        enable_online_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is online.
          type: boolean
        enable_followed_topic_desktop_notifications:
          description: |
            Enable visual desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_email_notifications:
          description: |
            Enable email notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_push_notifications:
          description: |
            Enable push notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_followed_topic_audible_notifications:
          description: |
            Enable audible desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        enable_digest_emails:
          description: |
            Enable digest emails when the user is away.
          type: boolean
        enable_marketing_emails:
          description: |
            Enable marketing emails. Has no function outside Zulip Cloud.
          type: boolean
        enable_login_emails:
          description: |
            Enable email notifications for new logins to account.
          type: boolean
        message_content_in_email_notifications:
          description: |
            Include the message's content in email notifications for new messages.
          type: boolean
        pm_content_in_desktop_notifications:
          description: |
            Include content of direct messages in desktop notifications.
          type: boolean
        wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (E.g. @**all**) should send notifications
            like a personal mention.
          type: boolean
        enable_followed_topic_wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (e.g., @**all**) in messages sent to followed topics
            should send notifications like a personal mention.

            **Changes**: New in Zulip 8.0 (feature level 189).
          type: boolean
        desktop_icon_count_display:
          description: |
            Unread count badge (appears in desktop sidebar and browser tab)

            - 1 - All unread messages
            - 2 - DMs, mentions, and followed topics
            - 3 - DMs and mentions
            - 4 - None

            **Changes**: In Zulip 8.0 (feature level 227), added `DMs, mentions,
            and followed topics` option, renumbering the options to insert it in
            order.
          type: integer
        realm_name_in_email_notifications_policy:
          description: |
            Whether to [include organization name in subject of message notification
            emails](/help/email-notifications#include-organization-name-in-subject-line).

            - 1 - Automatic
            - 2 - Always
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 168), replacing the
            previous `realm_name_in_notifications` boolean;
            `true` corresponded to `Always`, and `false` to `Never`.
          type: integer
        automatically_follow_topics_policy:
          description: |
            Which [topics to follow automatically](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          type: integer
        automatically_unmute_topics_in_muted_streams_policy:
          description: |
            Which [topics to unmute automatically in muted channels](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          type: integer
        automatically_follow_topics_where_mentioned:
          description: |
            Whether the server will automatically mark the user as following
            topics where the user is mentioned.

            **Changes**: New in Zulip 8.0 (feature level 235).
          type: boolean
        resolved_topic_notice_auto_read_policy:
          description: |
            Controls whether the resolved-topic notices are marked as read.

            - "always" - Always mark resolved-topic notices as read.
            - "except_followed" - Mark resolved-topic notices as read in topics not followed by the user.
            - "never" - Never mark resolved-topic notices as read.

            **Changes**: New in Zulip 11.0 (feature level 385).
          type: string
        presence_enabled:
          description: |
            Display the presence status to other users when online.
          type: boolean
        enter_sends:
          description: |
            Whether the user setting for [sending on pressing Enter](/help/configure-send-message-keys)
            in the compose box is enabled.
          type: boolean
        enable_drafts_synchronization:
          description: |
            A boolean parameter to control whether synchronizing drafts is enabled for
            the user. When synchronization is disabled, all drafts stored in the server
            will be automatically deleted from the server.

            This does not do anything (like sending events) to delete local copies of
            drafts stored in clients.
          type: boolean
        email_notifications_batching_period_seconds:
          description: |
            The duration (in seconds) for which the server should wait to batch
            email notifications before sending them.
          type: integer
        available_notification_sounds:
          description: |
            Array containing the names of the notification sound options
            supported by this Zulip server. Only relevant to support UI
            for configuring notification sounds.
          items:
            type: string
          type: array
        emojiset_choices:
          description: |
            Array of dictionaries where each dictionary describes an emoji set
            supported by this version of the Zulip server.

            Only relevant to clients with configuration UI for choosing an emoji set;
            the currently selected emoji set is available in the `emojiset` key.

            See [PATCH /settings](/api/update-settings) for details on
            the meaning of this setting.
          items:
            $ref: "#/components/schemas/register_queue_200_response_allOf_user_settings_emojiset_choices_inner"
          type: array
        send_private_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            direct messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        send_stream_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            channel messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        send_read_receipts:
          description: |
            Whether other users are allowed to see whether you've
            read messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          type: boolean
        allow_private_data_export:
          description: |
            Whether organization administrators are allowed to
            export your private data.

            **Changes**: New in Zulip 10.0 (feature level 293).
          type: boolean
        email_address_visibility:
          description: |
            The [policy][permission-level] for [which other users][help-email-visibility]
            in this organization can see the user's real email address.

            - 1 = Everyone
            - 2 = Members only
            - 3 = Administrators only
            - 4 = Nobody
            - 5 = Moderators only

            **Changes**: New in Zulip 7.0 (feature level 163), replacing the
            realm-level setting.

            [permission-level]: /api/roles-and-permissions#permission-levels
            [help-email-visibility]: /help/configure-email-visibility
          type: integer
        web_navigate_to_sent_message:
          description: |
            Web/desktop app setting for whether the user's view should
            automatically go to the conversation where they sent a message.

            **Changes**: New in Zulip 9.0 (feature level 268). Previously,
            this behavior was not configurable.
          type: boolean
      type: object
    register_queue_200_response_allOf_cross_realm_bots_inner:
      allOf:
      - $ref: "#/components/schemas/UserBase"
      - additionalProperties: false
        properties:
          is_system_bot:
            description: |
              Whether the user is a system bot. System bots are special
              bot user accounts that are managed by the system, rather than
              the organization's administrators.

              **Changes**: This field was called `is_cross_realm_bot`
              before Zulip 5.0 (feature level 83).
            type: boolean
          bot_type:
            nullable: true
          bot_owner_id:
            nullable: true
          avatar_url:
            nullable: true
        type: object
      example:
        is_active: ""
        role: ""
        avatar_version: ""
        is_guest: ""
        is_owner: ""
        timezone: ""
        bot_owner_id: ""
        profile_data: ""
        is_admin: ""
        full_name: ""
        is_system_bot: true
        avatar_url: ""
        user_id: ""
        delivery_email: ""
        bot_type: ""
        date_joined: ""
        is_bot: ""
        email: ""
    register_queue_200_response_allOf_server_supported_permission_settings:
      additionalProperties: false
      description: |
        Present if `realm` is present in `fetch_event_types`.

        Metadata detailing the valid values for permission settings that
        use [group-setting values](/api/group-setting-values). Clients
        should use these data as explained in the
        [main documentation](/api/group-setting-values#permitted-values)
        to determine what values to present as possible values for these
        settings in UI components.

        This part of the Zulip API is unstable and may change
        significantly in future versions.

        **Changes**: New in Zulip 8.0 (feature level 221).
      example:
        stream:
          key:
            require_system_group: true
            default_for_system_groups: default_for_system_groups
            allowed_system_groups:
            - allowed_system_groups
            - allowed_system_groups
            allow_internet_group: true
            allow_nobody_group: true
            allow_everyone_group: true
            default_group_name: default_group_name
        realm:
          key:
            require_system_group: true
            default_for_system_groups: default_for_system_groups
            allowed_system_groups:
            - allowed_system_groups
            - allowed_system_groups
            allow_internet_group: true
            allow_nobody_group: true
            allow_everyone_group: true
            default_group_name: default_group_name
        group:
          key:
            require_system_group: true
            default_for_system_groups: default_for_system_groups
            allowed_system_groups:
            - allowed_system_groups
            - allowed_system_groups
            allow_internet_group: true
            allow_nobody_group: true
            allow_everyone_group: true
            default_group_name: default_group_name
      properties:
        realm:
          additionalProperties:
            $ref: "#/components/schemas/GroupPermissionSetting"
          description: |
            Configuration for realm level group permission settings.
          type: object
        stream:
          additionalProperties:
            $ref: "#/components/schemas/GroupPermissionSetting"
          description: |
            Configuration for channel level group permission settings.
          type: object
        group:
          additionalProperties:
            $ref: "#/components/schemas/GroupPermissionSetting"
          description: |
            Configuration for group level group permission settings.
          type: object
      type: object
    register_queue_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          last_event_id: -1
          msg: ""
          queue_id: fb67bf8a-c031-47cc-84cf-ed80accacda8
          realm_emoji:
            "1":
              author_id: 5
              deactivated: false
              id: "1"
              name: green_tick
              source_url: /user_avatars/1/emoji/images/1.png
            "2":
              author_id: 3
              deactivated: false
              id: "2"
              name: animated_img
              source_url: /user_avatars/1/emoji/images/animated_img.gif
              still_url: /user_avatars/1/emoji/images/still/animated_img.png
          result: success
          zulip_feature_level: 2
          zulip_version: 5.0-dev-1650-gc3fd37755f
          zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
        properties:
          queue_id:
            description: |
              The ID of the queue that has been allocated for your client.

              Will be `null` only for unauthenticated access in realms that have
              enabled the [public access option](/help/public-access-option).
            nullable: true
            type: string
          last_event_id:
            description: |
              The initial value of `last_event_id` to pass to `GET /api/v1/events`.
            type: integer
          zulip_feature_level:
            description: |
              The server's current [Zulip feature level](/api/changelog).

              **Changes**: As of Zulip 3.0 (feature level 3), this is always present
              in the endpoint's response. Previously, it was only present if
              `event_types` included `zulip_version`.

              New in Zulip 3.0 (feature level 1).
            type: integer
          zulip_version:
            description: |
              The server's version number. This is often a release version number,
              like `2.1.7`. But for a server running a [version from Git][git-release],
              it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.

              **Changes**: As of Zulip 3.0 (feature level 3), this is always present
              in the endpoint's response. Previously, it was only present if
              `event_types` included `zulip_version`.

              [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
            type: string
          zulip_merge_base:
            description: |
              The `git merge-base` between `zulip_version` and official branches
              in the public
              [Zulip server and web app repository](https://github.com/zulip/zulip),
              in the same format as `zulip_version`. This will equal
              `zulip_version` if the server is not running a fork of the Zulip server.

              This will be `""` if the server does not know its `merge-base`.

              **Changes**: New in Zulip 5.0 (feature level 88).
            type: string
          alert_words:
            description: |
              Present if `alert_words` is present in `fetch_event_types`.

              An array of strings, each an [alert word](/help/dm-mention-alert-notifications#alert-words)
              that the current user has configured.
            items:
              type: string
            type: array
          custom_profile_fields:
            description: |
              Present if `custom_profile_fields` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary contains the
              details of a single custom profile field that is available to users
              in this Zulip organization. This must be combined with the custom profile
              field values on individual user objects to display users' profiles.
            items:
              $ref: "#/components/schemas/CustomProfileField"
            type: array
          custom_profile_field_types:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_custom_profile_field_types_value"
            description: |
              Present if `custom_profile_fields` is present in `fetch_event_types`.

              An array of objects; each object describes a type of custom profile field
              that could be configured on this Zulip server. Each custom profile type
              has an ID and the `type` property of a custom profile field is equal
              to one of these IDs.

              This attribute is only useful for clients containing UI for changing
              the set of configured custom profile fields in a Zulip organization.
            type: object
          realm_date_created:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The UNIX timestamp (UTC) for when the organization was
              created.

              **Changes**: New in Zulip 8.0 (feature level 203).
            type: integer
          demo_organization_scheduled_deletion_date:
            description: |
              Present if `realm` is present in `fetch_event_types`,
              and the realm is a demo organization.

              The UNIX timestamp (UTC) when the demo organization will be
              automatically deleted. Clients should use this to display a
              prominent warning to the user that the organization will be
              deleted at the indicated time.

              **Changes**: New in Zulip 5.0 (feature level 94).
            type: integer
          drafts:
            description: |
              An array containing draft objects for the user. These drafts are being
              stored on the backend for the purpose of syncing across devices. This
              array will be empty if `enable_drafts_synchronization` is set to `false`.
            items:
              $ref: "#/components/schemas/Draft"
            type: array
          onboarding_steps:
            description: |
              Present if `onboarding_steps` is present in `fetch_event_types`.

              An array of dictionaries, where each dictionary contains details about
              a single onboarding step that should be shown to the user.

              We expect that only official Zulip clients will interact with this data.

              **Changes**: Before Zulip 8.0 (feature level 233), this array was named
              `hotspots`. Prior to this feature level, one-time notice onboarding
              steps were not supported, and the `type` field in these objects did not
              exist as all onboarding steps were implicitly hotspots.
            items:
              $ref: "#/components/schemas/OnboardingStep"
            type: array
          navigation_tour_video_url:
            description: |
              Present if `onboarding_steps` is present in `fetch_event_types`.

              URL of the navigation tour video to display to new users during
              onboarding. If `null`, the onboarding video experience is disabled.

              **Changes**: New in Zulip 10.0 (feature level 369).
            nullable: true
            type: string
          max_message_id:
            deprecated: true
            description: |
              Present if `message` is present in `fetch_event_types`.

              The highest message ID among all messages the user has received as of the
              moment of this request.

              **Deprecated**: This field may be removed in future versions as it no
              longer has a clear purpose. Clients wishing to fetch the latest messages
              should pass `"anchor": "latest"` to `GET /messages`.
            type: integer
          max_reminder_note_length:
            description: |
              The maximum allowed length for a reminder note.

              **Changes**: New in Zulip 11.0 (feature level 415).
            type: integer
          max_stream_name_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a channel name, in Unicode code
              points. Clients should use this property rather than hardcoding
              field sizes.

              **Changes**: New in Zulip 4.0 (feature level 53). Previously,
              this required `stream` in `fetch_event_types`, was called
              `stream_name_max_length`, and always had a value of 60.
            type: integer
          max_stream_description_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a channel description, in Unicode
              code points. Clients should use this property rather than hardcoding
              field sizes.

              **Changes**: New in Zulip 4.0 (feature level 53). Previously,
              this required `stream` in `fetch_event_types`, was called
              `stream_description_max_length`, and always had a value of 1024.
            type: integer
          max_channel_folder_name_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a channel folder name, in Unicode
              code points. Clients should use this property rather than hardcoding
              field sizes.

              **Changes**: New in Zulip 11.0 (feature level 410). Clients should use
              60 as a fallback value on previous feature levels.
            type: integer
          max_channel_folder_description_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a channel folder description, in
              Unicode code points. Clients should use this property rather than
              hardcoding field sizes.

              **Changes**: New in Zulip 11.0 (feature level 410). Clients should use
              1024 as a fallback value on previous feature levels.
            type: integer
          max_topic_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a topic, in Unicode code points.
              Clients should use this property rather than hardcoding field
              sizes.

              **Changes**: New in Zulip 4.0 (feature level 53). Previously,
              this property always had a value of 60.
            type: integer
          max_message_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum allowed length for a message, in Unicode code points.
              Clients should use this property rather than hardcoding field
              sizes.

              **Changes**: New in Zulip 4.0 (feature level 53). Previously,
              this property always had a value of 10000.
            type: integer
          server_min_deactivated_realm_deletion_days:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The minimum permitted number of days before full data deletion
              (users, channels, messages, etc.) of a deactivated organization.
              If `null`, then a deactivated organization's data can be
              deleted immediately.

              **Changes**: New in Zulip 10.0 (feature level 332)
            nullable: true
            type: integer
          server_max_deactivated_realm_deletion_days:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum permitted number of days before full data deletion
              (users, channels, messages, etc.) of a deactivated organization.
              If `null`, then a deactivated organization's data can be
              retained indefinitely.

              **Changes**: New in Zulip 10.0 (feature level 332).
            nullable: true
            type: integer
          server_presence_ping_interval_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              For clients implementing the [presence](/api/get-presence) system,
              the time interval the client should use for sending presence requests
              to the server (and thus receive presence updates from the server).

              It is important for presence implementations to use both this and
              `server_presence_offline_threshold_seconds` correctly, so that a Zulip
              server can change these values to manage the trade-off between load and
              freshness of presence data.

              **Changes**: New in Zulip 7.0 (feature level 164). Clients should use 60
              for older Zulip servers, since that's the value that was hardcoded in the
              Zulip mobile apps prior to this parameter being introduced.
            type: integer
          server_presence_offline_threshold_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              How old a presence timestamp for a given user can be before the user
              should be displayed as offline by clients displaying Zulip presence
              data. See the related `server_presence_ping_interval_seconds` for details.

              **Changes**: New in Zulip 7.0 (feature level 164). Clients should use 140
              for older Zulip servers, since that's the value that was hardcoded in the
              Zulip client apps prior to this parameter being introduced.
            type: integer
          server_typing_started_expiry_period_milliseconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              For clients implementing [typing notifications](/api/set-typing-status)
              protocol, the time interval in milliseconds that the client should wait
              for additional [typing start](/api/get-events#typing-start) events from
              the server before removing an active typing indicator.

              **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 15000
              for older Zulip servers, since that's the value that was hardcoded in the
              Zulip apps prior to this parameter being introduced.
            type: integer
          server_typing_stopped_wait_period_milliseconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              For clients implementing [typing notifications](/api/set-typing-status)
              protocol, the time interval in milliseconds that the client should wait
              when a user stops interacting with the compose UI before sending a stop
              notification to the server.

              **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 5000
              for older Zulip servers, since that's the value that was hardcoded in the
              Zulip apps prior to this parameter being introduced.
            type: integer
          server_typing_started_wait_period_milliseconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              For clients implementing [typing notifications](/api/set-typing-status)
              protocol, the time interval in milliseconds that the client should use
              to send regular start notifications to the server to indicate that the
              user is still actively interacting with the compose UI.

              **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 10000
              for older Zulip servers, since that's the value that was hardcoded in the
              Zulip apps prior to this parameter being introduced.
            type: integer
          scheduled_messages:
            description: |
              Present if `scheduled_messages` is present in `fetch_event_types`.

              An array of all undelivered scheduled messages by the user.

              **Changes**: New in Zulip 7.0 (feature level 179).
            items:
              $ref: "#/components/schemas/ScheduledMessage"
            type: array
          reminders:
            description: |
              Present if `reminders` is present in `fetch_event_types`.

              An array of all undelivered reminders scheduled by the user.

              **Changes**: New in Zulip 11.0 (feature level 399).
            items:
              $ref: "#/components/schemas/ScheduledMessage"
            type: array
          muted_topics:
            deprecated: true
            description: |
              Present if `muted_topics` is present in `fetch_event_types`.

              Array of tuples, where each tuple describes a muted topic.
              The first element of the tuple is the channel name in which the topic
              has to be muted, the second element is the topic name to be muted
              and the third element is an integer UNIX timestamp representing
              when the topic was muted.

              **Changes**: Deprecated in Zulip 6.0 (feature level 134). Starting
              with this version, `muted_topics` will only be present in the
              response if the `user_topic` object, which generalizes and replaces
              this field, is not explicitly requested via `fetch_event_types`.

              Before Zulip 3.0 (feature level 1), the `muted_topics`
              array objects were 2-item tuples and did not include the timestamp
              information for when the topic was muted.
            items:
              items:
                $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner"
              type: array
            type: array
          muted_users:
            description: |
              Present if `muted_users` is present in `fetch_event_types`.

              A list of dictionaries where each dictionary describes
              a [muted user](/api/mute-user).

              **Changes**: New in Zulip 4.0 (feature level 48).
            items:
              $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_33_muted_users_inner"
            type: array
          presences:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_presences_value"
            description: |
              Present if `presence` is present in `fetch_event_types`.

              A dictionary where each entry describes the presence details of a
              user in the Zulip organization.

              The format of the entry (modern or legacy) depends on the value of
              [`slim_presence`](#parameter-slim_presence).

              Users who have been offline for multiple weeks may not appear in this object.
            type: object
          presence_last_update_id:
            description: |
              Present if `presence` is present in `fetch_event_types`.

              Provides the `last_update_id` value of the latest presence data fetched by
              the server and included in the response in `presences`. This can be used
              as the value of the `presence_last_update_id` parameter when polling
              for presence data at the [/users/me/presence](/api/update-presence) endpoint
              to tell the server to only fetch the relevant newer data in order to skip
              redundant already-known presence information.

              **Changes**: New in Zulip 9.0 (feature level 263).
            type: integer
          server_timestamp:
            description: |
              Present if `presence` is present in `fetch_event_types`.

              The time when the server fetched the
              `presences` data included in the response.
              Matches the similar field in presence
              responses.

              **Changes**: New in Zulip 5.0 (feature level 70).
            type: number
          realm_domains:
            description: |
              Present if `realm_domains` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes a domain within
              which users can join the organization without and invitation.
            items:
              $ref: "#/components/schemas/RealmDomain"
            type: array
          realm_emoji:
            additionalProperties:
              $ref: "#/components/schemas/RealmEmoji"
            description: |
              Present if `realm_emoji` is present in `fetch_event_types`.

              A dictionary of objects where each object describes a custom
              emoji that has been uploaded in this Zulip organization.
            type: object
          realm_linkifiers:
            description: |
              Present if `realm_linkifiers` is present in `fetch_event_types`.

              An ordered array of objects where each object describes a single
              [linkifier](/help/add-a-custom-linkifier).

              The order of the array reflects the order that each
              linkifier should be processed when linkifying messages
              and topics. By default, new linkifiers are ordered
              last. This order can be modified with [`PATCH
              /realm/linkifiers`](/api/reorder-linkifiers).

              Clients will receive an empty array unless the event queue is
              registered with the client capability `{"linkifier_url_template": true}`.
              See [`client_capabilities`](/api/register-queue#parameter-client_capabilities)
              parameter for how this can be specified.

              **Changes**: Before Zulip 7.0 (feature level 176), the
              `linkifier_url_template` client capability was not required. The
              requirement was added because linkifiers were updated to contain
              a URL template instead of a URL format string, which was a not
              backwards-compatible change.

              New in Zulip 4.0 (feature level 54). Clients can access this data for
              servers on earlier feature levels via the legacy `realm_filters` property.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_realm_linkifiers_inner"
            type: array
          realm_filters:
            deprecated: true
            description: |
              Legacy property for [linkifiers](/help/add-a-custom-linkifier).
              Present if `realm_filters` is present in `fetch_event_types`.

              When present, this is always an empty array.

              **Changes**: Prior to Zulip 7.0 (feature level 176), this was
              an array of tuples, where each tuple described a linkifier. The first
              element of the tuple was a string regex pattern which represented the
              pattern to be linkified on matching, for example `"#(?P<id>[123])"`.
              The second element was a URL format string that the pattern should be
              linkified with. A URL format string for the above example would be
              `"https://realm.com/my_realm_filter/%(id)s"`. And the third element
              was the ID of the realm filter.

              **Deprecated** in Zulip 4.0 (feature level 54), replaced by the
              `realm_linkifiers` key.
            items:
              items:
                $ref: "#/components/schemas/get_events_200_response_allOf_events_inner_oneOf_51_realm_filters_inner_inner"
              type: array
            type: array
          realm_playgrounds:
            description: |
              Present if `realm_playgrounds` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes a
              [code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.

              **Changes**: New in Zulip 4.0 (feature level 49).
            items:
              $ref: "#/components/schemas/RealmPlayground"
            type: array
          realm_user_groups:
            description: |
              Present if `realm_user_groups` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes a
              [user group](/help/user-groups) in the Zulip organization.

              Deactivated groups will only be included if `include_deactivated_groups`
              client capability is set to `true`.

              **Changes**: Prior to Zulip 10.0 (feature level 294), deactivated
              groups were included for all the clients.
            items:
              $ref: "#/components/schemas/UserGroup"
            type: array
          realm_bots:
            description: |
              Present if `realm_bot` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes a bot that the
              current user can administer. If the current user is an organization
              administrator, this will include all bots in the organization. Otherwise,
              it will only include bots owned by the user (either because the user created
              the bot or an administrator transferred the bot's ownership to the user).
            items:
              $ref: "#/components/schemas/Bot"
            type: array
          realm_embedded_bots:
            description: |
              Present if `realm_embedded_bots` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes an type of embedded
              bot that is available to be configured on this Zulip server.

              Clients only need these data if they contain UI for creating or administering bots.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_realm_embedded_bots_inner"
            type: array
          realm_incoming_webhook_bots:
            description: |
              Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes a type of incoming webhook
              integration that is available to be configured on this Zulip server.

              Clients only need these data if they contain UI for creating or administering bots.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_realm_incoming_webhook_bots_inner"
            type: array
          recent_private_conversations:
            description: |
              Present if `recent_private_conversations` is present in `fetch_event_types`.

              An array of dictionaries containing data on all direct message and group direct message
              conversations that the user has received (or sent) messages in, organized by
              conversation. This data set is designed to support UI elements such as the
              "Direct messages" widget in the web application showing recent direct message
              conversations that the user has participated in.

              "Recent" is defined as the server's discretion; the original implementation
              interpreted that as "the 1000 most recent direct messages the user received".
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_recent_private_conversations_inner"
            type: array
          navigation_views:
            description: |
              Present if `navigation_views` is present in `fetch_event_types`.
              An array of dictionaries containing data on all of the current user's
              navigation views.

              **Changes**: New in Zulip 11.0 (feature level 390).
            items:
              $ref: "#/components/schemas/NavigationView"
            type: array
          saved_snippets:
            description: |
              Present if `saved_snippets` is present in `fetch_event_types`.

              An array of dictionaries containing data on all of the current user's
              saved snippets.

              **Changes**: New in Zulip 10.0 (feature level 297).
            items:
              $ref: "#/components/schemas/SavedSnippet"
            type: array
          subscriptions:
            description: |
              Present if `subscription` is present in `fetch_event_types`.

              A array of dictionaries where each dictionary describes the properties
              of a channel the user is subscribed to (as well as that user's
              personal per-channel settings).

              **Changes**: Removed `email_address` field from the dictionary
              in Zulip 8.0 (feature level 226).

              Removed `role` field from the dictionary
              in Zulip 6.0 (feature level 133).
            items:
              $ref: "#/components/schemas/Subscription"
            type: array
          unsubscribed:
            description: |
              Present if `subscription` is present in `fetch_event_types`.

              A array of dictionaries where each dictionary describes one of the
              channels the user has unsubscribed from but was previously subscribed to
              along with the subscription details.

              Unlike `never_subscribed`, the user might have messages in their personal
              message history that were sent to these channels.

              **Changes**: Prior to Zulip 10.0 (feature level 349), if a user was
              in `can_administer_channel_group` of a channel that they had
              unsubscribed from, but not an organization administrator, the channel
              in question would not be part of this array.

              Removed `email_address` field from the dictionary
              in Zulip 8.0 (feature level 226).

              Removed `role` field from the dictionary
              in Zulip 6.0 (feature level 133).
            items:
              $ref: "#/components/schemas/Subscription"
            type: array
          never_subscribed:
            description: |
              Present if `subscription` is present in `fetch_event_types`.

              A array of dictionaries where each dictionary describes one of the
              channels that is visible to the user and the user has never been subscribed
              to.

              Important for clients containing UI where one can browse channels to subscribe
              to.

              **Changes**: Before Zulip 10.0 (feature level 362), archived channels did
              not appear in this list, even if the `archived_channels` [client
              capability][client-capabilities] was declared by the client.

              Prior to Zulip 10.0 (feature level 349), if a user was
              in `can_administer_channel_group` of a channel that they never
              subscribed to, but not an organization administrator, the channel
              in question would not be part of this array.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_never_subscribed_inner"
            type: array
          channel_folders:
            description: |
              Present if `channel_folders` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary describes one
              of the channel folders in the organization.

              Only channel folders with one or more public web channels are
              visible to spectators.

              **Changes**: New in Zulip 11.0 (feature level 389).
            items:
              $ref: "#/components/schemas/ChannelFolder"
            type: array
          unread_msgs:
            $ref: "#/components/schemas/register_queue_200_response_allOf_unread_msgs"
          starred_messages:
            description: |
              Present if `starred_messages` is present in `fetch_event_types`.

              Array containing the IDs of all messages which have been
              [starred](/help/star-a-message) by the user.
            items:
              type: integer
            type: array
          streams:
            description: |
              Present if `stream` is present in `fetch_event_types`.

              Array of dictionaries where each dictionary contains details about
              a single channel in the organization that is visible to the user.

              For organization administrators, this will include all private channels
              in the organization.

              **Changes**: Before Zulip 11.0 (feature level 378), archived channels
              did not appear in this list, even if the `archived_channels` [client
              capability][client-capabilities] was declared by the client.

              As of Zulip 8.0 (feature level 205), this will include all web-public
              channels in the organization as well.
            items:
              $ref: "#/components/schemas/BasicChannel"
            type: array
          realm_default_streams:
            description: |
              Present if `default_streams` is present in `fetch_event_types`.

              An array of IDs of all the [default channels](/help/set-default-streams-for-new-users)
              in the organization.

              **Changes**: Before Zulip 10.0 (feature level 330), we sent
              array of dictionaries where each dictionary contained details
              about a single default stream for the Zulip organization.
            items:
              type: integer
            type: array
          realm_default_stream_groups:
            description: |
              Present if `default_stream_groups` is present in `fetch_event_types`.

              An array of dictionaries where each dictionary contains details
              about a single default channel group configured for this
              Zulip organization.

              Default channel groups are an experimental feature.
            items:
              $ref: "#/components/schemas/DefaultChannelGroup"
            type: array
          stop_words:
            description: |
              Present if `stop_words` is present in `fetch_event_types`.

              An array containing the stop words used by the Zulip server's
              full-text search implementation. Useful for showing helpful
              error messages when a search returns limited results because
              a stop word in the query was ignored.
            items:
              type: string
            type: array
          user_status:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_user_status"
            description: |
              Present if `user_status` is present in `fetch_event_types`.

              A dictionary which contains the [status](/help/status-and-availability)
              of all users in the Zulip organization who have set a status.

              **Changes**: The emoji parameters are new in Zulip 5.0 (feature level 86).
              Previously, Zulip did not support emoji associated with statuses.
            type: object
          user_settings:
            $ref: "#/components/schemas/register_queue_200_response_allOf_user_settings"
          user_topics:
            description: |
              Present if `user_topic` is present in `fetch_event_types`.

              **Changes**: New in Zulip 6.0 (feature level 134), deprecating and
              replacing the previous `muted_topics` structure.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_user_topics_inner"
            type: array
          has_zoom_token:
            description: |
              Present if `video_calls` is present in `fetch_event_types`.

              A boolean which signifies whether the user has a Zoom token and has thus
              completed OAuth flow for the [Zoom integration](/help/configure-call-provider).
              Clients need to know whether initiating Zoom OAuth is required before
              creating a Zoom call.
            type: boolean
          giphy_api_key:
            description: |
              Present if `giphy` is present in `fetch_event_types`.

              GIPHY's client-side SDKs needs this API key to use the GIPHY API.
              GIPHY API keys are not secret (their main purpose appears to be
              allowing GIPHY to block a problematic app). Please don't use our API
              key for an app unrelated to Zulip.

              Developers of clients should also read the
              [GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-)
              before using this API key.

              **Changes**: Added in Zulip 4.0 (feature level 47).
            type: string
          push_devices:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_push_devices_value"
            description: |
              Present if `push_device` is present in `fetch_event_types`.

              Dictionary where each entry describes the user's push device's
              registration status and error code (if registration failed).

              **Changes**: New in Zulip 11.0 (feature level 406).
            type: object
          enable_desktop_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_digest_emails:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_login_emails:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_marketing_emails:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          email_notifications_batching_period_seconds:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: integer
          enable_offline_email_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_offline_push_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_online_push_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_sounds:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_stream_desktop_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_stream_email_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_stream_push_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          enable_stream_audible_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          wildcard_mentions_notify:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          message_content_in_email_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          notification_sound:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: string
          pm_content_in_desktop_notifications:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          desktop_icon_count_display:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: integer
          realm_name_in_email_notifications_policy:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: In Zulip 7.0 (feature level 168), replaced previous
              `realm_name_in_notifications` global notifications setting with
              `realm_name_in_email_notifications_policy`.

              **Deprecated** since Zulip 5.0 (feature level 89); both
              `realm_name_in_notifications` and the newer
              `realm_name_in_email_notifications_policy` are deprecated. Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: integer
          presence_enabled:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              The current value of this global notification setting for the user.
              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          available_notification_sounds:
            deprecated: true
            description: |
              Present if `update_global_notifications` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in their
              [`client_capabilities`][capabilities] when registering the event queue.

              Array containing the names of the notification sound options supported by
              this Zulip server. Only relevant to support UI for configuring notification
              sounds.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            items:
              type: string
            type: array
          color_scheme:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              The color scheme selected by the user.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: integer
          default_language:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              The default language chosen by the user.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: string
          demote_inactive_streams:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen to hide inactive channels.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: integer
          emojiset:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              The name of the emoji set that the user has chosen.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: string
          enable_drafts_synchronization:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether drafts synchronization is enabled for the user. If disabled,
              clients will receive an error when trying to use the `drafts` endpoints.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              New in Zulip 5.0 (feature level 87).

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          fluid_layout_width:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen for the layout width to be fluid.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          web_home_view:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              The [home view](/help/configure-home-view) in Zulip, represented
              as the URL suffix after `#` to be rendered when Zulip loads.

              Currently supported values are `all_messages` and `recent_topics`.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was
              called `default_view`, which was new in Zulip 4.0 (feature level 42).

              **Deprecated** in Zulip 5.0 (feature level 89). Clients connecting to newer
              servers should declare the `user_settings_object` client capability and
              access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: string
          high_contrast_mode:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether has switched on high contrast mode.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          left_side_userlist:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen for the userlist to be displayed
              on the left side of the screen (for desktop app and web app) in narrow
              windows.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          starred_message_counts:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen the number of starred messages to
              be displayed similar to unread counts.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          timezone:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              The user's [profile time zone](/help/change-your-timezone), which is
              used primarily to display the user's local time to other users.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: string
          translate_emoticons:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen for emoticons to be translated into emoji
              in the Zulip compose box.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          twenty_four_hour_time:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user has chosen a twenty four hour time display (true)
              or a twelve hour one (false).

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            type: boolean
          receives_typing_notifications:
            description: |
              Whether the user is configured to receive typing notifications from other
              users. The server will only deliver typing notifications events to users who
              for whom this is enabled.

              **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were
              only options to disable sending typing notifications.
            type: boolean
          enter_sends:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Whether the user setting for [sending on pressing Enter][set-enter-send]
              in the compose box is enabled.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and process the `user_settings` event type instead.

              Prior to Zulip 5.0 (feature level 84), this field was present
              in response if `realm_user` was present in `fetch_event_types`, not
              `update_display_settings`.

              [capabilities]: /api/register-queue#parameter-client_capabilities
              [set-enter-send]: /help/configure-send-message-keys
            type: boolean
          emojiset_choices:
            deprecated: true
            description: |
              Present if `update_display_settings` is present in `fetch_event_types`
              and only for clients that did not include `user_settings_object` in
              their [`client_capabilities`][capabilities] when registering the event queue.

              Array of dictionaries where each dictionary describes an emoji set
              supported by this version of the Zulip server.

              Only relevant to clients with configuration UI for choosing an emoji set;
              the currently selected emoji set is available in the `emojiset` key.

              See [PATCH /settings](/api/update-settings) for details on
              the meaning of this setting.

              **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
              connecting to newer servers should declare the `user_settings_object`
              client capability and access the `user_settings` object instead.

              [capabilities]: /api/register-queue#parameter-client_capabilities
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_user_settings_emojiset_choices_inner"
            type: array
          realm_message_edit_history_visibility_policy:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              What typesof message edit history are accessible to users via
              [message edit history](/help/view-a-messages-edit-history).

              - "all" = All edit history is visible.
              - "moves" = Only moves are visible.
              - "none" = No edit history is visible.

              **Changes**: New in Zulip 10.0 (feature level 358), replacing the previous
              `allow_edit_history` boolean setting; `true` corresponds to `all`,
              and `false` to `none`.
            type: string
          realm_allow_edit_history:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this organization is configured to allow users to access
              [message edit history](/help/view-a-messages-edit-history).

              The value of `realm_allow_edit_history` is set as `false` if the
              `realm_message_edit_history_visibility_policy` is configured as "None"
              and `true` if it is configured as "Moves only" or "All".

              **Changes**: Deprecated in Zulip 10.0 (feature level 358) and will be
              removed in the future, as it is an inaccurate version
              `realm_message_edit_history_visibility_policy`, which replaces this field.
            type: boolean
          realm_can_add_custom_emoji_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to add custom emoji in the organization.

              **Changes**: New in Zulip 10.0 (feature level 307). Previously, this
              permission was controlled by the enum `add_custom_emoji_policy`. Values
              were 1=Members, 2=Admins, 3=Full members, 4=Moderators.

              Before Zulip 5.0 (feature level 85), the `realm_add_emoji_by_admins_only`
              boolean setting controlled this permission; `true` corresponded to `Admins`,
              and `false` to `Everyone`.
          realm_can_add_subscribers_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to add subscribers to channels in the organization.

              **Changes**: New in Zulip 10.0 (feature level 341). Previously, this
              permission was controlled by the enum `invite_to_stream_policy`. Values
              were 1=Members, 2=Admins, 3=Full members, 4=Moderators.
          realm_can_delete_any_message_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to delete any message in the organization.

              **Changes**: New in Zulip 10.0 (feature level 281). Previously, this
              permission was limited to administrators only and was uneditable.
          realm_can_delete_own_message_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to delete messages that they have sent in the
              organization.

              **Changes**: New in Zulip 10.0 (feature level 291). Previously, this
              permission was controlled by the enum `delete_own_message_policy`. Values
              were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone.

              Before Zulip 5.0 (feature level 101), the `allow_message_deleting` boolean
              setting controlled this permission; `true` corresponded to `Everyone`, and
              `false` to `Admins`.
          realm_can_set_delete_message_policy_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to change per-channel `can_delete_any_message_group`
              and `can_delete_own_message_group` permission settings. Note that the user
              must be a member of both this group and the `can_administer_channel_group`
              of the channel whose message delete settings they want to change.

              Organization administrators can always change these settings of
              every channel.

              **Changes**: New in Zulip 11.0 (feature level 407).
          realm_can_set_topics_policy_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to change per-channel `topics_policy` setting. Note that
              the user must be a member of both this group and the `can_administer_channel_group`
              of the channel whose `topics_policy` they want to change.

              Organization administrators can always change the `topics_policy` setting of
              every channel.

              **Changes**: New in Zulip 11.0 (feature level 392).
          realm_can_invite_users_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to send email invitations for inviting other users
              to the organization.

              **Changes**: New in Zulip 10.0 (feature level 321). Previously, this
              permission was controlled by the enum `invite_to_realm_policy`. Values
              were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.

              Before Zulip 4.0 (feature level 50), the `invite_by_admins_only` boolean
              setting controlled this permission; `true` corresponded to `Admins`, and
              `false` to `Members`.
          realm_can_mention_many_users_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to use wildcard mentions in large channels.

              All users will receive a warning/reminder when using mentions in large
              channels, even when permitted to do so.

              **Changes**: New in Zulip 10.0 (feature level 352). Previously, this
              permission was controlled by the enum `wildcard_mention_policy`.
          realm_can_move_messages_between_channels_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to move messages from one channel to another
              in the organization.

              **Changes**: New in Zulip 10.0 (feature level 310). Previously, this
              permission was controlled by the enum `move_messages_between_streams_policy`.
              Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.

              In Zulip 7.0 (feature level 159), `Nobody` was added as an option to
              `move_messages_between_streams_policy` enum.
          realm_can_move_messages_between_topics_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to move messages from one topic to another
              within a channel in the organization.

              **Changes**: New in Zulip 10.0 (feature level 316). Previously, this
              permission was controlled by the enum `edit_topic_policy`. Values were
              1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone, 6=Nobody.

              In Zulip 7.0 (feature level 159), `Nobody` was added as an option to
              `edit_topic_policy` enum.
          realm_can_create_groups:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create user
              groups in this organization.

              **Changes**: New in Zulip 10.0 (feature level 299). Previously
              `realm_user_group_edit_policy` field used to control the
              permission to create user groups.
          realm_can_create_bots_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create all types of bot users
              in the organization. See also `can_create_write_only_bots_group`.

              **Changes**: New in Zulip 10.0 (feature level 344). Previously, this
              permission was controlled by the enum `bot_creation_policy`. Values
              were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
          realm_can_create_write_only_bots_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create bot users that
              can only send messages in the organization, i.e. incoming webhooks,
              in addition to the users who are present in `can_create_bots_group`.

              **Changes**: New in Zulip 10.0 (feature level 344). Previously, this
              permission was controlled by the enum `bot_creation_policy`. Values
              were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
          realm_can_manage_all_groups:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values)
              defining the set of users who have permission to
              administer all existing groups in this organization.

              **Changes**: Prior to Zulip 10.0 (feature level 305), only users who
              were a member of the group or had the moderator role or above could
              exercise the permission on a given group.

              New in Zulip 10.0 (feature level 299). Previously the
              `user_group_edit_policy` field controlled the permission
              to manage user groups. Valid values were as follows:

              - 1 = All members can create and edit user groups
              - 2 = Only organization administrators can create and edit
                user groups
              - 3 = Only [full members][calc-full-member] can create and
                edit user groups.
              - 4 = Only organization administrators and moderators can
                create and edit user groups.

              [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
          realm_can_manage_billing_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to manage plans and billing in the organization.

              **Changes**: New in Zulip 10.0 (feature level 363). Previously, only owners
              and users with `is_billing_admin` property set to `true` were allowed to
              manage plans and billing.
          realm_can_create_public_channel_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create public
              channels in this organization.

              **Changes**: New in Zulip 9.0 (feature level 264). Previously
              `realm_create_public_stream_policy` field used to control the
              permission to create public channels.
          realm_can_create_private_channel_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create private
              channels in this organization.

              **Changes**: New in Zulip 9.0 (feature level 266). Previously
              `realm_create_private_stream_policy` field used to control the
              permission to create private channels.
          realm_can_create_web_public_channel_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to create web-public
              channels in this organization.

              Has no effect and should not be displayed in settings UI
              unless the Zulip server has the `WEB_PUBLIC_STREAMS_ENABLED`
              server-level setting enabled and the organization has enabled
              the `enable_spectator_access` realm setting.

              **Changes**: New in Zulip 10.0 (feature level 280). Previously
              `realm_create_web_public_stream_policy` field used to control
              the permission to create web-public channels.
          realm_can_resolve_topics_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining
              the set of users who have permission to [resolve topics](/help/resolve-a-topic)
              in the organization.

              **Changes**: New in Zulip 10.0 (feature level 367). Previously, permission
              to resolve topics was controlled by the more general
              `can_move_messages_between_topics_group permission for moving messages`.
          realm_create_public_stream_policy:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A deprecated representation of a superset of the users who
              have permission to create public channels in the organization,
              available for backwards-compatibility. Clients should use
              `can_create_public_channel_group` instead.

              It is an enum with the following possible values, corresponding
              to roles/system groups:

              - 1 = Members only
              - 2 = Admins only
              - 3 = [Full members][calc-full-member] only
              - 4 = Admins and moderators only

              **Changes**: Deprecated in Zulip 9.0 (feature level 264) and
              replaced by `realm_can_create_public_channel_group`, which
              supports finer resolution of configurations, resulting in this
              property being inaccurate following that transition.

              Before Zulip 5.0 (feature level 102), permission to create
              channels was controlled by the `realm_create_stream_policy` setting.

              [permission-level]: /api/roles-and-permissions#permission-levels
              [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
            type: integer
          realm_create_private_stream_policy:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A deprecated representation of a superset of the users who
              have permission to create private channels in the organization,
              available for backwards-compatibility. Clients should use
              `can_create_private_channel_group` instead.

              It is an enum with the following possible values, corresponding
              to roles/system groups:

              - 1 = Members only
              - 2 = Admins only
              - 3 = [Full members][calc-full-member] only
              - 4 = Admins and moderators only

              **Changes**: Deprecated in Zulip 9.0 (feature level 266) and
              replaced by `realm_can_create_private_channel_group`, which
              supports finer resolution of configurations, resulting in this
              property being inaccurate following that transition.

              **Changes**: Before Zulip 5.0 (feature level 102), permission to
              create channels was controlled by the `realm_create_stream_policy` setting.

              [permission-level]: /api/roles-and-permissions#permission-levels
              [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
            type: integer
          realm_create_web_public_stream_policy:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A deprecated representation of a superset of the users who
              have permission to create web-public channels in the
              organization, available for backwards-compatibility. Clients
              should use `can_create_web_public_channel_group` instead.

              It is an enum with the following possible values, corresponding
              to roles/system groups:

              - 2 = Admins only
              - 4 = Admins and moderators only
              - 6 = Nobody
              - 7 = Owners only

              **Changes**: Deprecated in Zulip 10.0 (feature level 280) and
              replaced by `realm_can_create_web_public_channel_group`, which
              supports finer resolution of configurations, resulting in this
              property being inaccurate following that transition.

              **Changes**: Added in Zulip 5.0 (feature level 103).

              [permission-level]: /api/roles-and-permissions#permission-levels
            type: integer
          realm_wildcard_mention_policy:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A deprecated representation of a superset of the users who
              have permission to use wildcard mentions in large channels,
              available for backwards-compatibility. Clients should use
              `can_mention_many_users_group` instead.

              It is an enum with the following possible values, corresponding
              to roles/system groups:

              - 1 = Any user can use wildcard mentions in large channels.
              - 2 = Only members can use wildcard mentions in large channels.
              - 3 = Only [full members][calc-full-member] can use wildcard mentions in large channels.
              - 5 = Only organization administrators can use wildcard mentions in large channels.
              - 6 = Nobody can use wildcard mentions in large channels.
              - 7 = Only organization administrators and moderators can use wildcard mentions in large channels.

              All users will receive a warning/reminder when using
              mentions in large channels, even when permitted to do so.

              **Changes**: Deprecated in Zulip 10.0 (feature level 352) and
              replaced by `realm_can_mention_many_users_group`, which
              supports finer resolution of configurations, resulting in this
              property being inaccurate following that transition.

              Channel administrators option removed in Zulip 6.0 (feature level 133).

              Moderators option added in Zulip 4.0 (feature level 62).

              New in Zulip 4.0 (feature level 33).

              [permission-level]: /api/roles-and-permissions#permission-levels
              [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
            type: integer
          realm_default_language:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The [organization language][org-lang] for automated messages and invitation emails.

              [org-lang]: /help/configure-organization-language
            type: string
          realm_welcome_message_custom_text:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              This organization's configured custom message for Welcome Bot
              to send to new user accounts, in Zulip Markdown format.

              **Changes**: New in Zulip 11.0 (feature level 416).
            type: string
          realm_description:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The description of the organization, used on login and registration pages.
            type: string
          realm_digest_emails_enabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization has enabled [weekly digest emails](/help/digest-emails).
            type: boolean
          realm_disallow_disposable_email_addresses:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization disallows disposable email
              addresses.
            type: boolean
          realm_email_changes_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether users are allowed to change their own email address in this
              organization. This is typically disabled for organizations that
              synchronize accounts from LDAP or a similar corporate database.
            type: boolean
          realm_invite_required:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether an invitation is required to join this organization.
            type: boolean
          realm_create_multiuse_invite_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the
              set of users who are allowed to create [reusable invitation
              links](/help/invite-new-users#create-a-reusable-invitation-link)
              to the organization.

              **Changes**: Prior to Zulip 10.0 (feature level 314), this value used
              to be of type integer and did not accept anonymous user groups.

              New in Zulip 8.0 (feature level 209).
          realm_inline_image_preview:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this organization has been configured to enable
              [previews of linked images](/help/image-video-and-website-previews).
            type: boolean
          realm_inline_url_embed_preview:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this organization has been configured to enable
              [previews of linked websites](/help/image-video-and-website-previews).
            type: boolean
          realm_topics_policy:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The organization's default policy for sending channel messages to the
              [empty "general chat" topic](/help/require-topics).

              - `"allow_empty_topic"`: Channel messages can be sent to the empty topic.
              - `"disable_empty_topic"`: Channel messages cannot be sent to the empty topic.

              **Changes**: New in Zulip 11.0 (feature level 392). Previously, this was
              controlled by the boolean `realm_mandatory_topics` setting, which is now
              deprecated.
            enum:
            - allow_empty_topic
            - disable_empty_topic
            type: string
          realm_mandatory_topics:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether [topics are required](/help/require-topics) for messages in this
              organization.

              **Changes**: Deprecated in Zulip 11.0 (feature level 392). This is now
              controlled by the realm `topics_policy` setting.
            type: boolean
          realm_message_retention_days:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The default [message retention policy](/help/message-retention-policy)
              for this organization. It can have one special value:

              - `-1` denoting that the messages will be retained forever for this realm, by default.

              **Changes**: Prior to Zulip 3.0 (feature level 22), no limit was
              encoded as `null` instead of `-1`. Clients can correctly handle all
              server versions by treating both `-1` and `null` as indicating
              unlimited message retention.
            type: integer
          realm_name:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The name of the organization, used in login pages etc.
            type: string
          realm_require_e2ee_push_notifications:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this realm is configured to disallow sending mobile
              push notifications with message content through the legacy
              mobile push notifications APIs. The new API uses end-to-end
              encryption to protect message content and metadata from
              being accessible to the push bouncer service, APNs, and
              FCM. Clients that support the new E2EE API will use it
              automatically regardless of this setting.

              If `true`, mobile push notifications sent to clients that
              lack support for E2EE push notifications will always have
              "New message" as their content. Note that these legacy
              mobile notifications will still contain metadata, which may
              include the message's ID, the sender's name, email address,
              and avatar.

              In a future release, once the official mobile apps have
              implemented fully validated their E2EE protocol support,
              this setting will become strict, and disable the legacy
              protocol entirely.

              **Changes**: New in Zulip 11.0 (feature level 409). Previously,
              this behavior was available only via the
              `PUSH_NOTIFICATION_REDACT_CONTENT` global server setting.
            type: boolean
          realm_require_unique_names:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Indicates whether the organization is configured to require users
              to have unique full names. If true, the server will reject attempts
              to create a new user, or change the name of an existing user, where
              doing so would lead to two users whose names are identical modulo
              case and unicode normalization.

              **Changes**: New in Zulip 9.0 (feature level 246). Previously, the Zulip
              server could not be configured to enforce unique names.
            type: boolean
          realm_name_changes_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Indicates whether users are
              [allowed to change](/help/restrict-name-and-email-changes) their name
              via the Zulip UI in this organization. Typically disabled
              in organizations syncing this type of account information from
              an external user database like LDAP.
            type: boolean
          realm_avatar_changes_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Indicates whether users are
              [allowed to change](/help/restrict-name-and-email-changes) their avatar
              via the Zulip UI in this organization. Typically disabled
              in organizations syncing this type of account information from
              an external user database like LDAP.
            type: boolean
          realm_emails_restricted_to_domains:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions)
              this organization are required to have an email
              address in one of the `realm_domains` configured for the organization.
            type: boolean
          realm_send_welcome_emails:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether or not this organization is configured to send the standard Zulip
              [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
            type: boolean
          realm_message_content_allowed_in_email_notifications:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether notification emails in this organization are allowed to
              contain Zulip the message content, or simply indicate that a new
              message was sent.
            type: boolean
          realm_enable_spectator_access:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether web-public channels and related anonymous access APIs/features
              are enabled in this organization.

              Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED`
              [server setting][server-settings] is enabled on the Zulip
              server. See also the `can_create_web_public_channel_group` realm
              setting.

              **Changes**: New in Zulip 5.0 (feature level 109).

              [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html
            type: boolean
          realm_want_advertise_in_communities_directory:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization has given permission to be advertised in the
              Zulip [communities directory](/help/communities-directory).

              Useful only to clients supporting changing this setting for the
              organization.

              Giving permission via this setting does not guarantee that an
              organization will be listed in the Zulip communities directory.

              **Changes**: New in Zulip 6.0 (feature level 129).
            type: boolean
          realm_video_chat_provider:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The configured [video call provider](/help/configure-call-provider) for the
              organization.

              - 0 = None
              - 1 = Jitsi Meet
              - 3 = Zoom (User OAuth integration)
              - 4 = BigBlueButton
              - 5 = Zoom (Server to Server OAuth integration)

              Note that only one of the [Zoom integrations][zoom-video-calls] can
              be configured on a Zulip server.

              **Changes**: In Zulip 10.0 (feature level 353), added the Zoom Server
              to Server OAuth option.

              In Zulip 3.0 (feature level 1), added the None option
              to disable video call UI.

              [zoom-video-calls]: https://zulip.readthedocs.io/en/latest/production/video-calls.html#zoom
            type: integer
          realm_jitsi_server_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL of the custom Jitsi Meet server configured in this organization's
              settings.

              `null`, the default, means that the organization is using the should use the
              server-level configuration, `server_jitsi_server_url`. A correct client
              supporting only the modern API should use `realm_jitsi_server_url ||
              server_jitsi_server_url` to create calls.

              **Changes**: New in Zulip 8.0 (feature level 212). Previously, this was only
              available as a server-level configuration, which was available via the
              `jitsi_server_url` field.
            nullable: true
            type: string
          realm_giphy_rating:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The configured GIPHY rating for the organization.

              **Changes**: New in Zulip 4.0 (feature level 55).
            type: integer
          realm_waiting_period_threshold:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Members whose accounts have been created at least this many days ago
              will be treated as [full members][calc-full-member]
              for the purpose of settings that restrict access to new members.

              [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
            type: integer
          realm_digest_weekday:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The day of the week when the organization will send
              its weekly digest email to inactive users.
            type: integer
          realm_direct_message_initiator_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to start a new direct message conversation
              involving other non-bot users. Users who are outside this group and attempt
              to send the first direct message to a given collection of recipient users
              will receive an error, unless all other recipients are bots or the sender.

              **Changes**: New in Zulip 9.0 (feature level 270).

              Previously, access to send direct messages was controlled by the
              `private_message_policy` realm setting, which supported values of
              1 (enabled) and 2 (disabled).
          realm_direct_message_permission_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the set of
              users who have permission to fully use direct messages. Users outside
              this group can only send direct messages to conversations where all the
              recipients are in this group, are bots, or are the sender, ensuring that
              every direct message conversation will be visible to at least one user in
              this group.

              **Changes**: New in Zulip 9.0 (feature level 270).

              Previously, access to send direct messages was controlled by the
              `private_message_policy` realm setting, which supported values of
              1 (enabled) and 2 (disabled).
          realm_default_code_block_language:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The default pygments language code to be used for code blocks in this
              organization. If an empty string, no default has been set.

              **Changes**: Prior to Zulip 8.0 (feature level 195), a server bug meant
              that both `null` and an empty string could represent that no default was
              set for this realm setting. Clients supporting older server versions
              should treat either value (`null` or `""`) as no default being set.
            type: string
          realm_message_content_delete_limit_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Messages sent more than this many seconds ago cannot be deleted
              with this organization's
              [message deletion policy](/help/restrict-message-editing-and-deletion).

              Will not be 0. A `null` value means no limit: messages can be deleted
              regardless of how long ago they were sent.

              **Changes**: No limit was represented using the
              special value `0` before Zulip 5.0 (feature level 100).
            nullable: true
            type: integer
          realm_authentication_methods:
            additionalProperties:
              $ref: "#/components/schemas/RealmAuthenticationMethod"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Dictionary of authentication method keys mapped to dictionaries that
              describe the properties of the named authentication method for the
              organization - its enabled status and availability for use by the
              organization.

              Clients should use this to implement server-settings UI to change which
              methods are enabled for the organization. For authentication UI itself,
              clients should use the pre-authentication metadata returned by
              [`GET /server_settings`](/api/get-server-settings).

              **Changes**: In Zulip 9.0 (feature level 241), the values in this
              dictionary were changed. Previously, the values were a simple boolean
              indicating whether the backend is enabled or not.
            type: object
          realm_allow_message_editing:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this organization's [message edit policy][config-message-editing]
              allows editing the content of messages.

              See [`PATCH /messages/{message_id}`](/api/update-message) for details and
              history of how message editing permissions work.

              [config-message-editing]: /help/restrict-message-editing-and-deletion
            type: boolean
          realm_message_content_edit_limit_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Messages sent more than this many seconds ago cannot be edited
              with this organization's
              [message edit policy](/help/restrict-message-editing-and-deletion).

              Will not be `0`. A `null` value means no limit, so messages can be edited
              regardless of how long ago they were sent.

              See [`PATCH /messages/{message_id}`](/api/update-message) for details and
              history of how message editing permissions work.

              **Changes**: Before Zulip 6.0 (feature level 138), no limit was
              represented using the special value `0`.
            nullable: true
            type: integer
          realm_move_messages_within_stream_limit_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Messages sent more than this many seconds ago cannot be moved within a
              channel to another topic by users who have permission to do so based on this
              organization's [topic edit policy](/help/restrict-moving-messages). This
              setting does not affect moderators and administrators.

              Will not be `0`. A `null` value means no limit, so message topics can be
              edited regardless of how long ago they were sent.

              See [`PATCH /messages/{message_id}`](/api/update-message) for details and
              history of how message editing permissions work.

              **Changes**: New in Zulip 7.0 (feature level 162). Previously, this time
              limit was always 72 hours for users who were not administrators or
              moderators.
            nullable: true
            type: integer
          realm_move_messages_between_streams_limit_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Messages sent more than this many seconds ago cannot be moved between
              channels by users who have permission to do so based on this organization's
              [message move policy](/help/restrict-moving-messages). This setting does
              not affect moderators and administrators.

              Will not be `0`. A `null` value means no limit, so messages can be moved
              regardless of how long ago they were sent.

              See [`PATCH /messages/{message_id}`](/api/update-message) for details and
              history of how message editing permissions work.

              **Changes**: New in Zulip 7.0 (feature level 162). Previously, there was
              no time limit for moving messages between channels for users with permission
              to do so.
            nullable: true
            type: integer
          realm_enable_read_receipts:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether read receipts is enabled in the organization or not.

              If disabled, read receipt data will be unavailable to clients, regardless
              of individual users' personal read receipt settings. See also the
              `send_read_receipts` setting within `realm_user_settings_defaults`.

              **Changes**: New in Zulip 6.0 (feature level 137).
            type: boolean
          realm_icon_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL of the organization's [profile icon](/help/create-your-organization-profile).
            type: string
          realm_icon_source:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              String indicating whether the organization's
              [profile icon](/help/create-your-organization-profile) was uploaded
              by a user or is the default. Useful for UI allowing editing the organization's icon.

              - "G" means generated by Gravatar (the default).
              - "U" means uploaded by an organization administrator.
            type: string
          max_icon_file_size_mib:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum file size allowed for the organization's
              icon. Useful for UI allowing editing the organization's icon.

              **Changes**: New in Zulip 5.0 (feature level 72). Previously,
              this was called `max_icon_file_size`.
            type: integer
          realm_logo_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL of the organization's wide logo configured in the
              [organization profile](/help/create-your-organization-profile).
            type: string
          realm_logo_source:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              String indicating whether the organization's
              [profile wide logo](/help/create-your-organization-profile) was uploaded
              by a user or is the default. Useful for UI allowing editing the
              organization's wide logo.

              - "D" means the logo is the default Zulip logo.
              - "U" means uploaded by an organization administrator.
            type: string
          realm_night_logo_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL of the organization's dark theme wide-format logo configured in the
              [organization profile](/help/create-your-organization-profile).
            type: string
          realm_night_logo_source:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              String indicating whether the organization's dark theme
              [profile wide logo](/help/create-your-organization-profile) was uploaded
              by a user or is the default. Useful for UI allowing editing the
              organization's wide logo.

              - "D" means the logo is the default Zulip logo.
              - "U" means uploaded by an organization administrator.
            type: string
          max_logo_file_size_mib:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum file size allowed for the uploaded organization logos.

              **Changes**: New in Zulip 5.0 (feature level 72). Previously,
              this was called `max_logo_file_size`.
            type: integer
          realm_bot_domain:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The fake email domain that will be used for new bots created this
              organization. Useful for UI for creating bots.
            type: string
          realm_uri:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL for the organization. Alias of `realm_url`.

              **Changes**: Deprecated in Zulip 9.0 (feature level 257). The term
              "URI" is deprecated in [web standards](https://url.spec.whatwg.org/#goals).
            type: string
          realm_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL for the organization.

              **Changes**: New in Zulip 9.0 (feature level 257), replacing the
              deprecated `realm_uri`.
            type: string
          realm_available_video_chat_providers:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_realm_available_video_chat_providers_value"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Dictionary where each entry describes a supported [video call
              provider](/help/configure-call-provider) that is configured on this
              server and could be selected by an organization administrator.

              Useful for administrative settings UI that allows changing the realm
              setting `video_chat_provider`.
            type: object
          realm_presence_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether online presence of other users is shown in this
              organization.
            type: boolean
          settings_send_digest_emails:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this Zulip server is configured to allow organizations to
              enable [digest emails](/help/digest-emails).

              Relevant for administrative settings UI that can change the digest
              email settings.
            type: boolean
          realm_is_zephyr_mirror_realm:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization is a Zephyr mirror realm.
            type: boolean
          realm_email_auth_enabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization has enabled Zulip's default email and password
              authentication feature. Determines whether Zulip stores a password
              for the user and clients should offer any UI for changing the user's
              Zulip password.
            type: boolean
          realm_password_auth_enabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization allows any sort of password-based
              authentication (whether via EmailAuthBackend or LDAP passwords).

              Determines whether a client might ever need to display a password prompt
              (clients will primarily look at this attribute in [server_settings](/api/get-server-settings)
              before presenting a login page).
            type: boolean
          realm_push_notifications_enabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether push notifications are enabled for this organization. Typically
              `true` for Zulip Cloud and self-hosted realms that have a valid
              registration for the [Mobile push notifications
              service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html),
              and `false` for self-hosted servers that do not.

              **Changes**: Before Zulip 8.0 (feature level 231), this incorrectly was
              `true` for servers that were partly configured to use the Mobile Push
              Notifications Service but not properly registered.
            type: boolean
          realm_push_notifications_enabled_end_timestamp:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              If the server expects the realm's push notifications access to end at a
              definite time in the future, the UNIX timestamp (UTC) at which this is
              expected to happen. Mobile clients should use this field to display warnings
              to users when the indicated timestamp is near.

              **Changes**: New in Zulip 8.0 (feature level 231).
            nullable: true
            type: integer
          realm_upload_quota_mib:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The total quota for uploaded files in this organization.

              Clients are not responsible for checking this quota; it is included
              in the API only for display purposes.

              If `null`, there is no limit.

              **Changes**: Before Zulip 9.0 (feature level 251), this field
              was incorrectly measured in bytes, not MiB.

              New in Zulip 5.0 (feature level 72). Previously,
              this was called `realm_upload_quota`.
            nullable: true
            type: integer
          realm_org_type:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The [organization type](/help/organization-type) for the realm.
              Useful only to clients supporting changing this setting for the
              organization, or clients implementing onboarding content or
              other features that varies with organization type.

              - 0 = Unspecified
              - 10 = Business
              - 20 = Open-source project
              - 30 = Education (non-profit)
              - 35 = Education (for-profit)
              - 40 = Research
              - 50 = Event or conference
              - 60 = Non-profit (registered)
              - 70 = Government
              - 80 = Political group
              - 90 = Community
              - 100 = Personal
              - 1000 = Other

              **Changes**: New in Zulip 6.0 (feature level 128).
            type: integer
          realm_plan_type:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The plan type of the organization.

              - 1 = Self-hosted organization (SELF_HOSTED)
              - 2 = Zulip Cloud free plan (LIMITED)
              - 3 = Zulip Cloud Standard plan (STANDARD)
              - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
            type: integer
          realm_enable_guest_user_dm_warning:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether clients should show a warning when a user is composing
              a DM to a guest user in this organization.

              **Changes**: New in Zulip 10.0 (feature level 348).
            type: boolean
          realm_enable_guest_user_indicator:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether clients should display "(guest)" after the names of
              guest users to prominently highlight their status.

              **Changes**: New in Zulip 8.0 (feature level 216).
            type: boolean
          realm_can_access_all_users_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the
              set of users who are allowed to access all users in the
              organization.

              **Changes**: Prior to Zulip 10.0 (feature level 314), this value used
              to be of type integer and did not accept anonymous user groups.

              New in Zulip 8.0 (feature level 225).
          realm_can_summarize_topics_group:
            allOf:
            - $ref: "#/components/schemas/GroupSettingValue"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A [group-setting value](/api/group-setting-values) defining the
              set of users who are allowed to use AI summarization.

              **Changes**: New in Zulip 10.0 (feature level 350).
          zulip_plan_is_not_limited:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the organization is using a limited (Zulip Cloud Free) plan.
            type: boolean
          upgrade_text_for_wide_organization_logo:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Text to use when displaying UI for wide organization logos, a feature
              that is currently not available on the Zulip Cloud Free plan.

              Useful only for clients supporting administrative UI for uploading
              a new wide organization logo to brand the organization.
            type: string
          realm_default_external_accounts:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_realm_default_external_accounts_value"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Dictionary where each entry describes a default external
              account type that can be configured with Zulip's [custom
              profile fields feature](/help/custom-profile-fields).

              **Changes**: New in Zulip 2.1.0.
            type: object
          jitsi_server_url:
            deprecated: true
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The base URL to be used to create Jitsi video calls. Equals
              `realm_jitsi_server_url || server_jitsi_server_url`.

              **Changes**: Deprecated in Zulip 8.0 (feature level 212) and will
              eventually be removed. Previously, the Jitsi server to use was not
              configurable on a per-realm basis, and this field contained the server's
              configured Jitsi server. (Which is now provided as
              `server_jitsi_server_url`). Clients supporting older versions should fall
              back to this field when creating calls: using `realm_jitsi_server_url ||
              server_jitsi_server_url` with newer servers and using `jitsi_server_url`
              with servers below feature level 212.
            type: string
          development_environment:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether this Zulip server is a development environment. Used
              to control certain features or UI (such as error popups)
              that should only apply when connected to a Zulip development
              environment.
            type: boolean
          server_generation:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A timestamp indicating when the process hosting this
              event queue was started. Clients will likely only find
              this value useful for inclusion in detailed error reports.
            type: integer
          password_min_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              This Zulip server's configured minimum required length for passwords.
              Necessary for password change UI to show whether the password
              will be accepted.
            type: integer
          password_max_length:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              This Zulip server's configured maximum length for passwords.
              Necessary for password change UI to show whether the password
              will be accepted.

              **Changes**: New in Zulip 10.0 (feature level 338).
            type: integer
          password_min_guesses:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              This Zulip server's configured minimum `zxcvbn` minimum guesses.
              Necessary for password change UI to show whether the password
              will be accepted.
            type: integer
          giphy_rating_options:
            additionalProperties:
              $ref: "#/components/schemas/register_queue_200_response_allOf_giphy_rating_options_value"
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Dictionary where each entry describes a valid rating
              that is configured on this server and could be selected by an
              organization administrator.

              Useful for administrative settings UI that allows changing the
              allowed rating of GIFs.
            type: object
          max_file_upload_size_mib:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum file size that can be uploaded to this Zulip organization.
            type: integer
          max_avatar_file_size_mib:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The maximum avatar size that can be uploaded to this Zulip server.
            type: integer
          server_inline_image_preview:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the server is configured with support for inline image previews.
              Clients containing administrative UI for changing
              `realm_inline_image_preview` should consult this field before offering
              that feature.
            type: boolean
          server_inline_url_embed_preview:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the server is configured with support for inline URL previews.
              Clients containing administrative UI for changing
              `realm_inline_url_embed_preview` should consult this field before offering
              that feature.
            type: boolean
          server_thumbnail_formats:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              A list describing the image formats that uploaded
              images will be thumbnailed into. Any image with a
              source starting with `/user_uploads/thumbnail/` can
              have its last path component replaced with any of the
              names contained in this list, to obtain the desired
              thumbnail size.

              **Changes**: New in Zulip 9.0 (feature level 273).
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_server_thumbnail_formats_inner"
            type: array
          server_avatar_changes_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the server allows avatar changes. Similar to
              `realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`
              Zulip server level setting.
            type: boolean
          server_name_changes_disabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the server allows name changes. Similar to
              `realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`
              Zulip server level setting.
            type: boolean
          server_needs_upgrade:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Whether the server is running an old version based on the Zulip
              [server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag),
              such that the web app will display to the current user a prominent warning.

              **Changes**: New in Zulip 5.0 (feature level 74).
            type: boolean
          server_web_public_streams_enabled:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The value of the `WEB_PUBLIC_STREAMS_ENABLED` Zulip server level
              setting. A server that has disabled this setting intends to not offer [web
              public channels](/help/public-access-option) to realms it hosts. (Zulip Cloud
              defaults to `true`; self-hosted servers default to `false`).

              Clients should use this to determine whether to offer UI for the
              realm-level setting for enabling web-public channels
              (`realm_enable_spectator_access`).

              **Changes**: New in Zulip 5.0 (feature level 110).
            type: boolean
          server_emoji_data_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL to a JSON file that describes which emoji names map to which
              emoji codes, for all Unicode emoji this Zulip server accepts.

              The data at the given URL is a JSON object with one property, `code_to_names`.
              The value of that property is a JSON object where each key is an
              [emoji code](/api/add-reaction#parameter-emoji_code) for an available
              Unicode emoji, and each value is the corresponding
              [emoji names](/api/add-reaction#parameter-emoji_name) for this emoji,
              with the canonical name for the emoji always appearing first.

              The HTTP response at that URL will have appropriate HTTP caching headers, such
              any HTTP implementation should get a cached version if emoji haven't changed
              since the last request.

              **Changes**: New in Zulip 6.0 (feature level 140).
            type: string
          server_jitsi_server_url:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The URL of the Jitsi server that the Zulip server is configured to use by
              default; the organization-level setting `realm_jitsi_server_url` takes
              precedence over this setting when both are set.

              **Changes**: New in Zulip 8.0 (feature level 212). Previously, this value
              was available as the now-deprecated `jitsi_server_url`.
            nullable: true
            type: string
          server_can_summarize_topics:
            description: |
              Present if `realm` is present in `fetch_event_types`

              Whether topic summarization is enabled in the server or
              not depending upon whether `TOPIC_SUMMARIZATION_MODEL`
              is set or not.

              **Changes**: New in Zulip 10.0 (feature level 350).
            type: boolean
          event_queue_longpoll_timeout_seconds:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Recommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls.
              This is guaranteed to be somewhat greater than the heartbeat frequency. It is important
              that clients respect this parameter, so that increases in the heartbeat frequency do not
              break clients.

              **Changes**: New in Zulip 5.0 (feature level 74). Previously,
              this was hardcoded to 90 seconds, and clients should use that as a fallback
              value when interacting with servers where this field is not present.
            type: integer
          realm_billing:
            $ref: "#/components/schemas/register_queue_200_response_allOf_realm_billing"
          realm_moderation_request_channel_id:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The ID of the private channel to which messages flagged by users for
              moderation are sent. Moderators can use this channel to review and
              act on reported content.

              Will be `-1` if moderation requests are disabled.

              Clients should check whether moderation requests are disabled to
              determine whether to present a "report message" feature in their UI
              within a given organization.

              **Changes**: New in Zulip 10.0 (feature level 331). Previously,
              no "report message" feature existed in Zulip.
            type: integer
          realm_new_stream_announcements_stream_id:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The ID of the channel to which automated messages announcing the
              [creation of new channels][new-channel-announce] are sent.

              Will be `-1` if such automated messages are disabled.

              Since these automated messages are sent by the server, this field is
              primarily relevant to clients containing UI for changing it.

              [new-channel-announce]: /help/configure-automated-notices#new-channel-announcements

              **Changes**: In Zulip 9.0 (feature level 241), renamed 'realm_notifications_stream_id'
              to `realm_new_stream_announcements_stream_id`.
            type: integer
          realm_signup_announcements_stream_id:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The ID of the channel to which automated messages announcing
              that [new users have joined the organization][new-user-announce] are sent.

              Will be `-1` if such automated messages are disabled.

              Since these automated messages are sent by the server, this field is
              primarily relevant to clients containing UI for changing it.

              [new-user-announce]: /help/configure-automated-notices#new-user-announcements

              **Changes**: In Zulip 9.0 (feature level 241), renamed
              'realm_signup_notifications_stream_id' to `realm_signup_announcements_stream_id`.
            type: integer
          realm_zulip_update_announcements_stream_id:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              The ID of the channel to which automated messages announcing
              new features or other end-user updates about the Zulip software are sent.

              Will be `-1` if such automated messages are disabled.

              Since these automated messages are sent by the server, this field is
              primarily relevant to clients containing UI for changing it.

              **Changes**: New in Zulip 9.0 (feature level 242).
            type: integer
          realm_empty_topic_display_name:
            description: |
              Present if `realm` is present in `fetch_event_types`.

              Clients declaring the `empty_topic_name` client capability
              should use the value of `realm_empty_topic_display_name` to
              determine how to display the empty string topic.

              Clients not declaring the `empty_topic_name` client capability
              receive `realm_empty_topic_display_name` value as the topic name
              replacing empty string.

              **Changes**: New in Zulip 10.0 (feature level 334). Previously,
              the empty string was not a valid topic name.
            type: string
          realm_user_settings_defaults:
            $ref: "#/components/schemas/register_queue_200_response_allOf_realm_user_settings_defaults"
          realm_users:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              A array of dictionaries where each entry describes a user
              whose account has not been deactivated. Note that unlike
              the usual User dictionary, this does not contain the `is_active`
              key, as all the users present in this array have active accounts.

              If the current user is a guest whose access to users is limited by a
              `can_access_all_users_group` policy, and the event queue was registered
              with the `user_list_incomplete` client capability, then users that the
              current user cannot access will not be included in this array. If the
              current user's access to a user is restricted but the client lacks this
              capability, then that inaccessible user will appear in the users array as
              an "Unknown user" object with the usual format but placeholder data whose
              only variable content is the user ID.

              See also `cross_realm_bots` and `realm_non_active_users`.

              **Changes**: Before Zulip 8.0 (feature level 232), the
              `user_list_incomplete` client capability did not exist, and so all
              clients whose access to a new user was prevented by
              `can_access_all_users_group` policy would receive a fake "Unknown
              user" event for such users.
            items:
              $ref: "#/components/schemas/User"
            type: array
          realm_non_active_users:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              A array of dictionaries where each entry describes a user
              whose account has been deactivated. Note that unlike
              the usual User dictionary this does not contain the `is_active`
              key as all the users present in this array have deactivated
              accounts.
            items:
              $ref: "#/components/schemas/User"
            type: array
          avatar_source:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The avatar data source type for the current user.

              Value values are `G` (gravatar) and `U` (uploaded by user).
            type: string
          avatar_url_medium:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The avatar URL for the current user at 500x500 resolution, appropriate
              for use in settings UI showing the user's avatar.
            type: string
          avatar_url:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The URL of the avatar for the current user at 100x100
              resolution. See also `avatar_url_medium`.
            type: string
          can_create_streams:
            deprecated: true
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is allowed to create at least one type
              of channel with the organization's [channel creation
              policy](/help/configure-who-can-create-channels). Its value will
              always equal `can_create_public_streams || can_create_private_streams`.

              **Changes**: Deprecated in Zulip 5.0 (feature level 102), when
              the new `create_private_stream_policy` and
              `create_public_stream_policy` properties introduced the
              possibility that a user could only create one type of channel.

              This field will be removed in a future release.
            type: boolean
          can_create_public_streams:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is allowed to create public channels with
              the organization's [channel creation policy](/help/configure-who-can-create-channels).

              **Changes**: New in Zulip 5.0 (feature level 102). In older
              versions, the deprecated `can_create_streams` property should be
              used to determine whether the user can create public channels.
            type: boolean
          can_create_private_streams:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is allowed to create private channels with
              the organization's [channel creation policy](/help/configure-who-can-create-channels).

              **Changes**: New in Zulip 5.0 (feature level 102). In older
              versions, the deprecated `can_create_streams` property should be
              used to determine whether the user can create private channels.
            type: boolean
          can_create_web_public_streams:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is allowed to create public channels with
              the organization's [channel creation policy](/help/configure-who-can-create-channels).

              Note that this will be false if the Zulip server does not have the
              `WEB_PUBLIC_STREAMS_ENABLED` setting enabled or if the organization has
              not enabled the `enable_spectator_access` realm setting.

              **Changes**: New in Zulip 5.0 (feature level 103).
            type: boolean
          can_subscribe_other_users:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is allowed to subscribe other users to channels with
              the organization's [channels policy](/help/configure-who-can-invite-to-channels).
            type: boolean
          can_invite_others_to_realm:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user [is allowed to invite others][who-can-send-invitations]
              to the organization.

              **Changes**: New in Zulip 4.0 (feature level 51).

              [who-can-send-invitations]: /help/restrict-account-creation#change-who-can-send-invitations
            type: boolean
          is_admin:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is at least an [organization administrator](/api/roles-and-permissions).
            type: boolean
          is_owner:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is an [organization owner](/api/roles-and-permissions).

              **Changes**: New in Zulip 3.0 (feature level 11).
            type: boolean
          is_moderator:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is at least an [organization moderator](/api/roles-and-permissions).

              **Changes**: Prior to Zulip 11.0 (feature level 380), this was only true
              for users whose role was exactly the moderator role.

              New in Zulip 4.0 (feature level 60).
            type: boolean
          is_guest:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Whether the current user is a [guest user](/api/roles-and-permissions).
            type: boolean
          user_id:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The unique ID for the current user.
            type: integer
          email:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The Zulip API email address for the current user. See also
              `delivery_email`; these may be the same or different depending
              on the user's `email_address_visibility` policy.
            type: string
          delivery_email:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The user's email address, appropriate for UI for changing
              the user's email address. See also `email`.
            type: string
          full_name:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              The full name of the current user.
            type: string
          cross_realm_bots:
            description: |
              Present if `realm_user` is present in `fetch_event_types`.

              Array of dictionaries where each dictionary contains details of
              a single cross realm bot. Cross-realm bots are special system bot accounts
              like Notification Bot.

              Most clients will want to combine this with `realm_users` in many
              contexts.
            items:
              $ref: "#/components/schemas/register_queue_200_response_allOf_cross_realm_bots_inner"
            type: array
          server_supported_permission_settings:
            $ref: "#/components/schemas/register_queue_200_response_allOf_server_supported_permission_settings"
          max_bulk_new_subscription_messages:
            description: |
              Maximum number of new subscribers for which the server will
              respect the `send_new_subscription_messages` parameter when
              [adding subscribers to a channel](/api/subscribe#parameter-send_new_subscription_messages).

              **Changes**: New in Zulip 11.0 (feature level 397).
            example: 100
            type: number
        type: object
      example:
        zulip_merge_base: zulip_merge_base
        enable_sounds: true
        fluid_layout_width: true
        high_contrast_mode: true
        realm_non_active_users:
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        realm_direct_message_permission_group: ""
        realm_user_groups:
        - can_join_group: ""
          is_system_group: true
          date_created: 6
          description: description
          can_mention_group: ""
          deactivated: true
          direct_subgroup_ids:
          - 6
          - 6
          can_leave_group: ""
          can_add_members_group: ""
          members:
          - 2
          - 2
          name: name
          creator_id: 1
          can_remove_members_group: ""
          id: 6
          can_manage_group: ""
        - can_join_group: ""
          is_system_group: true
          date_created: 6
          description: description
          can_mention_group: ""
          deactivated: true
          direct_subgroup_ids:
          - 6
          - 6
          can_leave_group: ""
          can_add_members_group: ""
          members:
          - 2
          - 2
          name: name
          creator_id: 1
          can_remove_members_group: ""
          id: 6
          can_manage_group: ""
        enter_sends: true
        realm_allow_edit_history: true
        realm_avatar_changes_disabled: true
        unread_msgs:
          huddles:
          - user_ids_string: user_ids_string
            unread_message_ids:
            - 0
            - 0
          - user_ids_string: user_ids_string
            unread_message_ids:
            - 0
            - 0
          pms:
          - other_user_id: 4
            sender_id: 7
            unread_message_ids:
            - 9
            - 9
          - other_user_id: 4
            sender_id: 7
            unread_message_ids:
            - 9
            - 9
          streams:
          - stream_id: 0
            topic: topic
            unread_message_ids:
            - 9
            - 9
          - stream_id: 0
            topic: topic
            unread_message_ids:
            - 9
            - 9
          mentions:
          - 7
          - 7
          count: 1
          old_unreads_missing: true
        stop_words:
        - stop_words
        - stop_words
        max_reminder_note_length: 7
        realm_date_created: 5
        realm_playgrounds:
        - pygments_language: pygments_language
          name: name
          url_template: url_template
          id: 3
        - pygments_language: pygments_language
          name: name
          url_template: url_template
          id: 3
        enable_login_emails: true
        realm_can_create_public_channel_group: ""
        realm_user_settings_defaults:
          fluid_layout_width: true
          enable_sounds: true
          high_contrast_mode: true
          user_list_style: 4
          receives_typing_notifications: true
          web_left_sidebar_show_channel_folders: true
          enter_sends: true
          enable_followed_topic_email_notifications: true
          enable_followed_topic_audible_notifications: true
          emojiset: emojiset
          resolved_topic_notice_auto_read_policy: resolved_topic_notice_auto_read_policy
          enable_stream_audible_notifications: true
          enable_followed_topic_wildcard_mentions_notify: true
          enable_drafts_synchronization: true
          enable_login_emails: true
          color_scheme: 8
          enable_stream_push_notifications: true
          twenty_four_hour_time: true
          web_left_sidebar_unreads_count_summary: true
          send_private_typing_notifications: true
          default_language: default_language
          hide_ai_features: true
          wildcard_mentions_notify: true
          web_navigate_to_sent_message: true
          enable_marketing_emails: true
          available_notification_sounds:
          - available_notification_sounds
          - available_notification_sounds
          starred_message_counts: true
          web_stream_unreads_count_display_policy: 8
          send_stream_typing_notifications: true
          enable_desktop_notifications: true
          presence_enabled: true
          web_escape_navigates_to_home_view: true
          enable_stream_email_notifications: true
          enable_offline_email_notifications: true
          notification_sound: notification_sound
          enable_offline_push_notifications: true
          web_channel_default_view: 4
          web_font_size_px: 14
          web_home_view: web_home_view
          pm_content_in_desktop_notifications: true
          enable_followed_topic_desktop_notifications: true
          automatically_unmute_topics_in_muted_streams_policy: 2
          emojiset_choices:
          - text: text
            key: key
          - text: text
            key: key
          web_line_height_percent: 122
          display_emoji_reaction_users: true
          enable_stream_desktop_notifications: true
          web_animate_image_previews: web_animate_image_previews
          desktop_icon_count_display: 2
          enable_online_push_notifications: true
          left_side_userlist: true
          realm_name_in_email_notifications_policy: 6
          translate_emoticons: true
          message_content_in_email_notifications: true
          email_notifications_batching_period_seconds: 5
          email_address_visibility: 0
          enable_followed_topic_push_notifications: true
          send_read_receipts: true
          web_mark_read_on_scroll_policy: 9
          automatically_follow_topics_policy: 0
          web_suggest_update_timezone: true
          enable_digest_emails: true
          demote_inactive_streams: 6
          automatically_follow_topics_where_mentioned: true
          allow_private_data_export: true
        server_inline_url_embed_preview: true
        alert_words:
        - alert_words
        - alert_words
        realm_plan_type: 5
        server_jitsi_server_url: server_jitsi_server_url
        has_zoom_token: true
        demo_organization_scheduled_deletion_date: 5
        max_icon_file_size_mib: 1
        realm_can_create_web_public_channel_group: ""
        realm_name_changes_disabled: true
        realm_giphy_rating: 9
        push_devices:
          key:
            error_code: error_code
            status: status
        default_language: default_language
        realm_available_video_chat_providers:
          key:
            name: name
            id: 3
        enable_marketing_emails: true
        realm_can_create_groups: ""
        realm_domains:
        - allow_subdomains: true
          domain: domain
        - allow_subdomains: true
          domain: domain
        full_name: full_name
        presence_last_update_id: 6
        starred_message_counts: true
        event_queue_longpoll_timeout_seconds: 1
        realm_can_add_subscribers_group: ""
        server_supported_permission_settings:
          stream:
            key:
              require_system_group: true
              default_for_system_groups: default_for_system_groups
              allowed_system_groups:
              - allowed_system_groups
              - allowed_system_groups
              allow_internet_group: true
              allow_nobody_group: true
              allow_everyone_group: true
              default_group_name: default_group_name
          realm:
            key:
              require_system_group: true
              default_for_system_groups: default_for_system_groups
              allowed_system_groups:
              - allowed_system_groups
              - allowed_system_groups
              allow_internet_group: true
              allow_nobody_group: true
              allow_everyone_group: true
              default_group_name: default_group_name
          group:
            key:
              require_system_group: true
              default_for_system_groups: default_for_system_groups
              allowed_system_groups:
              - allowed_system_groups
              - allowed_system_groups
              allow_internet_group: true
              allow_nobody_group: true
              allow_everyone_group: true
              default_group_name: default_group_name
        enable_desktop_notifications: true
        realm_require_e2ee_push_notifications: true
        server_name_changes_disabled: true
        realm_logo_url: realm_logo_url
        max_channel_folder_description_length: 4
        is_guest: true
        muted_users:
        - id: 9
          timestamp: 9
        - id: 9
          timestamp: 9
        result: ""
        server_typing_started_expiry_period_milliseconds: 1
        pm_content_in_desktop_notifications: true
        emojiset_choices:
        - text: text
          key: key
        - text: text
          key: key
        can_subscribe_other_users: true
        email: email
        user_topics:
        - last_updated: 5
          stream_id: 9
          topic_name: topic_name
          visibility_policy: 7
        - last_updated: 5
          stream_id: 9
          topic_name: topic_name
          visibility_policy: 7
        enable_online_push_notifications: true
        realm_logo_source: realm_logo_source
        is_owner: true
        server_avatar_changes_disabled: true
        realm_waiting_period_threshold: 0
        realm_night_logo_url: realm_night_logo_url
        server_min_deactivated_realm_deletion_days: 1
        giphy_api_key: giphy_api_key
        realm_email_auth_enabled: true
        avatar_source: avatar_source
        is_moderator: true
        realm_default_streams:
        - 6
        - 6
        max_file_upload_size_mib: 7
        ignored_parameters_unsupported: ""
        unsubscribed:
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
        realm_enable_read_receipts: true
        avatar_url: avatar_url
        realm_linkifiers:
        - pattern: pattern
          url_template: url_template
          id: 9
        - pattern: pattern
          url_template: url_template
          id: 9
        realm_can_create_write_only_bots_group: ""
        max_message_id: 2
        subscriptions:
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
        - push_notifications: true
          is_web_public: true
          color: color
          stream_weekly_traffic: 2
          description: description
          is_muted: true
          in_home_view: true
          first_message_id: 9
          rendered_description: rendered_description
          stream_id: 0
          is_recently_active: true
          stream_post_policy: 2
          topics_policy: inherit
          pin_to_top: true
          date_created: 6
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: true
          wildcard_mentions_notify: true
          desktop_notifications: true
          is_archived: true
          subscriber_count: 4.145608029883936
          name: name
          creator_id: 1
          email_notifications: true
          partial_subscribers:
          - 5
          - 5
          is_announcement_only: true
          message_retention_days: 7
          folder_id: 3
          audible_notifications: true
          invite_only: true
        realm_message_content_edit_limit_seconds: 4
        receives_typing_notifications: true
        realm_is_zephyr_mirror_realm: true
        realm_password_auth_enabled: true
        user_settings:
          fluid_layout_width: true
          enable_sounds: true
          high_contrast_mode: true
          user_list_style: 8
          receives_typing_notifications: true
          web_left_sidebar_show_channel_folders: true
          enter_sends: true
          enable_followed_topic_email_notifications: true
          enable_followed_topic_audible_notifications: true
          emojiset: emojiset
          resolved_topic_notice_auto_read_policy: resolved_topic_notice_auto_read_policy
          enable_stream_audible_notifications: true
          enable_followed_topic_wildcard_mentions_notify: true
          enable_drafts_synchronization: true
          enable_login_emails: true
          color_scheme: 3
          enable_stream_push_notifications: true
          twenty_four_hour_time: true
          web_left_sidebar_unreads_count_summary: true
          send_private_typing_notifications: true
          default_language: default_language
          hide_ai_features: true
          wildcard_mentions_notify: true
          web_navigate_to_sent_message: true
          enable_marketing_emails: true
          available_notification_sounds:
          - available_notification_sounds
          - available_notification_sounds
          starred_message_counts: true
          web_stream_unreads_count_display_policy: 0
          send_stream_typing_notifications: true
          enable_desktop_notifications: true
          presence_enabled: true
          web_escape_navigates_to_home_view: true
          timezone: timezone
          enable_stream_email_notifications: true
          enable_offline_email_notifications: true
          notification_sound: notification_sound
          enable_offline_push_notifications: true
          web_channel_default_view: 1
          web_font_size_px: 14
          web_home_view: web_home_view
          pm_content_in_desktop_notifications: true
          enable_followed_topic_desktop_notifications: true
          automatically_unmute_topics_in_muted_streams_policy: 3
          emojiset_choices:
          - text: text
            key: key
          - text: text
            key: key
          web_line_height_percent: 122
          display_emoji_reaction_users: true
          enable_stream_desktop_notifications: true
          web_animate_image_previews: web_animate_image_previews
          desktop_icon_count_display: 5
          enable_online_push_notifications: true
          left_side_userlist: true
          realm_name_in_email_notifications_policy: 8
          translate_emoticons: true
          message_content_in_email_notifications: true
          email_notifications_batching_period_seconds: 5
          email_address_visibility: 3
          enable_followed_topic_push_notifications: true
          send_read_receipts: true
          web_mark_read_on_scroll_policy: 9
          automatically_follow_topics_policy: 7
          web_suggest_update_timezone: true
          enable_digest_emails: true
          demote_inactive_streams: 9
          automatically_follow_topics_where_mentioned: true
          allow_private_data_export: true
        realm_zulip_update_announcements_stream_id: 2
        password_min_length: 3
        realm_default_stream_groups:
        - streams:
          - 8
          - 8
          name: name
          description: description
          id: 4
        - streams:
          - 8
          - 8
          name: name
          description: description
          id: 4
        enable_stream_push_notifications: true
        realm_can_delete_own_message_group: ""
        never_subscribed:
        - is_web_public: ""
          stream_weekly_traffic: 7
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          partial_subscribers:
          - 3
          - 3
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
        - is_web_public: ""
          stream_weekly_traffic: 7
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          subscribers:
          - 5
          - 5
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          partial_subscribers:
          - 3
          - 3
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
        realm_presence_disabled: true
        realm_create_multiuse_invite_group: ""
        realm_name: realm_name
        can_create_public_streams: true
        available_notification_sounds:
        - available_notification_sounds
        - available_notification_sounds
        max_avatar_file_size_mib: 7
        saved_snippets:
        - date_created: 6
          id: 0
          title: title
          content: content
        - date_created: 6
          id: 0
          title: title
          content: content
        server_typing_stopped_wait_period_milliseconds: 4
        realm_invite_required: true
        server_presence_offline_threshold_seconds: 7
        realm_can_manage_billing_group: ""
        navigation_tour_video_url: navigation_tour_video_url
        giphy_rating_options:
          key:
            name: name
            id: 9
        server_max_deactivated_realm_deletion_days: 1
        enable_offline_push_notifications: true
        realm_users:
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        realm_default_external_accounts:
          key:
            url_pattern: url_pattern
            hint: hint
            name: name
            text: text
        can_create_web_public_streams: true
        realm_create_private_stream_policy: 0
        scheduled_messages:
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
        realm_default_code_block_language: realm_default_code_block_language
        realm_digest_weekday: 2
        can_create_private_streams: true
        realm_topics_policy: allow_empty_topic
        server_typing_started_wait_period_milliseconds: 5
        realm_move_messages_between_streams_limit_seconds: 9
        realm_enable_spectator_access: true
        server_needs_upgrade: true
        server_presence_ping_interval_seconds: 6
        message_content_in_email_notifications: true
        realm_billing:
          has_pending_sponsorship_request: true
        realm_move_messages_within_stream_limit_seconds: 6
        realm_disallow_disposable_email_addresses: true
        avatar_url_medium: avatar_url_medium
        realm_inline_image_preview: true
        max_message_length: 1
        realm_create_web_public_stream_policy: 0
        enable_digest_emails: true
        demote_inactive_streams: 8
        realm_welcome_message_custom_text: realm_welcome_message_custom_text
        realm_embedded_bots:
        - name: name
          config:
            key: config
        - name: name
          config:
            key: config
        realm_can_set_delete_message_policy_group: ""
        realm_video_chat_provider: 2
        emojiset: emojiset
        enable_drafts_synchronization: true
        can_invite_others_to_realm: true
        realm_night_logo_source: realm_night_logo_source
        development_environment: true
        color_scheme: 3
        navigation_views:
        - fragment: narrow/is/alerted
          name: Alert Words
          is_pinned: true
        - fragment: narrow/is/alerted
          name: Alert Words
          is_pinned: true
        realm_empty_topic_display_name: realm_empty_topic_display_name
        realm_enable_guest_user_dm_warning: true
        streams:
        - is_web_public: ""
          stream_weekly_traffic: 8
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
        - is_web_public: ""
          stream_weekly_traffic: 8
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
        realm_can_create_private_channel_group: ""
        wildcard_mentions_notify: true
        realm_org_type: 4
        max_logo_file_size_mib: 1
        onboarding_steps:
        - name: name
          type: type
        - name: name
          type: type
        realm_emoji:
          key:
            still_url: still_url
            name: name
            id: id
            author_id: 0
            source_url: source_url
            deactivated: true
        upgrade_text_for_wide_organization_logo: upgrade_text_for_wide_organization_logo
        user_id: 7
        server_generation: 5
        realm_can_move_messages_between_channels_group: ""
        server_web_public_streams_enabled: true
        realm_can_set_topics_policy_group: ""
        realm_require_unique_names: true
        realm_send_welcome_emails: true
        recent_private_conversations:
        - user_ids:
          - 0
          - 0
          max_message_id: 7
        - user_ids:
          - 0
          - 0
          max_message_id: 7
        realm_can_add_custom_emoji_group: ""
        realm_can_resolve_topics_group: ""
        max_channel_folder_name_length: 2
        enable_stream_desktop_notifications: true
        realm_jitsi_server_url: realm_jitsi_server_url
        settings_send_digest_emails: true
        custom_profile_field_types:
          key:
            name: name
            id: 1
        custom_profile_fields:
        - display_in_profile_summary: false
          field_data: field_data
          editable_by_user: true
          hint: hint
          name: name
          id: 0
          type: 6
          required: true
          order: 1
        - display_in_profile_summary: false
          field_data: field_data
          editable_by_user: true
          hint: hint
          name: name
          id: 0
          type: 6
          required: true
          order: 1
        muted_topics:
        - - get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner
          - get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner
        - - get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner
          - get_events_200_response_allOf_events_inner_oneOf_31_muted_topics_inner_inner
        realm_bot_domain: realm_bot_domain
        realm_want_advertise_in_communities_directory: true
        left_side_userlist: true
        channel_folders:
        - rendered_description: rendered_description
          is_archived: true
          date_created: 4
          name: name
          creator_id: 0
          description: description
          id: 4
          order: 6
        - rendered_description: rendered_description
          is_archived: true
          date_created: 4
          name: name
          creator_id: 0
          description: description
          id: 4
          order: 6
        realm_allow_message_editing: true
        realm_upload_quota_mib: 1
        realm_incoming_webhook_bots:
        - all_event_types:
          - all_event_types
          - all_event_types
          url_options:
          - validator: validator
            label: label
            key: key
          - validator: validator
            label: label
            key: key
          config_options:
          - validator: validator
            label: label
            key: key
          - validator: validator
            label: label
            key: key
          name: name
          display_name: display_name
        - all_event_types:
          - all_event_types
          - all_event_types
          url_options:
          - validator: validator
            label: label
            key: key
          - validator: validator
            label: label
            key: key
          config_options:
          - validator: validator
            label: label
            key: key
          - validator: validator
            label: label
            key: key
          name: name
          display_name: display_name
        translate_emoticons: true
        email_notifications_batching_period_seconds: 0
        delivery_email: delivery_email
        realm_message_content_allowed_in_email_notifications: true
        server_can_summarize_topics: true
        realm_can_invite_users_group: ""
        server_thumbnail_formats:
        - max_width: 7
          name: name
          format: format
          animated: true
          max_height: 9
        - max_width: 7
          name: name
          format: format
          animated: true
          max_height: 9
        msg: ""
        reminders:
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
        - scheduled_message_id: ""
          rendered_content: ""
          scheduled_delivery_timestamp: ""
          topic: ""
          to: ""
          failed: ""
          type: ""
          content: ""
        realm_authentication_methods:
          key:
            available: true
            unavailable_reason: unavailable_reason
            enabled: true
        realm_wildcard_mention_policy: 7
        is_admin: true
        max_bulk_new_subscription_messages: 100
        enable_stream_audible_notifications: true
        can_create_streams: true
        realm_signup_announcements_stream_id: 8
        twenty_four_hour_time: true
        realm_filters:
        - - 6
          - 6
        - - 6
          - 6
        realm_description: realm_description
        realm_emails_restricted_to_domains: true
        queue_id: queue_id
        zulip_version: zulip_version
        server_timestamp: 8.762042012749001
        realm_moderation_request_channel_id: 4
        realm_can_access_all_users_group: ""
        realm_enable_guest_user_indicator: true
        realm_mandatory_topics: true
        realm_create_public_stream_policy: 4
        realm_bots:
        - default_all_public_streams: ""
          full_name: ""
          is_active: true
          avatar_url: ""
          user_id: ""
          api_key: ""
          owner_id: ""
          bot_type: 3
          default_events_register_stream: ""
          services: ""
          default_sending_stream: ""
          email: email
        - default_all_public_streams: ""
          full_name: ""
          is_active: true
          avatar_url: ""
          user_id: ""
          api_key: ""
          owner_id: ""
          bot_type: 3
          default_events_register_stream: ""
          services: ""
          default_sending_stream: ""
          email: email
        realm_icon_url: realm_icon_url
        jitsi_server_url: jitsi_server_url
        realm_push_notifications_enabled_end_timestamp: 5
        max_topic_length: 7
        realm_can_delete_any_message_group: ""
        realm_uri: realm_uri
        starred_messages:
        - 5
        - 5
        realm_message_content_delete_limit_seconds: 6
        realm_url: realm_url
        realm_default_language: realm_default_language
        password_min_guesses: 3
        presence_enabled: true
        realm_can_manage_all_groups: ""
        realm_message_edit_history_visibility_policy: realm_message_edit_history_visibility_policy
        max_stream_name_length: 9
        realm_can_mention_many_users_group: ""
        timezone: timezone
        enable_stream_email_notifications: true
        realm_message_retention_days: 4
        enable_offline_email_notifications: true
        notification_sound: notification_sound
        realm_email_changes_disabled: true
        realm_icon_source: realm_icon_source
        realm_can_summarize_topics_group: ""
        presences:
          key:
            idle_timestamp: 5
            active_timestamp: 1
        web_home_view: web_home_view
        zulip_plan_is_not_limited: true
        realm_new_stream_announcements_stream_id: 3
        realm_digest_emails_enabled: true
        user_status:
          key:
            away: true
            reaction_type: unicode_emoji
            emoji_name: emoji_name
            status_text: status_text
            emoji_code: emoji_code
        desktop_icon_count_display: 3
        realm_direct_message_initiator_group: ""
        realm_push_notifications_enabled: true
        realm_name_in_email_notifications_policy: 2
        realm_can_move_messages_between_topics_group: ""
        drafts:
        - topic: topic
          id: 0
          to:
          - 6
          - 6
          type: ""
          content: content
          timestamp: 1595479019
        - topic: topic
          id: 0
          to:
          - 6
          - 6
          type: ""
          content: content
          timestamp: 1595479019
        password_max_length: 1
        server_emoji_data_url: server_emoji_data_url
        max_stream_description_length: 3
        zulip_feature_level: 6
        realm_inline_url_embed_preview: true
        server_inline_image_preview: true
        last_event_id: 0
        cross_realm_bots:
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          is_system_bot: true
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        - is_active: ""
          role: ""
          avatar_version: ""
          is_guest: ""
          is_owner: ""
          timezone: ""
          bot_owner_id: ""
          profile_data: ""
          is_admin: ""
          full_name: ""
          is_system_bot: true
          avatar_url: ""
          user_id: ""
          delivery_email: ""
          bot_type: ""
          date_joined: ""
          is_bot: ""
          email: ""
        realm_can_create_bots_group: ""
    get_server_settings_200_response_allOf_authentication_methods:
      additionalProperties: false
      deprecated: true
      description: |
        Each key-value pair in the object indicates whether the authentication
        method is enabled on this server.

        **Changes**: Deprecated in Zulip 2.1.0, in favor of the more expressive
        `external_authentication_methods`.
      example:
        remoteuser: true
        apple: true
        password: true
        github: true
        openid connect: true
        azuread: true
        dev: true
        ldap: true
        saml: true
        gitlab: true
        google: true
        email: true
      properties:
        password:
          description: |
            Whether the user can authenticate using password.
          type: boolean
        dev:
          description: |
            Whether the user can authenticate using development API key.
          type: boolean
        email:
          description: |
            Whether the user can authenticate using email.
          type: boolean
        ldap:
          description: |
            Whether the user can authenticate using LDAP.
          type: boolean
        remoteuser:
          description: |
            Whether the user can authenticate using REMOTE_USER.
          type: boolean
        github:
          description: |
            Whether the user can authenticate using their GitHub account.
          type: boolean
        azuread:
          description: |
            Whether the user can authenticate using their Microsoft Entra ID account.
          type: boolean
        gitlab:
          description: |
            Whether the user can authenticate using their GitLab account.

            **Changes**: New in Zulip 3.0 (feature level 1).
          type: boolean
        apple:
          description: |
            Whether the user can authenticate using their Apple account.
          type: boolean
        google:
          description: |
            Whether the user can authenticate using their Google account.
          type: boolean
        saml:
          description: |
            Whether the user can authenticate using SAML.
          type: boolean
        openid connect:
          description: |
            Whether the user can authenticate using OpenID Connect.
          type: boolean
      type: object
    get_server_settings_200_response_allOf_external_authentication_methods_inner:
      additionalProperties: false
      example:
        login_url: login_url
        display_icon: display_icon
        name: name
        display_name: display_name
        signup_url: signup_url
      properties:
        name:
          description: |
            A unique, table, machine-readable name for the authentication method,
            intended to be used by clients with special behavior for specific
            authentication methods to correctly identify the method.
          type: string
        display_name:
          description: |
            Display name of the authentication method, to be used in all buttons
            for the authentication method.
          type: string
        display_icon:
          description: |
            URL for an image to be displayed as an icon in all buttons for
            the external authentication method.

            When `null`, no icon should be displayed.
          nullable: true
          type: string
        login_url:
          description: |
            URL to be used to initiate authentication using this method.
          type: string
        signup_url:
          description: |
            URL to be used to initiate account registration using this method.
          type: string
      type: object
    get_server_settings_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          authentication_methods:
            password: true
            dev: true
            email: true
            ldap: false
            remoteuser: false
            github: true
            azuread: false
            google: true
            saml: true
          zulip_version: 5.0-dev-1650-gc3fd37755f
          zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
          push_notifications_enabled: false
          msg: ""
          is_incompatible: false
          email_auth_enabled: true
          require_email_format_usernames: true
          realm_uri: http://localhost:9991
          realm_url: http://localhost:9991
          realm_name: Zulip Dev
          realm_icon: https://secure.gravatar.com/avatar/62429d594b6ffc712f54aee976a18b44?d=identicon
          realm_description: <p>The Zulip development environment default organization.  It's
            great for testing!</p>
          realm_web_public_access_enabled: false
          result: success
          external_authentication_methods:
          - name: saml:idp_name
            display_name: SAML
            display_icon: null
            login_url: /accounts/login/social/saml/idp_name
            signup_url: /accounts/register/social/saml/idp_name
          - name: google
            display_name: Google
            display_icon: /static/images/authentication_backends/googl_e-icon.png
            login_url: /accounts/login/social/google
            signup_url: /accounts/register/social/google
          - name: github
            display_name: GitHub
            display_icon: /static/images/authentication_backends/github-icon.png
            login_url: /accounts/login/social/github
            signup_url: /accounts/register/social/github
        properties:
          authentication_methods:
            $ref: "#/components/schemas/get_server_settings_200_response_allOf_authentication_methods"
          external_authentication_methods:
            description: |
              A list of dictionaries describing the available external
              authentication methods (E.g. Google, GitHub, or SAML)
              enabled for this organization.

              The list is sorted in the order in which these
              authentication methods should be displayed.

              **Changes**: New in Zulip 2.1.0.
            items:
              $ref: "#/components/schemas/get_server_settings_200_response_allOf_external_authentication_methods_inner"
            type: array
          zulip_feature_level:
            description: |
              An integer indicating what features are
              available on the server. The feature level increases monotonically;
              a value of N means the server supports all API features introduced
              before feature level N. This is designed to provide a simple way
              for client apps to decide whether the server supports a given
              feature or API change. See the [changelog](/api/changelog) for
              details on what each feature level means.

              **Changes**: New in Zulip 3.0 (feature level 1). We recommend using an
              implied value of 0 for Zulip servers that do not send this field.
            type: integer
          zulip_version:
            description: |
              The server's version number. This is often a release version number,
              like `2.1.7`. But for a server running a [version from Git][git-release],
              it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.

              [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
            type: string
          zulip_merge_base:
            description: |
              The `git merge-base` between `zulip_version` and official branches
              in the public
              [Zulip server and web app repository](https://github.com/zulip/zulip),
              in the same format as `zulip_version`. This will equal
              `zulip_version` if the server is not running a fork of the Zulip server.

              This will be `""` if unavailable.

              **Changes**: New in Zulip 5.0 (feature level 88).
            type: string
          push_notifications_enabled:
            description: |
              Whether mobile/push notifications are configured.
            type: boolean
          is_incompatible:
            description: |
              Whether the Zulip client that has sent a request to this endpoint is
              deemed incompatible with the server.
            type: boolean
          email_auth_enabled:
            description: |
              Setting for allowing users authenticate with an email-password
              combination.
            type: boolean
          require_email_format_usernames:
            description: |
              Whether all valid usernames for authentication to this
              organization will be email addresses. This is important
              for clients to know whether to do client side validation
              of email address format in a login prompt.

              This value will be false if the server has [LDAP
              authentication][ldap-auth] enabled with a username and
              password combination.

              [ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory
            type: boolean
          realm_uri:
            deprecated: true
            description: |
              The organization's canonical URL. Alias of `realm_url`.

              **Changes**: Deprecated in Zulip 9.0 (feature level 257). The term
              "URI" is deprecated in [web standards](https://url.spec.whatwg.org/#goals).
            type: string
          realm_url:
            description: |
              The organization's canonical URL.

              **Changes**: New in Zulip 9.0 (feature level 257), replacing the
              deprecated `realm_uri`.
            type: string
          realm_name:
            description: |
              The organization's name (for display purposes).
            type: string
          realm_icon:
            description: |
              The URL for the organization's logo formatted as a square image,
              used for identifying the organization in small locations in the
              mobile and desktop apps.
            type: string
          realm_description:
            description: |
              HTML description of the organization, as configured by the [organization
              profile](/help/create-your-organization-profile).
            type: string
          realm_web_public_access_enabled:
            description: |
              Whether the organization has enabled the creation of
              [web-public channels](/help/public-access-option) and
              at least one web-public channel on the server currently
              exists. Clients that support viewing content
              in web-public channels without an account can
              use this to determine whether to offer that
              feature on the login page for an organization.

              **Changes**: New in Zulip 5.0 (feature level 116).
            type: boolean
        type: object
      example:
        msg: ""
        zulip_version: zulip_version
        zulip_merge_base: zulip_merge_base
        push_notifications_enabled: true
        is_incompatible: true
        require_email_format_usernames: true
        realm_name: realm_name
        result: ""
        ignored_parameters_unsupported: ""
        email_auth_enabled: true
        authentication_methods:
          remoteuser: true
          apple: true
          password: true
          github: true
          openid connect: true
          azuread: true
          dev: true
          ldap: true
          saml: true
          gitlab: true
          google: true
          email: true
        external_authentication_methods:
        - login_url: login_url
          display_icon: display_icon
          name: name
          display_name: display_name
          signup_url: signup_url
        - login_url: login_url
          display_icon: display_icon
          name: name
          display_name: display_name
          signup_url: signup_url
        zulip_feature_level: 0
        realm_uri: realm_uri
        realm_icon: realm_icon
        realm_web_public_access_enabled: true
        realm_url: realm_url
        realm_description: realm_description
    update_settings_request:
      properties:
        full_name:
          description: |
            A new display name for the user.
          example: NewName
          type: string
        email:
          description: |
            Asks the server to initiate a confirmation sequence to change the user's email
            address to the indicated value. The user will need to demonstrate control of the
            new email address by clicking a confirmation link sent to that address.
          example: newname@example.com
          type: string
        old_password:
          description: |
            The user's old Zulip password (or LDAP password, if LDAP authentication is in use).

            Required only when sending the `new_password` parameter.
          example: old12345
          type: string
        new_password:
          description: |
            The user's new Zulip password (or LDAP password, if LDAP authentication is in use).

            The `old_password` parameter must be included in the request.
          example: new12345
          type: string
        twenty_four_hour_time:
          description: |
            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        web_mark_read_on_scroll_policy:
          description: |
            Whether or not to mark messages as read when the user scrolls through their
            feed.

            - 1 - Always
            - 2 - Only in conversation views
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 175). Previously, there was no
            way for the user to configure this behavior on the web, and the Zulip web and
            desktop apps behaved like the "Always" setting when marking messages as read.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        web_channel_default_view:
          description: |
            Web/desktop app setting controlling the default navigation
            behavior when clicking on a channel link.

            - 1 - Top topic in the channel
            - 2 - Channel feed
            - 3 - List of topics
            - 4 - Top unread topic in channel

            **Changes**: The "Top unread topic in channel" is new in Zulip 11.0
            (feature level 401).

            The "List of topics" option is new in Zulip 11.0 (feature level 383).

            New in Zulip 9.0 (feature level 269). Previously, this
            was not configurable, and every user had the "Channel feed" behavior.
          enum:
          - 1
          - 2
          - 4
          example: 1
          type: integer
        starred_message_counts:
          description: |
            Whether clients should display the [number of starred
            messages](/help/star-a-message#display-the-number-of-starred-messages).

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        receives_typing_notifications:
          description: |
            Whether the user is configured to receive typing notifications from other users.
            The server will only deliver typing notifications events to users who for whom this
            is enabled.

            By default, this is set to true, enabling user to receive typing
            notifications from other users.

            **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were only
            options to disable sending typing notifications.
          example: true
          type: boolean
        web_suggest_update_timezone:
          description: |
            Whether the user should be shown an alert, offering to update their
            [profile time zone](/help/change-your-timezone), when the time displayed
            for the profile time zone differs from the current time displayed by the
            time zone configured on their device.

            **Changes**: New in Zulip 10.0 (feature level 329).
          example: true
          type: boolean
        fluid_layout_width:
          description: |
            Whether to use the [maximum available screen width](/help/enable-full-width-display)
            for the web app's center panel (message feed, recent conversations) on wide screens.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        high_contrast_mode:
          description: |
            This setting is reserved for use to control variations in Zulip's design
            to help visually impaired users.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        web_font_size_px:
          description: |
            User-configured primary `font-size` for the web application, in pixels.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, font size was
            only adjustable via browser zoom. Note that this setting was not fully
            implemented at this feature level.
          example: 14
          type: integer
        web_line_height_percent:
          description: |
            User-configured primary `line-height` for the web application, in percent, so a
            value of 120 represents a `line-height` of 1.2.

            **Changes**: New in Zulip 9.0 (feature level 245). Previously, line height was
            not user-configurable. Note that this setting was not fully implemented at this
            feature level.
          example: 122
          type: integer
        color_scheme:
          description: |
            Controls which [color theme](/help/dark-theme) to use.

            - 1 - Automatic
            - 2 - Dark theme
            - 3 - Light theme

            Automatic detection is implementing using the standard `prefers-color-scheme`
            media query.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        enable_drafts_synchronization:
          description: |
            A boolean parameter to control whether synchronizing drafts is enabled for
            the user. When synchronization is disabled, all drafts stored in the server
            will be automatically deleted from the server.

            This does not do anything (like sending events) to delete local copies of
            drafts stored in clients.

            **Changes**: New in Zulip 5.0 (feature level 87).
          example: true
          type: boolean
        translate_emoticons:
          description: |
            Whether to [translate emoticons to emoji](/help/configure-emoticon-translations)
            in messages the user sends.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        display_emoji_reaction_users:
          description: |
            Whether to display the names of reacting users on a message.

            When enabled, clients should display the names of reacting users, rather than
            a count, for messages with few total reactions. The ideal cutoff may depend on
            the space available for displaying reactions; the official web application
            displays names when 3 or fewer total reactions are present with this setting
            enabled.

            **Changes**: New in Zulip 6.0 (feature level 125).
          example: false
          type: boolean
        default_language:
          description: |
            What [default language](/help/change-your-language) to use for the account.

            This controls both the Zulip UI as well as email notifications sent to the user.

            The value needs to be a standard language code that the Zulip server has
            translation data for; for example, `"en"` for English or `"de"` for German.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.

            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).
          example: en
          type: string
        web_home_view:
          description: |
            The [home view](/help/configure-home-view) used when opening a new
            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

            - "recent_topics" - Recent conversations view
            - "inbox" - Inbox view
            - "all_messages" - Combined feed view

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was
            called `default_view`, which was new in Zulip 4.0 (feature level 42).

            Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.

            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
          example: all_messages
          type: string
        web_escape_navigates_to_home_view:
          description: |
            Whether the escape key navigates to the
            [configured home view](/help/configure-home-view).

            **Changes**: New in Zulip 8.0 (feature level 219). Previously, this
            was called `escape_navigates_to_default_view`, which was new in Zulip
            5.0 (feature level 107).
          example: true
          type: boolean
        left_side_userlist:
          description: |
            Whether the users list on left sidebar in narrow windows.

            This feature is not heavily used and is likely to be reworked.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          example: true
          type: boolean
        emojiset:
          description: |
            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
            used to display emoji to the user everywhere they appear in the UI.

            - "google" - Google modern
            - "google-blob" - Google classic
            - "twitter" - Twitter
            - "text" - Plain text

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.

            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
          example: google
          type: string
        demote_inactive_streams:
          description: |
            Whether to [hide inactive channels](/help/manage-inactive-channels) in the left sidebar.

            - 1 - Automatic
            - 2 - Always
            - 3 - Never

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        user_list_style:
          description: |
            The style selected by the user for the right sidebar user list.

            - 1 - Compact
            - 2 - With status
            - 3 - With avatar and status

            **Changes**: New in Zulip 6.0 (feature level 141).
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        web_animate_image_previews:
          description: |
            Controls how animated images should be played in the message feed in the web/desktop application.

            - "always" - Always play the animated images in the message feed.
            - "on_hover" - Play the animated images on hover over them in the message feed.
            - "never" - Never play animated images in the message feed.

            **Changes**: New in Zulip 9.0 (feature level 275).
          enum:
          - always
          - on_hover
          - never
          example: on_hover
          type: string
        web_stream_unreads_count_display_policy:
          description: |
            Configuration for which channels should be displayed with a numeric unread count in the left sidebar.
            Channels that do not have an unread count will have a simple dot indicator for whether there are any
            unread messages.

            - 1 - All channels
            - 2 - Unmuted channels and topics
            - 3 - No channels

            **Changes**: New in Zulip 8.0 (feature level 210).
          enum:
          - 1
          - 2
          - 3
          example: 2
          type: integer
        hide_ai_features:
          description: |
            Controls whether user wants AI features like topic summarization to
            be hidden in all Zulip clients.

            **Changes**: New in Zulip 10.0 (feature level 350).
          type: boolean
        web_left_sidebar_show_channel_folders:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            any channel folders configured by the organization.

            **Changes**: New in Zulip 11.0 (feature level 411).
          example: true
          type: boolean
        web_left_sidebar_unreads_count_summary:
          description: |
            Determines whether the web/desktop application's left sidebar displays
            the unread message count summary.

            **Changes**: New in Zulip 11.0 (feature level 398).
          example: true
          type: boolean
        timezone:
          description: |
            The IANA identifier of the user's [profile time zone](/help/change-your-timezone),
            which is used primarily to display the user's local time to other users.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/display` endpoint.

            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
          example: Asia/Kolkata
          type: string
        enable_stream_desktop_notifications:
          description: |
            Enable visual desktop notifications for channel messages.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_stream_email_notifications:
          description: |
            Enable email notifications for channel messages.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_stream_push_notifications:
          description: |
            Enable mobile notifications for channel messages.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_stream_audible_notifications:
          description: |
            Enable audible desktop notifications for channel messages.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        notification_sound:
          description: |
            Notification sound name.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.

            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).
          example: ding
          type: string
        enable_desktop_notifications:
          description: |
            Enable visual desktop notifications for direct messages and @-mentions.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_sounds:
          description: |
            Enable audible desktop notifications for direct messages and
            @-mentions.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        email_notifications_batching_period_seconds:
          description: |
            The duration (in seconds) for which the server should wait to batch
            email notifications before sending them.

            **Changes**: New in Zulip 5.0 (feature level 82)
          example: 120
          type: integer
        enable_offline_email_notifications:
          description: |
            Enable email notifications for direct messages and @-mentions received
            when the user is offline.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_offline_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is offline.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_online_push_notifications:
          description: |
            Enable mobile notification for direct messages and @-mentions received
            when the user is online.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_followed_topic_desktop_notifications:
          description: |
            Enable visual desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        enable_followed_topic_email_notifications:
          description: |
            Enable email notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        enable_followed_topic_push_notifications:
          description: |
            Enable push notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: false
          type: boolean
        enable_followed_topic_audible_notifications:
          description: |
            Enable audible desktop notifications for messages sent to followed topics.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: false
          type: boolean
        enable_digest_emails:
          description: |
            Enable digest emails when the user is away.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_marketing_emails:
          description: |
            Enable marketing emails. Has no function outside Zulip Cloud.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_login_emails:
          description: |
            Enable email notifications for new logins to account.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        message_content_in_email_notifications:
          description: |
            Include the message's content in email notifications for new messages.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        pm_content_in_desktop_notifications:
          description: |
            Include content of direct messages in desktop notifications.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (E.g. @**all**) should send notifications
            like a personal mention.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enable_followed_topic_wildcard_mentions_notify:
          description: |
            Whether wildcard mentions (e.g., @**all**) in messages sent to followed topics
            should send notifications like a personal mention.

            **Changes**: New in Zulip 8.0 (feature level 189).
          example: true
          type: boolean
        desktop_icon_count_display:
          description: |
            Unread count badge (appears in desktop sidebar and browser tab)

            - 1 - All unread messages
            - 2 - DMs, mentions, and followed topics
            - 3 - DMs and mentions
            - 4 - None

            **Changes**: In Zulip 8.0 (feature level 227), added `DMs, mentions, and followed
            topics` option, renumbering the options to insert it in order.

            Before Zulip 5.0 (feature level 80), this setting was managed by the
            `PATCH /settings/notifications` endpoint.
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        realm_name_in_email_notifications_policy:
          description: |
            Whether to [include organization name in subject of message notification
            emails](/help/email-notifications#include-organization-name-in-subject-line).

            - 1 - Automatic
            - 2 - Always
            - 3 - Never

            **Changes**: New in Zulip 7.0 (feature level 168), replacing the
            previous `realm_name_in_notifications` boolean;
            `true` corresponded to `Always`, and `false` to `Never`.

            Before Zulip 5.0 (feature level 80), the previous `realm_name_in_notifications`
            setting was managed by the `PATCH /settings/notifications` endpoint.
          enum:
          - 1
          - 2
          - 3
          example: 1
          type: integer
        automatically_follow_topics_policy:
          description: |
            Which [topics to follow automatically](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        automatically_unmute_topics_in_muted_streams_policy:
          description: |
            Which [topics to unmute automatically in muted channels](/help/mute-a-topic).

            - 1 - Topics the user participates in
            - 2 - Topics the user sends a message to
            - 3 - Topics the user starts
            - 4 - Never

            **Changes**: New in Zulip 8.0 (feature level 214).
          enum:
          - 1
          - 2
          - 3
          - 4
          example: 1
          type: integer
        automatically_follow_topics_where_mentioned:
          description: |
            Whether the server will automatically mark the user as following
            topics where the user is mentioned.

            **Changes**: New in Zulip 8.0 (feature level 235).
          example: true
          type: boolean
        resolved_topic_notice_auto_read_policy:
          description: |
            Controls whether the resolved-topic notices are marked as read.

            - "always" - Always mark resolved-topic notices as read.
            - "except_followed" - Mark resolved-topic notices as read in topics not followed by the user.
            - "never" - Never mark resolved-topic notices as read.

            **Changes**: New in Zulip 11.0 (feature level 385).
          enum:
          - always
          - except_followed
          - never
          example: except_followed
          type: string
        presence_enabled:
          description: |
            Display the presence status to other users when online.

            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
            the `PATCH /settings/notifications` endpoint.
          example: true
          type: boolean
        enter_sends:
          description: |
            Whether pressing Enter in the compose box sends a message
            (or saves a message edit).

            **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by
            the `POST /users/me/enter-sends` endpoint, with the same parameter format.
          example: true
          type: boolean
        send_private_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            direct messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        send_stream_typing_notifications:
          description: |
            Whether [typing notifications](/help/typing-notifications) be sent when composing
            channel messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        send_read_receipts:
          description: |
            Whether other users are allowed to see whether you've
            read messages.

            **Changes**: New in Zulip 5.0 (feature level 105).
          example: true
          type: boolean
        allow_private_data_export:
          description: |
            Whether organization administrators are allowed to
            export your private data.

            **Changes**: New in Zulip 10.0 (feature level 293).
          example: true
          type: boolean
        email_address_visibility:
          description: |
            The [policy][permission-level] this user has selected for [which other
            users][help-email-visibility] in this organization can see their real
            email address.

            - 1 = Everyone
            - 2 = Members only
            - 3 = Administrators only
            - 4 = Nobody
            - 5 = Moderators only

            **Changes**: New in Zulip 7.0 (feature level 163), replacing the
            realm-level setting.

            [permission-level]: /api/roles-and-permissions#permission-levels
            [help-email-visibility]: /help/configure-email-visibility
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          example: 1
          type: integer
        web_navigate_to_sent_message:
          description: |
            Web/desktop app setting for whether the user's view should
            automatically go to the conversation where they sent a message.

            **Changes**: New in Zulip 9.0 (feature level 268). Previously,
            this behavior was not configurable.
          example: true
          type: boolean
      type: object
    get_subscribers_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          subscribers:
          - 11
          - 26
        properties:
          subscribers:
            description: |
              A list containing the IDs of all active users who are subscribed
              to the channel.
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        subscribers:
        - 0
        - 0
    get_streams_200_response_allOf_streams_inner:
      allOf:
      - $ref: "#/components/schemas/BasicChannelBase"
      - additionalProperties: false
        properties:
          creator_id:
            nullable: true
          message_retention_days:
            nullable: true
          first_message_id:
            nullable: true
          folder_id:
            nullable: true
          stream_weekly_traffic:
            description: |
              The average number of messages sent to the channel per week, as
              estimated based on recent weeks, rounded to the nearest integer.

              If `null`, no information is provided on the average traffic.
              This can be because the channel was recently created and there
              is insufficient data to make an estimate, or because the server
              wishes to omit this information for this client, this realm, or
              this endpoint or type of event.

              **Changes**: New in Zulip 8.0 (feature level 199). Previously,
              this statistic was available only in subscription objects.
            nullable: true
            type: integer
          is_default:
            description: |
              Only present when [`include_default`][include_default]
              parameter is `true`.

              Whether the given channel is a
              [default channel](/help/set-default-channels-for-new-users).

              [include_default]: /api/get-streams#parameter-include_default
            type: boolean
        required:
        - can_remove_subscribers_group
        - can_subscribe_group
        - creator_id
        - date_created
        - description
        - first_message_id
        - folder_id
        - history_public_to_subscribers
        - invite_only
        - is_announcement_only
        - is_archived
        - is_recently_active
        - is_web_public
        - message_retention_days
        - name
        - rendered_description
        - stream_id
        - stream_post_policy
        - stream_weekly_traffic
        - subscriber_count
        type: object
      example:
        is_web_public: ""
        stream_weekly_traffic: 3
        description: ""
        can_remove_subscribers_group: ""
        first_message_id: ""
        can_delete_any_message_group: ""
        rendered_description: ""
        stream_id: ""
        can_resolve_topics_group: ""
        is_recently_active: ""
        stream_post_policy: ""
        topics_policy: ""
        date_created: ""
        can_move_messages_within_channel_group: ""
        history_public_to_subscribers: ""
        can_move_messages_out_of_channel_group: ""
        is_default: true
        can_delete_own_message_group: ""
        can_subscribe_group: ""
        can_add_subscribers_group: ""
        is_archived: ""
        subscriber_count: ""
        name: ""
        creator_id: ""
        is_announcement_only: ""
        message_retention_days: ""
        folder_id: ""
        can_administer_channel_group: ""
        can_send_message_group: ""
        invite_only: ""
    get_streams_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          streams:
          - can_add_subscribers_group: 10
            can_remove_subscribers_group: 10
            can_subscribe_group: 10
            creator_id: null
            date_created: 1691057093
            description: A private channel
            first_message_id: 18
            folder_id: 1
            is_recently_active: true
            history_public_to_subscribers: false
            invite_only: true
            is_announcement_only: false
            is_archived: false
            is_default: false
            is_web_public: false
            message_retention_days: null
            name: management
            rendered_description: <p>A private channel</p>
            stream_id: 2
            stream_post_policy: 1
            stream_weekly_traffic: null
            subscriber_count: 20
          - can_add_subscribers_group: 9
            can_remove_subscribers_group: 9
            can_subscribe_group: 10
            creator_id: 12
            date_created: 1691057093
            description: A default public channel
            first_message_id: 21
            folder_id: null
            is_recently_active: true
            history_public_to_subscribers: true
            invite_only: false
            is_announcement_only: false
            is_archived: false
            is_default: true
            is_web_public: false
            message_retention_days: null
            name: welcome
            rendered_description: <p>A default public channel</p>
            stream_id: 1
            stream_post_policy: 1
            stream_weekly_traffic: null
            subscriber_count: 10
        properties:
          streams:
            description: |
              A list of channel objects with details on the requested channels.
            items:
              $ref: "#/components/schemas/get_streams_200_response_allOf_streams_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        streams:
        - is_web_public: ""
          stream_weekly_traffic: 3
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          is_default: true
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
        - is_web_public: ""
          stream_weekly_traffic: 3
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          is_default: true
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
    get_stream_by_id_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          stream:
            description: A Scandinavian country
            first_message_id: 1
            folder_id: 1
            is_recently_active: true
            history_public_to_subscribers: true
            date_created: 1691057093
            creator_id: null
            invite_only: false
            is_announcement_only: false
            is_archived: false
            is_web_public: false
            message_retention_days: null
            name: Denmark
            rendered_description: <p>A Scandinavian country</p>
            stream_id: 7
            stream_post_policy: 1
            can_add_subscribers_group: 2
            can_remove_subscribers_group: 2
            can_subscribe_group: 2
            stream_weekly_traffic: null
            subscriber_count: 12
        properties:
          stream:
            $ref: "#/components/schemas/BasicChannel"
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        stream:
          is_web_public: ""
          stream_weekly_traffic: 8
          description: ""
          can_remove_subscribers_group: ""
          first_message_id: ""
          can_delete_any_message_group: ""
          rendered_description: ""
          stream_id: ""
          can_resolve_topics_group: ""
          is_recently_active: ""
          stream_post_policy: ""
          topics_policy: ""
          date_created: ""
          can_move_messages_within_channel_group: ""
          history_public_to_subscribers: ""
          can_move_messages_out_of_channel_group: ""
          can_delete_own_message_group: ""
          can_subscribe_group: ""
          can_add_subscribers_group: ""
          is_archived: ""
          subscriber_count: ""
          name: ""
          creator_id: ""
          is_announcement_only: ""
          message_retention_days: ""
          folder_id: ""
          can_administer_channel_group: ""
          can_send_message_group: ""
          invite_only: ""
    update_stream_request:
      properties:
        description:
          description: |
            The new [description](/help/change-the-channel-description) for
            the channel, in [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format.

            Clients should use the `max_stream_description_length` returned
            by the [`POST /register`](/api/register-queue) endpoint to
            determine the maximum channel description length.

            **Changes**: Removed unnecessary JSON-encoding of this parameter in
            Zulip 4.0 (feature level 64).
          example: Discuss Italian history and travel destinations.
          type: string
        new_name:
          description: |
            The new name for the channel.

            Clients should use the `max_stream_name_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum channel name length.

            **Changes**: Removed unnecessary JSON-encoding of this parameter in
            Zulip 4.0 (feature level 64).
          example: Italy
          type: string
        is_private:
          description: |
            Change whether the channel is a private channel.
          example: true
          type: boolean
        is_web_public:
          description: |
            Change whether the channel is a web-public channel.

            Note that creating web-public channels requires the
            `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings]
            to be enabled on the Zulip server in question, the organization
            to have enabled the `enable_spectator_access` realm setting, and
            the current use to have permission under the organization's
            `can_create_web_public_channel_group` realm setting.

            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html

            **Changes**: New in Zulip 5.0 (feature level 98).
          example: true
          type: boolean
        history_public_to_subscribers:
          description: |
            Whether the channel's message history should be available to
            newly subscribed members, or users can only access messages
            they actually received while subscribed to the channel.

            Corresponds to the shared history option for
            [private channels](/help/channel-permissions#private-channels).

            It's an error for this parameter to be false for a public or
            web-public channel and when is_private is false.

            **Changes**: Before Zulip 6.0 (feature level 136), `history_public_to_subscribers`
            was silently ignored unless the request also contained either `is_private` or
            `is_web_public`.
          example: false
          type: boolean
        is_default_stream:
          description: |
            Add or remove the channel as a [default channel][default-channel]
            for new users joining the organization.

            [default-channel]: /help/set-default-channels-for-new-users

            **Changes**: New in Zulip 8.0 (feature level 200). Previously, default channel status
            could only be changed using the [dedicated API endpoint](/api/add-default-stream).
          example: false
          type: boolean
        message_retention_days:
          $ref: "#/components/schemas/MessageRetentionDays"
        is_archived:
          description: |
            A boolean indicating whether the channel is
            [archived](/help/archive-a-channel) or
            unarchived. Currently only allows unarchiving
            previously archived channels.

            **Changes**: New in Zulip 11.0 (feature level 388).
          example: true
          type: boolean
        folder_id:
          description: |
            ID of the new folder to which the channel should belong.

            It can be `None` if the user wants to just remove the channel
            from its existing folder.

            **Changes**: New in Zulip 11.0 (feature level 389).
          example: 1
          nullable: true
          type: integer
        topics_policy:
          $ref: "#/components/schemas/TopicsPolicy"
        can_add_subscribers_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to add subscribers to this
            channel expressed as an [update to a group-setting
            value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Users who can administer the channel or have similar realm-level
            permissions can add subscribers to a public channel regardless
            of the value of this setting.

            Users in this group need not be subscribed to a private channel to
            add subscribers to it.

            Note that a user must [have content access](/help/channel-permissions)
            to a channel and permission to administer the channel in order to
            modify this setting.

            **Changes**: New in Zulip 10.0 (feature level 342). Previously, there was no
            channel-level setting for this permission.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_remove_subscribers_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to unsubscribe others from this
            channel expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Organization administrators can unsubscribe others from a channel as though
            they were in this group without being explicitly listed here.

            Note that a user must have metadata access to a channel and permission
            to administer the channel in order to modify this setting.

            **Changes**: Prior to Zulip 10.0 (feature level 349), channel administrators
            could not unsubscribe other users if they were not an organization
            administrator or part of `can_remove_subscribers_group`. Realm administrators
            were not allowed to unsubscribe other users from a private channel if they
            were not subscribed to that channel.

            Prior to Zulip 10.0 (feature level 320), this value was always the integer
            ID of a system group.

            Before Zulip 8.0 (feature level 197), the `can_remove_subscribers_group`
            setting was named `can_remove_subscribers_group_id`.

            New in Zulip 7.0 (feature level 161).
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_administer_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to administer this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Organization administrators can administer every channel as though they were
            in this group without being explicitly listed here.

            Note that a user must [have content access](/help/channel-permissions) to a
            channel in order to add other subscribers to the channel.

            **Changes**: Prior to Zulip 10.0 (feature level 349) a user needed to
            [have content access](/help/channel-permissions) to a channel in order
            to modify it. The exception to this rule was that organization
            administrators can edit channel names and descriptions without having
            full access to the channel.

            New in Zulip 10.0 (feature level 325). Prior to this
            change, the permission to administer channels was limited to realm
            administrators.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_delete_any_message_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to delete any message in the channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Note that a user must [have content access](/help/channel-permissions) to a
            channel in order to delete any message in the channel.

            Users present in the organization-level `can_delete_any_message_group` setting
            can always delete any message in the channel if they
            [have content access](/help/channel-permissions) to that channel.

            **Changes**: New in Zulip 11.0 (feature level 407). Prior to this
            change, only the users in `can_delete_any_message_group` were able
            delete any message in the organization.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_delete_own_message_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to delete the messages that they have
            sent in the channel expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Note that a user must [have content access](/help/channel-permissions) to a
            channel in order to delete their own message in the channel.

            Users with permission to delete any message in the channel
            and users present in the organization-level `can_delete_own_message_group` setting
            can always delete their own messages in the channel if they
            [have content access](/help/channel-permissions) to that channel.

            **Changes**: New in Zulip 11.0 (feature level 407). Prior to this
            change, only the users in the organization-level `can_delete_any_message_group`
            and `can_delete_own_message_group` settings were able delete their own messages in
            the organization.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_move_messages_out_of_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to move messages out of this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Note that a user must [have content access](/help/channel-permissions) to a
            channel in order to move messages out of the channel.

            Channel administrators and users present in the organization-level
            `can_move_messages_between_channels_group` setting can always move messages
            out of the channel if they [have content access](/help/channel-permissions) to
            the channel.

            **Changes**: New in Zulip 11.0 (feature level 396). Prior to this
            change, only the users in `can_move_messages_between_channels_group` were able
            move messages between channels.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_move_messages_within_channel_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to move messages within this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Note that a user must [have content access](/help/channel-permissions) to a
            channel in order to move messages within the channel.

            Channel administrators and users present in the organization-level
            `can_move_messages_between_topics_group` setting can always move messages
            within the channel if they [have content access](/help/channel-permissions) to
            the channel.

            **Changes**: New in Zulip 11.0 (feature level 396). Prior to this
            change, only the users in `can_move_messages_between_topics_group` were able
            move messages between topics of a channel.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_send_message_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to post in this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Note that a user must have metadata access to a channel and permission
            to administer the channel in order to modify this setting.

            **Changes**: New in Zulip 10.0 (feature level 333). Previously
            `stream_post_policy` field used to control the permission to
            post in the channel.
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_subscribe_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to subscribe themselves to this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Everyone, excluding guests, can subscribe to any public channel
            irrespective of this setting.

            Users in this group can subscribe to a private channel as well.

            Note that a user must [have content access](/help/channel-permissions)
            to a channel and permission to administer the channel in order to
            modify this setting.

            **Changes**: New in Zulip 10.0 (feature level 357).
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_resolve_topics_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to to resolve topics in this channel
            expressed as an [update to a group-setting value][update-group-setting].

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values

            Users who have similar realm-level permissions can resolve topics
            in a channel regardless of the value of this setting.

            **Changes**: New in Zulip 11.0 (feature level 402).
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
      type: object
    update_stream_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/InvalidChannelError"
        description: |
          An example JSON response for when the supplied channel does not exist:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when invalid combination of channel permission
          parameters are passed:
        example:
          code: BAD_REQUEST
          msg: Invalid parameters
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response for when trying to set moderation request channel to
          be public:
        example:
          code: BAD_REQUEST
          msg: A moderation request channel cannot be public.
          result: error
    get_stream_email_address_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          result: success
          msg: ""
          email: test.af64447e9e39374841063747ade8e6b0.show-sender@testserver
        properties:
          email:
            description: |
              Email address of the channel.
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        email: email
    delete_topic_request:
      properties:
        topic_name:
          description: |
            The name of the topic to delete.

            Note: When the value of `realm_empty_topic_display_name` found in
            the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            **Changes**: Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.
          example: new coffee machine
          type: string
      required:
      - topic_name
      type: object
    set_typing_status_request:
      properties:
        type:
          default: direct
          description: |
            Type of the message being composed.

            **Changes**: In Zulip 9.0 (feature level 248), `"channel"` was added as
            an additional value for this parameter to indicate a channel message is
            being composed.

            In Zulip 8.0 (feature level 215), stopped supporting
            `"private"` as a valid value for this parameter.

            In Zulip 7.0 (feature level 174), `"direct"` was added
            as the preferred way to indicate a direct message is being composed,
            becoming the default value for this parameter and deprecating the
            original `"private"`.

            New in Zulip 4.0 (feature level 58). Previously, typing notifications
            were only for direct messages.
          enum:
          - direct
          - stream
          - channel
          example: direct
          type: string
        op:
          description: |
            Whether the user has started (`"start"`) or stopped (`"stop"`) typing.
          enum:
          - start
          - stop
          example: start
          type: string
        to:
          description: |
            User IDs of the recipients of the message being typed. Required for the
            `"direct"` type. Ignored in the case of `"stream"` or `"channel"` type.

            Clients should send a JSON-encoded list of user IDs, even if there is only
            one recipient.

            **Changes**: In Zulip 8.0 (feature level 215), stopped using this parameter
            for the `"stream"` type. Previously, in the case of the `"stream"` type, it
            accepted a single-element list containing the ID of the channel. A new parameter,
            `stream_id`, is now used for this. Note that the `"channel"` type did not
            exist at this feature level.

            Support for typing notifications for channel' messages
            is new in Zulip 4.0 (feature level 58). Previously, typing
            notifications were only for direct messages.

            Before Zulip 2.0.0, this parameter accepted only a JSON-encoded
            list of email addresses. Support for the email address-based format was
            removed in Zulip 3.0 (feature level 11).
          example:
          - 9
          - 10
          items:
            type: integer
          minLength: 1
          type: array
        stream_id:
          description: |
            ID of the channel in which the message is being typed. Required for the `"stream"`
            or `"channel"` type. Ignored in the case of `"direct"` type.

            **Changes**: New in Zulip 8.0 (feature level 215). Previously, a single-element
            list containing the ID of the channel was passed in `to` parameter.
          example: 7
          type: integer
        topic:
          description: |
            Topic to which message is being typed. Required for the `"stream"` or `"channel"`
            type. Ignored in the case of `"direct"` type.

            Note: When `"(no topic)"` or the value of `realm_empty_topic_display_name`
            found in the [POST /register](/api/register-queue) response is used for this
            parameter, it is interpreted as an empty string.

            **Changes**: Before Zulip 10.0 (feature level 372),
            `"(no topic)"` was not interpreted as an empty string.

            Before Zulip 10.0 (feature level 334), empty string
            was not a valid topic name for channel messages.

            New in Zulip 4.0 (feature level 58). Previously, typing notifications
            were only for direct messages.
          example: typing notifications
          type: string
      required:
      - op
      type: object
    set_typing_status_for_message_edit_request:
      properties:
        op:
          description: |
            Whether the user has started (`"start"`) or stopped (`"stop"`) editing.
          enum:
          - start
          - stop
          example: start
          type: string
      required:
      - op
      type: object
    create_channel_request:
      description: |
        An object containing the top-level fields used to create a channel.
      properties:
        name:
          description: |
            The name of the new channel.

            Clients should use the `max_stream_name_length` returned by the
            [`POST /register`](/api/register-queue) endpoint to determine
            the maximum channel name length.
          example: music
          type: string
        description:
          description: |
            The [description](/help/change-the-channel-description)
            to use for the new channel being created, in text/markdown format.

            Clients should use the `max_stream_description_length` returned
            by the [`POST /register`](/api/register-queue) endpoint to
            determine the maximum channel description length.
          example: Channel for discussing all things music!
          type: string
        subscribers:
          description: |
            A list of user IDs of the users to be subscribed to the new channel.
          example:
          - 16
          - 12
          items:
            type: integer
          type: array
        announce:
          default: false
          description: |
            This determines whether [notification bot](/help/configure-automated-notices)
            will send an announcement about the new channel's creation.
          example: true
          type: boolean
        invite_only:
          default: false
          description: |
            This parameter and the ones
            that follow are used to request an initial configuration of the new channel.

            This parameter determines whether the newly created channel will be
            a private channel.
          example: true
          type: boolean
        is_web_public:
          default: false
          description: |
            This parameter determines whether the newly created channel will be
            a web-public channel.

            Note that creating web-public channels requires the
            `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings]
            to be enabled on the Zulip server in question, the organization
            to have enabled the `enable_spectator_access` realm setting, and
            the current user to have permission under the organization's
            `can_create_web_public_channel_group` realm setting.

            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html
          example: true
          type: boolean
        is_default_stream:
          default: false
          description: |
            This parameter determines whether the newly created channel will be
            added as a [default channel][default-channels] for new users joining
            the organization.

            [default-channels]: /help/set-default-channels-for-new-users
          example: true
          type: boolean
        folder_id:
          $ref: "#/components/schemas/FolderId"
        send_new_subscription_messages:
          $ref: "#/components/schemas/SendNewSubscriptionMessages"
        topics_policy:
          $ref: "#/components/schemas/TopicsPolicy"
        history_public_to_subscribers:
          $ref: "#/components/schemas/HistoryPublicToSubscribers"
        message_retention_days:
          $ref: "#/components/schemas/MessageRetentionDays"
        can_add_subscribers_group:
          $ref: "#/components/schemas/ChannelCanAddSubscribersGroup"
        can_delete_any_message_group:
          $ref: "#/components/schemas/CanDeleteAnyMessageGroup"
        can_delete_own_message_group:
          $ref: "#/components/schemas/CanDeleteOwnMessageGroup"
        can_remove_subscribers_group:
          $ref: "#/components/schemas/CanRemoveSubscribersGroup"
        can_administer_channel_group:
          $ref: "#/components/schemas/CanAdministerChannelGroup"
        can_move_messages_out_of_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesOutOfChannelGroup"
        can_move_messages_within_channel_group:
          $ref: "#/components/schemas/CanMoveMessagesWithinChannelGroup"
        can_send_message_group:
          $ref: "#/components/schemas/CanSendMessageGroup"
        can_subscribe_group:
          $ref: "#/components/schemas/CanSubscribeGroup"
        can_resolve_topics_group:
          $ref: "#/components/schemas/CanResolveTopicsGroup"
      required:
      - name
      - subscribers
      type: object
    create_channel_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        properties:
          id:
            description: The ID of the newly created channel.
            type: integer
        type: object
      description: Success response for creating a channel.
      example:
        result: success
        msg: ""
        id: 50
    create_channel_409_response:
      allOf:
      - $ref: "#/components/schemas/CodedError"
      - properties:
          result:
            example: error
            type: string
          msg:
            example: Channel 'discussions' already exists
            type: string
          code:
            example: CHANNEL_ALREADY_EXISTS
            type: string
        type: object
      description: Bad request as channel already exists.
      example:
        result: error
        msg: Channel 'discussions' already exists
        code: CHANNEL_ALREADY_EXISTS
    create_user_group_request:
      properties:
        name:
          description: |
            The name of the user group.
          example: marketing
          type: string
        description:
          description: |
            The description of the user group.
          example: The marketing team.
          type: string
        members:
          description: |
            An array containing the user IDs of the initial members for the
            new user group.
          example:
          - 1
          - 2
          - 3
          - 4
          items:
            type: integer
          type: array
        subgroups:
          description: |
            An array containing the IDs of the initial subgroups for the new
            user group.

            User can add subgroups to the new group irrespective of other
            permissions for the new group.

            **Changes**: New in Zulip 10.0 (feature level 311).
          example:
          - 11
          items:
            type: integer
          type: array
        can_add_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to add members to this user group.

            **Changes**: New in Zulip 10.0 (feature level 305). Previously, this
            permission was controlled by the `can_manage_group` setting.

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example: 11
        can_join_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to join this user group.

            **Changes**: New in Zulip 10.0 (feature level 301).

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example: 11
        can_leave_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to leave this user group.

            **Changes**: New in Zulip 10.0 (feature level 308).

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example: 15
        can_manage_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [manage this user group][manage-user-groups].

            This setting cannot be set to `"role:internet"` and `"role:everyone"`
            [system groups][system-groups].

            **Changes**: New in Zulip 10.0 (feature level 283).

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [manage-user-groups]: /help/manage-user-groups
          example: 11
        can_mention_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [mention this user group][mentions].

            This setting cannot be set to `"role:internet"` and `"role:owners"`
            [system groups][system-groups].

            Before Zulip 9.0 (feature level 258), this parameter could only be the
            integer form of a [group-setting value][setting-values].

            Before Zulip 8.0 (feature level 198), this parameter was named
            `can_mention_group_id`.

            New in Zulip 8.0 (feature level 191). Previously, groups could be
            mentioned only if they were not [system groups][system-groups].

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [mentions]: /help/mention-a-user-or-group
          example: 11
        can_remove_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to remove members from this user group.

            **Changes**: New in Zulip 10.0 (feature level 324). Previously, this
            permission was controlled by the `can_manage_group` setting.

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example: 11
      required:
      - description
      - members
      - name
      type: object
    create_user_group_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          group_id: 123
        properties:
          group_id:
            description: |
              The unique ID of the created user group.
            type: integer
        required:
        - group_id
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        group_id: 0
    get_user_group_members_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          members:
          - 10
          - 12
        properties:
          members:
            description: |
              A list containing the user IDs of members of the user group.
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        members:
        - 0
        - 0
    update_user_group_members_request:
      properties:
        delete:
          description: |
            The list of user IDs to be removed from the user group.
          example:
          - 10
          items:
            type: integer
          type: array
        add:
          description: |
            The list of user IDs to be added to the user group.
          example:
          - 12
          - 13
          items:
            type: integer
          type: array
        delete_subgroups:
          description: |
            The list of user group IDs to be removed from the user group.

            **Changes**: New in Zulip 10.0 (feature level 311).
          example:
          - 9
          items:
            type: integer
          type: array
        add_subgroups:
          description: |
            The list of user group IDs to be added to the user group.

            **Changes**: New in Zulip 10.0 (feature level 311).
          example:
          - 9
          items:
            type: integer
          type: array
      type: object
    update_user_group_request:
      properties:
        name:
          description: |
            The new name of the group.

            **Changes**: Before Zulip 7.0 (feature level 165), this was
            a required field.
          example: marketing team
          type: string
        description:
          description: |
            The new description of the group.

            **Changes**: Before Zulip 7.0 (feature level 165), this was
            a required field.
          example: The marketing team.
          type: string
        can_add_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to add members to this user group
            expressed as an [update to a group-setting value][update-group-setting].

            **Changes**: New in Zulip 10.0 (feature level 305). Previously, this
            permission was controlled by the `can_manage_group` setting.

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 11
        can_join_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to join this user group
            expressed as an [update to a group-setting value][update-group-setting].

            **Changes**: New in Zulip 10.0 (feature level 301).

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 11
        can_leave_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to leave this user group
            expressed as an [update to a group-setting value][update-group-setting].

            **Changes**: New in Zulip 10.0 (feature level 308).

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 15
        can_manage_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to [manage this user group][manage-user-groups]
            expressed as an [update to a group-setting value][update-group-setting].

            This setting cannot be set to `"role:internet"` and `"role:everyone"`
            [system groups][system-groups].

            **Changes**: New in Zulip 10.0 (feature level 283).

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [manage-user-groups]: /help/manage-user-groups
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 11
        can_mention_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to [mention this group][mentions],
            expressed as an [update to a group-setting value][update-group-setting].

            This setting cannot be set to `"role:internet"` and `"role:owners"`
            [system groups][system-groups].

            **Changes**: In Zulip 9.0 (feature level 260), this parameter was
            updated to only accept an object with the `old` and `new` fields
            described below. Prior to this feature level, this parameter could be
            either of the two forms of a [group-setting value][setting-values].

            Before Zulip 9.0 (feature level 258), this parameter could only be the
            integer form of a [group-setting value][setting-values].

            Before Zulip 8.0 (feature level 198), this parameter was named
            `can_mention_group_id`.

            New in Zulip 8.0 (feature level 191). Previously, groups could be
            mentioned only if they were not [system groups][system-groups].

            [mentions]: /help/mention-a-user-or-group
            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [setting-values]: /api/group-setting-values
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 11
        can_remove_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValueUpdate"
          description: |
            The set of users who have permission to remove members from this user group
            expressed as an [update to a group-setting value][update-group-setting].

            **Changes**: New in Zulip 10.0 (feature level 324). Previously, this
            permission was controlled by the `can_manage_group` setting.

            [update-group-setting]: /api/group-setting-values#updating-group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
          example:
            new:
              direct_members:
              - 10
              direct_subgroups:
              - 11
            old: 11
        deactivated:
          description: |
            A deactivated user group can be reactivated by passing this
            parameter as `false`.

            Passing `true` does nothing as user group is deactivated
            using [`POST /user_groups/{user_group_id}/deactivate`](deactivate-user-group)
            endpoint.

            **Changes**: New in Zulip 11.0 (feature level 386).
          example: false
          type: boolean
      type: object
    get_user_groups_request:
      properties:
        include_deactivated_groups:
          default: false
          description: |
            Whether to include deactivated user groups in the response.

            **Changes**: In Zulip 10.0 (feature level 294), renamed
            `allow_deactivated` to `include_deactivated_groups`.

            New in Zulip 10.0 (feature level 290). Previously, deactivated
            user groups did not exist and thus would never be included in
            the response.
          example: true
          type: boolean
      type: object
    get_user_groups_200_response_allOf_user_groups_inner:
      additionalProperties: false
      example:
        can_join_group: ""
        is_system_group: true
        date_created: 6
        description: description
        can_mention_group: ""
        deactivated: true
        direct_subgroup_ids:
        - 5
        - 5
        can_leave_group: ""
        can_add_members_group: ""
        members:
        - 5
        - 5
        creator_id: 1
        name: name
        can_remove_members_group: ""
        id: 0
        can_manage_group: ""
      properties:
        description:
          description: |
            The human-readable description of the user group.
          type: string
        id:
          description: |
            The user group's integer ID.
          type: integer
        date_created:
          description: |
            The UNIX timestamp for when the user group was created, in UTC seconds.

            A `null` value means the user group has no recorded date, which is often
            because the group predates the metadata being tracked starting in Zulip 8.0,
            or because it was created via a data import tool
            or [management command][management-commands].

            **Changes**: New in Zulip 10.0 (feature level 292).

            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        creator_id:
          description: |
            The ID of the user who created this user group.

            A `null` value means the user group has no recorded creator, which is often
            because the group predates the metadata being tracked starting in Zulip 8.0,
            or because it was created via a data import tool
            or [management command][management-commands].

            **Changes**: New in Zulip 10.0 (feature level 292).

            [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html
          nullable: true
          type: integer
        members:
          description: |
            The integer user IDs of the user group's members, which
            are guaranteed to be non-deactivated users in the organization.

            **Changes**: Prior to Zulip 10.0 (feature level 303), this
            list also included deactivated users who were members of
            the user group before being deactivated.
          items:
            type: integer
          type: array
        direct_subgroup_ids:
          description: |
            The integer user group IDs of the direct subgroups.

            **Changes**: New in Zulip 6.0 (feature level 131).
            Introduced in feature level 127 as `subgroups`, but
            clients can ignore older events as this feature level
            predates subgroups being fully implemented.
          items:
            type: integer
          type: array
        name:
          description: |
            User group name.
          type: string
        is_system_group:
          description: |
            Whether the user group is a system group which cannot be
            modified by users.

            **Changes**: New in Zulip 5.0 (feature level 93).
          type: boolean
        can_add_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to add members to this user group.

            **Changes**: New in Zulip 10.0 (feature level 305). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_join_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to join this user group.

            **Changes**: New in Zulip 10.0 (feature level 301).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_leave_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to leave this user group.

            **Changes**: New in Zulip 10.0 (feature level 308).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        can_manage_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [manage this user group][manage-user-groups].

            **Changes**: New in Zulip 10.0 (feature level 283).

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [manage-user-groups]: /help/manage-user-groups
        can_mention_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to [mention this user group][mentions].

            **Changes**: Before Zulip 9.0 (feature level 258), this setting was
            always the integer form of a [group-setting value][setting-values].

            Before Zulip 8.0 (feature level 198), this setting was named
            `can_mention_group_id`.

            New in Zulip 8.0 (feature level 191). Previously, groups could be
            mentioned only if they were not [system groups][system-groups].

            Will be one of the following:

            [setting-values]: /api/group-setting-values
            [system-groups]: /api/group-setting-values#system-groups
            [mentions]: /help/mention-a-user-or-group
        can_remove_members_group:
          allOf:
          - $ref: "#/components/schemas/GroupSettingValue"
          description: |
            A [group-setting value][setting-values] defining the set of users who
            have permission to remove members from this user group.

            **Changes**: New in Zulip 10.0 (feature level 324). Previously, this
            permission was controlled by the `can_manage_group` setting.

            Will be one of the following:

            [setting-values]: /api/group-setting-values
        deactivated:
          description: |
            Whether the user group is deactivated. Deactivated groups
            cannot be used as a subgroup of another group or used for
            any other purpose.

            **Changes**: New in Zulip 10.0 (feature level 290).
          type: boolean
      type: object
    get_user_groups_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          user_groups:
          - description: Owners of this organization
            id: 1
            creator_id: null
            date_created: null
            name: role:owners
            members:
            - 1
            direct_subgroup_ids: []
            is_system_group: true
            can_add_members_group: 16
            can_join_group: 16
            can_leave_group: 15
            can_manage_group: 16
            can_mention_group: 11
            can_remove_members_group: 16
          - description: "Administrators of this organization, including owners"
            id: 2
            creator_id: null
            date_created: null
            name: role:administrators
            members:
            - 2
            direct_subgroup_ids:
            - 1
            is_system_group: true
            can_add_members_group: 17
            can_join_group: 17
            can_leave_group: 15
            can_manage_group: 17
            can_mention_group: 12
            can_remove_members_group: 16
          - description: Characters of Hamlet
            id: 3
            creator_id: null
            date_created: 1717484476
            name: hamletcharacters
            members:
            - 3
            - 4
            direct_subgroup_ids: []
            is_system_group: false
            can_add_members_group: 20
            can_join_group: 20
            can_leave_group: 15
            can_manage_group: 20
            can_mention_group: 13
            can_remove_members_group: 16
        properties:
          user_groups:
            description: |
              A list of `user_group` objects.
            items:
              $ref: "#/components/schemas/get_user_groups_200_response_allOf_user_groups_inner"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        user_groups:
        - can_join_group: ""
          is_system_group: true
          date_created: 6
          description: description
          can_mention_group: ""
          deactivated: true
          direct_subgroup_ids:
          - 5
          - 5
          can_leave_group: ""
          can_add_members_group: ""
          members:
          - 5
          - 5
          creator_id: 1
          name: name
          can_remove_members_group: ""
          id: 0
          can_manage_group: ""
        - can_join_group: ""
          is_system_group: true
          date_created: 6
          description: description
          can_mention_group: ""
          deactivated: true
          direct_subgroup_ids:
          - 5
          - 5
          can_leave_group: ""
          can_add_members_group: ""
          members:
          - 5
          - 5
          creator_id: 1
          name: name
          can_remove_members_group: ""
          id: 0
          can_manage_group: ""
    get_user_group_subgroups_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          subgroups:
          - 2
          - 3
        properties:
          subgroups:
            description: |
              A list containing the IDs of subgroups of the user group.
            items:
              type: integer
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        subgroups:
        - 0
        - 0
    update_user_group_subgroups_request:
      properties:
        delete:
          description: |
            The list of user group IDs to be removed from the user group.
          example:
          - 10
          items:
            type: integer
          type: array
        add:
          description: |
            The list of user group IDs to be added to the user group.
          example:
          - 10
          items:
            type: integer
          type: array
      type: object
    get_is_user_group_member_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          is_user_group_member: false
        properties:
          is_user_group_member:
            description: |
              Whether the user is member of user group.
            type: boolean
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        is_user_group_member: true
    deactivate_user_group_400_response:
      oneOf:
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response when the user group ID is invalid.
        example:
          code: BAD_REQUEST
          msg: Invalid user group
          result: error
      - allOf:
        - $ref: "#/components/schemas/CodedError"
        description: |
          An example JSON response when the user group being deactivated
          is used for a setting or as a subgroup.

          **Changes**: New in Zulip 10.0 (feature level 298). Previously,
          this error returned the `"BAD_REQUEST"` code.
        example:
          code: CANNOT_DEACTIVATE_GROUP_IN_USE
          msg: Cannot deactivate user group in use.
          objections:
          - type: realm
            settings:
            - can_create_public_channel_group
          result: error
    create_channel_folder_request:
      properties:
        name:
          description: |
            The name of the channel folder.

            Clients should use the `max_channel_folder_name_length` returned
            by the [`POST /register`](/api/register-queue) endpoint to determine
            the maximum channel folder name length.
          example: marketing
          type: string
        description:
          description: |
            The description of the channel folder.

            Clients should use the `max_channel_folder_description_length`
            returned by the [`POST /register`](/api/register-queue) endpoint
            to determine the maximum channel folder description length.
          example: Channels for marketing.
          type: string
      type: object
    create_channel_folder_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          channel_folder_id: 123
        properties:
          channel_folder_id:
            description: |
              The unique ID of the created channel folder.
            type: integer
        required:
        - channel_folder_id
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        channel_folder_id: 0
    get_channel_folders_request:
      properties:
        include_archived:
          default: false
          description: |
            Whether to include archived channel folders in the response.
          example: true
          type: boolean
      type: object
    get_channel_folders_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          channel_folders:
          - description: Channels for frontend discussions
            rendered_description: <p>Channels for frontend discussions</p>
            id: 1
            creator_id: 1
            date_created: 1691057093
            name: Frontend
            is_archived: false
          - description: Channels for **backend** discussions
            rendered_description: <p>Channels for <strong>backend</strong> discussions</p>
            id: 2
            creator_id: 1
            date_created: 1791057093
            name: Backend
            is_archived: false
        properties:
          channel_folders:
            description: |
              A list of channel folder objects.
            items:
              $ref: "#/components/schemas/ChannelFolder"
            type: array
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        channel_folders:
        - rendered_description: rendered_description
          is_archived: true
          date_created: 4
          name: name
          creator_id: 0
          description: description
          id: 4
          order: 6
        - rendered_description: rendered_description
          is_archived: true
          date_created: 4
          name: name
          creator_id: 0
          description: description
          id: 4
          order: 6
    patch_channel_folders_request:
      properties:
        order:
          description: |
            A list of channel folder IDs representing the new order.

            This list must include the IDs of all the
            organization's channel folders, including archived
            folders.
          items:
            type: integer
          type: array
      type: object
    update_channel_folder_request:
      properties:
        name:
          description: |
            The new name of the channel folder.

            Clients should use the `max_channel_folder_name_length` returned
            by the [`POST /register`](/api/register-queue) endpoint to determine
            the maximum channel folder name length.
          example: backend
          type: string
        description:
          description: |
            The new description of the channel folder.

            Clients should use the `max_channel_folder_description_length`
            returned by the [`POST /register`](/api/register-queue) endpoint
            to determine the maximum channel folder description length.
          example: Backend channels.
          type: string
        is_archived:
          description: |
            Whether to archive or unarchive the channel folder.
          example: true
          type: boolean
      type: object
    _real_time_post_request:
      properties:
        event_types:
          $ref: "#/components/schemas/Event_types"
        narrow:
          $ref: "#/components/schemas/Narrow"
        all_public_streams:
          $ref: "#/components/schemas/AllPublicChannels"
      type: object
    rest_error_handling_400_response:
      oneOf:
      - $ref: "#/components/schemas/InvalidApiKeyError"
      - $ref: "#/components/schemas/MissingArgumentError"
      - $ref: "#/components/schemas/IncompatibleParametersError"
      - $ref: "#/components/schemas/UserNotAuthorizedError"
    rest_error_handling_401_response:
      oneOf:
      - $ref: "#/components/schemas/UserDeactivatedError"
      - $ref: "#/components/schemas/RealmDeactivatedError"
    zulip_outgoing_webhooks_200_response_message:
      allOf:
      - $ref: "#/components/schemas/MessagesBase"
      - additionalProperties: false
        properties:
          avatar_url:
            nullable: true
          rendered_content:
            description: |
              The content/body of the message rendered in HTML.

              See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
            type: string
        type: object
      description: |
        A dictionary containing details on the message that triggered the
        outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).
    zulip_outgoing_webhooks_200_response:
      additionalProperties: false
      description: |
        This is an example of the JSON payload that the Zulip server will `POST`
        to your server:
      example:
        data: '@**Outgoing webhook test** Zulip is the world’s most productive group
          chat!'
        trigger: mention
        token: xvOzfurIutdRRVLzpXrIIHXJvNfaJLJ0
        message:
          subject: Verona2
          sender_email: iago@zulip.com
          timestamp: 1527876931
          client: website
          submessages: []
          recipient_id: 20
          topic_links: []
          sender_full_name: Iago
          avatar_url: https://secure.gravatar.com/avatar/1f4f1575bf002ae562fea8fc4b861b09?d=identicon&version=1
          rendered_content: <p><span class="user-mention" data-user-id="25">@Outgoing
            webhook test</span> Zulip is the world’s most productive group chat!</p>
          sender_id: 5
          stream_id: 5
          content: '@**Outgoing webhook test** Zulip is the world’s most productive
            group chat!'
          display_recipient: Verona
          type: stream
          id: 112
          is_me_message: false
          reactions: []
          sender_realm_str: zulip
        bot_email: outgoing-bot@localhost
        bot_full_name: Outgoing webhook test
      properties:
        bot_email:
          description: |
            Email of the bot user.
          type: string
        bot_full_name:
          description: |
            The full name of the bot user.
          type: string
        data:
          description: |
            The message content, in raw [Zulip-flavored Markdown](/help/format-your-message-using-markdown) format (not rendered to HTML).
          type: string
        trigger:
          description: |
            What aspect of the message triggered the outgoing webhook notification.
            Possible values include `direct_message` and `mention`.

            **Changes**: In Zulip 8.0 (feature level 201), renamed the trigger
            `private_message` to `direct_message`.
          type: string
        token:
          description: |
            A string of alphanumeric characters that can be used to authenticate the
            webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot
            in the `zuliprc` file downloaded when creating the bot.
          type: string
        message:
          $ref: "#/components/schemas/zulip_outgoing_webhooks_200_response_message"
      type: object
    create_big_blue_button_video_call_200_response:
      allOf:
      - $ref: "#/components/schemas/JsonSuccessBase"
      - additionalProperties: false
        example:
          msg: ""
          result: success
          url: /calls/bigbluebutton/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22
        properties:
          url:
            description: |
              The URL for the BigBlueButton video call.
            example: /calls/bigbluebutton/join?meeting_id=%22zulip-something%22&password=%22something%22&name=%22your_meeting_name%22&checksum=%22somechecksum%22
            type: string
        type: object
      example:
        result: ""
        msg: ""
        ignored_parameters_unsupported: ""
        url: /calls/bigbluebutton/join?meeting_id=%22zulip-something%22&password=%22something%22&name=%22your_meeting_name%22&checksum=%22somechecksum%22
    Attachment_messages_inner:
      additionalProperties: false
      example:
        date_sent: 5
        id: 5
      properties:
        date_sent:
          description: |
            Time when the message was sent as a UNIX timestamp
            multiplied by 1000 (matching the format of getTime() in JavaScript).

            **Changes**: Changed in Zulip 3.0 (feature level 22). This
            field was previously strangely called `name` and was a floating
            point number.
          type: integer
        id:
          description: |
            The unique message ID. Messages should always be
            displayed sorted by ID.
          type: integer
      type: object
    BasicBotBase_services_inner_oneOf:
      additionalProperties: false
      description: |
        When the bot is an outgoing webhook.
      example:
        base_url: base_url
        interface: 3
        token: token
      properties:
        base_url:
          description: |
            The URL the outgoing webhook is configured to post to.
          type: string
        token:
          description: |
            A unique token that the third-party service can use to confirm
            that the request is indeed coming from Zulip.
          type: string
        interface:
          description: |
            An integer indicating what format requests are posted in:

            - 1 = Zulip's native outgoing webhook format.
            - 2 = Emulate the Slack outgoing webhook format.
          type: integer
      type: object
    BasicBotBase_services_inner_oneOf_1:
      additionalProperties: false
      description: |
        When the bot is an embedded bot.
      properties:
        service_name:
          description: |
            The name of the bot.
          type: string
        config_data:
          additionalProperties:
            description: |
              `{config_key}`: Description/value of the configuration data key.
            type: string
          description: |
            A dictionary of string key/value pairs, which describe the configuration
            for the bot. These are usually details like API keys, and are unique to
            the integration/bot. Can be an empty dictionary.
          type: object
      type: object
    BasicBotBase_services_inner:
      description: |
        Object with extra configuration details for the bot. The fields in the
        object depend on the type of bot.
      oneOf:
      - $ref: "#/components/schemas/BasicBotBase_services_inner_oneOf"
      - $ref: "#/components/schemas/BasicBotBase_services_inner_oneOf_1"
    WebhookConfigOption_inner:
      additionalProperties: false
      example:
        validator: validator
        label: label
        key: key
      properties:
        key:
          description: |
            A key for the configuration option.
          type: string
        label:
          description: |
            A human-readable label of the configuration option.
          type: string
        validator:
          description: |
            The name of the validator function for the configuration
            option.
          type: string
      type: object
    WebhookUrlOption_inner:
      additionalProperties: false
      example:
        validator: validator
        label: label
        key: key
      properties:
        key:
          description: |
            The parameter variable to encode the users input for this
            option in the integrations webhook URL.
          type: string
        label:
          description: |
            A human-readable label of the url option.
          type: string
        validator:
          description: |
            The name of the validator function for the configuration
            option.
          type: string
      type: object
    GroupSettingValue_oneOf:
      additionalProperties: false
      description: |
        An object with these fields:
      properties:
        direct_members:
          description: |
            The list of IDs of individual users in the collection of users with this permission.

            **Changes**: Prior to Zulip 10.0 (feature level 303), this list would include
            deactivated users who had the permission before being deactivated.
          items:
            type: integer
          type: array
        direct_subgroups:
          description: |
            The list of IDs of the groups in the collection of users with this permission.
          items:
            type: integer
          type: array
      type: object
    EmojiReactionEvent_allOf_user:
      deprecated: true
      description: |
        Dictionary with data on the user who added the
        reaction, including the user ID as the `user_id`
        field.

        **Changes**: This field was re-added in Zulip 10.0 (feature
        level 339) after having been removed in Zulip 10.0 (feature
        level 328). It remains deprecated; it was re-added because the
        React Native mobile app was still using it.

        **Deprecated** and to be removed in a future release once core
        clients have migrated to use the adjacent `user_id` field, which
        was introduced in Zulip 3.0 (feature level 2). Clients
        supporting older Zulip server versions should use the user ID
        mentioned in the description above as they would the `user_id`
        field.
      properties:
        user_id:
          description: |
            ID of the user.
          type: integer
        email:
          description: |
            Zulip API email of the user.
          type: string
        full_name:
          description: |
            Full name of the user.
          type: string
        is_mirror_dummy:
          description: |
            Whether the user is a mirror dummy.
          type: boolean
      type: object
    MessagesBase_display_recipient_oneOf_inner:
      additionalProperties: false
      properties:
        id:
          description: |
            ID of the user.
          type: integer
        email:
          description: |
            Zulip API email of the user.
          type: string
        full_name:
          description: |
            Full name of the user.
          type: string
        is_mirror_dummy:
          description: |
            Whether the user is a mirror dummy.
          type: boolean
      type: object
    MessagesBase_display_recipient:
      description: |
        Data on the recipient of the message;
        either the name of a channel or a dictionary containing basic data on
        the users who received the message.
      oneOf:
      - type: string
      - items:
          $ref: "#/components/schemas/MessagesBase_display_recipient_oneOf_inner"
        type: array
    MessagesBase_edit_history_inner:
      additionalProperties: false
      example:
        stream: 1
        user_id: 5
        prev_content: prev_content
        prev_topic: prev_topic
        topic: topic
        prev_rendered_content: prev_rendered_content
        prev_stream: 6
        timestamp: 5
      properties:
        prev_content:
          description: |
            Only present if message's content was edited.

            The content of the message immediately prior to this
            edit event.
          type: string
        prev_rendered_content:
          description: |
            Only present if message's content was edited.

            The rendered HTML representation of `prev_content`.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
        prev_stream:
          description: |
            Only present if message's channel was edited.

            The channel ID of the message immediately prior to this
            edit event.

            **Changes**: New in Zulip 3.0 (feature level 1).
          type: integer
        prev_topic:
          description: |
            Only present if message's topic was edited.

            The topic of the message immediately prior to this
            edit event.

            **Changes**: New in Zulip 5.0 (feature level 118).
            Previously, this field was called `prev_subject`;
            clients are recommended to rename `prev_subject` to
            `prev_topic` if present for compatibility with
            older Zulip servers.
          type: string
        stream:
          description: |
            Only present if message's channel was edited.

            The ID of the channel containing the message
            immediately after this edit event.

            **Changes**: New in Zulip 5.0 (feature level 118).
          type: integer
        timestamp:
          description: |
            The UNIX timestamp for the edit.
          type: integer
        topic:
          description: |
            Only present if message's topic was edited.

            The topic of the message immediately after this edit event.

            **Changes**: New in Zulip 5.0 (feature level 118).
          type: string
        user_id:
          description: |
            The ID of the user that made the edit.

            Will be `null` only for edit history
            events predating March 2017.

            Clients can display edit history events where this
            is `null` as modified by either the sender (for content
            edits) or an unknown user (for topic edits).
          nullable: true
          type: integer
      required:
      - timestamp
      - user_id
      type: object
    MessagesBase_submessages_inner:
      additionalProperties: false
      example:
        msg_type: msg_type
        message_id: 1
        id: 1
        content: content
        sender_id: 1
      properties:
        msg_type:
          description: |
            The type of the message.
          type: string
        content:
          description: |
            The new content of the submessage.
          type: string
        message_id:
          description: |
            The ID of the message to which the submessage has been added.
          type: integer
        sender_id:
          description: |
            The ID of the user who sent the message.
          type: integer
        id:
          description: |
            The ID of the submessage.
          type: integer
      type: object
    ScheduledMessageBase_to:
      description: |
        The scheduled message's tentative target audience.

        For channel messages, it will be the unique ID of the target
        channel. For direct messages, it will be an array with the
        target users' IDs.
      oneOf:
      - type: integer
      - items:
          type: integer
        type: array
    profile_data_value:
      additionalProperties: false
      description: |
        `{id}`: Object with data about what value the user filled in the custom
        profile field with that ID.
      example:
        rendered_value: rendered_value
        value: value
      properties:
        value:
          description: |
            User's personal value for this custom profile field.
          type: string
        rendered_value:
          description: |
            The `value` rendered in HTML. Will only be present for
            custom profile field types that support Markdown rendering.

            This user-generated HTML content should be rendered
            using the same CSS and client-side security protections
            as are used for message content.

            See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
          type: string
      type: object
    InvitationFailedError_allOf_errors_inner_inner:
      oneOf:
      - type: string
      - type: boolean
    get_events_200_response_allOf_events_inner_oneOf_19_allOf_type:
      allOf:
      - $ref: "#/components/schemas/EventTypeSchema"
      - enum:
        - reaction
        type: string
    get_events_200_response_allOf_events_inner_oneOf_20_allOf_type:
      allOf:
      - $ref: "#/components/schemas/EventTypeSchema"
      - enum:
        - reaction
        type: string
    register_queue_200_response_allOf_user_status:
      allOf:
      - $ref: "#/components/schemas/UserStatus"
      description: |
        `{user_id}`: Object containing the status details of a user
        with the key of the object being the ID of the user.
      example:
        away: true
        reaction_type: unicode_emoji
        emoji_name: emoji_name
        status_text: status_text
        emoji_code: emoji_code
  securitySchemes:
    BasicAuth:
      description: |
        Basic authentication, with the user's email as the username, and the API
        key as the password. The API key can be fetched using the
        `/fetch_api_key` or `/dev_fetch_api_key` endpoints.
      scheme: basic
      type: http
