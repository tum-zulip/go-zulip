/*
Zulip REST API

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
	"github.com/tum-zulip/go-zulip/pkg/api"
)

func Test_gozulip_UsersAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test UsersAPIService AddAlertWords", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddAlertWords(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AddApnsToken", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddApnsToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AddFcmToken", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddFcmToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CreateUser", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CreateUserGroup", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateUserGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeactivateOwnUser", func(t *testing.T) {

		resp, httpRes, err := apiClient.DeactivateOwnUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeactivateUser", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.DeactivateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeactivateUserGroup", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.DeactivateUserGroup(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetAlertWords", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetAlertWords(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetAttachments", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetAttachments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetIsUserGroupMember", func(t *testing.T) {

		var userGroupId int32
		var userId int32

		resp, httpRes, err := apiClient.GetIsUserGroupMember(context.Background(), userGroupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetOwnUser", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetOwnUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUser", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.GetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserByEmail", func(t *testing.T) {

		var email string

		resp, httpRes, err := apiClient.GetUserByEmail(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserGroupMembers", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.GetUserGroupMembers(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserGroupSubgroups", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.GetUserGroupSubgroups(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserGroups", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetUserGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserPresence", func(t *testing.T) {

		var userIdOrEmail string

		resp, httpRes, err := apiClient.GetUserPresence(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserStatus", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.GetUserStatus(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUsers", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService MuteUser", func(t *testing.T) {

		var mutedUserId int32

		resp, httpRes, err := apiClient.MuteUser(context.Background(), mutedUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ReactivateUser", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.ReactivateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveAlertWords", func(t *testing.T) {

		resp, httpRes, err := apiClient.RemoveAlertWords(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveApnsToken", func(t *testing.T) {

		resp, httpRes, err := apiClient.RemoveApnsToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveAttachment", func(t *testing.T) {

		var attachmentId int32

		resp, httpRes, err := apiClient.RemoveAttachment(context.Background(), attachmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveFcmToken", func(t *testing.T) {

		resp, httpRes, err := apiClient.RemoveFcmToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService SetTypingStatus", func(t *testing.T) {

		resp, httpRes, err := apiClient.SetTypingStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService SetTypingStatusForMessageEdit", func(t *testing.T) {

		var messageId int32

		resp, httpRes, err := apiClient.SetTypingStatusForMessageEdit(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UnmuteUser", func(t *testing.T) {

		var mutedUserId int32

		resp, httpRes, err := apiClient.UnmuteUser(context.Background(), mutedUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdatePresence", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdatePresence(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateSettings", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdateSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateStatus", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdateStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateStatusForUser", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.UpdateStatusForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUser", func(t *testing.T) {

		var userId int32

		resp, httpRes, err := apiClient.UpdateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserByEmail", func(t *testing.T) {

		var email string

		resp, httpRes, err := apiClient.UpdateUserByEmail(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserGroup", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.UpdateUserGroup(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserGroupMembers", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.UpdateUserGroupMembers(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserGroupSubgroups", func(t *testing.T) {

		var userGroupId int32

		resp, httpRes, err := apiClient.UpdateUserGroupSubgroups(context.Background(), userGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
