/*
Zulip REST API

Testing ScheduledMessagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
	"github.com/tum-zulip/go-zulip/pkg/api"
)

func Test_gozulip_ScheduledMessagesAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test ScheduledMessagesAPIService CreateScheduledMessage", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateScheduledMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduledMessagesAPIService DeleteScheduledMessage", func(t *testing.T) {

		var scheduledMessageId int32

		resp, httpRes, err := apiClient.DeleteScheduledMessage(context.Background(), scheduledMessageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduledMessagesAPIService GetScheduledMessages", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetScheduledMessages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduledMessagesAPIService UpdateScheduledMessage", func(t *testing.T) {

		var scheduledMessageId int32

		resp, httpRes, err := apiClient.UpdateScheduledMessage(context.Background(), scheduledMessageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
