/*
Zulip REST API

Testing ChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_gozulip_ChannelsAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test ChannelsAPIService AddDefaultStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.AddDefaultStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService ArchiveStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.ArchiveStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateBigBlueButtonVideoCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.CreateBigBlueButtonVideoCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.CreateChannel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateChannelFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.CreateChannelFolder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService DeleteTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.DeleteTopic(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.GetStreamById(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamEmailAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.GetStreamEmailAddress(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.GetStreamId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamTopics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.GetStreamTopics(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.GetStreams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscribers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.GetSubscribers(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscriptionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId int32
		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.GetSubscriptionStatus(context.Background(), userId, streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.GetSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService MuteTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.MuteTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService PatchChannelFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.PatchChannelFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService RemoveDefaultStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.RemoveDefaultStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService Subscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.Subscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService Unsubscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.Unsubscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateChannelFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelFolderId int32

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateChannelFolder(context.Background(), channelFolderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId int32

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateSubscriptionSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateSubscriptionSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateUserTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateUserTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
