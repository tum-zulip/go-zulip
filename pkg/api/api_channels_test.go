/*
Zulip REST API

Testing ChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
	"github.com/tum-zulip/go-zulip/pkg/api"
)

func Test_gozulip_ChannelsAPIService(t *testing.T) {

	configuration := api.NewConfiguration()
	apiClient := api.NewAPIClient(configuration)

	t.Run("Test ChannelsAPIService AddDefaultStream", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddDefaultStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService ArchiveStream", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.ArchiveStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateBigBlueButtonVideoCall", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateBigBlueButtonVideoCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateChannel", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateChannel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateChannelFolder", func(t *testing.T) {

		resp, httpRes, err := apiClient.CreateChannelFolder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService DeleteTopic", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.DeleteTopic(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelFolders", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetChannelFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamById", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.GetStreamById(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamEmailAddress", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.GetStreamEmailAddress(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamId", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetStreamId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreamTopics", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.GetStreamTopics(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetStreams", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetStreams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscribers", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.GetSubscribers(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscriptionStatus", func(t *testing.T) {

		var userId int32
		var streamId int32

		resp, httpRes, err := apiClient.GetSubscriptionStatus(context.Background(), userId, streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetSubscriptions", func(t *testing.T) {

		resp, httpRes, err := apiClient.GetSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService MuteTopic", func(t *testing.T) {

		resp, httpRes, err := apiClient.MuteTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService PatchChannelFolders", func(t *testing.T) {

		resp, httpRes, err := apiClient.PatchChannelFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService RemoveDefaultStream", func(t *testing.T) {

		resp, httpRes, err := apiClient.RemoveDefaultStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService Subscribe", func(t *testing.T) {

		resp, httpRes, err := apiClient.Subscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService Unsubscribe", func(t *testing.T) {

		resp, httpRes, err := apiClient.Unsubscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateChannelFolder", func(t *testing.T) {

		var channelFolderId int32

		resp, httpRes, err := apiClient.UpdateChannelFolder(context.Background(), channelFolderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateStream", func(t *testing.T) {

		var streamId int32

		resp, httpRes, err := apiClient.UpdateStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateSubscriptionSettings", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdateSubscriptionSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateSubscriptions", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdateSubscriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateUserTopic", func(t *testing.T) {

		resp, httpRes, err := apiClient.UpdateUserTopic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
