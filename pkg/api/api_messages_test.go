/*
Zulip REST API

Testing MessagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_gozulip_MessagesAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test MessagesAPIService AddReaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.AddReaction(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService CheckMessagesMatchNarrow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.CheckMessagesMatchNarrow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService DeleteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.DeleteMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService GetFileTemporaryUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realmIdStr int32
		var filename string

		resp, httpRes, err := apiClient.MessagesAPI.GetFileTemporaryUrl(context.Background(), realmIdStr, filename).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService GetMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.GetMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService GetMessageHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.GetMessageHistory(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService GetMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.GetMessages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService GetReadReceipts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.GetReadReceipts(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService MarkAllAsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.MarkAllAsRead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService MarkStreamAsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.MarkStreamAsRead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService MarkTopicAsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.MarkTopicAsRead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService RemoveReaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.RemoveReaction(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService RenderMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.RenderMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService ReportMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.ReportMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService SendMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.SendMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService UpdateMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId int32

		resp, httpRes, err := apiClient.MessagesAPI.UpdateMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService UpdateMessageFlags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.UpdateMessageFlags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService UpdateMessageFlagsForNarrow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.UpdateMessageFlagsForNarrow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessagesAPIService UploadFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessagesAPI.UploadFile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
