/*
Zulip REST API

Testing ServerAndOrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_gozulip_ServerAndOrganizationsAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test ServerAndOrganizationsAPIService AddCodePlayground", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.AddCodePlayground(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService AddLinkifier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.AddLinkifier(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService CreateCustomProfileField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.CreateCustomProfileField(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService DeactivateCustomEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var emojiName string

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.DeactivateCustomEmoji(context.Background(), emojiName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService ExportRealm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.ExportRealm(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetCustomEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetCustomEmoji(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetCustomProfileFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetCustomProfileFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetLinkifiers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetLinkifiers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetPresence", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetPresence(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetRealmExportConsents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetRealmExportConsents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetRealmExports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetRealmExports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService GetServerSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.GetServerSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService RemoveCodePlayground", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playgroundId int32

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.RemoveCodePlayground(context.Background(), playgroundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService RemoveLinkifier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId int32

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.RemoveLinkifier(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService ReorderCustomProfileFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.ReorderCustomProfileFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService ReorderLinkifiers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.ReorderLinkifiers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService TestWelcomeBotCustomMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.TestWelcomeBotCustomMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService UpdateLinkifier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId int32

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.UpdateLinkifier(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService UpdateRealmUserSettingsDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.UpdateRealmUserSettingsDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAndOrganizationsAPIService UploadCustomEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var emojiName string

		resp, httpRes, err := apiClient.ServerAndOrganizationsAPI.UploadCustomEmoji(context.Background(), emojiName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
