/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateMessageEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMessageEvent{}

// UpdateMessageEvent Event sent when a message's content, topic and/or channel has been edited or when a message's content has a rendering update, such as for an [inline URL preview][inline-url-previews]. Sent to all users who had received the original message.  [inline-url-previews]: https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#inline-url-previews  **Changes**: In Zulip 10.0 (feature level 284), removed the `prev_rendered_content_version` field as it is an internal server implementation detail not used by any client.
type UpdateMessageEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   int32         `json:"id"`
	Type RecipientType `json:"type"`
	// The ID of the user who sent the message.  Is `null` when event is for a rendering update of the original message, such as for an [inline URL preview][inline-url-previews].  **Changes**: As of Zulip 5.0 (feature level 114), this field is present for all `update_message` events. Previously, this field was omitted for [inline URL preview][inline-url-previews] updates.
	UserId NullableInt32 `json:"user_id"`
	// Whether the event only updates the rendered content of the message.  This field should be used by clients to determine if the event only provides a rendering update to the message content, such as for an [inline URL preview][inline-url-previews]. When `true`, the event does not reflect a user-generated edit and does not modify the message history.  **Changes**: New in Zulip 5.0 (feature level 114). Clients can correctly identify these rendering update event with earlier Zulip versions by checking whether the `user_id` field was omitted.
	RenderingOnly bool `json:"rendering_only"`
	// The ID of the message which was edited or updated.  This field should be used to apply content edits to the client's cached message history, or to apply rendered content updates.  If the channel or topic was changed, the set of moved messages is encoded in the separate `message_ids` field, which is guaranteed to include `message_id`.
	MessageId int32 `json:"message_id"`
	// A sorted list of IDs of messages to which any channel or topic changes encoded in this event should be applied.  This list always includes `message_id`, even when there are no channel or topic changes to apply.  These messages are guaranteed to have all been previously sent to channel `stream_id` with topic `orig_subject`, and have been moved to `new_stream_id` with topic `subject` (if those fields are present in the event).  Clients processing these events should update all cached message history associated with the moved messages (including adjusting `unread_msgs` data structures, where the client may not have the message itself in its history) to reflect the new channel and topic.  Content changes should be applied only to the single message indicated by `message_id`.  **Changes**: Before Zulip 11.0 (feature level 393), this list was not guaranteed to be sorted.
	MessageIds []int32 `json:"message_ids"`
	// The user's personal [message flags][message-flags] for the message with ID `message_id` following the edit.  A client application should compare these to the original flags to identify cases where a mention or alert word was added by the edit.  **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned` flag was deprecated in favor of the `stream_wildcard_mentioned` and `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists for backwards compatibility with older clients and equals `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients supporting older server versions should treat this field as a previous name for the `stream_wildcard_mentioned` flag as topic wildcard mentions were not available prior to this feature level.  [message-flags]: /api/update-message-flags#available-flags
	Flags []string `json:"flags"`
	// The time when this message edit operation was processed by the server.  **Changes**: As of Zulip 5.0 (feature level 114), this field is present for all `update_message` events. Previously, this field was omitted for [inline URL preview][inline-url-previews] updates.
	EditTimestamp Timestamp `json:"edit_timestamp"`
	// Only present if the message was edited and originally sent to a channel.  The name of the channel that the message was sent to. Clients are recommended to use the `stream_id` field instead.
	StreamName *string `json:"stream_name,omitempty"`
	// Only present if the message was edited and originally sent to a channel.  The pre-edit channel for all of the messages with IDs in `message_ids`.  **Changes**: As of Zulip 5.0 (feature level 112), this field is present for all edits to a channel message. Previously, it was not present when only the content of the channel message was edited.
	StreamId *int32 `json:"stream_id,omitempty"`
	// Only present if message(s) were moved to a different channel.  The post-edit channel for all of the messages with IDs in `message_ids`.
	NewStreamId *int32 `json:"new_stream_id,omitempty"`
	// Only present if this event moved messages to a different topic and/or channel.  The choice the editing user made about which messages should be affected by a channel/topic edit:  - `\"change_one\"`: Just change the one indicated in `message_id`. - `\"change_later\"`: Change messages in the same topic that had   been sent after this one. - `\"change_all\"`: Change all messages in that topic.  This parameter should be used to decide whether to change navigation and compose box state in response to the edit. For example, if the user was previously in topic narrow, and the topic was edited with `\"change_later\"` or `\"change_all\"`, the Zulip web app will automatically navigate to the new topic narrow. Similarly, a message being composed to the old topic should have its recipient changed to the new topic.  This navigation makes it much more convenient to move content between topics without disruption or messages continuing to be sent to the pre-edit topic by accident.
	PropagateMode *string `json:"propagate_mode,omitempty"`
	// Only present if this event moved messages to a different topic and/or channel.  The pre-edit topic for all of the messages with IDs in `message_ids`.  For clients that don't support the `empty_topic_name` [client capability][client-capabilities], if the actual pre-edit topic name is empty string, this field's value will instead be the value of `realm_empty_topic_display_name` found in the [`POST /register`](zulip.com/api/register-queue response.  **Changes**: Before 10.0 (feature level 334), `empty_topic_name` client capability didn't exist and empty string as the topic name for channel messages wasn't allowed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities
	OrigSubject *string `json:"orig_subject,omitempty"`
	// Only present if this event moved messages to a different topic; this field will not be present when moving messages to the same topic name in a different channel.  The post-edit topic for all of the messages with IDs in `message_ids`.  For clients that don't support the `empty_topic_name` [client capability][client-capabilities], if the actual post-edit topic name is empty string, this field's value will instead be the value of `realm_empty_topic_display_name` found in the [`POST /register`](zulip.com/api/register-queue response.  **Changes**: Before 10.0 (feature level 334), `empty_topic_name` client capability didn't exist and empty string as the topic name for channel messages wasn't allowed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities
	Subject *string `json:"subject,omitempty"`
	// Only present if this event moved messages to a different topic; this field will not be present when moving messages to the same topic name in a different channel.  Data on any links to be included in the `topic` line (these are generated by [custom linkification filter](zulip.com/help/add-a-custom-linkifier that match content in the message's topic.), corresponding to the post-edit topic.  **Changes**: This field contained a list of urls before Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1). Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.
	TopicLinks []UserSettingsUpdateEvent6TopicLinksInner `json:"topic_links,omitempty"`
	// Only present if this event changed the message content.  The original content of the message with ID `message_id` immediately prior to this edit, in the original [Zulip-flavored Markdown](zulip.com/help/format-your-message-using-markdown format.
	OrigContent *string `json:"orig_content,omitempty"`
	// Only present if this event changed the message content.  The original content of the message with ID `message_id` immediately prior to this edit, rendered as HTML.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	OrigRenderedContent *string `json:"orig_rendered_content,omitempty"`
	// Only present if this event changed the message content or updated the message content for an [inline URL preview][inline-url-previews].  The new content of the message with ID `message_id`, in the original [Zulip-flavored Markdown](zulip.com/help/format-your-message-using-markdown format.
	Content *string `json:"content,omitempty"`
	// Only present if this event changed the message content or updated the message content for an [inline URL preview][inline-url-previews].  The new content of the message with ID `message_id`, rendered in HTML.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	RenderedContent *string `json:"rendered_content,omitempty"`
	// Only present if this event changed the message content.  Whether the message with ID `message_id` is now a [/me status message][status-messages].  [status-messages]: /help/format-your-message-using-markdown#status-messages
	IsMeMessage *bool `json:"is_me_message,omitempty"`
}

type _UserSettingsUpdateEvent6 UpdateMessageEvent

// NewUserSettingsUpdateEvent6 instantiates a new UpdateMessageEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsUpdateEvent6(id int32, recipientType RecipientType, userId NullableInt32, renderingOnly bool, messageId int32, messageIds []int32, flags []string, editTimestamp Timestamp) *UpdateMessageEvent {
	this := UpdateMessageEvent{}
	this.Id = id
	this.Type = recipientType
	this.UserId = userId
	this.RenderingOnly = renderingOnly
	this.MessageId = messageId
	this.MessageIds = messageIds
	this.Flags = flags
	this.EditTimestamp = editTimestamp
	return &this
}

// NewUserSettingsUpdateEvent6WithDefaults instantiates a new UpdateMessageEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsUpdateEvent6WithDefaults() *UpdateMessageEvent {
	this := UpdateMessageEvent{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateMessageEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateMessageEvent) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *UpdateMessageEvent) GetType() RecipientType {
	if o == nil {
		var ret RecipientType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetTypeOk() (*RecipientType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateMessageEvent) SetType(v RecipientType) {
	o.Type = v
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UpdateMessageEvent) GetUserId() int32 {
	if o == nil || o.UserId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMessageEvent) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *UpdateMessageEvent) SetUserId(v int32) {
	o.UserId.Set(&v)
}

// GetRenderingOnly returns the RenderingOnly field value
func (o *UpdateMessageEvent) GetRenderingOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RenderingOnly
}

// GetRenderingOnlyOk returns a tuple with the RenderingOnly field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetRenderingOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenderingOnly, true
}

// SetRenderingOnly sets field value
func (o *UpdateMessageEvent) SetRenderingOnly(v bool) {
	o.RenderingOnly = v
}

// GetMessageId returns the MessageId field value
func (o *UpdateMessageEvent) GetMessageId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetMessageIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *UpdateMessageEvent) SetMessageId(v int32) {
	o.MessageId = v
}

// GetMessageIds returns the MessageIds field value
func (o *UpdateMessageEvent) GetMessageIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.MessageIds
}

// GetMessageIdsOk returns a tuple with the MessageIds field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetMessageIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageIds, true
}

// SetMessageIds sets field value
func (o *UpdateMessageEvent) SetMessageIds(v []int32) {
	o.MessageIds = v
}

// GetFlags returns the Flags field value
func (o *UpdateMessageEvent) GetFlags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetFlagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flags, true
}

// SetFlags sets field value
func (o *UpdateMessageEvent) SetFlags(v []string) {
	o.Flags = v
}

// GetEditTimestamp returns the EditTimestamp field value
func (o *UpdateMessageEvent) GetEditTimestamp() Timestamp {
	if o == nil {
		var ret Timestamp
		return ret
	}

	return o.EditTimestamp
}

// GetEditTimestampOk returns a tuple with the EditTimestamp field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetEditTimestampOk() (*Timestamp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EditTimestamp, true
}

// SetEditTimestamp sets field value
func (o *UpdateMessageEvent) SetEditTimestamp(v Timestamp) {
	o.EditTimestamp = v
}

// GetStreamName returns the StreamName field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetStreamName() string {
	if o == nil || IsNil(o.StreamName) {
		var ret string
		return ret
	}
	return *o.StreamName
}

// GetStreamNameOk returns a tuple with the StreamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetStreamNameOk() (*string, bool) {
	if o == nil || IsNil(o.StreamName) {
		return nil, false
	}
	return o.StreamName, true
}

// HasStreamName returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasStreamName() bool {
	if o != nil && !IsNil(o.StreamName) {
		return true
	}

	return false
}

// SetStreamName gets a reference to the given string and assigns it to the StreamName field.
func (o *UpdateMessageEvent) SetStreamName(v string) {
	o.StreamName = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *UpdateMessageEvent) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetNewStreamId returns the NewStreamId field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetNewStreamId() int32 {
	if o == nil || IsNil(o.NewStreamId) {
		var ret int32
		return ret
	}
	return *o.NewStreamId
}

// GetNewStreamIdOk returns a tuple with the NewStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetNewStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NewStreamId) {
		return nil, false
	}
	return o.NewStreamId, true
}

// HasNewStreamId returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasNewStreamId() bool {
	if o != nil && !IsNil(o.NewStreamId) {
		return true
	}

	return false
}

// SetNewStreamId gets a reference to the given int32 and assigns it to the NewStreamId field.
func (o *UpdateMessageEvent) SetNewStreamId(v int32) {
	o.NewStreamId = &v
}

// GetPropagateMode returns the PropagateMode field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetPropagateMode() string {
	if o == nil || IsNil(o.PropagateMode) {
		var ret string
		return ret
	}
	return *o.PropagateMode
}

// GetPropagateModeOk returns a tuple with the PropagateMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetPropagateModeOk() (*string, bool) {
	if o == nil || IsNil(o.PropagateMode) {
		return nil, false
	}
	return o.PropagateMode, true
}

// HasPropagateMode returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasPropagateMode() bool {
	if o != nil && !IsNil(o.PropagateMode) {
		return true
	}

	return false
}

// SetPropagateMode gets a reference to the given string and assigns it to the PropagateMode field.
func (o *UpdateMessageEvent) SetPropagateMode(v string) {
	o.PropagateMode = &v
}

// GetOrigSubject returns the OrigSubject field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetOrigSubject() string {
	if o == nil || IsNil(o.OrigSubject) {
		var ret string
		return ret
	}
	return *o.OrigSubject
}

// GetOrigSubjectOk returns a tuple with the OrigSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetOrigSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.OrigSubject) {
		return nil, false
	}
	return o.OrigSubject, true
}

// HasOrigSubject returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasOrigSubject() bool {
	if o != nil && !IsNil(o.OrigSubject) {
		return true
	}

	return false
}

// SetOrigSubject gets a reference to the given string and assigns it to the OrigSubject field.
func (o *UpdateMessageEvent) SetOrigSubject(v string) {
	o.OrigSubject = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *UpdateMessageEvent) SetSubject(v string) {
	o.Subject = &v
}

// GetTopicLinks returns the TopicLinks field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetTopicLinks() []UserSettingsUpdateEvent6TopicLinksInner {
	if o == nil || IsNil(o.TopicLinks) {
		var ret []UserSettingsUpdateEvent6TopicLinksInner
		return ret
	}
	return o.TopicLinks
}

// GetTopicLinksOk returns a tuple with the TopicLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetTopicLinksOk() ([]UserSettingsUpdateEvent6TopicLinksInner, bool) {
	if o == nil || IsNil(o.TopicLinks) {
		return nil, false
	}
	return o.TopicLinks, true
}

// HasTopicLinks returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasTopicLinks() bool {
	if o != nil && !IsNil(o.TopicLinks) {
		return true
	}

	return false
}

// SetTopicLinks gets a reference to the given []UserSettingsUpdateEvent6TopicLinksInner and assigns it to the TopicLinks field.
func (o *UpdateMessageEvent) SetTopicLinks(v []UserSettingsUpdateEvent6TopicLinksInner) {
	o.TopicLinks = v
}

// GetOrigContent returns the OrigContent field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetOrigContent() string {
	if o == nil || IsNil(o.OrigContent) {
		var ret string
		return ret
	}
	return *o.OrigContent
}

// GetOrigContentOk returns a tuple with the OrigContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetOrigContentOk() (*string, bool) {
	if o == nil || IsNil(o.OrigContent) {
		return nil, false
	}
	return o.OrigContent, true
}

// HasOrigContent returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasOrigContent() bool {
	if o != nil && !IsNil(o.OrigContent) {
		return true
	}

	return false
}

// SetOrigContent gets a reference to the given string and assigns it to the OrigContent field.
func (o *UpdateMessageEvent) SetOrigContent(v string) {
	o.OrigContent = &v
}

// GetOrigRenderedContent returns the OrigRenderedContent field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetOrigRenderedContent() string {
	if o == nil || IsNil(o.OrigRenderedContent) {
		var ret string
		return ret
	}
	return *o.OrigRenderedContent
}

// GetOrigRenderedContentOk returns a tuple with the OrigRenderedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetOrigRenderedContentOk() (*string, bool) {
	if o == nil || IsNil(o.OrigRenderedContent) {
		return nil, false
	}
	return o.OrigRenderedContent, true
}

// HasOrigRenderedContent returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasOrigRenderedContent() bool {
	if o != nil && !IsNil(o.OrigRenderedContent) {
		return true
	}

	return false
}

// SetOrigRenderedContent gets a reference to the given string and assigns it to the OrigRenderedContent field.
func (o *UpdateMessageEvent) SetOrigRenderedContent(v string) {
	o.OrigRenderedContent = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *UpdateMessageEvent) SetContent(v string) {
	o.Content = &v
}

// GetRenderedContent returns the RenderedContent field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetRenderedContent() string {
	if o == nil || IsNil(o.RenderedContent) {
		var ret string
		return ret
	}
	return *o.RenderedContent
}

// GetRenderedContentOk returns a tuple with the RenderedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetRenderedContentOk() (*string, bool) {
	if o == nil || IsNil(o.RenderedContent) {
		return nil, false
	}
	return o.RenderedContent, true
}

// HasRenderedContent returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasRenderedContent() bool {
	if o != nil && !IsNil(o.RenderedContent) {
		return true
	}

	return false
}

// SetRenderedContent gets a reference to the given string and assigns it to the RenderedContent field.
func (o *UpdateMessageEvent) SetRenderedContent(v string) {
	o.RenderedContent = &v
}

// GetIsMeMessage returns the IsMeMessage field value if set, zero value otherwise.
func (o *UpdateMessageEvent) GetIsMeMessage() bool {
	if o == nil || IsNil(o.IsMeMessage) {
		var ret bool
		return ret
	}
	return *o.IsMeMessage
}

// GetIsMeMessageOk returns a tuple with the IsMeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageEvent) GetIsMeMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMeMessage) {
		return nil, false
	}
	return o.IsMeMessage, true
}

// HasIsMeMessage returns a boolean if a field has been set.
func (o *UpdateMessageEvent) HasIsMeMessage() bool {
	if o != nil && !IsNil(o.IsMeMessage) {
		return true
	}

	return false
}

// SetIsMeMessage gets a reference to the given bool and assigns it to the IsMeMessage field.
func (o *UpdateMessageEvent) SetIsMeMessage(v bool) {
	o.IsMeMessage = &v
}

func (o UpdateMessageEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMessageEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["user_id"] = o.UserId.Get()
	toSerialize["rendering_only"] = o.RenderingOnly
	toSerialize["message_id"] = o.MessageId
	toSerialize["message_ids"] = o.MessageIds
	toSerialize["flags"] = o.Flags
	toSerialize["edit_timestamp"] = o.EditTimestamp
	if !IsNil(o.StreamName) {
		toSerialize["stream_name"] = o.StreamName
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.NewStreamId) {
		toSerialize["new_stream_id"] = o.NewStreamId
	}
	if !IsNil(o.PropagateMode) {
		toSerialize["propagate_mode"] = o.PropagateMode
	}
	if !IsNil(o.OrigSubject) {
		toSerialize["orig_subject"] = o.OrigSubject
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TopicLinks) {
		toSerialize["topic_links"] = o.TopicLinks
	}
	if !IsNil(o.OrigContent) {
		toSerialize["orig_content"] = o.OrigContent
	}
	if !IsNil(o.OrigRenderedContent) {
		toSerialize["orig_rendered_content"] = o.OrigRenderedContent
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.RenderedContent) {
		toSerialize["rendered_content"] = o.RenderedContent
	}
	if !IsNil(o.IsMeMessage) {
		toSerialize["is_me_message"] = o.IsMeMessage
	}
	return toSerialize, nil
}

func (o *UpdateMessageEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"user_id",
		"rendering_only",
		"message_id",
		"message_ids",
		"flags",
		"edit_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSettingsUpdateEvent6 := _UserSettingsUpdateEvent6{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSettingsUpdateEvent6)

	if err != nil {
		return err
	}

	*o = UpdateMessageEvent(varUserSettingsUpdateEvent6)

	return err
}

type NullableUserSettingsUpdateEvent6 struct {
	value *UpdateMessageEvent
	isSet bool
}

func (v NullableUserSettingsUpdateEvent6) Get() *UpdateMessageEvent {
	return v.value
}

func (v *NullableUserSettingsUpdateEvent6) Set(val *UpdateMessageEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsUpdateEvent6) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsUpdateEvent6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsUpdateEvent6(val *UpdateMessageEvent) *NullableUserSettingsUpdateEvent6 {
	return &NullableUserSettingsUpdateEvent6{value: val, isSet: true}
}

func (v NullableUserSettingsUpdateEvent6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsUpdateEvent6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
