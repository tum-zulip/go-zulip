/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the TypingEditMessageStopEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypingEditMessageStopEvent{}

// TypingEditMessageStopEvent Event sent when a user stops typing in a textarea to edit the content of a message. See the [edit message typing notifications endpoint](zulip.com/api/set-typing-status-for-message-edit.  Clients requesting `typing_edit_message` event type that have `receives_typing_notifications` enabled will receive this event if they would have been notified if the message's content edit were to be saved (E.g., because they were a direct message recipient or are a subscribe to the channel).  **Changes**: New in Zulip 10.0 (feature level 351). Previously, typing notifications were not available when editing messages.
type TypingEditMessageStopEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The ID of the user who sent the message.
	SenderId *int32 `json:"sender_id,omitempty"`
	// Indicates the message id of the message that is being edited.
	MessageId *int32                             `json:"message_id,omitempty"`
	Recipient *UserSettingsUpdateEvent9Recipient `json:"recipient,omitempty"`
}

// NewRealmUserUpdateEvent0 instantiates a new TypingEditMessageStopEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmUserUpdateEvent0() *TypingEditMessageStopEvent {
	this := TypingEditMessageStopEvent{}
	return &this
}

// NewRealmUserUpdateEvent0WithDefaults instantiates a new TypingEditMessageStopEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmUserUpdateEvent0WithDefaults() *TypingEditMessageStopEvent {
	this := TypingEditMessageStopEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TypingEditMessageStopEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TypingEditMessageStopEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *TypingEditMessageStopEvent) SetOp(v string) {
	o.Op = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetSenderId() int32 {
	if o == nil || IsNil(o.SenderId) {
		var ret int32
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetSenderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SenderId) {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasSenderId() bool {
	if o != nil && !IsNil(o.SenderId) {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given int32 and assigns it to the SenderId field.
func (o *TypingEditMessageStopEvent) SetSenderId(v int32) {
	o.SenderId = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *TypingEditMessageStopEvent) SetMessageId(v int32) {
	o.MessageId = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *TypingEditMessageStopEvent) GetRecipient() UserSettingsUpdateEvent9Recipient {
	if o == nil || IsNil(o.Recipient) {
		var ret UserSettingsUpdateEvent9Recipient
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypingEditMessageStopEvent) GetRecipientOk() (*UserSettingsUpdateEvent9Recipient, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *TypingEditMessageStopEvent) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given UserSettingsUpdateEvent9Recipient and assigns it to the Recipient field.
func (o *TypingEditMessageStopEvent) SetRecipient(v UserSettingsUpdateEvent9Recipient) {
	o.Recipient = &v
}

func (o TypingEditMessageStopEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypingEditMessageStopEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.SenderId) {
		toSerialize["sender_id"] = o.SenderId
	}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	return toSerialize, nil
}

type NullableRealmUserUpdateEvent0 struct {
	value *TypingEditMessageStopEvent
	isSet bool
}

func (v NullableRealmUserUpdateEvent0) Get() *TypingEditMessageStopEvent {
	return v.value
}

func (v *NullableRealmUserUpdateEvent0) Set(val *TypingEditMessageStopEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEvent0) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEvent0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEvent0(val *TypingEditMessageStopEvent) *NullableRealmUserUpdateEvent0 {
	return &NullableRealmUserUpdateEvent0{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEvent0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEvent0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
