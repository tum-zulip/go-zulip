/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmUserUpdateEventPersonOneOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmUserUpdateEventPersonOneOf7{}

// RealmUserUpdateEventPersonOneOf7 When the Zulip API email address of a user changes, either due to the user's email address changing, or due to changes in the user's [email address visibility][help-email-visibility].  [help-email-visibility]: /help/configure-email-visibility
type RealmUserUpdateEventPersonOneOf7 struct {
	// The ID of the user affected by this change.
	UserId *int32 `json:"user_id,omitempty"`
	// The new value of `email` for the user. The client should update any data structures associated with this user to use this new value as the user's Zulip API email address.
	NewEmail *string `json:"new_email,omitempty"`
}

// NewRealmUserUpdateEventPersonOneOf7 instantiates a new RealmUserUpdateEventPersonOneOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmUserUpdateEventPersonOneOf7() *RealmUserUpdateEventPersonOneOf7 {
	this := RealmUserUpdateEventPersonOneOf7{}
	return &this
}

// NewRealmUserUpdateEventPersonOneOf7WithDefaults instantiates a new RealmUserUpdateEventPersonOneOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmUserUpdateEventPersonOneOf7WithDefaults() *RealmUserUpdateEventPersonOneOf7 {
	this := RealmUserUpdateEventPersonOneOf7{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *RealmUserUpdateEventPersonOneOf7) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEventPersonOneOf7) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *RealmUserUpdateEventPersonOneOf7) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *RealmUserUpdateEventPersonOneOf7) SetUserId(v int32) {
	o.UserId = &v
}

// GetNewEmail returns the NewEmail field value if set, zero value otherwise.
func (o *RealmUserUpdateEventPersonOneOf7) GetNewEmail() string {
	if o == nil || IsNil(o.NewEmail) {
		var ret string
		return ret
	}
	return *o.NewEmail
}

// GetNewEmailOk returns a tuple with the NewEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEventPersonOneOf7) GetNewEmailOk() (*string, bool) {
	if o == nil || IsNil(o.NewEmail) {
		return nil, false
	}
	return o.NewEmail, true
}

// HasNewEmail returns a boolean if a field has been set.
func (o *RealmUserUpdateEventPersonOneOf7) HasNewEmail() bool {
	if o != nil && !IsNil(o.NewEmail) {
		return true
	}

	return false
}

// SetNewEmail gets a reference to the given string and assigns it to the NewEmail field.
func (o *RealmUserUpdateEventPersonOneOf7) SetNewEmail(v string) {
	o.NewEmail = &v
}

func (o RealmUserUpdateEventPersonOneOf7) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmUserUpdateEventPersonOneOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.NewEmail) {
		toSerialize["new_email"] = o.NewEmail
	}
	return toSerialize, nil
}

type NullableRealmUserUpdateEventPersonOneOf7 struct {
	value *RealmUserUpdateEventPersonOneOf7
	isSet bool
}

func (v NullableRealmUserUpdateEventPersonOneOf7) Get() *RealmUserUpdateEventPersonOneOf7 {
	return v.value
}

func (v *NullableRealmUserUpdateEventPersonOneOf7) Set(val *RealmUserUpdateEventPersonOneOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEventPersonOneOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEventPersonOneOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEventPersonOneOf7(val *RealmUserUpdateEventPersonOneOf7) *NullableRealmUserUpdateEventPersonOneOf7 {
	return &NullableRealmUserUpdateEventPersonOneOf7{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEventPersonOneOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEventPersonOneOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
