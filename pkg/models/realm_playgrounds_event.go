/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmPlaygroundsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmPlaygroundsEvent{}

// RealmPlaygroundsEvent Event sent to all users in a Zulip organization when the set of configured [code playgrounds](/help/code-blocks#code-playgrounds) for the organization has changed.  **Changes**: New in Zulip 4.0 (feature level 49).
type RealmPlaygroundsEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// An array of dictionaries where each dictionary contains data about a single playground entry.
	RealmPlaygrounds []RealmPlayground `json:"realm_playgrounds,omitempty"`
}

// NewSubscriptionAddEvent2 instantiates a new RealmPlaygroundsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionAddEvent2() *RealmPlaygroundsEvent {
	this := RealmPlaygroundsEvent{}
	return &this
}

// NewSubscriptionAddEvent2WithDefaults instantiates a new RealmPlaygroundsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionAddEvent2WithDefaults() *RealmPlaygroundsEvent {
	this := RealmPlaygroundsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmPlaygroundsEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlaygroundsEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmPlaygroundsEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmPlaygroundsEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmPlaygroundsEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlaygroundsEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmPlaygroundsEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmPlaygroundsEvent) SetType(v string) {
	o.Type = &v
}

// GetRealmPlaygrounds returns the RealmPlaygrounds field value if set, zero value otherwise.
func (o *RealmPlaygroundsEvent) GetRealmPlaygrounds() []RealmPlayground {
	if o == nil || IsNil(o.RealmPlaygrounds) {
		var ret []RealmPlayground
		return ret
	}
	return o.RealmPlaygrounds
}

// GetRealmPlaygroundsOk returns a tuple with the RealmPlaygrounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlaygroundsEvent) GetRealmPlaygroundsOk() ([]RealmPlayground, bool) {
	if o == nil || IsNil(o.RealmPlaygrounds) {
		return nil, false
	}
	return o.RealmPlaygrounds, true
}

// HasRealmPlaygrounds returns a boolean if a field has been set.
func (o *RealmPlaygroundsEvent) HasRealmPlaygrounds() bool {
	if o != nil && !IsNil(o.RealmPlaygrounds) {
		return true
	}

	return false
}

// SetRealmPlaygrounds gets a reference to the given []RealmPlayground and assigns it to the RealmPlaygrounds field.
func (o *RealmPlaygroundsEvent) SetRealmPlaygrounds(v []RealmPlayground) {
	o.RealmPlaygrounds = v
}

func (o RealmPlaygroundsEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmPlaygroundsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RealmPlaygrounds) {
		toSerialize["realm_playgrounds"] = o.RealmPlaygrounds
	}
	return toSerialize, nil
}

type NullableSubscriptionAddEvent2 struct {
	value *RealmPlaygroundsEvent
	isSet bool
}

func (v NullableSubscriptionAddEvent2) Get() *RealmPlaygroundsEvent {
	return v.value
}

func (v *NullableSubscriptionAddEvent2) Set(val *RealmPlaygroundsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionAddEvent2) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionAddEvent2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionAddEvent2(val *RealmPlaygroundsEvent) *NullableSubscriptionAddEvent2 {
	return &NullableSubscriptionAddEvent2{value: val, isSet: true}
}

func (v NullableSubscriptionAddEvent2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionAddEvent2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
