/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStatus{}

// UserStatus struct for UserStatus
type UserStatus struct {
	// If present, the user has marked themself \"away\".  **Changes**: Deprecated in Zulip 6.0 (feature level 148); starting with that feature level, `away` is a legacy way to access the user's `presence_enabled` setting, with `away = !presence_enabled`. To be removed in a future release.
	// Deprecated
	Away *bool `json:"away,omitempty"`
	// If present, the text content of the user's status message.
	StatusText *string `json:"status_text,omitempty"`
	// If present, the name for the emoji to associate with the user's status.  **Changes**: New in Zulip 5.0 (feature level 86).
	EmojiName *string `json:"emoji_name,omitempty"`
	// If present, a unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  **Changes**: New in Zulip 5.0 (feature level 86).
	EmojiCode *string `json:"emoji_code,omitempty"`
	// If present, a string indicating the type of emoji. Each emoji `reaction_type` has an independent namespace for values of `emoji_code`.  Must be one of the following values:  - `unicode_emoji` : In this namespace, `emoji_code` will be a   dash-separated hex encoding of the sequence of Unicode codepoints   that define this emoji in the Unicode specification.  - `realm_emoji` : In this namespace, `emoji_code` will be the ID of   the uploaded [custom emoji](/help/custom-emoji).  - `zulip_extra_emoji` : These are special emoji included with Zulip.   In this namespace, `emoji_code` will be the name of the emoji (e.g.   \"zulip\").  **Changes**: New in Zulip 5.0 (feature level 86).
	ReactionType *string `json:"reaction_type,omitempty"`
}

// NewUserStatus instantiates a new UserStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStatus() *UserStatus {
	this := UserStatus{}
	return &this
}

// NewUserStatusWithDefaults instantiates a new UserStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStatusWithDefaults() *UserStatus {
	this := UserStatus{}
	return &this
}

// GetAway returns the Away field value if set, zero value otherwise.
// Deprecated
func (o *UserStatus) GetAway() bool {
	if o == nil || IsNil(o.Away) {
		var ret bool
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserStatus) GetAwayOk() (*bool, bool) {
	if o == nil || IsNil(o.Away) {
		return nil, false
	}
	return o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *UserStatus) HasAway() bool {
	if o != nil && !IsNil(o.Away) {
		return true
	}

	return false
}

// SetAway gets a reference to the given bool and assigns it to the Away field.
// Deprecated
func (o *UserStatus) SetAway(v bool) {
	o.Away = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *UserStatus) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStatus) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *UserStatus) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *UserStatus) SetStatusText(v string) {
	o.StatusText = &v
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *UserStatus) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName) {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStatus) GetEmojiNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *UserStatus) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *UserStatus) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *UserStatus) GetEmojiCode() string {
	if o == nil || IsNil(o.EmojiCode) {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStatus) GetEmojiCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *UserStatus) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *UserStatus) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *UserStatus) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStatus) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *UserStatus) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *UserStatus) SetReactionType(v string) {
	o.ReactionType = &v
}

func (o UserStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Away) {
		toSerialize["away"] = o.Away
	}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}
	if !IsNil(o.EmojiName) {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if !IsNil(o.EmojiCode) {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	return toSerialize, nil
}

type NullableUserStatus struct {
	value *UserStatus
	isSet bool
}

func (v NullableUserStatus) Get() *UserStatus {
	return v.value
}

func (v *NullableUserStatus) Set(val *UserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatus(val *UserStatus) *NullableUserStatus {
	return &NullableUserStatus{value: val, isSet: true}
}

func (v NullableUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
