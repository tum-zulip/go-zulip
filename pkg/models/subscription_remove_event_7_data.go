/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SubscriptionRemoveEvent7Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionRemoveEvent7Data{}

// SubscriptionRemoveEvent7Data An object containing the properties that have changed.  **Changes**: In Zulip 10.0 (feature level 316), `edit_topic_policy` property was removed and replaced by `can_move_messages_between_topics_group` realm setting.  In Zulip 7.0 (feature level 183), the `community_topic_editing_limit_seconds` property was removed. It was documented as potentially returned as a changed property in this event, but in fact it was only ever returned in the [`POST /register`](/api/register-queue) response.  Before Zulip 6.0 (feature level 150), on changing any of `allow_message_editing`, `message_content_edit_limit_seconds`, or `edit_topic_policy` settings, this object included all the three settings irrespective of which of these settings were changed. Now, a separate event is sent for each changed setting.
type SubscriptionRemoveEvent7Data struct {
	// Whether this organization's [message edit policy][config-message-editing] allows editing the content of messages.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  [config-message-editing]: /help/restrict-message-editing-and-deletion
	AllowMessageEditing *bool `json:"allow_message_editing,omitempty"`
	// Dictionary of authentication method keys mapped to dictionaries that describe the properties of the named authentication method for the organization - its enabled status and availability for use by the organization.  Clients should use this to implement server-settings UI to change which methods are enabled for the organization. For authentication UI itself, clients should use the pre-authentication metadata returned by [`GET /server_settings`](/api/get-server-settings).  **Changes**: In Zulip 9.0 (feature level 243), the values in this dictionary were changed. Previously, the values were a simple boolean indicating whether the backend is enabled or not.
	AuthenticationMethods               *map[string]RealmAuthenticationMethod `json:"authentication_methods,omitempty"`
	CanAccessAllUsersGroup              *GroupSettingValue                    `json:"can_access_all_users_group,omitempty"`
	CanCreateGroups                     *GroupSettingValue                    `json:"can_create_groups,omitempty"`
	CanCreateBotsGroup                  *GroupSettingValue                    `json:"can_create_bots_group,omitempty"`
	CanCreateWriteOnlyBotsGroup         *GroupSettingValue                    `json:"can_create_write_only_bots_group,omitempty"`
	CanCreatePublicChannelGroup         *GroupSettingValue                    `json:"can_create_public_channel_group,omitempty"`
	CanCreatePrivateChannelGroup        *GroupSettingValue                    `json:"can_create_private_channel_group,omitempty"`
	CanCreateWebPublicChannelGroup      *GroupSettingValue                    `json:"can_create_web_public_channel_group,omitempty"`
	CanAddCustomEmojiGroup              *GroupSettingValue                    `json:"can_add_custom_emoji_group,omitempty"`
	CanAddSubscribersGroup              *GroupSettingValue                    `json:"can_add_subscribers_group,omitempty"`
	CanDeleteAnyMessageGroup            *GroupSettingValue                    `json:"can_delete_any_message_group,omitempty"`
	CanDeleteOwnMessageGroup            *GroupSettingValue                    `json:"can_delete_own_message_group,omitempty"`
	CanSetDeleteMessagePolicyGroup      *GroupSettingValue                    `json:"can_set_delete_message_policy_group,omitempty"`
	CanSetTopicsPolicyGroup             *GroupSettingValue                    `json:"can_set_topics_policy_group,omitempty"`
	CanInviteUsersGroup                 *GroupSettingValue                    `json:"can_invite_users_group,omitempty"`
	CanMentionManyUsersGroup            *GroupSettingValue                    `json:"can_mention_many_users_group,omitempty"`
	CanMoveMessagesBetweenChannelsGroup *GroupSettingValue                    `json:"can_move_messages_between_channels_group,omitempty"`
	CanMoveMessagesBetweenTopicsGroup   *GroupSettingValue                    `json:"can_move_messages_between_topics_group,omitempty"`
	CanResolveTopicsGroup               *GroupSettingValue                    `json:"can_resolve_topics_group,omitempty"`
	CanManageAllGroups                  *GroupSettingValue                    `json:"can_manage_all_groups,omitempty"`
	CanManageBillingGroup               *GroupSettingValue                    `json:"can_manage_billing_group,omitempty"`
	CanSummarizeTopicsGroup             *GroupSettingValue                    `json:"can_summarize_topics_group,omitempty"`
	CreateMultiuseInviteGroup           *GroupSettingValue                    `json:"create_multiuse_invite_group,omitempty"`
	// The default pygments language code to be used for code blocks in this organization. If an empty string, no default has been set.  **Changes**: Prior to Zulip 8.0 (feature level 195), a server bug meant that both `null` and an empty string could represent that no default was set for this realm setting in the [`POST /register`](/api/register-queue) response. The documentation for both that endpoint and this event incorrectly stated that the only representation for no default language was `null`. This event in fact uses the empty string to indicate that no default has been set in all server versions.
	DefaultCodeBlockLanguage *string `json:"default_code_block_language,omitempty"`
	// The default language for the organization.
	DefaultLanguage *string `json:"default_language,omitempty"`
	// The description of the organization, used on login and registration pages.
	Description *string `json:"description,omitempty"`
	// Whether the organization has enabled [weekly digest emails](/help/digest-emails).
	DigestEmailsEnabled *bool `json:"digest_emails_enabled,omitempty"`
	// The day of the week when the organization will send its weekly digest email to inactive users.
	DigestWeekday                *int32             `json:"digest_weekday,omitempty"`
	DirectMessageInitiatorGroup  *GroupSettingValue `json:"direct_message_initiator_group,omitempty"`
	DirectMessagePermissionGroup *GroupSettingValue `json:"direct_message_permission_group,omitempty"`
	// Whether the organization disallows disposable email addresses.
	DisallowDisposableEmailAddresses *bool `json:"disallow_disposable_email_addresses,omitempty"`
	// Whether users are allowed to change their own email address in this organization. This is typically disabled for organizations that synchronize accounts from LDAP or a similar corporate database.
	EmailChangesDisabled *bool `json:"email_changes_disabled,omitempty"`
	// Whether read receipts is enabled in the organization or not.  If disabled, read receipt data will be unavailable to clients, regardless of individual users' personal read receipt settings. See also the `send_read_receipts` setting within `realm_user_settings_defaults`.  **Changes**: New in Zulip 6.0 (feature level 137).
	EnableReadReceipts *bool `json:"enable_read_receipts,omitempty"`
	// Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions) this organization are required to have an email address in one of the `realm_domains` configured for the organization.
	EmailsRestrictedToDomains *bool `json:"emails_restricted_to_domains,omitempty"`
	// Whether clients should show a warning when a user is composing a DM to a guest user in this organization.  **Changes**: New in Zulip 10.0 (feature level 348).
	EnableGuestUserDmWarning *bool `json:"enable_guest_user_dm_warning,omitempty"`
	// Whether clients should display \"(guest)\" after the names of guest users to prominently highlight their status.  **Changes**: New in Zulip 8.0 (feature level 216).
	EnableGuestUserIndicator *bool `json:"enable_guest_user_indicator,omitempty"`
	// Whether web-public channels are enabled in this organization.  Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings] is enabled on the Zulip server. See also the `can_create_web_public_channel_group` realm setting.  [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html  **Changes**: New in Zulip 5.0 (feature level 109).
	EnableSpectatorAccess *bool `json:"enable_spectator_access,omitempty"`
	// Maximum rating of the GIFs that will be retrieved from GIPHY.  **Changes**: New in Zulip 4.0 (feature level 55).
	GiphyRating *int32 `json:"giphy_rating,omitempty"`
	// String indicating whether the organization's [profile icon](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's icon.  - \"G\" means generated by Gravatar (the default). - \"U\" means uploaded by an organization administrator.
	IconSource *string `json:"icon_source,omitempty"`
	// The URL of the organization's [profile icon](/help/create-your-organization-profile).
	IconUrl *string `json:"icon_url,omitempty"`
	// Whether this organization has been configured to enable [previews of linked images](/help/image-video-and-website-previews).
	InlineImagePreview *bool `json:"inline_image_preview,omitempty"`
	// Whether this organization has been configured to enable [previews of linked websites](/help/image-video-and-website-previews).
	InlineUrlEmbedPreview *bool `json:"inline_url_embed_preview,omitempty"`
	// Whether an invitation is required to join this organization.
	InviteRequired *bool `json:"invite_required,omitempty"`
	// The URL of the custom Jitsi Meet server configured in this organization's settings.  `null`, the default, means that the organization is using the should use the server-level configuration, `server_jitsi_server_url`.  **Changes**: New in Zulip 8.0 (feature level 212). Previously, this was only available as a server-level configuration, and required a server restart to change.
	JitsiServerUrl NullableString `json:"jitsi_server_url,omitempty"`
	// String indicating whether the organization's [profile wide logo](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's wide logo.  - \"D\" means the logo is the default Zulip logo. - \"U\" means uploaded by an organization administrator.
	LogoSource *string `json:"logo_source,omitempty"`
	// The URL of the organization's wide logo configured in the [organization profile](/help/create-your-organization-profile).
	LogoUrl *string `json:"logo_url,omitempty"`
	// The organization's default policy for sending channel messages to the [empty \"general chat\" topic](/help/general-chat-topic).  - `\"allow_empty_topic\"`: Channel messages can be sent to the empty topic. - `\"disable_empty_topic\"`: Channel messages cannot be sent to the empty topic.  **Changes**: New in Zulip 11.0 (feature level 392). Previously, this was controlled by the boolean realm `mandatory_topics` setting, which is now deprecated.
	TopicsPolicy *string `json:"topics_policy,omitempty"`
	// Whether [topics are required](/help/require-topics) for messages in this organization.  **Changes**: Deprecated in Zulip 11.0 (feature level 392). This is now controlled by the realm `topics_policy` setting.
	// Deprecated
	MandatoryTopics *bool `json:"mandatory_topics,omitempty"`
	// The new maximum file size that can be uploaded to this Zulip organization.  **Changes**: New in Zulip 10.0 (feature level 306). Previously, this field of the core state did not support being updated via the events system, as it was typically hardcoded for a given Zulip installation.
	MaxFileUploadSizeMib *int32 `json:"max_file_upload_size_mib,omitempty"`
	// Whether notification emails in this organization are allowed to contain Zulip the message content, or simply indicate that a new message was sent.
	MessageContentAllowedInEmailNotifications *bool `json:"message_content_allowed_in_email_notifications,omitempty"`
	// Messages sent more than this many seconds ago cannot be deleted with this organization's [message deletion policy](/help/restrict-message-editing-and-deletion).  Will not be 0. A `null` value means no limit: messages can be deleted regardless of how long ago they were sent.  **Changes**: No limit was represented using the special value `0` before Zulip 5.0 (feature level 100).
	MessageContentDeleteLimitSeconds NullableInt32 `json:"message_content_delete_limit_seconds,omitempty"`
	// Messages sent more than this many seconds ago cannot be edited with this organization's [message edit policy](/help/restrict-message-editing-and-deletion).  Will not be `0`. A `null` value means no limit, so messages can be edited regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: Before Zulip 6.0 (feature level 138), no limit was represented using the special value `0`.
	MessageContentEditLimitSeconds NullableInt32 `json:"message_content_edit_limit_seconds,omitempty"`
	// Which type of message edit history is configured to allow users to access [message edit history](/help/view-a-messages-edit-history).  - \"all\" = All edit history is visible. - \"moves\" = Only moves are visible. - \"none\" = No edit history is visible.  **Changes**: New in Zulip 10.0 (feature level 358), replacing the previous `allow_edit_history` boolean setting; `true` corresponds to `all`, and `false` to `none`.
	MessageEditHistoryVisibilityPolicy *string `json:"message_edit_history_visibility_policy,omitempty"`
	// The ID of the private channel to which messages flagged by users for moderation are sent. Moderators can use this channel to review and act on reported content.  Will be `-1` if moderation requests are disabled.  Clients should check whether moderation requests are disabled to determine whether to present a \"report message\" feature in their UI within a given organization.  **Changes**: New in Zulip 10.0 (feature level 331). Previously, no \"report message\" features existed in Zulip.
	ModerationRequestChannelId *int32 `json:"moderation_request_channel_id,omitempty"`
	// Messages sent more than this many seconds ago cannot be moved within a channel to another topic by users who have permission to do so based on this organization's [topic edit policy](/help/restrict-moving-messages). This setting does not affect moderators and administrators.  Will not be `0`. A `null` value means no limit, so message topics can be edited regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: New in Zulip 7.0 (feature level 162). Previously, this time limit was always 72 hours for users who were not administrators or moderators.
	MoveMessagesWithinStreamLimitSeconds NullableInt32 `json:"move_messages_within_stream_limit_seconds,omitempty"`
	// Messages sent more than this many seconds ago cannot be moved between channels by users who have permission to do so based on this organization's [message move policy](/help/restrict-moving-messages). This setting does not affect moderators and administrators.  Will not be `0`. A `null` value means no limit, so messages can be moved regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: New in Zulip 7.0 (feature level 162). Previously, there was no time limit for moving messages between channels for users with permission to do so.
	MoveMessagesBetweenStreamsLimitSeconds NullableInt32 `json:"move_messages_between_streams_limit_seconds,omitempty"`
	// The name of the organization, used in login pages etc.
	Name *string `json:"name,omitempty"`
	// Indicates whether users are [allowed to change](/help/restrict-name-and-email-changes) their name via the Zulip UI in this organization. Typically disabled in organizations syncing this type of account information from an external user database like LDAP.
	NameChangesDisabled *bool `json:"name_changes_disabled,omitempty"`
	// String indicating whether the organization's dark theme [profile wide logo](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's wide logo.  - \"D\" means the logo is the default Zulip logo. - \"U\" means uploaded by an organization administrator.
	NightLogoSource *string `json:"night_logo_source,omitempty"`
	// The URL of the organization's dark theme wide-format logo configured in the [organization profile](/help/create-your-organization-profile).
	NightLogoUrl *string `json:"night_logo_url,omitempty"`
	// The ID of the channel to which automated messages announcing the [creation of new channels][new-channel-announce] are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  [new-channel-announce]: /help/configure-automated-notices#new-channel-announcements  **Changes**: In Zulip 9.0 (feature level 241), renamed `notifications_stream_id` to `new_stream_announcements_stream_id`.
	NewStreamAnnouncementsStreamId *int32 `json:"new_stream_announcements_stream_id,omitempty"`
	// The [organization type](/help/organization-type) for the realm.  - 0 = Unspecified - 10 = Business - 20 = Open-source project - 30 = Education (non-profit) - 35 = Education (for-profit) - 40 = Research - 50 = Event or conference - 60 = Non-profit (registered) - 70 = Government - 80 = Political group - 90 = Community - 100 = Personal - 1000 = Other  **Changes**: New in Zulip 6.0 (feature level 128).
	OrgType *int32 `json:"org_type,omitempty"`
	// The plan type of the organization.  - 1 = Self-hosted organization (SELF_HOSTED) - 2 = Zulip Cloud free plan (LIMITED) - 3 = Zulip Cloud Standard plan (STANDARD) - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
	PlanType *int32 `json:"plan_type,omitempty"`
	// Whether online presence of other users is shown in this organization.
	PresenceDisabled *bool `json:"presence_disabled,omitempty"`
	// Whether push notifications are enabled for this organization. Typically `true` for Zulip Cloud and self-hosted realms that have a valid registration for the [Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html), and `false` for self-hosted servers that do not.  **Changes**: New in Zulip 8.0 (feature level 231). Previously, this value was never updated via events.
	PushNotificationsEnabled *bool `json:"push_notifications_enabled,omitempty"`
	// If the server expects the realm's push notifications access to end at a definite time in the future, the time at which this is expected to happen. Mobile clients should use this field to display warnings to users when the indicated timestamp is near.  **Changes**: New in Zulip 8.0 (feature level 231).
	PushNotificationsEnabledEndTimestamp NullableInt32 `json:"push_notifications_enabled_end_timestamp,omitempty"`
	// Whether this realm is configured to disallow sending mobile push notifications with message content through the legacy mobile push notifications APIs. The new API uses end-to-end encryption to protect message content and metadata from being accessible to the push bouncer service, APNs, and FCM. Clients that support the new E2EE API will use it automatically regardless of this setting.  If `true`, mobile push notifications sent to clients that lack support for E2EE push notifications will always have \"New message\" as their content. Note that these legacy mobile notifications will still contain metadata, which may include the message's ID, the sender's name, email address, and avatar.  In a future release, once the official mobile apps have implemented fully validated their E2EE protocol support, this setting will become strict, and disable the legacy protocol entirely.  **Changes**: New in Zulip 11.0 (feature level 409). Previously, this behavior was available only via the `PUSH_NOTIFICATION_REDACT_CONTENT` global server setting.
	RequireE2eePushNotifications *bool `json:"require_e2ee_push_notifications,omitempty"`
	// Indicates whether the organization is configured to require users to have unique full names. If true, the server will reject attempts to create a new user, or change the name of an existing user, where doing so would lead to two users whose names are identical modulo case and unicode normalization.  **Changes**: New in Zulip 9.0 (feature level 246). Previously, the Zulip server could not be configured to enforce unique names.
	RequireUniqueNames *bool `json:"require_unique_names,omitempty"`
	// Whether or not this organization is configured to send the standard Zulip [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
	SendWelcomeEmails *bool `json:"send_welcome_emails,omitempty"`
	// The ID of the channel to which automated messages announcing that [new users have joined the organization][new-user-announce] are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  [new-user-announce]: /help/configure-automated-notices#new-user-announcements  **Changes**: In Zulip 9.0 (feature level 241), renamed `signup_notifications_stream_id` to `signup_announcements_stream_id`.
	SignupAnnouncementsStreamId *int32 `json:"signup_announcements_stream_id,omitempty"`
	// The new upload quota for the Zulip organization.  If `null`, there is no limit.  **Changes**: New in Zulip 10.0 (feature level 306). Previously, this was present changed via an `upload_quota` field in `extra_data` property of [realm/update](#realm-update) event format for `plan_type` events.
	UploadQuotaMib NullableInt32 `json:"upload_quota_mib,omitempty"`
	// The configured [video call provider](/help/configure-call-provider) for the organization.  - 0 = None - 1 = Jitsi Meet - 3 = Zoom (User OAuth integration) - 4 = BigBlueButton - 5 = Zoom (Server to Server OAuth integration)  Note that only one of the [Zoom integrations][zoom-video-calls] can be configured on a Zulip server.  **Changes**: In Zulip 10.0 (feature level 353), added the Zoom Server to Server OAuth option.  In Zulip 3.0 (feature level 1), added the None option to disable video call UI.  [zoom-video-calls]: https://zulip.readthedocs.io/en/latest/production/video-calls.html#zoom
	VideoChatProvider *int32 `json:"video_chat_provider,omitempty"`
	// Members whose accounts have been created at least this many days ago will be treated as [full members][calc-full-member] for the purpose of settings that restrict access to new members.  [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	WaitingPeriodThreshold *int32 `json:"waiting_period_threshold,omitempty"`
	// Whether the organization has given permission to be advertised in the Zulip [communities directory](/help/communities-directory).  **Changes**: New in Zulip 6.0 (feature level 129).
	WantAdvertiseInCommunitiesDirectory *bool `json:"want_advertise_in_communities_directory,omitempty"`
	// This organization's configured custom message for Welcome Bot to send to new user accounts, in Zulip Markdown format.  Maximum length is 8000 characters.  **Changes**: New in Zulip 11.0 (feature level 416).
	WelcomeMessageCustomText *string `json:"welcome_message_custom_text,omitempty"`
	// The ID of the channel to which automated messages announcing new features or other end-user updates about the Zulip software are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  **Changes**: New in Zulip 9.0 (feature level 242).
	ZulipUpdateAnnouncementsStreamId *int32 `json:"zulip_update_announcements_stream_id,omitempty"`
}

// NewSubscriptionRemoveEvent7Data instantiates a new SubscriptionRemoveEvent7Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRemoveEvent7Data() *SubscriptionRemoveEvent7Data {
	this := SubscriptionRemoveEvent7Data{}
	return &this
}

// NewSubscriptionRemoveEvent7DataWithDefaults instantiates a new SubscriptionRemoveEvent7Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRemoveEvent7DataWithDefaults() *SubscriptionRemoveEvent7Data {
	this := SubscriptionRemoveEvent7Data{}
	return &this
}

// GetAllowMessageEditing returns the AllowMessageEditing field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetAllowMessageEditing() bool {
	if o == nil || IsNil(o.AllowMessageEditing) {
		var ret bool
		return ret
	}
	return *o.AllowMessageEditing
}

// GetAllowMessageEditingOk returns a tuple with the AllowMessageEditing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetAllowMessageEditingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMessageEditing) {
		return nil, false
	}
	return o.AllowMessageEditing, true
}

// HasAllowMessageEditing returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasAllowMessageEditing() bool {
	if o != nil && !IsNil(o.AllowMessageEditing) {
		return true
	}

	return false
}

// SetAllowMessageEditing gets a reference to the given bool and assigns it to the AllowMessageEditing field.
func (o *SubscriptionRemoveEvent7Data) SetAllowMessageEditing(v bool) {
	o.AllowMessageEditing = &v
}

// GetAuthenticationMethods returns the AuthenticationMethods field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetAuthenticationMethods() map[string]RealmAuthenticationMethod {
	if o == nil || IsNil(o.AuthenticationMethods) {
		var ret map[string]RealmAuthenticationMethod
		return ret
	}
	return *o.AuthenticationMethods
}

// GetAuthenticationMethodsOk returns a tuple with the AuthenticationMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetAuthenticationMethodsOk() (*map[string]RealmAuthenticationMethod, bool) {
	if o == nil || IsNil(o.AuthenticationMethods) {
		return nil, false
	}
	return o.AuthenticationMethods, true
}

// HasAuthenticationMethods returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasAuthenticationMethods() bool {
	if o != nil && !IsNil(o.AuthenticationMethods) {
		return true
	}

	return false
}

// SetAuthenticationMethods gets a reference to the given map[string]RealmAuthenticationMethod and assigns it to the AuthenticationMethods field.
func (o *SubscriptionRemoveEvent7Data) SetAuthenticationMethods(v map[string]RealmAuthenticationMethod) {
	o.AuthenticationMethods = &v
}

// GetCanAccessAllUsersGroup returns the CanAccessAllUsersGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanAccessAllUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAccessAllUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAccessAllUsersGroup
}

// GetCanAccessAllUsersGroupOk returns a tuple with the CanAccessAllUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanAccessAllUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAccessAllUsersGroup) {
		return nil, false
	}
	return o.CanAccessAllUsersGroup, true
}

// HasCanAccessAllUsersGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanAccessAllUsersGroup() bool {
	if o != nil && !IsNil(o.CanAccessAllUsersGroup) {
		return true
	}

	return false
}

// SetCanAccessAllUsersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAccessAllUsersGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanAccessAllUsersGroup(v GroupSettingValue) {
	o.CanAccessAllUsersGroup = &v
}

// GetCanCreateGroups returns the CanCreateGroups field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateGroups() GroupSettingValue {
	if o == nil || IsNil(o.CanCreateGroups) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreateGroups
}

// GetCanCreateGroupsOk returns a tuple with the CanCreateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateGroupsOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreateGroups) {
		return nil, false
	}
	return o.CanCreateGroups, true
}

// HasCanCreateGroups returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreateGroups() bool {
	if o != nil && !IsNil(o.CanCreateGroups) {
		return true
	}

	return false
}

// SetCanCreateGroups gets a reference to the given GroupSettingValue and assigns it to the CanCreateGroups field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreateGroups(v GroupSettingValue) {
	o.CanCreateGroups = &v
}

// GetCanCreateBotsGroup returns the CanCreateBotsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateBotsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanCreateBotsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreateBotsGroup
}

// GetCanCreateBotsGroupOk returns a tuple with the CanCreateBotsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateBotsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreateBotsGroup) {
		return nil, false
	}
	return o.CanCreateBotsGroup, true
}

// HasCanCreateBotsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreateBotsGroup() bool {
	if o != nil && !IsNil(o.CanCreateBotsGroup) {
		return true
	}

	return false
}

// SetCanCreateBotsGroup gets a reference to the given GroupSettingValue and assigns it to the CanCreateBotsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreateBotsGroup(v GroupSettingValue) {
	o.CanCreateBotsGroup = &v
}

// GetCanCreateWriteOnlyBotsGroup returns the CanCreateWriteOnlyBotsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateWriteOnlyBotsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanCreateWriteOnlyBotsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreateWriteOnlyBotsGroup
}

// GetCanCreateWriteOnlyBotsGroupOk returns a tuple with the CanCreateWriteOnlyBotsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateWriteOnlyBotsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreateWriteOnlyBotsGroup) {
		return nil, false
	}
	return o.CanCreateWriteOnlyBotsGroup, true
}

// HasCanCreateWriteOnlyBotsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreateWriteOnlyBotsGroup() bool {
	if o != nil && !IsNil(o.CanCreateWriteOnlyBotsGroup) {
		return true
	}

	return false
}

// SetCanCreateWriteOnlyBotsGroup gets a reference to the given GroupSettingValue and assigns it to the CanCreateWriteOnlyBotsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreateWriteOnlyBotsGroup(v GroupSettingValue) {
	o.CanCreateWriteOnlyBotsGroup = &v
}

// GetCanCreatePublicChannelGroup returns the CanCreatePublicChannelGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreatePublicChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanCreatePublicChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreatePublicChannelGroup
}

// GetCanCreatePublicChannelGroupOk returns a tuple with the CanCreatePublicChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreatePublicChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreatePublicChannelGroup) {
		return nil, false
	}
	return o.CanCreatePublicChannelGroup, true
}

// HasCanCreatePublicChannelGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreatePublicChannelGroup() bool {
	if o != nil && !IsNil(o.CanCreatePublicChannelGroup) {
		return true
	}

	return false
}

// SetCanCreatePublicChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanCreatePublicChannelGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreatePublicChannelGroup(v GroupSettingValue) {
	o.CanCreatePublicChannelGroup = &v
}

// GetCanCreatePrivateChannelGroup returns the CanCreatePrivateChannelGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreatePrivateChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanCreatePrivateChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreatePrivateChannelGroup
}

// GetCanCreatePrivateChannelGroupOk returns a tuple with the CanCreatePrivateChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreatePrivateChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreatePrivateChannelGroup) {
		return nil, false
	}
	return o.CanCreatePrivateChannelGroup, true
}

// HasCanCreatePrivateChannelGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreatePrivateChannelGroup() bool {
	if o != nil && !IsNil(o.CanCreatePrivateChannelGroup) {
		return true
	}

	return false
}

// SetCanCreatePrivateChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanCreatePrivateChannelGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreatePrivateChannelGroup(v GroupSettingValue) {
	o.CanCreatePrivateChannelGroup = &v
}

// GetCanCreateWebPublicChannelGroup returns the CanCreateWebPublicChannelGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateWebPublicChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanCreateWebPublicChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanCreateWebPublicChannelGroup
}

// GetCanCreateWebPublicChannelGroupOk returns a tuple with the CanCreateWebPublicChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanCreateWebPublicChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanCreateWebPublicChannelGroup) {
		return nil, false
	}
	return o.CanCreateWebPublicChannelGroup, true
}

// HasCanCreateWebPublicChannelGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanCreateWebPublicChannelGroup() bool {
	if o != nil && !IsNil(o.CanCreateWebPublicChannelGroup) {
		return true
	}

	return false
}

// SetCanCreateWebPublicChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanCreateWebPublicChannelGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanCreateWebPublicChannelGroup(v GroupSettingValue) {
	o.CanCreateWebPublicChannelGroup = &v
}

// GetCanAddCustomEmojiGroup returns the CanAddCustomEmojiGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanAddCustomEmojiGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddCustomEmojiGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddCustomEmojiGroup
}

// GetCanAddCustomEmojiGroupOk returns a tuple with the CanAddCustomEmojiGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanAddCustomEmojiGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddCustomEmojiGroup) {
		return nil, false
	}
	return o.CanAddCustomEmojiGroup, true
}

// HasCanAddCustomEmojiGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanAddCustomEmojiGroup() bool {
	if o != nil && !IsNil(o.CanAddCustomEmojiGroup) {
		return true
	}

	return false
}

// SetCanAddCustomEmojiGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddCustomEmojiGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanAddCustomEmojiGroup(v GroupSettingValue) {
	o.CanAddCustomEmojiGroup = &v
}

// GetCanAddSubscribersGroup returns the CanAddSubscribersGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanAddSubscribersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddSubscribersGroup
}

// GetCanAddSubscribersGroupOk returns a tuple with the CanAddSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanAddSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		return nil, false
	}
	return o.CanAddSubscribersGroup, true
}

// HasCanAddSubscribersGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanAddSubscribersGroup() bool {
	if o != nil && !IsNil(o.CanAddSubscribersGroup) {
		return true
	}

	return false
}

// SetCanAddSubscribersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddSubscribersGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanAddSubscribersGroup(v GroupSettingValue) {
	o.CanAddSubscribersGroup = &v
}

// GetCanDeleteAnyMessageGroup returns the CanDeleteAnyMessageGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanDeleteAnyMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteAnyMessageGroup
}

// GetCanDeleteAnyMessageGroupOk returns a tuple with the CanDeleteAnyMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanDeleteAnyMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		return nil, false
	}
	return o.CanDeleteAnyMessageGroup, true
}

// HasCanDeleteAnyMessageGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanDeleteAnyMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteAnyMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteAnyMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteAnyMessageGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanDeleteAnyMessageGroup(v GroupSettingValue) {
	o.CanDeleteAnyMessageGroup = &v
}

// GetCanDeleteOwnMessageGroup returns the CanDeleteOwnMessageGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanDeleteOwnMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteOwnMessageGroup
}

// GetCanDeleteOwnMessageGroupOk returns a tuple with the CanDeleteOwnMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanDeleteOwnMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		return nil, false
	}
	return o.CanDeleteOwnMessageGroup, true
}

// HasCanDeleteOwnMessageGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanDeleteOwnMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteOwnMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteOwnMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteOwnMessageGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanDeleteOwnMessageGroup(v GroupSettingValue) {
	o.CanDeleteOwnMessageGroup = &v
}

// GetCanSetDeleteMessagePolicyGroup returns the CanSetDeleteMessagePolicyGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanSetDeleteMessagePolicyGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSetDeleteMessagePolicyGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSetDeleteMessagePolicyGroup
}

// GetCanSetDeleteMessagePolicyGroupOk returns a tuple with the CanSetDeleteMessagePolicyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanSetDeleteMessagePolicyGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSetDeleteMessagePolicyGroup) {
		return nil, false
	}
	return o.CanSetDeleteMessagePolicyGroup, true
}

// HasCanSetDeleteMessagePolicyGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanSetDeleteMessagePolicyGroup() bool {
	if o != nil && !IsNil(o.CanSetDeleteMessagePolicyGroup) {
		return true
	}

	return false
}

// SetCanSetDeleteMessagePolicyGroup gets a reference to the given GroupSettingValue and assigns it to the CanSetDeleteMessagePolicyGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanSetDeleteMessagePolicyGroup(v GroupSettingValue) {
	o.CanSetDeleteMessagePolicyGroup = &v
}

// GetCanSetTopicsPolicyGroup returns the CanSetTopicsPolicyGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanSetTopicsPolicyGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSetTopicsPolicyGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSetTopicsPolicyGroup
}

// GetCanSetTopicsPolicyGroupOk returns a tuple with the CanSetTopicsPolicyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanSetTopicsPolicyGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSetTopicsPolicyGroup) {
		return nil, false
	}
	return o.CanSetTopicsPolicyGroup, true
}

// HasCanSetTopicsPolicyGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanSetTopicsPolicyGroup() bool {
	if o != nil && !IsNil(o.CanSetTopicsPolicyGroup) {
		return true
	}

	return false
}

// SetCanSetTopicsPolicyGroup gets a reference to the given GroupSettingValue and assigns it to the CanSetTopicsPolicyGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanSetTopicsPolicyGroup(v GroupSettingValue) {
	o.CanSetTopicsPolicyGroup = &v
}

// GetCanInviteUsersGroup returns the CanInviteUsersGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanInviteUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanInviteUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanInviteUsersGroup
}

// GetCanInviteUsersGroupOk returns a tuple with the CanInviteUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanInviteUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanInviteUsersGroup) {
		return nil, false
	}
	return o.CanInviteUsersGroup, true
}

// HasCanInviteUsersGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanInviteUsersGroup() bool {
	if o != nil && !IsNil(o.CanInviteUsersGroup) {
		return true
	}

	return false
}

// SetCanInviteUsersGroup gets a reference to the given GroupSettingValue and assigns it to the CanInviteUsersGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanInviteUsersGroup(v GroupSettingValue) {
	o.CanInviteUsersGroup = &v
}

// GetCanMentionManyUsersGroup returns the CanMentionManyUsersGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanMentionManyUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMentionManyUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMentionManyUsersGroup
}

// GetCanMentionManyUsersGroupOk returns a tuple with the CanMentionManyUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanMentionManyUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMentionManyUsersGroup) {
		return nil, false
	}
	return o.CanMentionManyUsersGroup, true
}

// HasCanMentionManyUsersGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanMentionManyUsersGroup() bool {
	if o != nil && !IsNil(o.CanMentionManyUsersGroup) {
		return true
	}

	return false
}

// SetCanMentionManyUsersGroup gets a reference to the given GroupSettingValue and assigns it to the CanMentionManyUsersGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanMentionManyUsersGroup(v GroupSettingValue) {
	o.CanMentionManyUsersGroup = &v
}

// GetCanMoveMessagesBetweenChannelsGroup returns the CanMoveMessagesBetweenChannelsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanMoveMessagesBetweenChannelsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesBetweenChannelsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesBetweenChannelsGroup
}

// GetCanMoveMessagesBetweenChannelsGroupOk returns a tuple with the CanMoveMessagesBetweenChannelsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanMoveMessagesBetweenChannelsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesBetweenChannelsGroup) {
		return nil, false
	}
	return o.CanMoveMessagesBetweenChannelsGroup, true
}

// HasCanMoveMessagesBetweenChannelsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanMoveMessagesBetweenChannelsGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesBetweenChannelsGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesBetweenChannelsGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesBetweenChannelsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanMoveMessagesBetweenChannelsGroup(v GroupSettingValue) {
	o.CanMoveMessagesBetweenChannelsGroup = &v
}

// GetCanMoveMessagesBetweenTopicsGroup returns the CanMoveMessagesBetweenTopicsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanMoveMessagesBetweenTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesBetweenTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesBetweenTopicsGroup
}

// GetCanMoveMessagesBetweenTopicsGroupOk returns a tuple with the CanMoveMessagesBetweenTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanMoveMessagesBetweenTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesBetweenTopicsGroup) {
		return nil, false
	}
	return o.CanMoveMessagesBetweenTopicsGroup, true
}

// HasCanMoveMessagesBetweenTopicsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanMoveMessagesBetweenTopicsGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesBetweenTopicsGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesBetweenTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesBetweenTopicsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanMoveMessagesBetweenTopicsGroup(v GroupSettingValue) {
	o.CanMoveMessagesBetweenTopicsGroup = &v
}

// GetCanResolveTopicsGroup returns the CanResolveTopicsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanResolveTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanResolveTopicsGroup
}

// GetCanResolveTopicsGroupOk returns a tuple with the CanResolveTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanResolveTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		return nil, false
	}
	return o.CanResolveTopicsGroup, true
}

// HasCanResolveTopicsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanResolveTopicsGroup() bool {
	if o != nil && !IsNil(o.CanResolveTopicsGroup) {
		return true
	}

	return false
}

// SetCanResolveTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the CanResolveTopicsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanResolveTopicsGroup(v GroupSettingValue) {
	o.CanResolveTopicsGroup = &v
}

// GetCanManageAllGroups returns the CanManageAllGroups field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanManageAllGroups() GroupSettingValue {
	if o == nil || IsNil(o.CanManageAllGroups) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanManageAllGroups
}

// GetCanManageAllGroupsOk returns a tuple with the CanManageAllGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanManageAllGroupsOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanManageAllGroups) {
		return nil, false
	}
	return o.CanManageAllGroups, true
}

// HasCanManageAllGroups returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanManageAllGroups() bool {
	if o != nil && !IsNil(o.CanManageAllGroups) {
		return true
	}

	return false
}

// SetCanManageAllGroups gets a reference to the given GroupSettingValue and assigns it to the CanManageAllGroups field.
func (o *SubscriptionRemoveEvent7Data) SetCanManageAllGroups(v GroupSettingValue) {
	o.CanManageAllGroups = &v
}

// GetCanManageBillingGroup returns the CanManageBillingGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanManageBillingGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanManageBillingGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanManageBillingGroup
}

// GetCanManageBillingGroupOk returns a tuple with the CanManageBillingGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanManageBillingGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanManageBillingGroup) {
		return nil, false
	}
	return o.CanManageBillingGroup, true
}

// HasCanManageBillingGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanManageBillingGroup() bool {
	if o != nil && !IsNil(o.CanManageBillingGroup) {
		return true
	}

	return false
}

// SetCanManageBillingGroup gets a reference to the given GroupSettingValue and assigns it to the CanManageBillingGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanManageBillingGroup(v GroupSettingValue) {
	o.CanManageBillingGroup = &v
}

// GetCanSummarizeTopicsGroup returns the CanSummarizeTopicsGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCanSummarizeTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSummarizeTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSummarizeTopicsGroup
}

// GetCanSummarizeTopicsGroupOk returns a tuple with the CanSummarizeTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCanSummarizeTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSummarizeTopicsGroup) {
		return nil, false
	}
	return o.CanSummarizeTopicsGroup, true
}

// HasCanSummarizeTopicsGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCanSummarizeTopicsGroup() bool {
	if o != nil && !IsNil(o.CanSummarizeTopicsGroup) {
		return true
	}

	return false
}

// SetCanSummarizeTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the CanSummarizeTopicsGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCanSummarizeTopicsGroup(v GroupSettingValue) {
	o.CanSummarizeTopicsGroup = &v
}

// GetCreateMultiuseInviteGroup returns the CreateMultiuseInviteGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetCreateMultiuseInviteGroup() GroupSettingValue {
	if o == nil || IsNil(o.CreateMultiuseInviteGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CreateMultiuseInviteGroup
}

// GetCreateMultiuseInviteGroupOk returns a tuple with the CreateMultiuseInviteGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetCreateMultiuseInviteGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CreateMultiuseInviteGroup) {
		return nil, false
	}
	return o.CreateMultiuseInviteGroup, true
}

// HasCreateMultiuseInviteGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasCreateMultiuseInviteGroup() bool {
	if o != nil && !IsNil(o.CreateMultiuseInviteGroup) {
		return true
	}

	return false
}

// SetCreateMultiuseInviteGroup gets a reference to the given GroupSettingValue and assigns it to the CreateMultiuseInviteGroup field.
func (o *SubscriptionRemoveEvent7Data) SetCreateMultiuseInviteGroup(v GroupSettingValue) {
	o.CreateMultiuseInviteGroup = &v
}

// GetDefaultCodeBlockLanguage returns the DefaultCodeBlockLanguage field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDefaultCodeBlockLanguage() string {
	if o == nil || IsNil(o.DefaultCodeBlockLanguage) {
		var ret string
		return ret
	}
	return *o.DefaultCodeBlockLanguage
}

// GetDefaultCodeBlockLanguageOk returns a tuple with the DefaultCodeBlockLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDefaultCodeBlockLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultCodeBlockLanguage) {
		return nil, false
	}
	return o.DefaultCodeBlockLanguage, true
}

// HasDefaultCodeBlockLanguage returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDefaultCodeBlockLanguage() bool {
	if o != nil && !IsNil(o.DefaultCodeBlockLanguage) {
		return true
	}

	return false
}

// SetDefaultCodeBlockLanguage gets a reference to the given string and assigns it to the DefaultCodeBlockLanguage field.
func (o *SubscriptionRemoveEvent7Data) SetDefaultCodeBlockLanguage(v string) {
	o.DefaultCodeBlockLanguage = &v
}

// GetDefaultLanguage returns the DefaultLanguage field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDefaultLanguage() string {
	if o == nil || IsNil(o.DefaultLanguage) {
		var ret string
		return ret
	}
	return *o.DefaultLanguage
}

// GetDefaultLanguageOk returns a tuple with the DefaultLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDefaultLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLanguage) {
		return nil, false
	}
	return o.DefaultLanguage, true
}

// HasDefaultLanguage returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDefaultLanguage() bool {
	if o != nil && !IsNil(o.DefaultLanguage) {
		return true
	}

	return false
}

// SetDefaultLanguage gets a reference to the given string and assigns it to the DefaultLanguage field.
func (o *SubscriptionRemoveEvent7Data) SetDefaultLanguage(v string) {
	o.DefaultLanguage = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubscriptionRemoveEvent7Data) SetDescription(v string) {
	o.Description = &v
}

// GetDigestEmailsEnabled returns the DigestEmailsEnabled field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDigestEmailsEnabled() bool {
	if o == nil || IsNil(o.DigestEmailsEnabled) {
		var ret bool
		return ret
	}
	return *o.DigestEmailsEnabled
}

// GetDigestEmailsEnabledOk returns a tuple with the DigestEmailsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDigestEmailsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DigestEmailsEnabled) {
		return nil, false
	}
	return o.DigestEmailsEnabled, true
}

// HasDigestEmailsEnabled returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDigestEmailsEnabled() bool {
	if o != nil && !IsNil(o.DigestEmailsEnabled) {
		return true
	}

	return false
}

// SetDigestEmailsEnabled gets a reference to the given bool and assigns it to the DigestEmailsEnabled field.
func (o *SubscriptionRemoveEvent7Data) SetDigestEmailsEnabled(v bool) {
	o.DigestEmailsEnabled = &v
}

// GetDigestWeekday returns the DigestWeekday field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDigestWeekday() int32 {
	if o == nil || IsNil(o.DigestWeekday) {
		var ret int32
		return ret
	}
	return *o.DigestWeekday
}

// GetDigestWeekdayOk returns a tuple with the DigestWeekday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDigestWeekdayOk() (*int32, bool) {
	if o == nil || IsNil(o.DigestWeekday) {
		return nil, false
	}
	return o.DigestWeekday, true
}

// HasDigestWeekday returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDigestWeekday() bool {
	if o != nil && !IsNil(o.DigestWeekday) {
		return true
	}

	return false
}

// SetDigestWeekday gets a reference to the given int32 and assigns it to the DigestWeekday field.
func (o *SubscriptionRemoveEvent7Data) SetDigestWeekday(v int32) {
	o.DigestWeekday = &v
}

// GetDirectMessageInitiatorGroup returns the DirectMessageInitiatorGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDirectMessageInitiatorGroup() GroupSettingValue {
	if o == nil || IsNil(o.DirectMessageInitiatorGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.DirectMessageInitiatorGroup
}

// GetDirectMessageInitiatorGroupOk returns a tuple with the DirectMessageInitiatorGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDirectMessageInitiatorGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.DirectMessageInitiatorGroup) {
		return nil, false
	}
	return o.DirectMessageInitiatorGroup, true
}

// HasDirectMessageInitiatorGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDirectMessageInitiatorGroup() bool {
	if o != nil && !IsNil(o.DirectMessageInitiatorGroup) {
		return true
	}

	return false
}

// SetDirectMessageInitiatorGroup gets a reference to the given GroupSettingValue and assigns it to the DirectMessageInitiatorGroup field.
func (o *SubscriptionRemoveEvent7Data) SetDirectMessageInitiatorGroup(v GroupSettingValue) {
	o.DirectMessageInitiatorGroup = &v
}

// GetDirectMessagePermissionGroup returns the DirectMessagePermissionGroup field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDirectMessagePermissionGroup() GroupSettingValue {
	if o == nil || IsNil(o.DirectMessagePermissionGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.DirectMessagePermissionGroup
}

// GetDirectMessagePermissionGroupOk returns a tuple with the DirectMessagePermissionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDirectMessagePermissionGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.DirectMessagePermissionGroup) {
		return nil, false
	}
	return o.DirectMessagePermissionGroup, true
}

// HasDirectMessagePermissionGroup returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDirectMessagePermissionGroup() bool {
	if o != nil && !IsNil(o.DirectMessagePermissionGroup) {
		return true
	}

	return false
}

// SetDirectMessagePermissionGroup gets a reference to the given GroupSettingValue and assigns it to the DirectMessagePermissionGroup field.
func (o *SubscriptionRemoveEvent7Data) SetDirectMessagePermissionGroup(v GroupSettingValue) {
	o.DirectMessagePermissionGroup = &v
}

// GetDisallowDisposableEmailAddresses returns the DisallowDisposableEmailAddresses field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetDisallowDisposableEmailAddresses() bool {
	if o == nil || IsNil(o.DisallowDisposableEmailAddresses) {
		var ret bool
		return ret
	}
	return *o.DisallowDisposableEmailAddresses
}

// GetDisallowDisposableEmailAddressesOk returns a tuple with the DisallowDisposableEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetDisallowDisposableEmailAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DisallowDisposableEmailAddresses) {
		return nil, false
	}
	return o.DisallowDisposableEmailAddresses, true
}

// HasDisallowDisposableEmailAddresses returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasDisallowDisposableEmailAddresses() bool {
	if o != nil && !IsNil(o.DisallowDisposableEmailAddresses) {
		return true
	}

	return false
}

// SetDisallowDisposableEmailAddresses gets a reference to the given bool and assigns it to the DisallowDisposableEmailAddresses field.
func (o *SubscriptionRemoveEvent7Data) SetDisallowDisposableEmailAddresses(v bool) {
	o.DisallowDisposableEmailAddresses = &v
}

// GetEmailChangesDisabled returns the EmailChangesDisabled field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEmailChangesDisabled() bool {
	if o == nil || IsNil(o.EmailChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.EmailChangesDisabled
}

// GetEmailChangesDisabledOk returns a tuple with the EmailChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEmailChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailChangesDisabled) {
		return nil, false
	}
	return o.EmailChangesDisabled, true
}

// HasEmailChangesDisabled returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEmailChangesDisabled() bool {
	if o != nil && !IsNil(o.EmailChangesDisabled) {
		return true
	}

	return false
}

// SetEmailChangesDisabled gets a reference to the given bool and assigns it to the EmailChangesDisabled field.
func (o *SubscriptionRemoveEvent7Data) SetEmailChangesDisabled(v bool) {
	o.EmailChangesDisabled = &v
}

// GetEnableReadReceipts returns the EnableReadReceipts field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEnableReadReceipts() bool {
	if o == nil || IsNil(o.EnableReadReceipts) {
		var ret bool
		return ret
	}
	return *o.EnableReadReceipts
}

// GetEnableReadReceiptsOk returns a tuple with the EnableReadReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEnableReadReceiptsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableReadReceipts) {
		return nil, false
	}
	return o.EnableReadReceipts, true
}

// HasEnableReadReceipts returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEnableReadReceipts() bool {
	if o != nil && !IsNil(o.EnableReadReceipts) {
		return true
	}

	return false
}

// SetEnableReadReceipts gets a reference to the given bool and assigns it to the EnableReadReceipts field.
func (o *SubscriptionRemoveEvent7Data) SetEnableReadReceipts(v bool) {
	o.EnableReadReceipts = &v
}

// GetEmailsRestrictedToDomains returns the EmailsRestrictedToDomains field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEmailsRestrictedToDomains() bool {
	if o == nil || IsNil(o.EmailsRestrictedToDomains) {
		var ret bool
		return ret
	}
	return *o.EmailsRestrictedToDomains
}

// GetEmailsRestrictedToDomainsOk returns a tuple with the EmailsRestrictedToDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEmailsRestrictedToDomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailsRestrictedToDomains) {
		return nil, false
	}
	return o.EmailsRestrictedToDomains, true
}

// HasEmailsRestrictedToDomains returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEmailsRestrictedToDomains() bool {
	if o != nil && !IsNil(o.EmailsRestrictedToDomains) {
		return true
	}

	return false
}

// SetEmailsRestrictedToDomains gets a reference to the given bool and assigns it to the EmailsRestrictedToDomains field.
func (o *SubscriptionRemoveEvent7Data) SetEmailsRestrictedToDomains(v bool) {
	o.EmailsRestrictedToDomains = &v
}

// GetEnableGuestUserDmWarning returns the EnableGuestUserDmWarning field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEnableGuestUserDmWarning() bool {
	if o == nil || IsNil(o.EnableGuestUserDmWarning) {
		var ret bool
		return ret
	}
	return *o.EnableGuestUserDmWarning
}

// GetEnableGuestUserDmWarningOk returns a tuple with the EnableGuestUserDmWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEnableGuestUserDmWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGuestUserDmWarning) {
		return nil, false
	}
	return o.EnableGuestUserDmWarning, true
}

// HasEnableGuestUserDmWarning returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEnableGuestUserDmWarning() bool {
	if o != nil && !IsNil(o.EnableGuestUserDmWarning) {
		return true
	}

	return false
}

// SetEnableGuestUserDmWarning gets a reference to the given bool and assigns it to the EnableGuestUserDmWarning field.
func (o *SubscriptionRemoveEvent7Data) SetEnableGuestUserDmWarning(v bool) {
	o.EnableGuestUserDmWarning = &v
}

// GetEnableGuestUserIndicator returns the EnableGuestUserIndicator field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEnableGuestUserIndicator() bool {
	if o == nil || IsNil(o.EnableGuestUserIndicator) {
		var ret bool
		return ret
	}
	return *o.EnableGuestUserIndicator
}

// GetEnableGuestUserIndicatorOk returns a tuple with the EnableGuestUserIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEnableGuestUserIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGuestUserIndicator) {
		return nil, false
	}
	return o.EnableGuestUserIndicator, true
}

// HasEnableGuestUserIndicator returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEnableGuestUserIndicator() bool {
	if o != nil && !IsNil(o.EnableGuestUserIndicator) {
		return true
	}

	return false
}

// SetEnableGuestUserIndicator gets a reference to the given bool and assigns it to the EnableGuestUserIndicator field.
func (o *SubscriptionRemoveEvent7Data) SetEnableGuestUserIndicator(v bool) {
	o.EnableGuestUserIndicator = &v
}

// GetEnableSpectatorAccess returns the EnableSpectatorAccess field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetEnableSpectatorAccess() bool {
	if o == nil || IsNil(o.EnableSpectatorAccess) {
		var ret bool
		return ret
	}
	return *o.EnableSpectatorAccess
}

// GetEnableSpectatorAccessOk returns a tuple with the EnableSpectatorAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetEnableSpectatorAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSpectatorAccess) {
		return nil, false
	}
	return o.EnableSpectatorAccess, true
}

// HasEnableSpectatorAccess returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasEnableSpectatorAccess() bool {
	if o != nil && !IsNil(o.EnableSpectatorAccess) {
		return true
	}

	return false
}

// SetEnableSpectatorAccess gets a reference to the given bool and assigns it to the EnableSpectatorAccess field.
func (o *SubscriptionRemoveEvent7Data) SetEnableSpectatorAccess(v bool) {
	o.EnableSpectatorAccess = &v
}

// GetGiphyRating returns the GiphyRating field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetGiphyRating() int32 {
	if o == nil || IsNil(o.GiphyRating) {
		var ret int32
		return ret
	}
	return *o.GiphyRating
}

// GetGiphyRatingOk returns a tuple with the GiphyRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetGiphyRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.GiphyRating) {
		return nil, false
	}
	return o.GiphyRating, true
}

// HasGiphyRating returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasGiphyRating() bool {
	if o != nil && !IsNil(o.GiphyRating) {
		return true
	}

	return false
}

// SetGiphyRating gets a reference to the given int32 and assigns it to the GiphyRating field.
func (o *SubscriptionRemoveEvent7Data) SetGiphyRating(v int32) {
	o.GiphyRating = &v
}

// GetIconSource returns the IconSource field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetIconSource() string {
	if o == nil || IsNil(o.IconSource) {
		var ret string
		return ret
	}
	return *o.IconSource
}

// GetIconSourceOk returns a tuple with the IconSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetIconSourceOk() (*string, bool) {
	if o == nil || IsNil(o.IconSource) {
		return nil, false
	}
	return o.IconSource, true
}

// HasIconSource returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasIconSource() bool {
	if o != nil && !IsNil(o.IconSource) {
		return true
	}

	return false
}

// SetIconSource gets a reference to the given string and assigns it to the IconSource field.
func (o *SubscriptionRemoveEvent7Data) SetIconSource(v string) {
	o.IconSource = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *SubscriptionRemoveEvent7Data) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetInlineImagePreview returns the InlineImagePreview field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetInlineImagePreview() bool {
	if o == nil || IsNil(o.InlineImagePreview) {
		var ret bool
		return ret
	}
	return *o.InlineImagePreview
}

// GetInlineImagePreviewOk returns a tuple with the InlineImagePreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetInlineImagePreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.InlineImagePreview) {
		return nil, false
	}
	return o.InlineImagePreview, true
}

// HasInlineImagePreview returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasInlineImagePreview() bool {
	if o != nil && !IsNil(o.InlineImagePreview) {
		return true
	}

	return false
}

// SetInlineImagePreview gets a reference to the given bool and assigns it to the InlineImagePreview field.
func (o *SubscriptionRemoveEvent7Data) SetInlineImagePreview(v bool) {
	o.InlineImagePreview = &v
}

// GetInlineUrlEmbedPreview returns the InlineUrlEmbedPreview field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetInlineUrlEmbedPreview() bool {
	if o == nil || IsNil(o.InlineUrlEmbedPreview) {
		var ret bool
		return ret
	}
	return *o.InlineUrlEmbedPreview
}

// GetInlineUrlEmbedPreviewOk returns a tuple with the InlineUrlEmbedPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetInlineUrlEmbedPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.InlineUrlEmbedPreview) {
		return nil, false
	}
	return o.InlineUrlEmbedPreview, true
}

// HasInlineUrlEmbedPreview returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasInlineUrlEmbedPreview() bool {
	if o != nil && !IsNil(o.InlineUrlEmbedPreview) {
		return true
	}

	return false
}

// SetInlineUrlEmbedPreview gets a reference to the given bool and assigns it to the InlineUrlEmbedPreview field.
func (o *SubscriptionRemoveEvent7Data) SetInlineUrlEmbedPreview(v bool) {
	o.InlineUrlEmbedPreview = &v
}

// GetInviteRequired returns the InviteRequired field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetInviteRequired() bool {
	if o == nil || IsNil(o.InviteRequired) {
		var ret bool
		return ret
	}
	return *o.InviteRequired
}

// GetInviteRequiredOk returns a tuple with the InviteRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetInviteRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.InviteRequired) {
		return nil, false
	}
	return o.InviteRequired, true
}

// HasInviteRequired returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasInviteRequired() bool {
	if o != nil && !IsNil(o.InviteRequired) {
		return true
	}

	return false
}

// SetInviteRequired gets a reference to the given bool and assigns it to the InviteRequired field.
func (o *SubscriptionRemoveEvent7Data) SetInviteRequired(v bool) {
	o.InviteRequired = &v
}

// GetJitsiServerUrl returns the JitsiServerUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetJitsiServerUrl() string {
	if o == nil || IsNil(o.JitsiServerUrl.Get()) {
		var ret string
		return ret
	}
	return *o.JitsiServerUrl.Get()
}

// GetJitsiServerUrlOk returns a tuple with the JitsiServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetJitsiServerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JitsiServerUrl.Get(), o.JitsiServerUrl.IsSet()
}

// HasJitsiServerUrl returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasJitsiServerUrl() bool {
	if o != nil && o.JitsiServerUrl.IsSet() {
		return true
	}

	return false
}

// SetJitsiServerUrl gets a reference to the given NullableString and assigns it to the JitsiServerUrl field.
func (o *SubscriptionRemoveEvent7Data) SetJitsiServerUrl(v string) {
	o.JitsiServerUrl.Set(&v)
}

// SetJitsiServerUrlNil sets the value for JitsiServerUrl to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetJitsiServerUrlNil() {
	o.JitsiServerUrl.Set(nil)
}

// UnsetJitsiServerUrl ensures that no value is present for JitsiServerUrl, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetJitsiServerUrl() {
	o.JitsiServerUrl.Unset()
}

// GetLogoSource returns the LogoSource field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetLogoSource() string {
	if o == nil || IsNil(o.LogoSource) {
		var ret string
		return ret
	}
	return *o.LogoSource
}

// GetLogoSourceOk returns a tuple with the LogoSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetLogoSourceOk() (*string, bool) {
	if o == nil || IsNil(o.LogoSource) {
		return nil, false
	}
	return o.LogoSource, true
}

// HasLogoSource returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasLogoSource() bool {
	if o != nil && !IsNil(o.LogoSource) {
		return true
	}

	return false
}

// SetLogoSource gets a reference to the given string and assigns it to the LogoSource field.
func (o *SubscriptionRemoveEvent7Data) SetLogoSource(v string) {
	o.LogoSource = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *SubscriptionRemoveEvent7Data) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetTopicsPolicy returns the TopicsPolicy field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetTopicsPolicy() string {
	if o == nil || IsNil(o.TopicsPolicy) {
		var ret string
		return ret
	}
	return *o.TopicsPolicy
}

// GetTopicsPolicyOk returns a tuple with the TopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetTopicsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.TopicsPolicy) {
		return nil, false
	}
	return o.TopicsPolicy, true
}

// HasTopicsPolicy returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasTopicsPolicy() bool {
	if o != nil && !IsNil(o.TopicsPolicy) {
		return true
	}

	return false
}

// SetTopicsPolicy gets a reference to the given string and assigns it to the TopicsPolicy field.
func (o *SubscriptionRemoveEvent7Data) SetTopicsPolicy(v string) {
	o.TopicsPolicy = &v
}

// GetMandatoryTopics returns the MandatoryTopics field value if set, zero value otherwise.
// Deprecated
func (o *SubscriptionRemoveEvent7Data) GetMandatoryTopics() bool {
	if o == nil || IsNil(o.MandatoryTopics) {
		var ret bool
		return ret
	}
	return *o.MandatoryTopics
}

// GetMandatoryTopicsOk returns a tuple with the MandatoryTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SubscriptionRemoveEvent7Data) GetMandatoryTopicsOk() (*bool, bool) {
	if o == nil || IsNil(o.MandatoryTopics) {
		return nil, false
	}
	return o.MandatoryTopics, true
}

// HasMandatoryTopics returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMandatoryTopics() bool {
	if o != nil && !IsNil(o.MandatoryTopics) {
		return true
	}

	return false
}

// SetMandatoryTopics gets a reference to the given bool and assigns it to the MandatoryTopics field.
// Deprecated
func (o *SubscriptionRemoveEvent7Data) SetMandatoryTopics(v bool) {
	o.MandatoryTopics = &v
}

// GetMaxFileUploadSizeMib returns the MaxFileUploadSizeMib field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetMaxFileUploadSizeMib() int32 {
	if o == nil || IsNil(o.MaxFileUploadSizeMib) {
		var ret int32
		return ret
	}
	return *o.MaxFileUploadSizeMib
}

// GetMaxFileUploadSizeMibOk returns a tuple with the MaxFileUploadSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetMaxFileUploadSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxFileUploadSizeMib) {
		return nil, false
	}
	return o.MaxFileUploadSizeMib, true
}

// HasMaxFileUploadSizeMib returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMaxFileUploadSizeMib() bool {
	if o != nil && !IsNil(o.MaxFileUploadSizeMib) {
		return true
	}

	return false
}

// SetMaxFileUploadSizeMib gets a reference to the given int32 and assigns it to the MaxFileUploadSizeMib field.
func (o *SubscriptionRemoveEvent7Data) SetMaxFileUploadSizeMib(v int32) {
	o.MaxFileUploadSizeMib = &v
}

// GetMessageContentAllowedInEmailNotifications returns the MessageContentAllowedInEmailNotifications field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetMessageContentAllowedInEmailNotifications() bool {
	if o == nil || IsNil(o.MessageContentAllowedInEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.MessageContentAllowedInEmailNotifications
}

// GetMessageContentAllowedInEmailNotificationsOk returns a tuple with the MessageContentAllowedInEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetMessageContentAllowedInEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageContentAllowedInEmailNotifications) {
		return nil, false
	}
	return o.MessageContentAllowedInEmailNotifications, true
}

// HasMessageContentAllowedInEmailNotifications returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMessageContentAllowedInEmailNotifications() bool {
	if o != nil && !IsNil(o.MessageContentAllowedInEmailNotifications) {
		return true
	}

	return false
}

// SetMessageContentAllowedInEmailNotifications gets a reference to the given bool and assigns it to the MessageContentAllowedInEmailNotifications field.
func (o *SubscriptionRemoveEvent7Data) SetMessageContentAllowedInEmailNotifications(v bool) {
	o.MessageContentAllowedInEmailNotifications = &v
}

// GetMessageContentDeleteLimitSeconds returns the MessageContentDeleteLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetMessageContentDeleteLimitSeconds() int32 {
	if o == nil || IsNil(o.MessageContentDeleteLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.MessageContentDeleteLimitSeconds.Get()
}

// GetMessageContentDeleteLimitSecondsOk returns a tuple with the MessageContentDeleteLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetMessageContentDeleteLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageContentDeleteLimitSeconds.Get(), o.MessageContentDeleteLimitSeconds.IsSet()
}

// HasMessageContentDeleteLimitSeconds returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMessageContentDeleteLimitSeconds() bool {
	if o != nil && o.MessageContentDeleteLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetMessageContentDeleteLimitSeconds gets a reference to the given NullableInt32 and assigns it to the MessageContentDeleteLimitSeconds field.
func (o *SubscriptionRemoveEvent7Data) SetMessageContentDeleteLimitSeconds(v int32) {
	o.MessageContentDeleteLimitSeconds.Set(&v)
}

// SetMessageContentDeleteLimitSecondsNil sets the value for MessageContentDeleteLimitSeconds to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetMessageContentDeleteLimitSecondsNil() {
	o.MessageContentDeleteLimitSeconds.Set(nil)
}

// UnsetMessageContentDeleteLimitSeconds ensures that no value is present for MessageContentDeleteLimitSeconds, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetMessageContentDeleteLimitSeconds() {
	o.MessageContentDeleteLimitSeconds.Unset()
}

// GetMessageContentEditLimitSeconds returns the MessageContentEditLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetMessageContentEditLimitSeconds() int32 {
	if o == nil || IsNil(o.MessageContentEditLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.MessageContentEditLimitSeconds.Get()
}

// GetMessageContentEditLimitSecondsOk returns a tuple with the MessageContentEditLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetMessageContentEditLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageContentEditLimitSeconds.Get(), o.MessageContentEditLimitSeconds.IsSet()
}

// HasMessageContentEditLimitSeconds returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMessageContentEditLimitSeconds() bool {
	if o != nil && o.MessageContentEditLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetMessageContentEditLimitSeconds gets a reference to the given NullableInt32 and assigns it to the MessageContentEditLimitSeconds field.
func (o *SubscriptionRemoveEvent7Data) SetMessageContentEditLimitSeconds(v int32) {
	o.MessageContentEditLimitSeconds.Set(&v)
}

// SetMessageContentEditLimitSecondsNil sets the value for MessageContentEditLimitSeconds to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetMessageContentEditLimitSecondsNil() {
	o.MessageContentEditLimitSeconds.Set(nil)
}

// UnsetMessageContentEditLimitSeconds ensures that no value is present for MessageContentEditLimitSeconds, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetMessageContentEditLimitSeconds() {
	o.MessageContentEditLimitSeconds.Unset()
}

// GetMessageEditHistoryVisibilityPolicy returns the MessageEditHistoryVisibilityPolicy field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetMessageEditHistoryVisibilityPolicy() string {
	if o == nil || IsNil(o.MessageEditHistoryVisibilityPolicy) {
		var ret string
		return ret
	}
	return *o.MessageEditHistoryVisibilityPolicy
}

// GetMessageEditHistoryVisibilityPolicyOk returns a tuple with the MessageEditHistoryVisibilityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetMessageEditHistoryVisibilityPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.MessageEditHistoryVisibilityPolicy) {
		return nil, false
	}
	return o.MessageEditHistoryVisibilityPolicy, true
}

// HasMessageEditHistoryVisibilityPolicy returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMessageEditHistoryVisibilityPolicy() bool {
	if o != nil && !IsNil(o.MessageEditHistoryVisibilityPolicy) {
		return true
	}

	return false
}

// SetMessageEditHistoryVisibilityPolicy gets a reference to the given string and assigns it to the MessageEditHistoryVisibilityPolicy field.
func (o *SubscriptionRemoveEvent7Data) SetMessageEditHistoryVisibilityPolicy(v string) {
	o.MessageEditHistoryVisibilityPolicy = &v
}

// GetModerationRequestChannelId returns the ModerationRequestChannelId field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetModerationRequestChannelId() int32 {
	if o == nil || IsNil(o.ModerationRequestChannelId) {
		var ret int32
		return ret
	}
	return *o.ModerationRequestChannelId
}

// GetModerationRequestChannelIdOk returns a tuple with the ModerationRequestChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetModerationRequestChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ModerationRequestChannelId) {
		return nil, false
	}
	return o.ModerationRequestChannelId, true
}

// HasModerationRequestChannelId returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasModerationRequestChannelId() bool {
	if o != nil && !IsNil(o.ModerationRequestChannelId) {
		return true
	}

	return false
}

// SetModerationRequestChannelId gets a reference to the given int32 and assigns it to the ModerationRequestChannelId field.
func (o *SubscriptionRemoveEvent7Data) SetModerationRequestChannelId(v int32) {
	o.ModerationRequestChannelId = &v
}

// GetMoveMessagesWithinStreamLimitSeconds returns the MoveMessagesWithinStreamLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetMoveMessagesWithinStreamLimitSeconds() int32 {
	if o == nil || IsNil(o.MoveMessagesWithinStreamLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.MoveMessagesWithinStreamLimitSeconds.Get()
}

// GetMoveMessagesWithinStreamLimitSecondsOk returns a tuple with the MoveMessagesWithinStreamLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetMoveMessagesWithinStreamLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MoveMessagesWithinStreamLimitSeconds.Get(), o.MoveMessagesWithinStreamLimitSeconds.IsSet()
}

// HasMoveMessagesWithinStreamLimitSeconds returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMoveMessagesWithinStreamLimitSeconds() bool {
	if o != nil && o.MoveMessagesWithinStreamLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetMoveMessagesWithinStreamLimitSeconds gets a reference to the given NullableInt32 and assigns it to the MoveMessagesWithinStreamLimitSeconds field.
func (o *SubscriptionRemoveEvent7Data) SetMoveMessagesWithinStreamLimitSeconds(v int32) {
	o.MoveMessagesWithinStreamLimitSeconds.Set(&v)
}

// SetMoveMessagesWithinStreamLimitSecondsNil sets the value for MoveMessagesWithinStreamLimitSeconds to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetMoveMessagesWithinStreamLimitSecondsNil() {
	o.MoveMessagesWithinStreamLimitSeconds.Set(nil)
}

// UnsetMoveMessagesWithinStreamLimitSeconds ensures that no value is present for MoveMessagesWithinStreamLimitSeconds, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetMoveMessagesWithinStreamLimitSeconds() {
	o.MoveMessagesWithinStreamLimitSeconds.Unset()
}

// GetMoveMessagesBetweenStreamsLimitSeconds returns the MoveMessagesBetweenStreamsLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetMoveMessagesBetweenStreamsLimitSeconds() int32 {
	if o == nil || IsNil(o.MoveMessagesBetweenStreamsLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.MoveMessagesBetweenStreamsLimitSeconds.Get()
}

// GetMoveMessagesBetweenStreamsLimitSecondsOk returns a tuple with the MoveMessagesBetweenStreamsLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetMoveMessagesBetweenStreamsLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MoveMessagesBetweenStreamsLimitSeconds.Get(), o.MoveMessagesBetweenStreamsLimitSeconds.IsSet()
}

// HasMoveMessagesBetweenStreamsLimitSeconds returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasMoveMessagesBetweenStreamsLimitSeconds() bool {
	if o != nil && o.MoveMessagesBetweenStreamsLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetMoveMessagesBetweenStreamsLimitSeconds gets a reference to the given NullableInt32 and assigns it to the MoveMessagesBetweenStreamsLimitSeconds field.
func (o *SubscriptionRemoveEvent7Data) SetMoveMessagesBetweenStreamsLimitSeconds(v int32) {
	o.MoveMessagesBetweenStreamsLimitSeconds.Set(&v)
}

// SetMoveMessagesBetweenStreamsLimitSecondsNil sets the value for MoveMessagesBetweenStreamsLimitSeconds to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetMoveMessagesBetweenStreamsLimitSecondsNil() {
	o.MoveMessagesBetweenStreamsLimitSeconds.Set(nil)
}

// UnsetMoveMessagesBetweenStreamsLimitSeconds ensures that no value is present for MoveMessagesBetweenStreamsLimitSeconds, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetMoveMessagesBetweenStreamsLimitSeconds() {
	o.MoveMessagesBetweenStreamsLimitSeconds.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubscriptionRemoveEvent7Data) SetName(v string) {
	o.Name = &v
}

// GetNameChangesDisabled returns the NameChangesDisabled field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetNameChangesDisabled() bool {
	if o == nil || IsNil(o.NameChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.NameChangesDisabled
}

// GetNameChangesDisabledOk returns a tuple with the NameChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetNameChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NameChangesDisabled) {
		return nil, false
	}
	return o.NameChangesDisabled, true
}

// HasNameChangesDisabled returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasNameChangesDisabled() bool {
	if o != nil && !IsNil(o.NameChangesDisabled) {
		return true
	}

	return false
}

// SetNameChangesDisabled gets a reference to the given bool and assigns it to the NameChangesDisabled field.
func (o *SubscriptionRemoveEvent7Data) SetNameChangesDisabled(v bool) {
	o.NameChangesDisabled = &v
}

// GetNightLogoSource returns the NightLogoSource field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetNightLogoSource() string {
	if o == nil || IsNil(o.NightLogoSource) {
		var ret string
		return ret
	}
	return *o.NightLogoSource
}

// GetNightLogoSourceOk returns a tuple with the NightLogoSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetNightLogoSourceOk() (*string, bool) {
	if o == nil || IsNil(o.NightLogoSource) {
		return nil, false
	}
	return o.NightLogoSource, true
}

// HasNightLogoSource returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasNightLogoSource() bool {
	if o != nil && !IsNil(o.NightLogoSource) {
		return true
	}

	return false
}

// SetNightLogoSource gets a reference to the given string and assigns it to the NightLogoSource field.
func (o *SubscriptionRemoveEvent7Data) SetNightLogoSource(v string) {
	o.NightLogoSource = &v
}

// GetNightLogoUrl returns the NightLogoUrl field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetNightLogoUrl() string {
	if o == nil || IsNil(o.NightLogoUrl) {
		var ret string
		return ret
	}
	return *o.NightLogoUrl
}

// GetNightLogoUrlOk returns a tuple with the NightLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetNightLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NightLogoUrl) {
		return nil, false
	}
	return o.NightLogoUrl, true
}

// HasNightLogoUrl returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasNightLogoUrl() bool {
	if o != nil && !IsNil(o.NightLogoUrl) {
		return true
	}

	return false
}

// SetNightLogoUrl gets a reference to the given string and assigns it to the NightLogoUrl field.
func (o *SubscriptionRemoveEvent7Data) SetNightLogoUrl(v string) {
	o.NightLogoUrl = &v
}

// GetNewStreamAnnouncementsStreamId returns the NewStreamAnnouncementsStreamId field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetNewStreamAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.NewStreamAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.NewStreamAnnouncementsStreamId
}

// GetNewStreamAnnouncementsStreamIdOk returns a tuple with the NewStreamAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetNewStreamAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NewStreamAnnouncementsStreamId) {
		return nil, false
	}
	return o.NewStreamAnnouncementsStreamId, true
}

// HasNewStreamAnnouncementsStreamId returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasNewStreamAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.NewStreamAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetNewStreamAnnouncementsStreamId gets a reference to the given int32 and assigns it to the NewStreamAnnouncementsStreamId field.
func (o *SubscriptionRemoveEvent7Data) SetNewStreamAnnouncementsStreamId(v int32) {
	o.NewStreamAnnouncementsStreamId = &v
}

// GetOrgType returns the OrgType field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetOrgType() int32 {
	if o == nil || IsNil(o.OrgType) {
		var ret int32
		return ret
	}
	return *o.OrgType
}

// GetOrgTypeOk returns a tuple with the OrgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetOrgTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgType) {
		return nil, false
	}
	return o.OrgType, true
}

// HasOrgType returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasOrgType() bool {
	if o != nil && !IsNil(o.OrgType) {
		return true
	}

	return false
}

// SetOrgType gets a reference to the given int32 and assigns it to the OrgType field.
func (o *SubscriptionRemoveEvent7Data) SetOrgType(v int32) {
	o.OrgType = &v
}

// GetPlanType returns the PlanType field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetPlanType() int32 {
	if o == nil || IsNil(o.PlanType) {
		var ret int32
		return ret
	}
	return *o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetPlanTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.PlanType) {
		return nil, false
	}
	return o.PlanType, true
}

// HasPlanType returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasPlanType() bool {
	if o != nil && !IsNil(o.PlanType) {
		return true
	}

	return false
}

// SetPlanType gets a reference to the given int32 and assigns it to the PlanType field.
func (o *SubscriptionRemoveEvent7Data) SetPlanType(v int32) {
	o.PlanType = &v
}

// GetPresenceDisabled returns the PresenceDisabled field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetPresenceDisabled() bool {
	if o == nil || IsNil(o.PresenceDisabled) {
		var ret bool
		return ret
	}
	return *o.PresenceDisabled
}

// GetPresenceDisabledOk returns a tuple with the PresenceDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetPresenceDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PresenceDisabled) {
		return nil, false
	}
	return o.PresenceDisabled, true
}

// HasPresenceDisabled returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasPresenceDisabled() bool {
	if o != nil && !IsNil(o.PresenceDisabled) {
		return true
	}

	return false
}

// SetPresenceDisabled gets a reference to the given bool and assigns it to the PresenceDisabled field.
func (o *SubscriptionRemoveEvent7Data) SetPresenceDisabled(v bool) {
	o.PresenceDisabled = &v
}

// GetPushNotificationsEnabled returns the PushNotificationsEnabled field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetPushNotificationsEnabled() bool {
	if o == nil || IsNil(o.PushNotificationsEnabled) {
		var ret bool
		return ret
	}
	return *o.PushNotificationsEnabled
}

// GetPushNotificationsEnabledOk returns a tuple with the PushNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetPushNotificationsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PushNotificationsEnabled) {
		return nil, false
	}
	return o.PushNotificationsEnabled, true
}

// HasPushNotificationsEnabled returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasPushNotificationsEnabled() bool {
	if o != nil && !IsNil(o.PushNotificationsEnabled) {
		return true
	}

	return false
}

// SetPushNotificationsEnabled gets a reference to the given bool and assigns it to the PushNotificationsEnabled field.
func (o *SubscriptionRemoveEvent7Data) SetPushNotificationsEnabled(v bool) {
	o.PushNotificationsEnabled = &v
}

// GetPushNotificationsEnabledEndTimestamp returns the PushNotificationsEnabledEndTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetPushNotificationsEnabledEndTimestamp() int32 {
	if o == nil || IsNil(o.PushNotificationsEnabledEndTimestamp.Get()) {
		var ret int32
		return ret
	}
	return *o.PushNotificationsEnabledEndTimestamp.Get()
}

// GetPushNotificationsEnabledEndTimestampOk returns a tuple with the PushNotificationsEnabledEndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetPushNotificationsEnabledEndTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PushNotificationsEnabledEndTimestamp.Get(), o.PushNotificationsEnabledEndTimestamp.IsSet()
}

// HasPushNotificationsEnabledEndTimestamp returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasPushNotificationsEnabledEndTimestamp() bool {
	if o != nil && o.PushNotificationsEnabledEndTimestamp.IsSet() {
		return true
	}

	return false
}

// SetPushNotificationsEnabledEndTimestamp gets a reference to the given NullableInt32 and assigns it to the PushNotificationsEnabledEndTimestamp field.
func (o *SubscriptionRemoveEvent7Data) SetPushNotificationsEnabledEndTimestamp(v int32) {
	o.PushNotificationsEnabledEndTimestamp.Set(&v)
}

// SetPushNotificationsEnabledEndTimestampNil sets the value for PushNotificationsEnabledEndTimestamp to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetPushNotificationsEnabledEndTimestampNil() {
	o.PushNotificationsEnabledEndTimestamp.Set(nil)
}

// UnsetPushNotificationsEnabledEndTimestamp ensures that no value is present for PushNotificationsEnabledEndTimestamp, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetPushNotificationsEnabledEndTimestamp() {
	o.PushNotificationsEnabledEndTimestamp.Unset()
}

// GetRequireE2eePushNotifications returns the RequireE2eePushNotifications field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetRequireE2eePushNotifications() bool {
	if o == nil || IsNil(o.RequireE2eePushNotifications) {
		var ret bool
		return ret
	}
	return *o.RequireE2eePushNotifications
}

// GetRequireE2eePushNotificationsOk returns a tuple with the RequireE2eePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetRequireE2eePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireE2eePushNotifications) {
		return nil, false
	}
	return o.RequireE2eePushNotifications, true
}

// HasRequireE2eePushNotifications returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasRequireE2eePushNotifications() bool {
	if o != nil && !IsNil(o.RequireE2eePushNotifications) {
		return true
	}

	return false
}

// SetRequireE2eePushNotifications gets a reference to the given bool and assigns it to the RequireE2eePushNotifications field.
func (o *SubscriptionRemoveEvent7Data) SetRequireE2eePushNotifications(v bool) {
	o.RequireE2eePushNotifications = &v
}

// GetRequireUniqueNames returns the RequireUniqueNames field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetRequireUniqueNames() bool {
	if o == nil || IsNil(o.RequireUniqueNames) {
		var ret bool
		return ret
	}
	return *o.RequireUniqueNames
}

// GetRequireUniqueNamesOk returns a tuple with the RequireUniqueNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetRequireUniqueNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireUniqueNames) {
		return nil, false
	}
	return o.RequireUniqueNames, true
}

// HasRequireUniqueNames returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasRequireUniqueNames() bool {
	if o != nil && !IsNil(o.RequireUniqueNames) {
		return true
	}

	return false
}

// SetRequireUniqueNames gets a reference to the given bool and assigns it to the RequireUniqueNames field.
func (o *SubscriptionRemoveEvent7Data) SetRequireUniqueNames(v bool) {
	o.RequireUniqueNames = &v
}

// GetSendWelcomeEmails returns the SendWelcomeEmails field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetSendWelcomeEmails() bool {
	if o == nil || IsNil(o.SendWelcomeEmails) {
		var ret bool
		return ret
	}
	return *o.SendWelcomeEmails
}

// GetSendWelcomeEmailsOk returns a tuple with the SendWelcomeEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetSendWelcomeEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendWelcomeEmails) {
		return nil, false
	}
	return o.SendWelcomeEmails, true
}

// HasSendWelcomeEmails returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasSendWelcomeEmails() bool {
	if o != nil && !IsNil(o.SendWelcomeEmails) {
		return true
	}

	return false
}

// SetSendWelcomeEmails gets a reference to the given bool and assigns it to the SendWelcomeEmails field.
func (o *SubscriptionRemoveEvent7Data) SetSendWelcomeEmails(v bool) {
	o.SendWelcomeEmails = &v
}

// GetSignupAnnouncementsStreamId returns the SignupAnnouncementsStreamId field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetSignupAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.SignupAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.SignupAnnouncementsStreamId
}

// GetSignupAnnouncementsStreamIdOk returns a tuple with the SignupAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetSignupAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SignupAnnouncementsStreamId) {
		return nil, false
	}
	return o.SignupAnnouncementsStreamId, true
}

// HasSignupAnnouncementsStreamId returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasSignupAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.SignupAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetSignupAnnouncementsStreamId gets a reference to the given int32 and assigns it to the SignupAnnouncementsStreamId field.
func (o *SubscriptionRemoveEvent7Data) SetSignupAnnouncementsStreamId(v int32) {
	o.SignupAnnouncementsStreamId = &v
}

// GetUploadQuotaMib returns the UploadQuotaMib field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionRemoveEvent7Data) GetUploadQuotaMib() int32 {
	if o == nil || IsNil(o.UploadQuotaMib.Get()) {
		var ret int32
		return ret
	}
	return *o.UploadQuotaMib.Get()
}

// GetUploadQuotaMibOk returns a tuple with the UploadQuotaMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionRemoveEvent7Data) GetUploadQuotaMibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UploadQuotaMib.Get(), o.UploadQuotaMib.IsSet()
}

// HasUploadQuotaMib returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasUploadQuotaMib() bool {
	if o != nil && o.UploadQuotaMib.IsSet() {
		return true
	}

	return false
}

// SetUploadQuotaMib gets a reference to the given NullableInt32 and assigns it to the UploadQuotaMib field.
func (o *SubscriptionRemoveEvent7Data) SetUploadQuotaMib(v int32) {
	o.UploadQuotaMib.Set(&v)
}

// SetUploadQuotaMibNil sets the value for UploadQuotaMib to be an explicit nil
func (o *SubscriptionRemoveEvent7Data) SetUploadQuotaMibNil() {
	o.UploadQuotaMib.Set(nil)
}

// UnsetUploadQuotaMib ensures that no value is present for UploadQuotaMib, not even an explicit nil
func (o *SubscriptionRemoveEvent7Data) UnsetUploadQuotaMib() {
	o.UploadQuotaMib.Unset()
}

// GetVideoChatProvider returns the VideoChatProvider field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetVideoChatProvider() int32 {
	if o == nil || IsNil(o.VideoChatProvider) {
		var ret int32
		return ret
	}
	return *o.VideoChatProvider
}

// GetVideoChatProviderOk returns a tuple with the VideoChatProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetVideoChatProviderOk() (*int32, bool) {
	if o == nil || IsNil(o.VideoChatProvider) {
		return nil, false
	}
	return o.VideoChatProvider, true
}

// HasVideoChatProvider returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasVideoChatProvider() bool {
	if o != nil && !IsNil(o.VideoChatProvider) {
		return true
	}

	return false
}

// SetVideoChatProvider gets a reference to the given int32 and assigns it to the VideoChatProvider field.
func (o *SubscriptionRemoveEvent7Data) SetVideoChatProvider(v int32) {
	o.VideoChatProvider = &v
}

// GetWaitingPeriodThreshold returns the WaitingPeriodThreshold field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetWaitingPeriodThreshold() int32 {
	if o == nil || IsNil(o.WaitingPeriodThreshold) {
		var ret int32
		return ret
	}
	return *o.WaitingPeriodThreshold
}

// GetWaitingPeriodThresholdOk returns a tuple with the WaitingPeriodThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetWaitingPeriodThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitingPeriodThreshold) {
		return nil, false
	}
	return o.WaitingPeriodThreshold, true
}

// HasWaitingPeriodThreshold returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasWaitingPeriodThreshold() bool {
	if o != nil && !IsNil(o.WaitingPeriodThreshold) {
		return true
	}

	return false
}

// SetWaitingPeriodThreshold gets a reference to the given int32 and assigns it to the WaitingPeriodThreshold field.
func (o *SubscriptionRemoveEvent7Data) SetWaitingPeriodThreshold(v int32) {
	o.WaitingPeriodThreshold = &v
}

// GetWantAdvertiseInCommunitiesDirectory returns the WantAdvertiseInCommunitiesDirectory field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetWantAdvertiseInCommunitiesDirectory() bool {
	if o == nil || IsNil(o.WantAdvertiseInCommunitiesDirectory) {
		var ret bool
		return ret
	}
	return *o.WantAdvertiseInCommunitiesDirectory
}

// GetWantAdvertiseInCommunitiesDirectoryOk returns a tuple with the WantAdvertiseInCommunitiesDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetWantAdvertiseInCommunitiesDirectoryOk() (*bool, bool) {
	if o == nil || IsNil(o.WantAdvertiseInCommunitiesDirectory) {
		return nil, false
	}
	return o.WantAdvertiseInCommunitiesDirectory, true
}

// HasWantAdvertiseInCommunitiesDirectory returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasWantAdvertiseInCommunitiesDirectory() bool {
	if o != nil && !IsNil(o.WantAdvertiseInCommunitiesDirectory) {
		return true
	}

	return false
}

// SetWantAdvertiseInCommunitiesDirectory gets a reference to the given bool and assigns it to the WantAdvertiseInCommunitiesDirectory field.
func (o *SubscriptionRemoveEvent7Data) SetWantAdvertiseInCommunitiesDirectory(v bool) {
	o.WantAdvertiseInCommunitiesDirectory = &v
}

// GetWelcomeMessageCustomText returns the WelcomeMessageCustomText field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetWelcomeMessageCustomText() string {
	if o == nil || IsNil(o.WelcomeMessageCustomText) {
		var ret string
		return ret
	}
	return *o.WelcomeMessageCustomText
}

// GetWelcomeMessageCustomTextOk returns a tuple with the WelcomeMessageCustomText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetWelcomeMessageCustomTextOk() (*string, bool) {
	if o == nil || IsNil(o.WelcomeMessageCustomText) {
		return nil, false
	}
	return o.WelcomeMessageCustomText, true
}

// HasWelcomeMessageCustomText returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasWelcomeMessageCustomText() bool {
	if o != nil && !IsNil(o.WelcomeMessageCustomText) {
		return true
	}

	return false
}

// SetWelcomeMessageCustomText gets a reference to the given string and assigns it to the WelcomeMessageCustomText field.
func (o *SubscriptionRemoveEvent7Data) SetWelcomeMessageCustomText(v string) {
	o.WelcomeMessageCustomText = &v
}

// GetZulipUpdateAnnouncementsStreamId returns the ZulipUpdateAnnouncementsStreamId field value if set, zero value otherwise.
func (o *SubscriptionRemoveEvent7Data) GetZulipUpdateAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.ZulipUpdateAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.ZulipUpdateAnnouncementsStreamId
}

// GetZulipUpdateAnnouncementsStreamIdOk returns a tuple with the ZulipUpdateAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRemoveEvent7Data) GetZulipUpdateAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ZulipUpdateAnnouncementsStreamId) {
		return nil, false
	}
	return o.ZulipUpdateAnnouncementsStreamId, true
}

// HasZulipUpdateAnnouncementsStreamId returns a boolean if a field has been set.
func (o *SubscriptionRemoveEvent7Data) HasZulipUpdateAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.ZulipUpdateAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetZulipUpdateAnnouncementsStreamId gets a reference to the given int32 and assigns it to the ZulipUpdateAnnouncementsStreamId field.
func (o *SubscriptionRemoveEvent7Data) SetZulipUpdateAnnouncementsStreamId(v int32) {
	o.ZulipUpdateAnnouncementsStreamId = &v
}

func (o SubscriptionRemoveEvent7Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionRemoveEvent7Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMessageEditing) {
		toSerialize["allow_message_editing"] = o.AllowMessageEditing
	}
	if !IsNil(o.AuthenticationMethods) {
		toSerialize["authentication_methods"] = o.AuthenticationMethods
	}
	if !IsNil(o.CanAccessAllUsersGroup) {
		toSerialize["can_access_all_users_group"] = o.CanAccessAllUsersGroup
	}
	if !IsNil(o.CanCreateGroups) {
		toSerialize["can_create_groups"] = o.CanCreateGroups
	}
	if !IsNil(o.CanCreateBotsGroup) {
		toSerialize["can_create_bots_group"] = o.CanCreateBotsGroup
	}
	if !IsNil(o.CanCreateWriteOnlyBotsGroup) {
		toSerialize["can_create_write_only_bots_group"] = o.CanCreateWriteOnlyBotsGroup
	}
	if !IsNil(o.CanCreatePublicChannelGroup) {
		toSerialize["can_create_public_channel_group"] = o.CanCreatePublicChannelGroup
	}
	if !IsNil(o.CanCreatePrivateChannelGroup) {
		toSerialize["can_create_private_channel_group"] = o.CanCreatePrivateChannelGroup
	}
	if !IsNil(o.CanCreateWebPublicChannelGroup) {
		toSerialize["can_create_web_public_channel_group"] = o.CanCreateWebPublicChannelGroup
	}
	if !IsNil(o.CanAddCustomEmojiGroup) {
		toSerialize["can_add_custom_emoji_group"] = o.CanAddCustomEmojiGroup
	}
	if !IsNil(o.CanAddSubscribersGroup) {
		toSerialize["can_add_subscribers_group"] = o.CanAddSubscribersGroup
	}
	if !IsNil(o.CanDeleteAnyMessageGroup) {
		toSerialize["can_delete_any_message_group"] = o.CanDeleteAnyMessageGroup
	}
	if !IsNil(o.CanDeleteOwnMessageGroup) {
		toSerialize["can_delete_own_message_group"] = o.CanDeleteOwnMessageGroup
	}
	if !IsNil(o.CanSetDeleteMessagePolicyGroup) {
		toSerialize["can_set_delete_message_policy_group"] = o.CanSetDeleteMessagePolicyGroup
	}
	if !IsNil(o.CanSetTopicsPolicyGroup) {
		toSerialize["can_set_topics_policy_group"] = o.CanSetTopicsPolicyGroup
	}
	if !IsNil(o.CanInviteUsersGroup) {
		toSerialize["can_invite_users_group"] = o.CanInviteUsersGroup
	}
	if !IsNil(o.CanMentionManyUsersGroup) {
		toSerialize["can_mention_many_users_group"] = o.CanMentionManyUsersGroup
	}
	if !IsNil(o.CanMoveMessagesBetweenChannelsGroup) {
		toSerialize["can_move_messages_between_channels_group"] = o.CanMoveMessagesBetweenChannelsGroup
	}
	if !IsNil(o.CanMoveMessagesBetweenTopicsGroup) {
		toSerialize["can_move_messages_between_topics_group"] = o.CanMoveMessagesBetweenTopicsGroup
	}
	if !IsNil(o.CanResolveTopicsGroup) {
		toSerialize["can_resolve_topics_group"] = o.CanResolveTopicsGroup
	}
	if !IsNil(o.CanManageAllGroups) {
		toSerialize["can_manage_all_groups"] = o.CanManageAllGroups
	}
	if !IsNil(o.CanManageBillingGroup) {
		toSerialize["can_manage_billing_group"] = o.CanManageBillingGroup
	}
	if !IsNil(o.CanSummarizeTopicsGroup) {
		toSerialize["can_summarize_topics_group"] = o.CanSummarizeTopicsGroup
	}
	if !IsNil(o.CreateMultiuseInviteGroup) {
		toSerialize["create_multiuse_invite_group"] = o.CreateMultiuseInviteGroup
	}
	if !IsNil(o.DefaultCodeBlockLanguage) {
		toSerialize["default_code_block_language"] = o.DefaultCodeBlockLanguage
	}
	if !IsNil(o.DefaultLanguage) {
		toSerialize["default_language"] = o.DefaultLanguage
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DigestEmailsEnabled) {
		toSerialize["digest_emails_enabled"] = o.DigestEmailsEnabled
	}
	if !IsNil(o.DigestWeekday) {
		toSerialize["digest_weekday"] = o.DigestWeekday
	}
	if !IsNil(o.DirectMessageInitiatorGroup) {
		toSerialize["direct_message_initiator_group"] = o.DirectMessageInitiatorGroup
	}
	if !IsNil(o.DirectMessagePermissionGroup) {
		toSerialize["direct_message_permission_group"] = o.DirectMessagePermissionGroup
	}
	if !IsNil(o.DisallowDisposableEmailAddresses) {
		toSerialize["disallow_disposable_email_addresses"] = o.DisallowDisposableEmailAddresses
	}
	if !IsNil(o.EmailChangesDisabled) {
		toSerialize["email_changes_disabled"] = o.EmailChangesDisabled
	}
	if !IsNil(o.EnableReadReceipts) {
		toSerialize["enable_read_receipts"] = o.EnableReadReceipts
	}
	if !IsNil(o.EmailsRestrictedToDomains) {
		toSerialize["emails_restricted_to_domains"] = o.EmailsRestrictedToDomains
	}
	if !IsNil(o.EnableGuestUserDmWarning) {
		toSerialize["enable_guest_user_dm_warning"] = o.EnableGuestUserDmWarning
	}
	if !IsNil(o.EnableGuestUserIndicator) {
		toSerialize["enable_guest_user_indicator"] = o.EnableGuestUserIndicator
	}
	if !IsNil(o.EnableSpectatorAccess) {
		toSerialize["enable_spectator_access"] = o.EnableSpectatorAccess
	}
	if !IsNil(o.GiphyRating) {
		toSerialize["giphy_rating"] = o.GiphyRating
	}
	if !IsNil(o.IconSource) {
		toSerialize["icon_source"] = o.IconSource
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.InlineImagePreview) {
		toSerialize["inline_image_preview"] = o.InlineImagePreview
	}
	if !IsNil(o.InlineUrlEmbedPreview) {
		toSerialize["inline_url_embed_preview"] = o.InlineUrlEmbedPreview
	}
	if !IsNil(o.InviteRequired) {
		toSerialize["invite_required"] = o.InviteRequired
	}
	if o.JitsiServerUrl.IsSet() {
		toSerialize["jitsi_server_url"] = o.JitsiServerUrl.Get()
	}
	if !IsNil(o.LogoSource) {
		toSerialize["logo_source"] = o.LogoSource
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.TopicsPolicy) {
		toSerialize["topics_policy"] = o.TopicsPolicy
	}
	if !IsNil(o.MandatoryTopics) {
		toSerialize["mandatory_topics"] = o.MandatoryTopics
	}
	if !IsNil(o.MaxFileUploadSizeMib) {
		toSerialize["max_file_upload_size_mib"] = o.MaxFileUploadSizeMib
	}
	if !IsNil(o.MessageContentAllowedInEmailNotifications) {
		toSerialize["message_content_allowed_in_email_notifications"] = o.MessageContentAllowedInEmailNotifications
	}
	if o.MessageContentDeleteLimitSeconds.IsSet() {
		toSerialize["message_content_delete_limit_seconds"] = o.MessageContentDeleteLimitSeconds.Get()
	}
	if o.MessageContentEditLimitSeconds.IsSet() {
		toSerialize["message_content_edit_limit_seconds"] = o.MessageContentEditLimitSeconds.Get()
	}
	if !IsNil(o.MessageEditHistoryVisibilityPolicy) {
		toSerialize["message_edit_history_visibility_policy"] = o.MessageEditHistoryVisibilityPolicy
	}
	if !IsNil(o.ModerationRequestChannelId) {
		toSerialize["moderation_request_channel_id"] = o.ModerationRequestChannelId
	}
	if o.MoveMessagesWithinStreamLimitSeconds.IsSet() {
		toSerialize["move_messages_within_stream_limit_seconds"] = o.MoveMessagesWithinStreamLimitSeconds.Get()
	}
	if o.MoveMessagesBetweenStreamsLimitSeconds.IsSet() {
		toSerialize["move_messages_between_streams_limit_seconds"] = o.MoveMessagesBetweenStreamsLimitSeconds.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameChangesDisabled) {
		toSerialize["name_changes_disabled"] = o.NameChangesDisabled
	}
	if !IsNil(o.NightLogoSource) {
		toSerialize["night_logo_source"] = o.NightLogoSource
	}
	if !IsNil(o.NightLogoUrl) {
		toSerialize["night_logo_url"] = o.NightLogoUrl
	}
	if !IsNil(o.NewStreamAnnouncementsStreamId) {
		toSerialize["new_stream_announcements_stream_id"] = o.NewStreamAnnouncementsStreamId
	}
	if !IsNil(o.OrgType) {
		toSerialize["org_type"] = o.OrgType
	}
	if !IsNil(o.PlanType) {
		toSerialize["plan_type"] = o.PlanType
	}
	if !IsNil(o.PresenceDisabled) {
		toSerialize["presence_disabled"] = o.PresenceDisabled
	}
	if !IsNil(o.PushNotificationsEnabled) {
		toSerialize["push_notifications_enabled"] = o.PushNotificationsEnabled
	}
	if o.PushNotificationsEnabledEndTimestamp.IsSet() {
		toSerialize["push_notifications_enabled_end_timestamp"] = o.PushNotificationsEnabledEndTimestamp.Get()
	}
	if !IsNil(o.RequireE2eePushNotifications) {
		toSerialize["require_e2ee_push_notifications"] = o.RequireE2eePushNotifications
	}
	if !IsNil(o.RequireUniqueNames) {
		toSerialize["require_unique_names"] = o.RequireUniqueNames
	}
	if !IsNil(o.SendWelcomeEmails) {
		toSerialize["send_welcome_emails"] = o.SendWelcomeEmails
	}
	if !IsNil(o.SignupAnnouncementsStreamId) {
		toSerialize["signup_announcements_stream_id"] = o.SignupAnnouncementsStreamId
	}
	if o.UploadQuotaMib.IsSet() {
		toSerialize["upload_quota_mib"] = o.UploadQuotaMib.Get()
	}
	if !IsNil(o.VideoChatProvider) {
		toSerialize["video_chat_provider"] = o.VideoChatProvider
	}
	if !IsNil(o.WaitingPeriodThreshold) {
		toSerialize["waiting_period_threshold"] = o.WaitingPeriodThreshold
	}
	if !IsNil(o.WantAdvertiseInCommunitiesDirectory) {
		toSerialize["want_advertise_in_communities_directory"] = o.WantAdvertiseInCommunitiesDirectory
	}
	if !IsNil(o.WelcomeMessageCustomText) {
		toSerialize["welcome_message_custom_text"] = o.WelcomeMessageCustomText
	}
	if !IsNil(o.ZulipUpdateAnnouncementsStreamId) {
		toSerialize["zulip_update_announcements_stream_id"] = o.ZulipUpdateAnnouncementsStreamId
	}
	return toSerialize, nil
}

type NullableSubscriptionRemoveEvent7Data struct {
	value *SubscriptionRemoveEvent7Data
	isSet bool
}

func (v NullableSubscriptionRemoveEvent7Data) Get() *SubscriptionRemoveEvent7Data {
	return v.value
}

func (v *NullableSubscriptionRemoveEvent7Data) Set(val *SubscriptionRemoveEvent7Data) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRemoveEvent7Data) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRemoveEvent7Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRemoveEvent7Data(val *SubscriptionRemoveEvent7Data) *NullableSubscriptionRemoveEvent7Data {
	return &NullableSubscriptionRemoveEvent7Data{value: val, isSet: true}
}

func (v NullableSubscriptionRemoveEvent7Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRemoveEvent7Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
