/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MutedTopicsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MutedTopicsEvent{}

// MutedTopicsEvent Event sent to a user's clients when that user's set of configured muted topics have changed.
type MutedTopicsEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Array of tuples, where each tuple describes a muted topic. The first element of the tuple is the channel name in which the topic has to be muted, the second element is the topic name to be muted and the third element is an integer UNIX timestamp representing when the topic was muted.  **Changes**: Deprecated in Zulip 6.0 (feature level 134). Starting with this version, clients that explicitly requested the replacement `user_topic` event type when registering their event queue will not receive this legacy event type.  Before Zulip 3.0 (feature level 1), the `muted_topics` array objects were 2-item tuples and did not include the timestamp information for when the topic was muted.
	// Deprecated
	MutedTopics [][]UserSettingsUpdateEvent1MutedTopicsInnerInner `json:"muted_topics,omitempty"`
}

// NewUserSettingsUpdateEvent1 instantiates a new MutedTopicsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsUpdateEvent1() *MutedTopicsEvent {
	this := MutedTopicsEvent{}
	return &this
}

// NewUserSettingsUpdateEvent1WithDefaults instantiates a new MutedTopicsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsUpdateEvent1WithDefaults() *MutedTopicsEvent {
	this := MutedTopicsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MutedTopicsEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutedTopicsEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MutedTopicsEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MutedTopicsEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MutedTopicsEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutedTopicsEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MutedTopicsEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MutedTopicsEvent) SetType(v string) {
	o.Type = &v
}

// GetMutedTopics returns the MutedTopics field value if set, zero value otherwise.
// Deprecated
func (o *MutedTopicsEvent) GetMutedTopics() [][]UserSettingsUpdateEvent1MutedTopicsInnerInner {
	if o == nil || IsNil(o.MutedTopics) {
		var ret [][]UserSettingsUpdateEvent1MutedTopicsInnerInner
		return ret
	}
	return o.MutedTopics
}

// GetMutedTopicsOk returns a tuple with the MutedTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *MutedTopicsEvent) GetMutedTopicsOk() ([][]UserSettingsUpdateEvent1MutedTopicsInnerInner, bool) {
	if o == nil || IsNil(o.MutedTopics) {
		return nil, false
	}
	return o.MutedTopics, true
}

// HasMutedTopics returns a boolean if a field has been set.
func (o *MutedTopicsEvent) HasMutedTopics() bool {
	if o != nil && !IsNil(o.MutedTopics) {
		return true
	}

	return false
}

// SetMutedTopics gets a reference to the given [][]UserSettingsUpdateEvent1MutedTopicsInnerInner and assigns it to the MutedTopics field.
// Deprecated
func (o *MutedTopicsEvent) SetMutedTopics(v [][]UserSettingsUpdateEvent1MutedTopicsInnerInner) {
	o.MutedTopics = v
}

func (o MutedTopicsEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MutedTopicsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MutedTopics) {
		toSerialize["muted_topics"] = o.MutedTopics
	}
	return toSerialize, nil
}

type NullableUserSettingsUpdateEvent1 struct {
	value *MutedTopicsEvent
	isSet bool
}

func (v NullableUserSettingsUpdateEvent1) Get() *MutedTopicsEvent {
	return v.value
}

func (v *NullableUserSettingsUpdateEvent1) Set(val *MutedTopicsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsUpdateEvent1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsUpdateEvent1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsUpdateEvent1(val *MutedTopicsEvent) *NullableUserSettingsUpdateEvent1 {
	return &NullableUserSettingsUpdateEvent1{value: val, isSet: true}
}

func (v NullableUserSettingsUpdateEvent1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsUpdateEvent1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
