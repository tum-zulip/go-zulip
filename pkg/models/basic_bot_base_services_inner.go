/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// BasicBotBaseServicesInner - Object with extra configuration details for the bot. The fields in the object depend on the type of bot.
type BasicBotBaseServicesInner struct {
	BasicBotBaseServicesInnerOneOf  *BasicBotBaseServicesInnerOneOf
	BasicBotBaseServicesInnerOneOf1 *BasicBotBaseServicesInnerOneOf1
}

// BasicBotBaseServicesInnerOneOfAsBasicBotBaseServicesInner is a convenience function that returns BasicBotBaseServicesInnerOneOf wrapped in BasicBotBaseServicesInner
func BasicBotBaseServicesInnerOneOfAsBasicBotBaseServicesInner(v *BasicBotBaseServicesInnerOneOf) BasicBotBaseServicesInner {
	return BasicBotBaseServicesInner{
		BasicBotBaseServicesInnerOneOf: v,
	}
}

// BasicBotBaseServicesInnerOneOf1AsBasicBotBaseServicesInner is a convenience function that returns BasicBotBaseServicesInnerOneOf1 wrapped in BasicBotBaseServicesInner
func BasicBotBaseServicesInnerOneOf1AsBasicBotBaseServicesInner(v *BasicBotBaseServicesInnerOneOf1) BasicBotBaseServicesInner {
	return BasicBotBaseServicesInner{
		BasicBotBaseServicesInnerOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BasicBotBaseServicesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BasicBotBaseServicesInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.BasicBotBaseServicesInnerOneOf)
	if err == nil {
		jsonBasicBotBaseServicesInnerOneOf, _ := json.Marshal(dst.BasicBotBaseServicesInnerOneOf)
		if string(jsonBasicBotBaseServicesInnerOneOf) == "{}" { // empty struct
			dst.BasicBotBaseServicesInnerOneOf = nil
		} else {
			if err = validator.Validate(dst.BasicBotBaseServicesInnerOneOf); err != nil {
				dst.BasicBotBaseServicesInnerOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.BasicBotBaseServicesInnerOneOf = nil
	}

	// try to unmarshal data into BasicBotBaseServicesInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.BasicBotBaseServicesInnerOneOf1)
	if err == nil {
		jsonBasicBotBaseServicesInnerOneOf1, _ := json.Marshal(dst.BasicBotBaseServicesInnerOneOf1)
		if string(jsonBasicBotBaseServicesInnerOneOf1) == "{}" { // empty struct
			dst.BasicBotBaseServicesInnerOneOf1 = nil
		} else {
			if err = validator.Validate(dst.BasicBotBaseServicesInnerOneOf1); err != nil {
				dst.BasicBotBaseServicesInnerOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BasicBotBaseServicesInnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BasicBotBaseServicesInnerOneOf = nil
		dst.BasicBotBaseServicesInnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BasicBotBaseServicesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BasicBotBaseServicesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BasicBotBaseServicesInner) MarshalJSON() ([]byte, error) {
	if src.BasicBotBaseServicesInnerOneOf != nil {
		return json.Marshal(&src.BasicBotBaseServicesInnerOneOf)
	}

	if src.BasicBotBaseServicesInnerOneOf1 != nil {
		return json.Marshal(&src.BasicBotBaseServicesInnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BasicBotBaseServicesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BasicBotBaseServicesInnerOneOf != nil {
		return obj.BasicBotBaseServicesInnerOneOf
	}

	if obj.BasicBotBaseServicesInnerOneOf1 != nil {
		return obj.BasicBotBaseServicesInnerOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BasicBotBaseServicesInner) GetActualInstanceValue() interface{} {
	if obj.BasicBotBaseServicesInnerOneOf != nil {
		return *obj.BasicBotBaseServicesInnerOneOf
	}

	if obj.BasicBotBaseServicesInnerOneOf1 != nil {
		return *obj.BasicBotBaseServicesInnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableBasicBotBaseServicesInner struct {
	value *BasicBotBaseServicesInner
	isSet bool
}

func (v NullableBasicBotBaseServicesInner) Get() *BasicBotBaseServicesInner {
	return v.value
}

func (v *NullableBasicBotBaseServicesInner) Set(val *BasicBotBaseServicesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicBotBaseServicesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicBotBaseServicesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicBotBaseServicesInner(val *BasicBotBaseServicesInner) *NullableBasicBotBaseServicesInner {
	return &NullableBasicBotBaseServicesInner{value: val, isSet: true}
}

func (v NullableBasicBotBaseServicesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicBotBaseServicesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
