/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// ScheduledMessageBaseTo - The scheduled message's tentative target audience.  For channel messages, it will be the unique ID of the target channel. For direct messages, it will be an array with the target users' IDs.
type ScheduledMessageBaseTo struct {
	ArrayOfInt32 *[]int32
	Int32        *int32
}

// []int32AsScheduledMessageBaseTo is a convenience function that returns []int32 wrapped in ScheduledMessageBaseTo
func ArrayOfInt32AsScheduledMessageBaseTo(v *[]int32) ScheduledMessageBaseTo {
	return ScheduledMessageBaseTo{
		ArrayOfInt32: v,
	}
}

// int32AsScheduledMessageBaseTo is a convenience function that returns int32 wrapped in ScheduledMessageBaseTo
func Int32AsScheduledMessageBaseTo(v *int32) ScheduledMessageBaseTo {
	return ScheduledMessageBaseTo{
		Int32: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScheduledMessageBaseTo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfInt32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfInt32)
	if err == nil {
		jsonArrayOfInt32, _ := json.Marshal(dst.ArrayOfInt32)
		if string(jsonArrayOfInt32) == "{}" { // empty struct
			dst.ArrayOfInt32 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfInt32); err != nil {
				dst.ArrayOfInt32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfInt32 = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfInt32 = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScheduledMessageBaseTo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScheduledMessageBaseTo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScheduledMessageBaseTo) MarshalJSON() ([]byte, error) {
	if src.ArrayOfInt32 != nil {
		return json.Marshal(&src.ArrayOfInt32)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScheduledMessageBaseTo) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfInt32 != nil {
		return obj.ArrayOfInt32
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ScheduledMessageBaseTo) GetActualInstanceValue() interface{} {
	if obj.ArrayOfInt32 != nil {
		return *obj.ArrayOfInt32
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableScheduledMessageBaseTo struct {
	value *ScheduledMessageBaseTo
	isSet bool
}

func (v NullableScheduledMessageBaseTo) Get() *ScheduledMessageBaseTo {
	return v.value
}

func (v *NullableScheduledMessageBaseTo) Set(val *ScheduledMessageBaseTo) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledMessageBaseTo) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledMessageBaseTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledMessageBaseTo(val *ScheduledMessageBaseTo) *NullableScheduledMessageBaseTo {
	return &NullableScheduledMessageBaseTo{value: val, isSet: true}
}

func (v NullableScheduledMessageBaseTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledMessageBaseTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
