/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// RegisterQueuePresenceValue - Will be one of these two formats (modern or legacy) for user presence data:
type RegisterQueuePresenceValue struct {
	ModernPresenceFormat *ModernPresenceFormat
	LegacyPresenceMap    *map[string]LegacyPresenceFormat
}

// ModernPresenceFormatAsRegisterQueuePresence is a convenience function that returns ModernPresenceFormat wrapped in RegisterQueuePresenceValue
func ModernPresenceFormatAsRegisterQueuePresence(v *ModernPresenceFormat) RegisterQueuePresenceValue {
	return RegisterQueuePresenceValue{
		ModernPresenceFormat: v,
	}
}

// LegacyPresenceMapAsRegisterQueuePresence is a convenience function that returns map[string]LegacyPresenceFormat wrapped in RegisterQueuePresenceValue
func LegacyPresenceMapAsRegisterQueuePresence(v *map[string]LegacyPresenceFormat) RegisterQueuePresenceValue {
	return RegisterQueuePresenceValue{
		LegacyPresenceMap: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegisterQueuePresenceValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ModernPresenceFormat
	err = newStrictDecoder(data).Decode(&dst.ModernPresenceFormat)
	if err == nil {
		jsonModernPresenceFormat, _ := json.Marshal(dst.ModernPresenceFormat)
		if string(jsonModernPresenceFormat) == "{}" { // empty struct
			dst.ModernPresenceFormat = nil
		} else {
			if err = validator.Validate(dst.ModernPresenceFormat); err != nil {
				dst.ModernPresenceFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.ModernPresenceFormat = nil
	}

	// try to unmarshal data into LegacyPresenceMap
	err = newStrictDecoder(data).Decode(&dst.LegacyPresenceMap)
	if err == nil {
		jsonLegacyPresenceMap, _ := json.Marshal(dst.LegacyPresenceMap)
		if string(jsonLegacyPresenceMap) == "{}" { // empty struct
			dst.LegacyPresenceMap = nil
		} else {
			if err = validator.Validate(dst.LegacyPresenceMap); err != nil {
				dst.LegacyPresenceMap = nil
			} else {
				match++
			}
		}
	} else {
		dst.LegacyPresenceMap = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ModernPresenceFormat = nil
		dst.LegacyPresenceMap = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegisterQueuePresenceValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegisterQueuePresenceValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegisterQueuePresenceValue) MarshalJSON() ([]byte, error) {
	if src.ModernPresenceFormat != nil {
		return json.Marshal(&src.ModernPresenceFormat)
	}

	if src.LegacyPresenceMap != nil {
		return json.Marshal(&src.LegacyPresenceMap)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegisterQueuePresenceValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ModernPresenceFormat != nil {
		return obj.ModernPresenceFormat
	}

	if obj.LegacyPresenceMap != nil {
		return obj.LegacyPresenceMap
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RegisterQueuePresenceValue) GetActualInstanceValue() interface{} {
	if obj.ModernPresenceFormat != nil {
		return *obj.ModernPresenceFormat
	}

	if obj.LegacyPresenceMap != nil {
		return *obj.LegacyPresenceMap
	}

	// all schemas are nil
	return nil
}

type NullableRegisterQueuePresenceValue struct {
	value *RegisterQueuePresenceValue
	isSet bool
}

func (v NullableRegisterQueuePresenceValue) Get() *RegisterQueuePresenceValue {
	return v.value
}

func (v *NullableRegisterQueuePresenceValue) Set(val *RegisterQueuePresenceValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterQueuePresenceValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterQueuePresenceValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterQueuePresenceValue(val *RegisterQueuePresenceValue) *NullableRegisterQueuePresenceValue {
	return &NullableRegisterQueuePresenceValue{value: val, isSet: true}
}

func (v NullableRegisterQueuePresenceValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterQueuePresenceValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
