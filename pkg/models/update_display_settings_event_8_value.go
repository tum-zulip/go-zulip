/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// UpdateDisplaySettingsEvent8Value - The new value of the changed property.  **Changes**: Starting with Zulip 11.0 (feature level 389), this value can be `null` when a channel is removed from the folder.  Starting with Zulip 10.0 (feature level 320), this field can be an object for `can_remove_subscribers_group` property, which is a [group-setting value][setting-values], when the setting is set to a combination of users and groups.  [setting-values]: /api/group-setting-values
type UpdateDisplaySettingsEvent8Value struct {
	UpdateDisplaySettingsEvent8ValueOneOf *UpdateDisplaySettingsEvent8ValueOneOf
	Bool                                  *bool
	Int32                                 *int32
	String                                *string
}

// UpdateDisplaySettingsEvent8ValueFromOneOf is a convenience function that returns UpdateDisplaySettingsEvent8ValueOneOf wrapped in UpdateDisplaySettingsEvent8Value
func UpdateDisplaySettingsEvent8ValueFromOneOf(v *UpdateDisplaySettingsEvent8ValueOneOf) UpdateDisplaySettingsEvent8Value {
	return UpdateDisplaySettingsEvent8Value{
		UpdateDisplaySettingsEvent8ValueOneOf: v,
	}
}

// boolAsUpdateDisplaySettingsEvent8Value is a convenience function that returns bool wrapped in UpdateDisplaySettingsEvent8Value
func BoolAsUpdateDisplaySettingsEvent8Value(v *bool) UpdateDisplaySettingsEvent8Value {
	return UpdateDisplaySettingsEvent8Value{
		Bool: v,
	}
}

// int32AsUpdateDisplaySettingsEvent8Value is a convenience function that returns int32 wrapped in UpdateDisplaySettingsEvent8Value
func Int32AsUpdateDisplaySettingsEvent8Value(v *int32) UpdateDisplaySettingsEvent8Value {
	return UpdateDisplaySettingsEvent8Value{
		Int32: v,
	}
}

// stringAsUpdateDisplaySettingsEvent8Value is a convenience function that returns string wrapped in UpdateDisplaySettingsEvent8Value
func StringAsUpdateDisplaySettingsEvent8Value(v *string) UpdateDisplaySettingsEvent8Value {
	return UpdateDisplaySettingsEvent8Value{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDisplaySettingsEvent8Value) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDisplaySettingsEvent8ValueOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateDisplaySettingsEvent8ValueOneOf)
	if err == nil {
		jsonUpdateDisplaySettingsEvent8ValueOneOf, _ := json.Marshal(dst.UpdateDisplaySettingsEvent8ValueOneOf)
		if string(jsonUpdateDisplaySettingsEvent8ValueOneOf) == "{}" { // empty struct
			dst.UpdateDisplaySettingsEvent8ValueOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateDisplaySettingsEvent8ValueOneOf); err != nil {
				dst.UpdateDisplaySettingsEvent8ValueOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateDisplaySettingsEvent8ValueOneOf = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDisplaySettingsEvent8ValueOneOf = nil
		dst.Bool = nil
		dst.Int32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDisplaySettingsEvent8Value)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDisplaySettingsEvent8Value)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDisplaySettingsEvent8Value) MarshalJSON() ([]byte, error) {
	if src.UpdateDisplaySettingsEvent8ValueOneOf != nil {
		return json.Marshal(&src.UpdateDisplaySettingsEvent8ValueOneOf)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDisplaySettingsEvent8Value) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDisplaySettingsEvent8ValueOneOf != nil {
		return obj.UpdateDisplaySettingsEvent8ValueOneOf
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateDisplaySettingsEvent8Value) GetActualInstanceValue() interface{} {
	if obj.UpdateDisplaySettingsEvent8ValueOneOf != nil {
		return *obj.UpdateDisplaySettingsEvent8ValueOneOf
	}

	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDisplaySettingsEvent8Value struct {
	value *UpdateDisplaySettingsEvent8Value
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent8Value) Get() *UpdateDisplaySettingsEvent8Value {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent8Value) Set(val *UpdateDisplaySettingsEvent8Value) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent8Value) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent8Value) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent8Value(val *UpdateDisplaySettingsEvent8Value) *NullableUpdateDisplaySettingsEvent8Value {
	return &NullableUpdateDisplaySettingsEvent8Value{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent8Value) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent8Value) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
