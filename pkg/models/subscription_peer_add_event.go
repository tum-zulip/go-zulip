/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SubscriptionPeerAddEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPeerAddEvent{}

// SubscriptionPeerAddEvent Event sent when another user subscribes to a channel, or their subscription is newly visible to the current user.  When a user subscribes to a channel, the current user will receive this event only if they [have permission to see the channel's subscriber list](/help/channel-permissions). When the current user gains permission to see a given channel's subscriber list, they will receive this event for the existing subscriptions to the channel.  **Changes**: Prior to Zulip 8.0 (feature level 220), this event was incorrectly not sent to guest users when subscribers to web-public channels and subscribed public channels changed.  Prior to Zulip 8.0 (feature level 205), this event was not sent when a user gained access to a channel due to their [role changing](/help/user-roles).  Prior to Zulip 6.0 (feature level 134), this event was not sent when a private channel was made public.  In Zulip 4.0 (feature level 35), the singular `user_id` and `stream_id` integers included in this event were replaced with plural `user_ids` and `stream_ids` integer arrays.  In Zulip 3.0 (feature level 19), the `stream_id` field was added to identify the channel the user subscribed to, replacing the `name` field.
type SubscriptionPeerAddEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The IDs of channels that have new or updated subscriber data.  **Changes**: New in Zulip 4.0 (feature level 35), replacing the `stream_id` integer.
	StreamIds []int32 `json:"stream_ids,omitempty"`
	// The IDs of the users who are newly visible as subscribed to the specified channels.  **Changes**: New in Zulip 4.0 (feature level 35), replacing the `user_id` integer.
	UserIds []int32 `json:"user_ids,omitempty"`
}

// NewSubscriptionPeerAddEvent instantiates a new SubscriptionPeerAddEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPeerAddEvent() *SubscriptionPeerAddEvent {
	this := SubscriptionPeerAddEvent{}
	return &this
}

// NewSubscriptionPeerAddEventWithDefaults instantiates a new SubscriptionPeerAddEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPeerAddEventWithDefaults() *SubscriptionPeerAddEvent {
	this := SubscriptionPeerAddEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubscriptionPeerAddEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubscriptionPeerAddEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *SubscriptionPeerAddEvent) SetOp(v string) {
	o.Op = &v
}

// GetStreamIds returns the StreamIds field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent) GetStreamIds() []int32 {
	if o == nil || IsNil(o.StreamIds) {
		var ret []int32
		return ret
	}
	return o.StreamIds
}

// GetStreamIdsOk returns a tuple with the StreamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent) GetStreamIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.StreamIds) {
		return nil, false
	}
	return o.StreamIds, true
}

// HasStreamIds returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent) HasStreamIds() bool {
	if o != nil && !IsNil(o.StreamIds) {
		return true
	}

	return false
}

// SetStreamIds gets a reference to the given []int32 and assigns it to the StreamIds field.
func (o *SubscriptionPeerAddEvent) SetStreamIds(v []int32) {
	o.StreamIds = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent) GetUserIds() []int32 {
	if o == nil || IsNil(o.UserIds) {
		var ret []int32
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent) GetUserIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []int32 and assigns it to the UserIds field.
func (o *SubscriptionPeerAddEvent) SetUserIds(v []int32) {
	o.UserIds = v
}

func (o SubscriptionPeerAddEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPeerAddEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.StreamIds) {
		toSerialize["stream_ids"] = o.StreamIds
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableSubscriptionPeerAddEvent struct {
	value *SubscriptionPeerAddEvent
	isSet bool
}

func (v NullableSubscriptionPeerAddEvent) Get() *SubscriptionPeerAddEvent {
	return v.value
}

func (v *NullableSubscriptionPeerAddEvent) Set(val *SubscriptionPeerAddEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPeerAddEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPeerAddEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPeerAddEvent(val *SubscriptionPeerAddEvent) *NullableSubscriptionPeerAddEvent {
	return &NullableSubscriptionPeerAddEvent{value: val, isSet: true}
}

func (v NullableSubscriptionPeerAddEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPeerAddEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
