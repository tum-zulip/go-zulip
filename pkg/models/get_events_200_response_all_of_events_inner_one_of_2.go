/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf2{}

// GetEvents200ResponseAllOfEventsInnerOneOf2 Event sent to a user's clients when that user's [notification settings](/api/update-settings) have changed with an additional rule that it is only sent to clients that did not include `user_settings_object` in their `client_capabilities` when registering the event queue.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and process the `user_settings` event type instead.
type GetEvents200ResponseAllOfEventsInnerOneOf2 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// The Zulip API email of the user.
	User *string `json:"user,omitempty"`
	// Name of the changed notification setting.
	NotificationName *string                                            `json:"notification_name,omitempty"`
	Setting          *GetEvents200ResponseAllOfEventsInnerOneOf1Setting `json:"setting,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf2 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf2() *GetEvents200ResponseAllOfEventsInnerOneOf2 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf2{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf2WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf2WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf2 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) SetUser(v string) {
	o.User = &v
}

// GetNotificationName returns the NotificationName field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetNotificationName() string {
	if o == nil || IsNil(o.NotificationName) {
		var ret string
		return ret
	}
	return *o.NotificationName
}

// GetNotificationNameOk returns a tuple with the NotificationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetNotificationNameOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationName) {
		return nil, false
	}
	return o.NotificationName, true
}

// HasNotificationName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) HasNotificationName() bool {
	if o != nil && !IsNil(o.NotificationName) {
		return true
	}

	return false
}

// SetNotificationName gets a reference to the given string and assigns it to the NotificationName field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) SetNotificationName(v string) {
	o.NotificationName = &v
}

// GetSetting returns the Setting field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetSetting() GetEvents200ResponseAllOfEventsInnerOneOf1Setting {
	if o == nil || IsNil(o.Setting) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf1Setting
		return ret
	}
	return *o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) GetSettingOk() (*GetEvents200ResponseAllOfEventsInnerOneOf1Setting, bool) {
	if o == nil || IsNil(o.Setting) {
		return nil, false
	}
	return o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) HasSetting() bool {
	if o != nil && !IsNil(o.Setting) {
		return true
	}

	return false
}

// SetSetting gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf1Setting and assigns it to the Setting field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf2) SetSetting(v GetEvents200ResponseAllOfEventsInnerOneOf1Setting) {
	o.Setting = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.NotificationName) {
		toSerialize["notification_name"] = o.NotificationName
	}
	if !IsNil(o.Setting) {
		toSerialize["setting"] = o.Setting
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf2 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf2
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf2) Get() *GetEvents200ResponseAllOfEventsInnerOneOf2 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf2) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf2(val *GetEvents200ResponseAllOfEventsInnerOneOf2) *NullableGetEvents200ResponseAllOfEventsInnerOneOf2 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf2{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
