/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InvitationFailedError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvitationFailedError{}

// InvitationFailedError struct for InvitationFailedError
type InvitationFailedError struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// A string that identifies the error.
	Code string `json:"code"`
	// An array of arrays of length 3, where each inner array consists of (a) an email address that was skipped while sending invitations, (b) the corresponding error message, and (c) a boolean which is `true` when the email address already uses Zulip and the corresponding user is deactivated in the organization.
	Errors [][]InvitationFailedErrorAllOfErrorsInnerInner `json:"errors,omitempty"`
	// A boolean specifying whether any invitations were sent.
	SentInvitations *bool `json:"sent_invitations,omitempty"`
	// A boolean specifying whether the limit on the number of invitations that can be sent in the organization in a day has been reached.
	DailyLimitReached *bool `json:"daily_limit_reached,omitempty"`
	// A boolean specifying whether the organization have enough unused Zulip licenses to invite specified number of users.
	LicenseLimitReached *bool `json:"license_limit_reached,omitempty"`
}

type _InvitationFailedError InvitationFailedError

// NewInvitationFailedError instantiates a new InvitationFailedError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationFailedError(result string, msg string, code string) *InvitationFailedError {
	this := InvitationFailedError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewInvitationFailedErrorWithDefaults instantiates a new InvitationFailedError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationFailedErrorWithDefaults() *InvitationFailedError {
	this := InvitationFailedError{}
	return &this
}

// GetResult returns the Result field value
func (o *InvitationFailedError) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *InvitationFailedError) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *InvitationFailedError) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *InvitationFailedError) SetMsg(v string) {
	o.Msg = v
}

// GetCode returns the Code field value
func (o *InvitationFailedError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *InvitationFailedError) SetCode(v string) {
	o.Code = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InvitationFailedError) GetErrors() [][]InvitationFailedErrorAllOfErrorsInnerInner {
	if o == nil || IsNil(o.Errors) {
		var ret [][]InvitationFailedErrorAllOfErrorsInnerInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetErrorsOk() ([][]InvitationFailedErrorAllOfErrorsInnerInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InvitationFailedError) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given [][]InvitationFailedErrorAllOfErrorsInnerInner and assigns it to the Errors field.
func (o *InvitationFailedError) SetErrors(v [][]InvitationFailedErrorAllOfErrorsInnerInner) {
	o.Errors = v
}

// GetSentInvitations returns the SentInvitations field value if set, zero value otherwise.
func (o *InvitationFailedError) GetSentInvitations() bool {
	if o == nil || IsNil(o.SentInvitations) {
		var ret bool
		return ret
	}
	return *o.SentInvitations
}

// GetSentInvitationsOk returns a tuple with the SentInvitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetSentInvitationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SentInvitations) {
		return nil, false
	}
	return o.SentInvitations, true
}

// HasSentInvitations returns a boolean if a field has been set.
func (o *InvitationFailedError) HasSentInvitations() bool {
	if o != nil && !IsNil(o.SentInvitations) {
		return true
	}

	return false
}

// SetSentInvitations gets a reference to the given bool and assigns it to the SentInvitations field.
func (o *InvitationFailedError) SetSentInvitations(v bool) {
	o.SentInvitations = &v
}

// GetDailyLimitReached returns the DailyLimitReached field value if set, zero value otherwise.
func (o *InvitationFailedError) GetDailyLimitReached() bool {
	if o == nil || IsNil(o.DailyLimitReached) {
		var ret bool
		return ret
	}
	return *o.DailyLimitReached
}

// GetDailyLimitReachedOk returns a tuple with the DailyLimitReached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetDailyLimitReachedOk() (*bool, bool) {
	if o == nil || IsNil(o.DailyLimitReached) {
		return nil, false
	}
	return o.DailyLimitReached, true
}

// HasDailyLimitReached returns a boolean if a field has been set.
func (o *InvitationFailedError) HasDailyLimitReached() bool {
	if o != nil && !IsNil(o.DailyLimitReached) {
		return true
	}

	return false
}

// SetDailyLimitReached gets a reference to the given bool and assigns it to the DailyLimitReached field.
func (o *InvitationFailedError) SetDailyLimitReached(v bool) {
	o.DailyLimitReached = &v
}

// GetLicenseLimitReached returns the LicenseLimitReached field value if set, zero value otherwise.
func (o *InvitationFailedError) GetLicenseLimitReached() bool {
	if o == nil || IsNil(o.LicenseLimitReached) {
		var ret bool
		return ret
	}
	return *o.LicenseLimitReached
}

// GetLicenseLimitReachedOk returns a tuple with the LicenseLimitReached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvitationFailedError) GetLicenseLimitReachedOk() (*bool, bool) {
	if o == nil || IsNil(o.LicenseLimitReached) {
		return nil, false
	}
	return o.LicenseLimitReached, true
}

// HasLicenseLimitReached returns a boolean if a field has been set.
func (o *InvitationFailedError) HasLicenseLimitReached() bool {
	if o != nil && !IsNil(o.LicenseLimitReached) {
		return true
	}

	return false
}

// SetLicenseLimitReached gets a reference to the given bool and assigns it to the LicenseLimitReached field.
func (o *InvitationFailedError) SetLicenseLimitReached(v bool) {
	o.LicenseLimitReached = &v
}

func (o InvitationFailedError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvitationFailedError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	toSerialize["code"] = o.Code
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.SentInvitations) {
		toSerialize["sent_invitations"] = o.SentInvitations
	}
	if !IsNil(o.DailyLimitReached) {
		toSerialize["daily_limit_reached"] = o.DailyLimitReached
	}
	if !IsNil(o.LicenseLimitReached) {
		toSerialize["license_limit_reached"] = o.LicenseLimitReached
	}
	return toSerialize, nil
}

func (o *InvitationFailedError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvitationFailedError := _InvitationFailedError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvitationFailedError)

	if err != nil {
		return err
	}

	*o = InvitationFailedError(varInvitationFailedError)

	return err
}

type NullableInvitationFailedError struct {
	value *InvitationFailedError
	isSet bool
}

func (v NullableInvitationFailedError) Get() *InvitationFailedError {
	return v.value
}

func (v *NullableInvitationFailedError) Set(val *InvitationFailedError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationFailedError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationFailedError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationFailedError(val *InvitationFailedError) *NullableInvitationFailedError {
	return &NullableInvitationFailedError{value: val, isSet: true}
}

func (v NullableInvitationFailedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationFailedError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
