/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf20 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf20{}

// GetEvents200ResponseAllOfEventsInnerOneOf20 Event sent when a reaction is removed from a message. Sent to all users who were recipients of the message.
type GetEvents200ResponseAllOfEventsInnerOneOf20 struct {
	// Name of the emoji.
	EmojiName *string `json:"emoji_name,omitempty"`
	// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.
	EmojiCode *string `json:"emoji_code,omitempty"`
	// A string indicating the type of emoji. Each emoji `reaction_type` has an independent namespace for values of `emoji_code`.  Must be one of the following values:  - `unicode_emoji` : In this namespace, `emoji_code` will be a   dash-separated hex encoding of the sequence of Unicode codepoints   that define this emoji in the Unicode specification.  - `realm_emoji` : In this namespace, `emoji_code` will be the ID of   the uploaded [custom emoji](/help/custom-emoji).  - `zulip_extra_emoji` : These are special emoji included with Zulip.   In this namespace, `emoji_code` will be the name of the emoji (e.g.   \"zulip\").
	ReactionType *string `json:"reaction_type,omitempty"`
	// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future.
	UserId *int32 `json:"user_id,omitempty"`
	// Deprecated
	User *EmojiReactionEventAllOfUser `json:"user,omitempty"`
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32                                                `json:"id,omitempty"`
	Type *GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType `json:"type,omitempty"`
	Op   *string                                               `json:"op,omitempty"`
	// The ID of the message from which the reaction was removed.
	MessageId *int32 `json:"message_id,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf20 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf20 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf20() *GetEvents200ResponseAllOfEventsInnerOneOf20 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf20{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf20WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf20 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf20WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf20 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf20{}
	return &this
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName) {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetEmojiNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetEmojiCode() string {
	if o == nil || IsNil(o.EmojiCode) {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetEmojiCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetReactionType(v string) {
	o.ReactionType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetUserId(v int32) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetUser() EmojiReactionEventAllOfUser {
	if o == nil || IsNil(o.User) {
		var ret EmojiReactionEventAllOfUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetUserOk() (*EmojiReactionEventAllOfUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given EmojiReactionEventAllOfUser and assigns it to the User field.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetUser(v EmojiReactionEventAllOfUser) {
	o.User = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetType() GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType {
	if o == nil || IsNil(o.Type) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetTypeOk() (*GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetType(v GetEvents200ResponseAllOfEventsInnerOneOf20AllOfType) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetOp(v string) {
	o.Op = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf20) SetMessageId(v int32) {
	o.MessageId = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf20) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf20) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmojiName) {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if !IsNil(o.EmojiCode) {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf20 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf20
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf20) Get() *GetEvents200ResponseAllOfEventsInnerOneOf20 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf20) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf20) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf20) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf20) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf20(val *GetEvents200ResponseAllOfEventsInnerOneOf20) *NullableGetEvents200ResponseAllOfEventsInnerOneOf20 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf20{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf20) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf20) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
