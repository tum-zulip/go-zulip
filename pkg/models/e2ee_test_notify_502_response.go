/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// E2eeTestNotify502Response - struct for E2eeTestNotify502Response
type E2eeTestNotify502Response struct {
	FailedToConnectBouncerError *FailedToConnectBouncerError
	InternalBouncerServerError *InternalBouncerServerError
}

// FailedToConnectBouncerErrorAsE2eeTestNotify502Response is a convenience function that returns FailedToConnectBouncerError wrapped in E2eeTestNotify502Response
func FailedToConnectBouncerErrorAsE2eeTestNotify502Response(v *FailedToConnectBouncerError) E2eeTestNotify502Response {
	return E2eeTestNotify502Response{
		FailedToConnectBouncerError: v,
	}
}

// InternalBouncerServerErrorAsE2eeTestNotify502Response is a convenience function that returns InternalBouncerServerError wrapped in E2eeTestNotify502Response
func InternalBouncerServerErrorAsE2eeTestNotify502Response(v *InternalBouncerServerError) E2eeTestNotify502Response {
	return E2eeTestNotify502Response{
		InternalBouncerServerError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *E2eeTestNotify502Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FailedToConnectBouncerError
	err = newStrictDecoder(data).Decode(&dst.FailedToConnectBouncerError)
	if err == nil {
		jsonFailedToConnectBouncerError, _ := json.Marshal(dst.FailedToConnectBouncerError)
		if string(jsonFailedToConnectBouncerError) == "{}" { // empty struct
			dst.FailedToConnectBouncerError = nil
		} else {
			if err = validator.Validate(dst.FailedToConnectBouncerError); err != nil {
				dst.FailedToConnectBouncerError = nil
			} else {
				match++
			}
		}
	} else {
		dst.FailedToConnectBouncerError = nil
	}

	// try to unmarshal data into InternalBouncerServerError
	err = newStrictDecoder(data).Decode(&dst.InternalBouncerServerError)
	if err == nil {
		jsonInternalBouncerServerError, _ := json.Marshal(dst.InternalBouncerServerError)
		if string(jsonInternalBouncerServerError) == "{}" { // empty struct
			dst.InternalBouncerServerError = nil
		} else {
			if err = validator.Validate(dst.InternalBouncerServerError); err != nil {
				dst.InternalBouncerServerError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InternalBouncerServerError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FailedToConnectBouncerError = nil
		dst.InternalBouncerServerError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(E2eeTestNotify502Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(E2eeTestNotify502Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src E2eeTestNotify502Response) MarshalJSON() ([]byte, error) {
	if src.FailedToConnectBouncerError != nil {
		return json.Marshal(&src.FailedToConnectBouncerError)
	}

	if src.InternalBouncerServerError != nil {
		return json.Marshal(&src.InternalBouncerServerError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *E2eeTestNotify502Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FailedToConnectBouncerError != nil {
		return obj.FailedToConnectBouncerError
	}

	if obj.InternalBouncerServerError != nil {
		return obj.InternalBouncerServerError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj E2eeTestNotify502Response) GetActualInstanceValue() (interface{}) {
	if obj.FailedToConnectBouncerError != nil {
		return *obj.FailedToConnectBouncerError
	}

	if obj.InternalBouncerServerError != nil {
		return *obj.InternalBouncerServerError
	}

	// all schemas are nil
	return nil
}

type NullableE2eeTestNotify502Response struct {
	value *E2eeTestNotify502Response
	isSet bool
}

func (v NullableE2eeTestNotify502Response) Get() *E2eeTestNotify502Response {
	return v.value
}

func (v *NullableE2eeTestNotify502Response) Set(val *E2eeTestNotify502Response) {
	v.value = val
	v.isSet = true
}

func (v NullableE2eeTestNotify502Response) IsSet() bool {
	return v.isSet
}

func (v *NullableE2eeTestNotify502Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableE2eeTestNotify502Response(val *E2eeTestNotify502Response) *NullableE2eeTestNotify502Response {
	return &NullableE2eeTestNotify502Response{value: val, isSet: true}
}

func (v NullableE2eeTestNotify502Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableE2eeTestNotify502Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


