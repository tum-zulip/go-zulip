/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf19 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf19{}

// GetEvents200ResponseAllOfEventsInnerOneOf19 Event sent when a reaction is added to a message. Sent to all users who were recipients of the message. 
type GetEvents200ResponseAllOfEventsInnerOneOf19 struct {
	EmojiName interface{} `json:"emoji_name,omitempty"`
	EmojiCode interface{} `json:"emoji_code,omitempty"`
	ReactionType interface{} `json:"reaction_type,omitempty"`
	UserId interface{} `json:"user_id,omitempty"`
	User interface{} `json:"user,omitempty"`
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// The ID of the message to which a reaction was added. 
	MessageId *int32 `json:"message_id,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf19 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf19 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf19() *GetEvents200ResponseAllOfEventsInnerOneOf19 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf19{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf19WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf19 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf19WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf19 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf19{}
	return &this
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetEmojiName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetEmojiNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return &o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given interface{} and assigns it to the EmojiName field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetEmojiName(v interface{}) {
	o.EmojiName = v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetEmojiCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetEmojiCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return &o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given interface{} and assigns it to the EmojiCode field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetEmojiCode(v interface{}) {
	o.EmojiCode = v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetReactionType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetReactionTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return &o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given interface{} and assigns it to the ReactionType field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetReactionType(v interface{}) {
	o.ReactionType = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetUserId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetUserIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return &o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given interface{} and assigns it to the UserId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetUserId(v interface{}) {
	o.UserId = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetUser() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetUserOk() (*interface{}, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return &o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given interface{} and assigns it to the User field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetUser(v interface{}) {
	o.User = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetType() GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType {
	if o == nil || IsNil(o.Type) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetTypeOk() (*GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetType(v GetEvents200ResponseAllOfEventsInnerOneOf19AllOfType) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetOp(v string) {
	o.Op = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf19) SetMessageId(v int32) {
	o.MessageId = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf19) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf19) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EmojiName != nil {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if o.EmojiCode != nil {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if o.ReactionType != nil {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf19 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf19
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf19) Get() *GetEvents200ResponseAllOfEventsInnerOneOf19 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf19) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf19) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf19) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf19) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf19(val *GetEvents200ResponseAllOfEventsInnerOneOf19) *NullableGetEvents200ResponseAllOfEventsInnerOneOf19 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf19{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf19) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf19) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


