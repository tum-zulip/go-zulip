/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NavigationView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NavigationView{}

// NavigationView Represents a user's personal configuration for a specific navigation view (displayed most visibly at the top of the web application's left sidebar).  Navigation views can be either an override to the default behavior of a built-in view, or a custom view.  **Changes**: New in Zulip 11.0 (feature level 390). 
type NavigationView struct {
	// A unique identifier for the view, used to determine navigation behavior when clicked.  Clients should use this value to navigate to the corresponding URL hash. 
	Fragment string `json:"fragment"`
	// Determines whether the view appears directly in the sidebar or is hidden in the \"More Views\" menu.  - `true` - Pinned and visible in the sidebar. - `false` - Hidden and accessible via the \"More Views\" menu. 
	IsPinned bool `json:"is_pinned"`
	// The user-facing name for custom navigation views. Omit this field for built-in views. 
	Name NullableString `json:"name,omitempty"`
}

type _NavigationView NavigationView

// NewNavigationView instantiates a new NavigationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNavigationView(fragment string, isPinned bool) *NavigationView {
	this := NavigationView{}
	this.Fragment = fragment
	this.IsPinned = isPinned
	return &this
}

// NewNavigationViewWithDefaults instantiates a new NavigationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNavigationViewWithDefaults() *NavigationView {
	this := NavigationView{}
	return &this
}

// GetFragment returns the Fragment field value
func (o *NavigationView) GetFragment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value
// and a boolean to check if the value has been set.
func (o *NavigationView) GetFragmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fragment, true
}

// SetFragment sets field value
func (o *NavigationView) SetFragment(v string) {
	o.Fragment = v
}

// GetIsPinned returns the IsPinned field value
func (o *NavigationView) GetIsPinned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPinned
}

// GetIsPinnedOk returns a tuple with the IsPinned field value
// and a boolean to check if the value has been set.
func (o *NavigationView) GetIsPinnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPinned, true
}

// SetIsPinned sets field value
func (o *NavigationView) SetIsPinned(v bool) {
	o.IsPinned = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NavigationView) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NavigationView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NavigationView) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NavigationView) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NavigationView) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NavigationView) UnsetName() {
	o.Name.Unset()
}

func (o NavigationView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NavigationView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fragment"] = o.Fragment
	toSerialize["is_pinned"] = o.IsPinned
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

func (o *NavigationView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fragment",
		"is_pinned",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNavigationView := _NavigationView{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNavigationView)

	if err != nil {
		return err
	}

	*o = NavigationView(varNavigationView)

	return err
}

type NullableNavigationView struct {
	value *NavigationView
	isSet bool
}

func (v NullableNavigationView) Get() *NavigationView {
	return v.value
}

func (v *NullableNavigationView) Set(val *NavigationView) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationView) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationView(val *NavigationView) *NullableNavigationView {
	return &NullableNavigationView{value: val, isSet: true}
}

func (v NullableNavigationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


