/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf44Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf44Data{}

// GetEvents200ResponseAllOfEventsInnerOneOf44Data Dictionary containing the changed details of the user group.
type GetEvents200ResponseAllOfEventsInnerOneOf44Data struct {
	// The new name of the user group. Only present if the group's name changed.
	Name *string `json:"name,omitempty"`
	// The new description of the group. Only present if the description changed.
	Description *string `json:"description,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to add members to this group. Only present if this user group permission setting changed.  **Changes**: New in Zulip 10.0 (feature level 305). Previously, this permission was controlled by the `can_manage_group` setting.  Will be one of the following:  [setting-values]: /api/group-setting-values
	CanAddMembersGroup *GroupSettingValue `json:"can_add_members_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to join this group. Only present if this user group permission setting changed.  **Changes**: New in Zulip 10.0 (feature level 301).  Will be one of the following:  [setting-values]: /api/group-setting-values
	CanJoinGroup *GroupSettingValue `json:"can_join_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to leave this group. Only present if this user group permission setting changed.  **Changes**: New in Zulip 10.0 (feature level 308).  Will be one of the following:  [setting-values]: /api/group-setting-values
	CanLeaveGroup *GroupSettingValue `json:"can_leave_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to [manage this group][manage-user-groups]. Only present if this user group permission setting changed.  **Changes**: New in Zulip 10.0 (feature level 283).  Will be one of the following:  [setting-values]: /api/group-setting-values [manage-user-groups]: /help/manage-user-groups
	CanManageGroup *GroupSettingValue `json:"can_manage_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to [mention this user group][mentions]. Only present if this user group permission setting changed.  **Changes**: Before Zulip 9.0 (feature level 258), this setting was always the integer form of a [group-setting value][setting-values].  Before Zulip 8.0 (feature level 198), this setting was named `can_mention_group_id`.  New in Zulip 8.0 (feature level 191). Previously, groups could be mentioned only if they were not [system groups][system-groups].  Will be one of the following:  [setting-values]: /api/group-setting-values [system-groups]: /api/group-setting-values#system-groups [mentions]: /help/mention-a-user-or-group
	CanMentionGroup *GroupSettingValue `json:"can_mention_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to remove members from this group. Only present if this user group permission setting changed.  **Changes**: New in Zulip 10.0 (feature level 324). Previously, this permission was controlled by the `can_manage_group` setting.  Will be one of the following:  [setting-values]: /api/group-setting-values
	CanRemoveMembersGroup *GroupSettingValue `json:"can_remove_members_group,omitempty"`
	// Whether the user group is deactivated. Deactivated groups cannot be used as a subgroup of another group or used for any other purpose.  **Changes**: New in Zulip 10.0 (feature level 290).
	Deactivated *bool `json:"deactivated,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf44Data instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf44Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf44Data() *GetEvents200ResponseAllOfEventsInnerOneOf44Data {
	this := GetEvents200ResponseAllOfEventsInnerOneOf44Data{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf44DataWithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf44Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf44DataWithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf44Data {
	this := GetEvents200ResponseAllOfEventsInnerOneOf44Data{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetDescription(v string) {
	o.Description = &v
}

// GetCanAddMembersGroup returns the CanAddMembersGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanAddMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddMembersGroup
}

// GetCanAddMembersGroupOk returns a tuple with the CanAddMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanAddMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		return nil, false
	}
	return o.CanAddMembersGroup, true
}

// HasCanAddMembersGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanAddMembersGroup() bool {
	if o != nil && !IsNil(o.CanAddMembersGroup) {
		return true
	}

	return false
}

// SetCanAddMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddMembersGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanAddMembersGroup(v GroupSettingValue) {
	o.CanAddMembersGroup = &v
}

// GetCanJoinGroup returns the CanJoinGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanJoinGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanJoinGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanJoinGroup
}

// GetCanJoinGroupOk returns a tuple with the CanJoinGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanJoinGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanJoinGroup) {
		return nil, false
	}
	return o.CanJoinGroup, true
}

// HasCanJoinGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanJoinGroup() bool {
	if o != nil && !IsNil(o.CanJoinGroup) {
		return true
	}

	return false
}

// SetCanJoinGroup gets a reference to the given GroupSettingValue and assigns it to the CanJoinGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanJoinGroup(v GroupSettingValue) {
	o.CanJoinGroup = &v
}

// GetCanLeaveGroup returns the CanLeaveGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanLeaveGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanLeaveGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanLeaveGroup
}

// GetCanLeaveGroupOk returns a tuple with the CanLeaveGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanLeaveGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanLeaveGroup) {
		return nil, false
	}
	return o.CanLeaveGroup, true
}

// HasCanLeaveGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanLeaveGroup() bool {
	if o != nil && !IsNil(o.CanLeaveGroup) {
		return true
	}

	return false
}

// SetCanLeaveGroup gets a reference to the given GroupSettingValue and assigns it to the CanLeaveGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanLeaveGroup(v GroupSettingValue) {
	o.CanLeaveGroup = &v
}

// GetCanManageGroup returns the CanManageGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanManageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanManageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanManageGroup
}

// GetCanManageGroupOk returns a tuple with the CanManageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanManageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanManageGroup) {
		return nil, false
	}
	return o.CanManageGroup, true
}

// HasCanManageGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanManageGroup() bool {
	if o != nil && !IsNil(o.CanManageGroup) {
		return true
	}

	return false
}

// SetCanManageGroup gets a reference to the given GroupSettingValue and assigns it to the CanManageGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanManageGroup(v GroupSettingValue) {
	o.CanManageGroup = &v
}

// GetCanMentionGroup returns the CanMentionGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanMentionGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMentionGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMentionGroup
}

// GetCanMentionGroupOk returns a tuple with the CanMentionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanMentionGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMentionGroup) {
		return nil, false
	}
	return o.CanMentionGroup, true
}

// HasCanMentionGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanMentionGroup() bool {
	if o != nil && !IsNil(o.CanMentionGroup) {
		return true
	}

	return false
}

// SetCanMentionGroup gets a reference to the given GroupSettingValue and assigns it to the CanMentionGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanMentionGroup(v GroupSettingValue) {
	o.CanMentionGroup = &v
}

// GetCanRemoveMembersGroup returns the CanRemoveMembersGroup field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanRemoveMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanRemoveMembersGroup
}

// GetCanRemoveMembersGroupOk returns a tuple with the CanRemoveMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetCanRemoveMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		return nil, false
	}
	return o.CanRemoveMembersGroup, true
}

// HasCanRemoveMembersGroup returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasCanRemoveMembersGroup() bool {
	if o != nil && !IsNil(o.CanRemoveMembersGroup) {
		return true
	}

	return false
}

// SetCanRemoveMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanRemoveMembersGroup field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetCanRemoveMembersGroup(v GroupSettingValue) {
	o.CanRemoveMembersGroup = &v
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetDeactivated() bool {
	if o == nil || IsNil(o.Deactivated) {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) GetDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deactivated) {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) HasDeactivated() bool {
	if o != nil && !IsNil(o.Deactivated) {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44Data) SetDeactivated(v bool) {
	o.Deactivated = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf44Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf44Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CanAddMembersGroup) {
		toSerialize["can_add_members_group"] = o.CanAddMembersGroup
	}
	if !IsNil(o.CanJoinGroup) {
		toSerialize["can_join_group"] = o.CanJoinGroup
	}
	if !IsNil(o.CanLeaveGroup) {
		toSerialize["can_leave_group"] = o.CanLeaveGroup
	}
	if !IsNil(o.CanManageGroup) {
		toSerialize["can_manage_group"] = o.CanManageGroup
	}
	if !IsNil(o.CanMentionGroup) {
		toSerialize["can_mention_group"] = o.CanMentionGroup
	}
	if !IsNil(o.CanRemoveMembersGroup) {
		toSerialize["can_remove_members_group"] = o.CanRemoveMembersGroup
	}
	if !IsNil(o.Deactivated) {
		toSerialize["deactivated"] = o.Deactivated
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf44Data
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) Get() *GetEvents200ResponseAllOfEventsInnerOneOf44Data {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf44Data) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf44Data(val *GetEvents200ResponseAllOfEventsInnerOneOf44Data) *NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
