/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// UserUpdateEventEnvalop - Object containing the changed details of the user. It has multiple forms depending on the value changed.  **Changes**: Removed `is_billing_admin` field in Zulip 10.0 (feature level 363), as it was replaced by the `can_manage_billing_group` realm setting.
type UserUpdateEventEnvalop struct {
	UserUpdateEventFullName  *UserUpdateEventFullName
	UserUpdateEventAvatar *UserUpdateEventAvatar
	UserUpdateEventTimezone *UserUpdateEventTimezone
	UserUpdateEventBotOwner *UserUpdateEventBotOwner
	UserUpdateEventRole *UserUpdateEventRole
	UserUpdateEventDeliveryEmail *UserUpdateEventDeliveryEmail
	UserUpdateEventCustomField *UserUpdateEventCustomField
	UserUpdateEventEmail *UserUpdateEventEmail
	UserUpdateEventActivation *UserUpdateEventActivation
}

// UserUpdateEventFullNameAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventFullName wrapped in UserUpdateEventEnvalop
func UserUpdateEventFullNameAsUserUpdateEventEnvalop(v *UserUpdateEventFullName) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventFullName: v,
	}
}

// UserUpdateEventAvatarAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventAvatar wrapped in UserUpdateEventEnvalop
func UserUpdateEventAvatarAsUserUpdateEventEnvalop(v *UserUpdateEventAvatar) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventAvatar: v,
	}
}

// UserUpdateEventTimezoneAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventTimezone wrapped in UserUpdateEventEnvalop
func UserUpdateEventTimezoneAsUserUpdateEventEnvalop(v *UserUpdateEventTimezone) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventTimezone: v,
	}
}

// UserUpdateEventBotOwnerAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventBotOwner wrapped in UserUpdateEventEnvalop
func UserUpdateEventBotOwnerAsUserUpdateEventEnvalop(v *UserUpdateEventBotOwner) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventBotOwner: v,
	}
}

// UserUpdateEventRoleAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventRole wrapped in UserUpdateEventEnvalop
func UserUpdateEventRoleAsUserUpdateEventEnvalop(v *UserUpdateEventRole) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventRole: v,
	}
}

// UserUpdateEventDeliveryEmailAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventDeliveryEmail wrapped in UserUpdateEventEnvalop
func UserUpdateEventDeliveryEmailAsUserUpdateEventEnvalop(v *UserUpdateEventDeliveryEmail) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventDeliveryEmail: v,
	}
}

// UserUpdateEventCustomFieldAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventCustomField wrapped in UserUpdateEventEnvalop
func UserUpdateEventCustomFieldAsUserUpdateEventEnvalop(v *UserUpdateEventCustomField) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventCustomField: v,
	}
}

// UserUpdateEventEmailAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventEmail wrapped in UserUpdateEventEnvalop
func UserUpdateEventEmailAsUserUpdateEventEnvalop(v *UserUpdateEventEmail) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventEmail: v,
	}
}

// UserUpdateEventActivationAsUserUpdateEventEnvalop is a convenience function that returns UserUpdateEventActivation wrapped in UserUpdateEventEnvalop
func UserUpdateEventActivationAsUserUpdateEventEnvalop(v *UserUpdateEventActivation) UserUpdateEventEnvalop {
	return UserUpdateEventEnvalop{
		UserUpdateEventActivation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UserUpdateEventEnvalop) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UserUpdateEventFullName
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventFullName)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf, _ := json.Marshal(dst.UserUpdateEventFullName)
		if string(jsonRealmUserUpdateEventPersonOneOf) == "{}" { // empty struct
			dst.UserUpdateEventFullName = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventFullName); err != nil {
				dst.UserUpdateEventFullName = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventFullName = nil
	}

	// try to unmarshal data into UserUpdateEventAvatar
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventAvatar)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf1, _ := json.Marshal(dst.UserUpdateEventAvatar)
		if string(jsonRealmUserUpdateEventPersonOneOf1) == "{}" { // empty struct
			dst.UserUpdateEventAvatar = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventAvatar); err != nil {
				dst.UserUpdateEventAvatar = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventAvatar = nil
	}

	// try to unmarshal data into UserUpdateEventTimezone
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventTimezone)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf2, _ := json.Marshal(dst.UserUpdateEventTimezone)
		if string(jsonRealmUserUpdateEventPersonOneOf2) == "{}" { // empty struct
			dst.UserUpdateEventTimezone = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventTimezone); err != nil {
				dst.UserUpdateEventTimezone = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventTimezone = nil
	}

	// try to unmarshal data into UserUpdateEventBotOwner
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventBotOwner)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf3, _ := json.Marshal(dst.UserUpdateEventBotOwner)
		if string(jsonRealmUserUpdateEventPersonOneOf3) == "{}" { // empty struct
			dst.UserUpdateEventBotOwner = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventBotOwner); err != nil {
				dst.UserUpdateEventBotOwner = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventBotOwner = nil
	}

	// try to unmarshal data into UserUpdateEventRole
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventRole)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf4, _ := json.Marshal(dst.UserUpdateEventRole)
		if string(jsonRealmUserUpdateEventPersonOneOf4) == "{}" { // empty struct
			dst.UserUpdateEventRole = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventRole); err != nil {
				dst.UserUpdateEventRole = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventRole = nil
	}

	// try to unmarshal data into UserUpdateEventDeliveryEmail
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventDeliveryEmail)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf5, _ := json.Marshal(dst.UserUpdateEventDeliveryEmail)
		if string(jsonRealmUserUpdateEventPersonOneOf5) == "{}" { // empty struct
			dst.UserUpdateEventDeliveryEmail = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventDeliveryEmail); err != nil {
				dst.UserUpdateEventDeliveryEmail = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventDeliveryEmail = nil
	}

	// try to unmarshal data into UserUpdateEventCustomField
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventCustomField)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf6, _ := json.Marshal(dst.UserUpdateEventCustomField)
		if string(jsonRealmUserUpdateEventPersonOneOf6) == "{}" { // empty struct
			dst.UserUpdateEventCustomField = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventCustomField); err != nil {
				dst.UserUpdateEventCustomField = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventCustomField = nil
	}

	// try to unmarshal data into UserUpdateEventEmail
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventEmail)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf7, _ := json.Marshal(dst.UserUpdateEventEmail)
		if string(jsonRealmUserUpdateEventPersonOneOf7) == "{}" { // empty struct
			dst.UserUpdateEventEmail = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventEmail); err != nil {
				dst.UserUpdateEventEmail = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventEmail = nil
	}

	// try to unmarshal data into UserUpdateEventActivation
	err = newStrictDecoder(data).Decode(&dst.UserUpdateEventActivation)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf8, _ := json.Marshal(dst.UserUpdateEventActivation)
		if string(jsonRealmUserUpdateEventPersonOneOf8) == "{}" { // empty struct
			dst.UserUpdateEventActivation = nil
		} else {
			if err = validator.Validate(dst.UserUpdateEventActivation); err != nil {
				dst.UserUpdateEventActivation = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserUpdateEventActivation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UserUpdateEventFullName = nil
		dst.UserUpdateEventAvatar = nil
		dst.UserUpdateEventTimezone = nil
		dst.UserUpdateEventBotOwner = nil
		dst.UserUpdateEventRole = nil
		dst.UserUpdateEventDeliveryEmail = nil
		dst.UserUpdateEventCustomField = nil
		dst.UserUpdateEventEmail = nil
		dst.UserUpdateEventActivation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UserUpdateEventEnvalop)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UserUpdateEventEnvalop)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserUpdateEventEnvalop) MarshalJSON() ([]byte, error) {
	if src.UserUpdateEventFullName != nil {
		return json.Marshal(&src.UserUpdateEventFullName)
	}

	if src.UserUpdateEventAvatar != nil {
		return json.Marshal(&src.UserUpdateEventAvatar)
	}

	if src.UserUpdateEventTimezone != nil {
		return json.Marshal(&src.UserUpdateEventTimezone)
	}

	if src.UserUpdateEventBotOwner != nil {
		return json.Marshal(&src.UserUpdateEventBotOwner)
	}

	if src.UserUpdateEventRole != nil {
		return json.Marshal(&src.UserUpdateEventRole)
	}

	if src.UserUpdateEventDeliveryEmail != nil {
		return json.Marshal(&src.UserUpdateEventDeliveryEmail)
	}

	if src.UserUpdateEventCustomField != nil {
		return json.Marshal(&src.UserUpdateEventCustomField)
	}

	if src.UserUpdateEventEmail != nil {
		return json.Marshal(&src.UserUpdateEventEmail)
	}

	if src.UserUpdateEventActivation != nil {
		return json.Marshal(&src.UserUpdateEventActivation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UserUpdateEventEnvalop) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UserUpdateEventFullName != nil {
		return obj.UserUpdateEventFullName
	}

	if obj.UserUpdateEventAvatar != nil {
		return obj.UserUpdateEventAvatar
	}

	if obj.UserUpdateEventTimezone != nil {
		return obj.UserUpdateEventTimezone
	}

	if obj.UserUpdateEventBotOwner != nil {
		return obj.UserUpdateEventBotOwner
	}

	if obj.UserUpdateEventRole != nil {
		return obj.UserUpdateEventRole
	}

	if obj.UserUpdateEventDeliveryEmail != nil {
		return obj.UserUpdateEventDeliveryEmail
	}

	if obj.UserUpdateEventCustomField != nil {
		return obj.UserUpdateEventCustomField
	}

	if obj.UserUpdateEventEmail != nil {
		return obj.UserUpdateEventEmail
	}

	if obj.UserUpdateEventActivation != nil {
		return obj.UserUpdateEventActivation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UserUpdateEventEnvalop) GetActualInstanceValue() interface{} {
	if obj.UserUpdateEventFullName != nil {
		return *obj.UserUpdateEventFullName
	}

	if obj.UserUpdateEventAvatar != nil {
		return *obj.UserUpdateEventAvatar
	}

	if obj.UserUpdateEventTimezone != nil {
		return *obj.UserUpdateEventTimezone
	}

	if obj.UserUpdateEventBotOwner != nil {
		return *obj.UserUpdateEventBotOwner
	}

	if obj.UserUpdateEventRole != nil {
		return *obj.UserUpdateEventRole
	}

	if obj.UserUpdateEventDeliveryEmail != nil {
		return *obj.UserUpdateEventDeliveryEmail
	}

	if obj.UserUpdateEventCustomField != nil {
		return *obj.UserUpdateEventCustomField
	}

	if obj.UserUpdateEventEmail != nil {
		return *obj.UserUpdateEventEmail
	}

	if obj.UserUpdateEventActivation != nil {
		return *obj.UserUpdateEventActivation
	}

	// all schemas are nil
	return nil
}

type NullableUserUpdateEventEnvalop struct {
	value *UserUpdateEventEnvalop
	isSet bool
}

func (v NullableUserUpdateEventEnvalop) Get() *UserUpdateEventEnvalop {
	return v.value
}

func (v *NullableUserUpdateEventEnvalop) Set(val *UserUpdateEventEnvalop) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateEventEnvalop) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateEventEnvalop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateEventEnvalop(val *UserUpdateEventEnvalop) *NullableUserUpdateEventEnvalop {
	return &NullableUserUpdateEventEnvalop{value: val, isSet: true}
}

func (v NullableUserUpdateEventEnvalop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateEventEnvalop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
