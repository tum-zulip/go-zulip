/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the AttachmentRemoveEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentRemoveEvent{}

// AttachmentRemoveEvent Event sent to a user's clients when the user deletes a file they had uploaded. Useful primarily for UI showing all the files the current user has uploaded.
type AttachmentRemoveEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id         *int32                                     `json:"id,omitempty"`
	Type       *string                                    `json:"type,omitempty"`
	Op         *string                                    `json:"op,omitempty"`
	Attachment *UpdateGlobalNotificationsEvent3Attachment `json:"attachment,omitempty"`
	// The total size of all files uploaded by in the organization, in bytes.
	UploadSpaceUsed *int32 `json:"upload_space_used,omitempty"`
}

// NewUpdateGlobalNotificationsEvent3 instantiates a new AttachmentRemoveEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGlobalNotificationsEvent3() *AttachmentRemoveEvent {
	this := AttachmentRemoveEvent{}
	return &this
}

// NewUpdateGlobalNotificationsEvent3WithDefaults instantiates a new AttachmentRemoveEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGlobalNotificationsEvent3WithDefaults() *AttachmentRemoveEvent {
	this := AttachmentRemoveEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AttachmentRemoveEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentRemoveEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AttachmentRemoveEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AttachmentRemoveEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttachmentRemoveEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentRemoveEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttachmentRemoveEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AttachmentRemoveEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *AttachmentRemoveEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentRemoveEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *AttachmentRemoveEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *AttachmentRemoveEvent) SetOp(v string) {
	o.Op = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *AttachmentRemoveEvent) GetAttachment() UpdateGlobalNotificationsEvent3Attachment {
	if o == nil || IsNil(o.Attachment) {
		var ret UpdateGlobalNotificationsEvent3Attachment
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentRemoveEvent) GetAttachmentOk() (*UpdateGlobalNotificationsEvent3Attachment, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *AttachmentRemoveEvent) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given UpdateGlobalNotificationsEvent3Attachment and assigns it to the Attachment field.
func (o *AttachmentRemoveEvent) SetAttachment(v UpdateGlobalNotificationsEvent3Attachment) {
	o.Attachment = &v
}

// GetUploadSpaceUsed returns the UploadSpaceUsed field value if set, zero value otherwise.
func (o *AttachmentRemoveEvent) GetUploadSpaceUsed() int32 {
	if o == nil || IsNil(o.UploadSpaceUsed) {
		var ret int32
		return ret
	}
	return *o.UploadSpaceUsed
}

// GetUploadSpaceUsedOk returns a tuple with the UploadSpaceUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentRemoveEvent) GetUploadSpaceUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.UploadSpaceUsed) {
		return nil, false
	}
	return o.UploadSpaceUsed, true
}

// HasUploadSpaceUsed returns a boolean if a field has been set.
func (o *AttachmentRemoveEvent) HasUploadSpaceUsed() bool {
	if o != nil && !IsNil(o.UploadSpaceUsed) {
		return true
	}

	return false
}

// SetUploadSpaceUsed gets a reference to the given int32 and assigns it to the UploadSpaceUsed field.
func (o *AttachmentRemoveEvent) SetUploadSpaceUsed(v int32) {
	o.UploadSpaceUsed = &v
}

func (o AttachmentRemoveEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentRemoveEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	if !IsNil(o.UploadSpaceUsed) {
		toSerialize["upload_space_used"] = o.UploadSpaceUsed
	}
	return toSerialize, nil
}

type NullableUpdateGlobalNotificationsEvent3 struct {
	value *AttachmentRemoveEvent
	isSet bool
}

func (v NullableUpdateGlobalNotificationsEvent3) Get() *AttachmentRemoveEvent {
	return v.value
}

func (v *NullableUpdateGlobalNotificationsEvent3) Set(val *AttachmentRemoveEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGlobalNotificationsEvent3) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGlobalNotificationsEvent3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGlobalNotificationsEvent3(val *AttachmentRemoveEvent) *NullableUpdateGlobalNotificationsEvent3 {
	return &NullableUpdateGlobalNotificationsEvent3{value: val, isSet: true}
}

func (v NullableUpdateGlobalNotificationsEvent3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGlobalNotificationsEvent3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
