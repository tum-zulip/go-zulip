/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// SubscriptionUpdateEventValue - The new value of the changed property.
type SubscriptionUpdateEventValue struct {
	Bool   *bool
	Int32  *int32
	String *string
}

// boolAsSubscriptionUpdateEventValue is a convenience function that returns bool wrapped in SubscriptionUpdateEventValue
func BoolAsSubscriptionUpdateEventValue(v *bool) SubscriptionUpdateEventValue {
	return SubscriptionUpdateEventValue{
		Bool: v,
	}
}

// int32AsSubscriptionUpdateEventValue is a convenience function that returns int32 wrapped in SubscriptionUpdateEventValue
func Int32AsSubscriptionUpdateEventValue(v *int32) SubscriptionUpdateEventValue {
	return SubscriptionUpdateEventValue{
		Int32: v,
	}
}

// stringAsSubscriptionUpdateEventValue is a convenience function that returns string wrapped in SubscriptionUpdateEventValue
func StringAsSubscriptionUpdateEventValue(v *string) SubscriptionUpdateEventValue {
	return SubscriptionUpdateEventValue{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionUpdateEventValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Int32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubscriptionUpdateEventValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubscriptionUpdateEventValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionUpdateEventValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionUpdateEventValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SubscriptionUpdateEventValue) GetActualInstanceValue() interface{} {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionUpdateEventValue struct {
	value *SubscriptionUpdateEventValue
	isSet bool
}

func (v NullableSubscriptionUpdateEventValue) Get() *SubscriptionUpdateEventValue {
	return v.value
}

func (v *NullableSubscriptionUpdateEventValue) Set(val *SubscriptionUpdateEventValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionUpdateEventValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionUpdateEventValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionUpdateEventValue(val *SubscriptionUpdateEventValue) *NullableSubscriptionUpdateEventValue {
	return &NullableSubscriptionUpdateEventValue{value: val, isSet: true}
}

func (v NullableSubscriptionUpdateEventValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionUpdateEventValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
