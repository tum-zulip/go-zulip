/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettings{}

// UserSettings Present if `user_settings` is present in `fetch_event_types`.  A dictionary containing the user's personal settings.  **Changes**: Removed `dense_mode` setting in Zulip 10.0 (feature level 364) as we now have `web_font_size_px` and `web_line_height_percent` settings for more control.  New in Zulip 5.0 (feature level 89). Previously, these settings appeared in the top-level object, where they are available for clients without the `user_settings_object` client capability for backwards-compatibility.
type UserSettings struct {
	// Whether time should be [displayed in 24-hour notation](zulip.com/help/change-the-time-format.  A `null` value indicates that the client should use the default time format for the user's locale.  **Changes**: Prior to Zulip 11.0 (feature level 408), `null` was not a valid value for this setting. Note that it was not possible to actually set the time format to `null` at this feature level.
	TwentyFourHourTime NullableBool `json:"twenty_four_hour_time,omitempty"`
	// Whether or not to mark messages as read when the user scrolls through their feed.  - 1 - Always - 2 - Only in conversation views - 3 - Never  **Changes**: New in Zulip 7.0 (feature level 175). Previously, there was no way for the user to configure this behavior on the web, and the Zulip web and desktop apps behaved like the \"Always\" setting when marking messages as read.
	WebMarkReadOnScrollPolicy *int32 `json:"web_mark_read_on_scroll_policy,omitempty"`
	// Web/desktop app setting controlling the default navigation behavior when clicking on a channel link.  - 1 - Top topic in the channel - 2 - Channel feed - 3 - List of topics - 4 - Top unread topic in channel  **Changes**: The \"Top unread topic in channel\" is new in Zulip 11.0 (feature level 401).  The \"List of topics\" option is new in Zulip 11.0 (feature level 383).  New in Zulip 9.0 (feature level 269). Previously, this was not configurable, and every user had the \"Channel feed\" behavior.
	WebChannelDefaultView *int32 `json:"web_channel_default_view,omitempty"`
	// Whether clients should display the [number of starred messages](zulip.com/help/star-a-message#display-the-number-of-starred-messages.
	StarredMessageCounts *bool `json:"starred_message_counts,omitempty"`
	// Whether the user is configured to receive typing notifications from other users. The server will only deliver typing notifications events to users who for whom this is enabled.  **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were only options to disable sending typing notifications.
	ReceivesTypingNotifications *bool `json:"receives_typing_notifications,omitempty"`
	// Whether the user should be shown an alert, offering to update their [profile time zone](zulip.com/help/change-your-timezone, when the time displayed for the profile time zone differs from the current time displayed by the time zone configured on their device.  **Changes**: New in Zulip 10.0 (feature level 329).
	WebSuggestUpdateTimezone *bool `json:"web_suggest_update_timezone,omitempty"`
	// Whether to use the [maximum available screen width](zulip.com/help/enable-full-width-display for the web app's center panel (message feed, recent conversations) on wide screens.
	FluidLayoutWidth *bool `json:"fluid_layout_width,omitempty"`
	// This setting is reserved for use to control variations in Zulip's design to help visually impaired users.
	HighContrastMode *bool `json:"high_contrast_mode,omitempty"`
	// User-configured primary `font-size` for the web application, in pixels.  **Changes**: New in Zulip 9.0 (feature level 245). Previously, font size was only adjustable via browser zoom. Note that this setting was not fully implemented at this feature level.
	WebFontSizePx *int32 `json:"web_font_size_px,omitempty"`
	// User-configured primary `line-height` for the web application, in percent, so a value of 120 represents a `line-height` of 1.2.  **Changes**: New in Zulip 9.0 (feature level 245). Previously, line height was not user-configurable. Note that this setting was not fully implemented at this feature level.
	WebLineHeightPercent *int32 `json:"web_line_height_percent,omitempty"`
	// Controls which [color theme](zulip.com/help/dark-theme to use.  - 1 - Automatic - 2 - Dark theme - 3 - Light theme  Automatic detection is implementing using the standard `prefers-color-scheme` media query.
	ColorScheme *int32 `json:"color_scheme,omitempty"`
	// Whether to [translate emoticons to emoji](zulip.com/help/configure-emoticon-translations in messages the user sends.
	TranslateEmoticons *bool `json:"translate_emoticons,omitempty"`
	// Whether to display the names of reacting users on a message.  When enabled, clients should display the names of reacting users, rather than a count, for messages with few total reactions. The ideal cutoff may depend on the space available for displaying reactions; the official web application displays names when 3 or fewer total reactions are present with this setting enabled.  **Changes**: New in Zulip 6.0 (feature level 125).
	DisplayEmojiReactionUsers *bool `json:"display_emoji_reaction_users,omitempty"`
	// What [default language](zulip.com/help/change-your-language to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, `\"en\"` for English or `\"de\"` for German.
	DefaultLanguage *string `json:"default_language,omitempty"`
	// The [home view](zulip.com/help/configure-home-view used when opening a new Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.  - \"recent_topics\" - Recent conversations view - \"inbox\" - Inbox view - \"all_messages\" - Combined feed view  **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was called `default_view`, which was new in Zulip 4.0 (feature level 42).
	WebHomeView *string `json:"web_home_view,omitempty"`
	// Whether the escape key navigates to the [configured home view](zulip.com/help/configure-home-view.  **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was called `escape_navigates_to_default_view`, which was new in Zulip 5.0 (feature level 107).
	WebEscapeNavigatesToHomeView *bool `json:"web_escape_navigates_to_home_view,omitempty"`
	// Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.
	LeftSideUserlist *bool `json:"left_side_userlist,omitempty"`
	// The user's configured [emoji set](zulip.com/help/emoji-and-emoticons#use-emoticons, used to display emoji to the user everywhere they appear in the UI.  - \"google\" - Google modern - \"google-blob\" - Google classic - \"twitter\" - Twitter - \"text\" - Plain text
	Emojiset *string `json:"emojiset,omitempty"`
	// Whether to [hide inactive channels](zulip.com/help/manage-inactive-channels in the left sidebar.  - 1 - Automatic - 2 - Always - 3 - Never
	DemoteInactiveStreams *int32 `json:"demote_inactive_streams,omitempty"`
	// The style selected by the user for the right sidebar user list.  - 1 - Compact - 2 - With status - 3 - With avatar and status  **Changes**: New in Zulip 6.0 (feature level 141).
	UserListStyle *int32 `json:"user_list_style,omitempty"`
	// Controls how animated images should be played in the message feed in the web/desktop application.  - \"always\" - Always play the animated images in the message feed. - \"on_hover\" - Play the animated images on hover over them in the message feed. - \"never\" - Never play animated images in the message feed.  **Changes**: New in Zulip 9.0 (feature level 275).
	WebAnimateImagePreviews *string `json:"web_animate_image_previews,omitempty"`
	// Configuration for which channels should be displayed with a numeric unread count in the left sidebar. Channels that do not have an unread count will have a simple dot indicator for whether there are any unread messages.  - 1 - All channels - 2 - Unmuted channels and topics - 3 - No channels  **Changes**: New in Zulip 8.0 (feature level 210).
	WebStreamUnreadsCountDisplayPolicy *int32 `json:"web_stream_unreads_count_display_policy,omitempty"`
	// Controls whether user wants AI features like topic summarization to be hidden in all Zulip clients.  **Changes**: New in Zulip 10.0 (feature level 350).
	HideAiFeatures *bool `json:"hide_ai_features,omitempty"`
	// Determines whether the web/desktop application's left sidebar displays any channel folders configured by the organization.  **Changes**: New in Zulip 11.0 (feature level 411).
	WebLeftSidebarShowChannelFolders *bool `json:"web_left_sidebar_show_channel_folders,omitempty"`
	// Determines whether the web/desktop application's left sidebar displays the unread message count summary.  **Changes**: New in Zulip 11.0 (feature level 398).
	WebLeftSidebarUnreadsCountSummary *bool `json:"web_left_sidebar_unreads_count_summary,omitempty"`
	// The IANA identifier of the user's [profile time zone](zulip.com/help/change-your-timezone, which is used primarily to display the user's local time to other users.
	Timezone *string `json:"timezone,omitempty"`
	// Whether the user setting for [sending on pressing Enter](zulip.com/help/configure-send-message-keys in the compose box is enabled.
	EnterSends *bool `json:"enter_sends,omitempty"`
	// A boolean parameter to control whether synchronizing drafts is enabled for the user. When synchronization is disabled, all drafts stored in the server will be automatically deleted from the server.  This does not do anything (like sending events) to delete local copies of drafts stored in clients.
	EnableDraftsSynchronization *bool `json:"enable_drafts_synchronization,omitempty"`
	// Enable visual desktop notifications for channel messages.
	EnableStreamDesktopNotifications *bool `json:"enable_stream_desktop_notifications,omitempty"`
	// Enable email notifications for channel messages.
	EnableStreamEmailNotifications *bool `json:"enable_stream_email_notifications,omitempty"`
	// Enable mobile notifications for channel messages.
	EnableStreamPushNotifications *bool `json:"enable_stream_push_notifications,omitempty"`
	// Enable audible desktop notifications for channel messages.
	EnableStreamAudibleNotifications *bool `json:"enable_stream_audible_notifications,omitempty"`
	// Notification sound name.
	NotificationSound *string `json:"notification_sound,omitempty"`
	// Enable visual desktop notifications for direct messages and @-mentions.
	EnableDesktopNotifications *bool `json:"enable_desktop_notifications,omitempty"`
	// Enable audible desktop notifications for direct messages and @-mentions.
	EnableSounds *bool `json:"enable_sounds,omitempty"`
	// Enable visual desktop notifications for messages sent to followed topics.  **Changes**: New in Zulip 8.0 (feature level 189).
	EnableFollowedTopicDesktopNotifications *bool `json:"enable_followed_topic_desktop_notifications,omitempty"`
	// Enable email notifications for messages sent to followed topics.  **Changes**: New in Zulip 8.0 (feature level 189).
	EnableFollowedTopicEmailNotifications *bool `json:"enable_followed_topic_email_notifications,omitempty"`
	// Enable push notifications for messages sent to followed topics.  **Changes**: New in Zulip 8.0 (feature level 189).
	EnableFollowedTopicPushNotifications *bool `json:"enable_followed_topic_push_notifications,omitempty"`
	// Enable audible desktop notifications for messages sent to followed topics.  **Changes**: New in Zulip 8.0 (feature level 189).
	EnableFollowedTopicAudibleNotifications *bool `json:"enable_followed_topic_audible_notifications,omitempty"`
	// The duration (in seconds) for which the server should wait to batch email notifications before sending them.
	EmailNotificationsBatchingPeriodSeconds *int32 `json:"email_notifications_batching_period_seconds,omitempty"`
	// Enable email notifications for direct messages and @-mentions received when the user is offline.
	EnableOfflineEmailNotifications *bool `json:"enable_offline_email_notifications,omitempty"`
	// Enable mobile notification for direct messages and @-mentions received when the user is offline.
	EnableOfflinePushNotifications *bool `json:"enable_offline_push_notifications,omitempty"`
	// Enable mobile notification for direct messages and @-mentions received when the user is online.
	EnableOnlinePushNotifications *bool `json:"enable_online_push_notifications,omitempty"`
	// Enable digest emails when the user is away.
	EnableDigestEmails *bool `json:"enable_digest_emails,omitempty"`
	// Enable marketing emails. Has no function outside Zulip Cloud.
	EnableMarketingEmails *bool `json:"enable_marketing_emails,omitempty"`
	// Enable email notifications for new logins to account.
	EnableLoginEmails *bool `json:"enable_login_emails,omitempty"`
	// Include the message's content in email notifications for new messages.
	MessageContentInEmailNotifications *bool `json:"message_content_in_email_notifications,omitempty"`
	// Include content of direct messages in desktop notifications.
	PmContentInDesktopNotifications *bool `json:"pm_content_in_desktop_notifications,omitempty"`
	// Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.
	WildcardMentionsNotify *bool `json:"wildcard_mentions_notify,omitempty"`
	// Whether wildcard mentions (e.g., @**all**) in messages sent to followed topics should send notifications like a personal mention.  **Changes**: New in Zulip 8.0 (feature level 189).
	EnableFollowedTopicWildcardMentionsNotify *bool `json:"enable_followed_topic_wildcard_mentions_notify,omitempty"`
	// Unread count badge (appears in desktop sidebar and browser tab)  - 1 - All unread messages - 2 - DMs, mentions, and followed topics - 3 - DMs and mentions - 4 - None  **Changes**: In Zulip 8.0 (feature level 227), added `DMs, mentions, and followed topics` option, renumbering the options to insert it in order.
	DesktopIconCountDisplay *int32 `json:"desktop_icon_count_display,omitempty"`
	// Whether to [include organization name in subject of message notification emails](zulip.com/help/email-notifications#include-organization-name-in-subject-line.  - 1 - Automatic - 2 - Always - 3 - Never  **Changes**: New in Zulip 7.0 (feature level 168), replacing the previous `realm_name_in_notifications` boolean; `true` corresponded to `Always`, and `false` to `Never`.
	RealmNameInEmailNotificationsPolicy *int32 `json:"realm_name_in_email_notifications_policy,omitempty"`
	// Which [topics to follow automatically](zulip.com/help/mute-a-topic.  - 1 - Topics the user participates in - 2 - Topics the user sends a message to - 3 - Topics the user starts - 4 - Never  **Changes**: New in Zulip 8.0 (feature level 214).
	AutomaticallyFollowTopicsPolicy *int32 `json:"automatically_follow_topics_policy,omitempty"`
	// Which [topics to unmute automatically in muted channels](zulip.com/help/mute-a-topic.  - 1 - Topics the user participates in - 2 - Topics the user sends a message to - 3 - Topics the user starts - 4 - Never  **Changes**: New in Zulip 8.0 (feature level 214).
	AutomaticallyUnmuteTopicsInMutedStreamsPolicy *int32 `json:"automatically_unmute_topics_in_muted_streams_policy,omitempty"`
	// Whether the server will automatically mark the user as following topics where the user is mentioned.  **Changes**: New in Zulip 8.0 (feature level 235).
	AutomaticallyFollowTopicsWhereMentioned *bool `json:"automatically_follow_topics_where_mentioned,omitempty"`
	// Controls whether the resolved-topic notices are marked as read.  - \"always\" - Always mark resolved-topic notices as read. - \"except_followed\" - Mark resolved-topic notices as read in topics not followed by the user. - \"never\" - Never mark resolved-topic notices as read.  **Changes**: New in Zulip 11.0 (feature level 385).
	ResolvedTopicNoticeAutoReadPolicy *string `json:"resolved_topic_notice_auto_read_policy,omitempty"`
	// Display the presence status to other users when online.
	PresenceEnabled *bool `json:"presence_enabled,omitempty"`
	// Array containing the names of the notification sound options supported by this Zulip server. Only relevant to support UI for configuring notification sounds.
	AvailableNotificationSounds []string `json:"available_notification_sounds,omitempty"`
	// Array of dictionaries where each dictionary describes an emoji set supported by this version of the Zulip server.  Only relevant to clients with configuration UI for choosing an emoji set; the currently selected emoji set is available in the `emojiset` key.  See [PATCH /settings](zulip.com/api/update-settings for details on the meaning of this setting.
	EmojisetChoices []UserSettingsEmojisetChoice `json:"emojiset_choices,omitempty"`
	// Whether the user has chosen to send [typing notifications](zulip.com/help/typing-notifications when composing direct messages. The client should send typing notifications for direct messages if and only if this setting is enabled.  **Changes**: New in Zulip 5.0 (feature level 105).
	SendPrivateTypingNotifications *bool `json:"send_private_typing_notifications,omitempty"`
	// Whether the user has chosen to send [typing notifications](zulip.com/help/typing-notifications when composing channel messages. The client should send typing notifications for channel messages if and only if this setting is enabled.  **Changes**: New in Zulip 5.0 (feature level 105).
	SendStreamTypingNotifications *bool `json:"send_stream_typing_notifications,omitempty"`
	// Whether other users are allowed to see whether you've read messages.  **Changes**: New in Zulip 5.0 (feature level 105).
	SendReadReceipts *bool `json:"send_read_receipts,omitempty"`
	// Whether organization administrators are allowed to export your private data.  **Changes**: New in Zulip 10.0 (feature level 293).
	AllowPrivateDataExport *bool `json:"allow_private_data_export,omitempty"`
	// The [policy][permission-level] for [which other users][help-email-visibility] in this organization can see the user's real email address.  - 1 = Everyone - 2 = Members only - 3 = Administrators only - 4 = Nobody - 5 = Moderators only  **Changes**: New in Zulip 7.0 (feature level 163), replacing the realm-level setting.  [permission-level]: /api/roles-and-permissions#permission-levels [help-email-visibility]: /help/configure-email-visibility
	EmailAddressVisibility *int32 `json:"email_address_visibility,omitempty"`
	// Web/desktop app setting for whether the user's view should automatically go to the conversation where they sent a message.  **Changes**: New in Zulip 9.0 (feature level 268). Previously, this behavior was not configurable.
	WebNavigateToSentMessage *bool `json:"web_navigate_to_sent_message,omitempty"`
}

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings() *UserSettings {
	this := UserSettings{}
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetTwentyFourHourTime returns the TwentyFourHourTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettings) GetTwentyFourHourTime() bool {
	if o == nil || IsNil(o.TwentyFourHourTime.Get()) {
		var ret bool
		return ret
	}
	return *o.TwentyFourHourTime.Get()
}

// GetTwentyFourHourTimeOk returns a tuple with the TwentyFourHourTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettings) GetTwentyFourHourTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TwentyFourHourTime.Get(), o.TwentyFourHourTime.IsSet()
}

// HasTwentyFourHourTime returns a boolean if a field has been set.
func (o *UserSettings) HasTwentyFourHourTime() bool {
	if o != nil && o.TwentyFourHourTime.IsSet() {
		return true
	}

	return false
}

// SetTwentyFourHourTime gets a reference to the given NullableBool and assigns it to the TwentyFourHourTime field.
func (o *UserSettings) SetTwentyFourHourTime(v bool) {
	o.TwentyFourHourTime.Set(&v)
}

// SetTwentyFourHourTimeNil sets the value for TwentyFourHourTime to be an explicit nil
func (o *UserSettings) SetTwentyFourHourTimeNil() {
	o.TwentyFourHourTime.Set(nil)
}

// UnsetTwentyFourHourTime ensures that no value is present for TwentyFourHourTime, not even an explicit nil
func (o *UserSettings) UnsetTwentyFourHourTime() {
	o.TwentyFourHourTime.Unset()
}

// GetWebMarkReadOnScrollPolicy returns the WebMarkReadOnScrollPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetWebMarkReadOnScrollPolicy() int32 {
	if o == nil || IsNil(o.WebMarkReadOnScrollPolicy) {
		var ret int32
		return ret
	}
	return *o.WebMarkReadOnScrollPolicy
}

// GetWebMarkReadOnScrollPolicyOk returns a tuple with the WebMarkReadOnScrollPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebMarkReadOnScrollPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.WebMarkReadOnScrollPolicy) {
		return nil, false
	}
	return o.WebMarkReadOnScrollPolicy, true
}

// HasWebMarkReadOnScrollPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasWebMarkReadOnScrollPolicy() bool {
	if o != nil && !IsNil(o.WebMarkReadOnScrollPolicy) {
		return true
	}

	return false
}

// SetWebMarkReadOnScrollPolicy gets a reference to the given int32 and assigns it to the WebMarkReadOnScrollPolicy field.
func (o *UserSettings) SetWebMarkReadOnScrollPolicy(v int32) {
	o.WebMarkReadOnScrollPolicy = &v
}

// GetWebChannelDefaultView returns the WebChannelDefaultView field value if set, zero value otherwise.
func (o *UserSettings) GetWebChannelDefaultView() int32 {
	if o == nil || IsNil(o.WebChannelDefaultView) {
		var ret int32
		return ret
	}
	return *o.WebChannelDefaultView
}

// GetWebChannelDefaultViewOk returns a tuple with the WebChannelDefaultView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebChannelDefaultViewOk() (*int32, bool) {
	if o == nil || IsNil(o.WebChannelDefaultView) {
		return nil, false
	}
	return o.WebChannelDefaultView, true
}

// HasWebChannelDefaultView returns a boolean if a field has been set.
func (o *UserSettings) HasWebChannelDefaultView() bool {
	if o != nil && !IsNil(o.WebChannelDefaultView) {
		return true
	}

	return false
}

// SetWebChannelDefaultView gets a reference to the given int32 and assigns it to the WebChannelDefaultView field.
func (o *UserSettings) SetWebChannelDefaultView(v int32) {
	o.WebChannelDefaultView = &v
}

// GetStarredMessageCounts returns the StarredMessageCounts field value if set, zero value otherwise.
func (o *UserSettings) GetStarredMessageCounts() bool {
	if o == nil || IsNil(o.StarredMessageCounts) {
		var ret bool
		return ret
	}
	return *o.StarredMessageCounts
}

// GetStarredMessageCountsOk returns a tuple with the StarredMessageCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetStarredMessageCountsOk() (*bool, bool) {
	if o == nil || IsNil(o.StarredMessageCounts) {
		return nil, false
	}
	return o.StarredMessageCounts, true
}

// HasStarredMessageCounts returns a boolean if a field has been set.
func (o *UserSettings) HasStarredMessageCounts() bool {
	if o != nil && !IsNil(o.StarredMessageCounts) {
		return true
	}

	return false
}

// SetStarredMessageCounts gets a reference to the given bool and assigns it to the StarredMessageCounts field.
func (o *UserSettings) SetStarredMessageCounts(v bool) {
	o.StarredMessageCounts = &v
}

// GetReceivesTypingNotifications returns the ReceivesTypingNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetReceivesTypingNotifications() bool {
	if o == nil || IsNil(o.ReceivesTypingNotifications) {
		var ret bool
		return ret
	}
	return *o.ReceivesTypingNotifications
}

// GetReceivesTypingNotificationsOk returns a tuple with the ReceivesTypingNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetReceivesTypingNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReceivesTypingNotifications) {
		return nil, false
	}
	return o.ReceivesTypingNotifications, true
}

// HasReceivesTypingNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasReceivesTypingNotifications() bool {
	if o != nil && !IsNil(o.ReceivesTypingNotifications) {
		return true
	}

	return false
}

// SetReceivesTypingNotifications gets a reference to the given bool and assigns it to the ReceivesTypingNotifications field.
func (o *UserSettings) SetReceivesTypingNotifications(v bool) {
	o.ReceivesTypingNotifications = &v
}

// GetWebSuggestUpdateTimezone returns the WebSuggestUpdateTimezone field value if set, zero value otherwise.
func (o *UserSettings) GetWebSuggestUpdateTimezone() bool {
	if o == nil || IsNil(o.WebSuggestUpdateTimezone) {
		var ret bool
		return ret
	}
	return *o.WebSuggestUpdateTimezone
}

// GetWebSuggestUpdateTimezoneOk returns a tuple with the WebSuggestUpdateTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebSuggestUpdateTimezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.WebSuggestUpdateTimezone) {
		return nil, false
	}
	return o.WebSuggestUpdateTimezone, true
}

// HasWebSuggestUpdateTimezone returns a boolean if a field has been set.
func (o *UserSettings) HasWebSuggestUpdateTimezone() bool {
	if o != nil && !IsNil(o.WebSuggestUpdateTimezone) {
		return true
	}

	return false
}

// SetWebSuggestUpdateTimezone gets a reference to the given bool and assigns it to the WebSuggestUpdateTimezone field.
func (o *UserSettings) SetWebSuggestUpdateTimezone(v bool) {
	o.WebSuggestUpdateTimezone = &v
}

// GetFluidLayoutWidth returns the FluidLayoutWidth field value if set, zero value otherwise.
func (o *UserSettings) GetFluidLayoutWidth() bool {
	if o == nil || IsNil(o.FluidLayoutWidth) {
		var ret bool
		return ret
	}
	return *o.FluidLayoutWidth
}

// GetFluidLayoutWidthOk returns a tuple with the FluidLayoutWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetFluidLayoutWidthOk() (*bool, bool) {
	if o == nil || IsNil(o.FluidLayoutWidth) {
		return nil, false
	}
	return o.FluidLayoutWidth, true
}

// HasFluidLayoutWidth returns a boolean if a field has been set.
func (o *UserSettings) HasFluidLayoutWidth() bool {
	if o != nil && !IsNil(o.FluidLayoutWidth) {
		return true
	}

	return false
}

// SetFluidLayoutWidth gets a reference to the given bool and assigns it to the FluidLayoutWidth field.
func (o *UserSettings) SetFluidLayoutWidth(v bool) {
	o.FluidLayoutWidth = &v
}

// GetHighContrastMode returns the HighContrastMode field value if set, zero value otherwise.
func (o *UserSettings) GetHighContrastMode() bool {
	if o == nil || IsNil(o.HighContrastMode) {
		var ret bool
		return ret
	}
	return *o.HighContrastMode
}

// GetHighContrastModeOk returns a tuple with the HighContrastMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetHighContrastModeOk() (*bool, bool) {
	if o == nil || IsNil(o.HighContrastMode) {
		return nil, false
	}
	return o.HighContrastMode, true
}

// HasHighContrastMode returns a boolean if a field has been set.
func (o *UserSettings) HasHighContrastMode() bool {
	if o != nil && !IsNil(o.HighContrastMode) {
		return true
	}

	return false
}

// SetHighContrastMode gets a reference to the given bool and assigns it to the HighContrastMode field.
func (o *UserSettings) SetHighContrastMode(v bool) {
	o.HighContrastMode = &v
}

// GetWebFontSizePx returns the WebFontSizePx field value if set, zero value otherwise.
func (o *UserSettings) GetWebFontSizePx() int32 {
	if o == nil || IsNil(o.WebFontSizePx) {
		var ret int32
		return ret
	}
	return *o.WebFontSizePx
}

// GetWebFontSizePxOk returns a tuple with the WebFontSizePx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebFontSizePxOk() (*int32, bool) {
	if o == nil || IsNil(o.WebFontSizePx) {
		return nil, false
	}
	return o.WebFontSizePx, true
}

// HasWebFontSizePx returns a boolean if a field has been set.
func (o *UserSettings) HasWebFontSizePx() bool {
	if o != nil && !IsNil(o.WebFontSizePx) {
		return true
	}

	return false
}

// SetWebFontSizePx gets a reference to the given int32 and assigns it to the WebFontSizePx field.
func (o *UserSettings) SetWebFontSizePx(v int32) {
	o.WebFontSizePx = &v
}

// GetWebLineHeightPercent returns the WebLineHeightPercent field value if set, zero value otherwise.
func (o *UserSettings) GetWebLineHeightPercent() int32 {
	if o == nil || IsNil(o.WebLineHeightPercent) {
		var ret int32
		return ret
	}
	return *o.WebLineHeightPercent
}

// GetWebLineHeightPercentOk returns a tuple with the WebLineHeightPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebLineHeightPercentOk() (*int32, bool) {
	if o == nil || IsNil(o.WebLineHeightPercent) {
		return nil, false
	}
	return o.WebLineHeightPercent, true
}

// HasWebLineHeightPercent returns a boolean if a field has been set.
func (o *UserSettings) HasWebLineHeightPercent() bool {
	if o != nil && !IsNil(o.WebLineHeightPercent) {
		return true
	}

	return false
}

// SetWebLineHeightPercent gets a reference to the given int32 and assigns it to the WebLineHeightPercent field.
func (o *UserSettings) SetWebLineHeightPercent(v int32) {
	o.WebLineHeightPercent = &v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
func (o *UserSettings) GetColorScheme() int32 {
	if o == nil || IsNil(o.ColorScheme) {
		var ret int32
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetColorSchemeOk() (*int32, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *UserSettings) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given int32 and assigns it to the ColorScheme field.
func (o *UserSettings) SetColorScheme(v int32) {
	o.ColorScheme = &v
}

// GetTranslateEmoticons returns the TranslateEmoticons field value if set, zero value otherwise.
func (o *UserSettings) GetTranslateEmoticons() bool {
	if o == nil || IsNil(o.TranslateEmoticons) {
		var ret bool
		return ret
	}
	return *o.TranslateEmoticons
}

// GetTranslateEmoticonsOk returns a tuple with the TranslateEmoticons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetTranslateEmoticonsOk() (*bool, bool) {
	if o == nil || IsNil(o.TranslateEmoticons) {
		return nil, false
	}
	return o.TranslateEmoticons, true
}

// HasTranslateEmoticons returns a boolean if a field has been set.
func (o *UserSettings) HasTranslateEmoticons() bool {
	if o != nil && !IsNil(o.TranslateEmoticons) {
		return true
	}

	return false
}

// SetTranslateEmoticons gets a reference to the given bool and assigns it to the TranslateEmoticons field.
func (o *UserSettings) SetTranslateEmoticons(v bool) {
	o.TranslateEmoticons = &v
}

// GetDisplayEmojiReactionUsers returns the DisplayEmojiReactionUsers field value if set, zero value otherwise.
func (o *UserSettings) GetDisplayEmojiReactionUsers() bool {
	if o == nil || IsNil(o.DisplayEmojiReactionUsers) {
		var ret bool
		return ret
	}
	return *o.DisplayEmojiReactionUsers
}

// GetDisplayEmojiReactionUsersOk returns a tuple with the DisplayEmojiReactionUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDisplayEmojiReactionUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayEmojiReactionUsers) {
		return nil, false
	}
	return o.DisplayEmojiReactionUsers, true
}

// HasDisplayEmojiReactionUsers returns a boolean if a field has been set.
func (o *UserSettings) HasDisplayEmojiReactionUsers() bool {
	if o != nil && !IsNil(o.DisplayEmojiReactionUsers) {
		return true
	}

	return false
}

// SetDisplayEmojiReactionUsers gets a reference to the given bool and assigns it to the DisplayEmojiReactionUsers field.
func (o *UserSettings) SetDisplayEmojiReactionUsers(v bool) {
	o.DisplayEmojiReactionUsers = &v
}

// GetDefaultLanguage returns the DefaultLanguage field value if set, zero value otherwise.
func (o *UserSettings) GetDefaultLanguage() string {
	if o == nil || IsNil(o.DefaultLanguage) {
		var ret string
		return ret
	}
	return *o.DefaultLanguage
}

// GetDefaultLanguageOk returns a tuple with the DefaultLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDefaultLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLanguage) {
		return nil, false
	}
	return o.DefaultLanguage, true
}

// HasDefaultLanguage returns a boolean if a field has been set.
func (o *UserSettings) HasDefaultLanguage() bool {
	if o != nil && !IsNil(o.DefaultLanguage) {
		return true
	}

	return false
}

// SetDefaultLanguage gets a reference to the given string and assigns it to the DefaultLanguage field.
func (o *UserSettings) SetDefaultLanguage(v string) {
	o.DefaultLanguage = &v
}

// GetWebHomeView returns the WebHomeView field value if set, zero value otherwise.
func (o *UserSettings) GetWebHomeView() string {
	if o == nil || IsNil(o.WebHomeView) {
		var ret string
		return ret
	}
	return *o.WebHomeView
}

// GetWebHomeViewOk returns a tuple with the WebHomeView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebHomeViewOk() (*string, bool) {
	if o == nil || IsNil(o.WebHomeView) {
		return nil, false
	}
	return o.WebHomeView, true
}

// HasWebHomeView returns a boolean if a field has been set.
func (o *UserSettings) HasWebHomeView() bool {
	if o != nil && !IsNil(o.WebHomeView) {
		return true
	}

	return false
}

// SetWebHomeView gets a reference to the given string and assigns it to the WebHomeView field.
func (o *UserSettings) SetWebHomeView(v string) {
	o.WebHomeView = &v
}

// GetWebEscapeNavigatesToHomeView returns the WebEscapeNavigatesToHomeView field value if set, zero value otherwise.
func (o *UserSettings) GetWebEscapeNavigatesToHomeView() bool {
	if o == nil || IsNil(o.WebEscapeNavigatesToHomeView) {
		var ret bool
		return ret
	}
	return *o.WebEscapeNavigatesToHomeView
}

// GetWebEscapeNavigatesToHomeViewOk returns a tuple with the WebEscapeNavigatesToHomeView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebEscapeNavigatesToHomeViewOk() (*bool, bool) {
	if o == nil || IsNil(o.WebEscapeNavigatesToHomeView) {
		return nil, false
	}
	return o.WebEscapeNavigatesToHomeView, true
}

// HasWebEscapeNavigatesToHomeView returns a boolean if a field has been set.
func (o *UserSettings) HasWebEscapeNavigatesToHomeView() bool {
	if o != nil && !IsNil(o.WebEscapeNavigatesToHomeView) {
		return true
	}

	return false
}

// SetWebEscapeNavigatesToHomeView gets a reference to the given bool and assigns it to the WebEscapeNavigatesToHomeView field.
func (o *UserSettings) SetWebEscapeNavigatesToHomeView(v bool) {
	o.WebEscapeNavigatesToHomeView = &v
}

// GetLeftSideUserlist returns the LeftSideUserlist field value if set, zero value otherwise.
func (o *UserSettings) GetLeftSideUserlist() bool {
	if o == nil || IsNil(o.LeftSideUserlist) {
		var ret bool
		return ret
	}
	return *o.LeftSideUserlist
}

// GetLeftSideUserlistOk returns a tuple with the LeftSideUserlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetLeftSideUserlistOk() (*bool, bool) {
	if o == nil || IsNil(o.LeftSideUserlist) {
		return nil, false
	}
	return o.LeftSideUserlist, true
}

// HasLeftSideUserlist returns a boolean if a field has been set.
func (o *UserSettings) HasLeftSideUserlist() bool {
	if o != nil && !IsNil(o.LeftSideUserlist) {
		return true
	}

	return false
}

// SetLeftSideUserlist gets a reference to the given bool and assigns it to the LeftSideUserlist field.
func (o *UserSettings) SetLeftSideUserlist(v bool) {
	o.LeftSideUserlist = &v
}

// GetEmojiset returns the Emojiset field value if set, zero value otherwise.
func (o *UserSettings) GetEmojiset() string {
	if o == nil || IsNil(o.Emojiset) {
		var ret string
		return ret
	}
	return *o.Emojiset
}

// GetEmojisetOk returns a tuple with the Emojiset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEmojisetOk() (*string, bool) {
	if o == nil || IsNil(o.Emojiset) {
		return nil, false
	}
	return o.Emojiset, true
}

// HasEmojiset returns a boolean if a field has been set.
func (o *UserSettings) HasEmojiset() bool {
	if o != nil && !IsNil(o.Emojiset) {
		return true
	}

	return false
}

// SetEmojiset gets a reference to the given string and assigns it to the Emojiset field.
func (o *UserSettings) SetEmojiset(v string) {
	o.Emojiset = &v
}

// GetDemoteInactiveStreams returns the DemoteInactiveStreams field value if set, zero value otherwise.
func (o *UserSettings) GetDemoteInactiveStreams() int32 {
	if o == nil || IsNil(o.DemoteInactiveStreams) {
		var ret int32
		return ret
	}
	return *o.DemoteInactiveStreams
}

// GetDemoteInactiveStreamsOk returns a tuple with the DemoteInactiveStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDemoteInactiveStreamsOk() (*int32, bool) {
	if o == nil || IsNil(o.DemoteInactiveStreams) {
		return nil, false
	}
	return o.DemoteInactiveStreams, true
}

// HasDemoteInactiveStreams returns a boolean if a field has been set.
func (o *UserSettings) HasDemoteInactiveStreams() bool {
	if o != nil && !IsNil(o.DemoteInactiveStreams) {
		return true
	}

	return false
}

// SetDemoteInactiveStreams gets a reference to the given int32 and assigns it to the DemoteInactiveStreams field.
func (o *UserSettings) SetDemoteInactiveStreams(v int32) {
	o.DemoteInactiveStreams = &v
}

// GetUserListStyle returns the UserListStyle field value if set, zero value otherwise.
func (o *UserSettings) GetUserListStyle() int32 {
	if o == nil || IsNil(o.UserListStyle) {
		var ret int32
		return ret
	}
	return *o.UserListStyle
}

// GetUserListStyleOk returns a tuple with the UserListStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserListStyleOk() (*int32, bool) {
	if o == nil || IsNil(o.UserListStyle) {
		return nil, false
	}
	return o.UserListStyle, true
}

// HasUserListStyle returns a boolean if a field has been set.
func (o *UserSettings) HasUserListStyle() bool {
	if o != nil && !IsNil(o.UserListStyle) {
		return true
	}

	return false
}

// SetUserListStyle gets a reference to the given int32 and assigns it to the UserListStyle field.
func (o *UserSettings) SetUserListStyle(v int32) {
	o.UserListStyle = &v
}

// GetWebAnimateImagePreviews returns the WebAnimateImagePreviews field value if set, zero value otherwise.
func (o *UserSettings) GetWebAnimateImagePreviews() string {
	if o == nil || IsNil(o.WebAnimateImagePreviews) {
		var ret string
		return ret
	}
	return *o.WebAnimateImagePreviews
}

// GetWebAnimateImagePreviewsOk returns a tuple with the WebAnimateImagePreviews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebAnimateImagePreviewsOk() (*string, bool) {
	if o == nil || IsNil(o.WebAnimateImagePreviews) {
		return nil, false
	}
	return o.WebAnimateImagePreviews, true
}

// HasWebAnimateImagePreviews returns a boolean if a field has been set.
func (o *UserSettings) HasWebAnimateImagePreviews() bool {
	if o != nil && !IsNil(o.WebAnimateImagePreviews) {
		return true
	}

	return false
}

// SetWebAnimateImagePreviews gets a reference to the given string and assigns it to the WebAnimateImagePreviews field.
func (o *UserSettings) SetWebAnimateImagePreviews(v string) {
	o.WebAnimateImagePreviews = &v
}

// GetWebStreamUnreadsCountDisplayPolicy returns the WebStreamUnreadsCountDisplayPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetWebStreamUnreadsCountDisplayPolicy() int32 {
	if o == nil || IsNil(o.WebStreamUnreadsCountDisplayPolicy) {
		var ret int32
		return ret
	}
	return *o.WebStreamUnreadsCountDisplayPolicy
}

// GetWebStreamUnreadsCountDisplayPolicyOk returns a tuple with the WebStreamUnreadsCountDisplayPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebStreamUnreadsCountDisplayPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.WebStreamUnreadsCountDisplayPolicy) {
		return nil, false
	}
	return o.WebStreamUnreadsCountDisplayPolicy, true
}

// HasWebStreamUnreadsCountDisplayPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasWebStreamUnreadsCountDisplayPolicy() bool {
	if o != nil && !IsNil(o.WebStreamUnreadsCountDisplayPolicy) {
		return true
	}

	return false
}

// SetWebStreamUnreadsCountDisplayPolicy gets a reference to the given int32 and assigns it to the WebStreamUnreadsCountDisplayPolicy field.
func (o *UserSettings) SetWebStreamUnreadsCountDisplayPolicy(v int32) {
	o.WebStreamUnreadsCountDisplayPolicy = &v
}

// GetHideAiFeatures returns the HideAiFeatures field value if set, zero value otherwise.
func (o *UserSettings) GetHideAiFeatures() bool {
	if o == nil || IsNil(o.HideAiFeatures) {
		var ret bool
		return ret
	}
	return *o.HideAiFeatures
}

// GetHideAiFeaturesOk returns a tuple with the HideAiFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetHideAiFeaturesOk() (*bool, bool) {
	if o == nil || IsNil(o.HideAiFeatures) {
		return nil, false
	}
	return o.HideAiFeatures, true
}

// HasHideAiFeatures returns a boolean if a field has been set.
func (o *UserSettings) HasHideAiFeatures() bool {
	if o != nil && !IsNil(o.HideAiFeatures) {
		return true
	}

	return false
}

// SetHideAiFeatures gets a reference to the given bool and assigns it to the HideAiFeatures field.
func (o *UserSettings) SetHideAiFeatures(v bool) {
	o.HideAiFeatures = &v
}

// GetWebLeftSidebarShowChannelFolders returns the WebLeftSidebarShowChannelFolders field value if set, zero value otherwise.
func (o *UserSettings) GetWebLeftSidebarShowChannelFolders() bool {
	if o == nil || IsNil(o.WebLeftSidebarShowChannelFolders) {
		var ret bool
		return ret
	}
	return *o.WebLeftSidebarShowChannelFolders
}

// GetWebLeftSidebarShowChannelFoldersOk returns a tuple with the WebLeftSidebarShowChannelFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebLeftSidebarShowChannelFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.WebLeftSidebarShowChannelFolders) {
		return nil, false
	}
	return o.WebLeftSidebarShowChannelFolders, true
}

// HasWebLeftSidebarShowChannelFolders returns a boolean if a field has been set.
func (o *UserSettings) HasWebLeftSidebarShowChannelFolders() bool {
	if o != nil && !IsNil(o.WebLeftSidebarShowChannelFolders) {
		return true
	}

	return false
}

// SetWebLeftSidebarShowChannelFolders gets a reference to the given bool and assigns it to the WebLeftSidebarShowChannelFolders field.
func (o *UserSettings) SetWebLeftSidebarShowChannelFolders(v bool) {
	o.WebLeftSidebarShowChannelFolders = &v
}

// GetWebLeftSidebarUnreadsCountSummary returns the WebLeftSidebarUnreadsCountSummary field value if set, zero value otherwise.
func (o *UserSettings) GetWebLeftSidebarUnreadsCountSummary() bool {
	if o == nil || IsNil(o.WebLeftSidebarUnreadsCountSummary) {
		var ret bool
		return ret
	}
	return *o.WebLeftSidebarUnreadsCountSummary
}

// GetWebLeftSidebarUnreadsCountSummaryOk returns a tuple with the WebLeftSidebarUnreadsCountSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebLeftSidebarUnreadsCountSummaryOk() (*bool, bool) {
	if o == nil || IsNil(o.WebLeftSidebarUnreadsCountSummary) {
		return nil, false
	}
	return o.WebLeftSidebarUnreadsCountSummary, true
}

// HasWebLeftSidebarUnreadsCountSummary returns a boolean if a field has been set.
func (o *UserSettings) HasWebLeftSidebarUnreadsCountSummary() bool {
	if o != nil && !IsNil(o.WebLeftSidebarUnreadsCountSummary) {
		return true
	}

	return false
}

// SetWebLeftSidebarUnreadsCountSummary gets a reference to the given bool and assigns it to the WebLeftSidebarUnreadsCountSummary field.
func (o *UserSettings) SetWebLeftSidebarUnreadsCountSummary(v bool) {
	o.WebLeftSidebarUnreadsCountSummary = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UserSettings) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UserSettings) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UserSettings) SetTimezone(v string) {
	o.Timezone = &v
}

// GetEnterSends returns the EnterSends field value if set, zero value otherwise.
func (o *UserSettings) GetEnterSends() bool {
	if o == nil || IsNil(o.EnterSends) {
		var ret bool
		return ret
	}
	return *o.EnterSends
}

// GetEnterSendsOk returns a tuple with the EnterSends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnterSendsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnterSends) {
		return nil, false
	}
	return o.EnterSends, true
}

// HasEnterSends returns a boolean if a field has been set.
func (o *UserSettings) HasEnterSends() bool {
	if o != nil && !IsNil(o.EnterSends) {
		return true
	}

	return false
}

// SetEnterSends gets a reference to the given bool and assigns it to the EnterSends field.
func (o *UserSettings) SetEnterSends(v bool) {
	o.EnterSends = &v
}

// GetEnableDraftsSynchronization returns the EnableDraftsSynchronization field value if set, zero value otherwise.
func (o *UserSettings) GetEnableDraftsSynchronization() bool {
	if o == nil || IsNil(o.EnableDraftsSynchronization) {
		var ret bool
		return ret
	}
	return *o.EnableDraftsSynchronization
}

// GetEnableDraftsSynchronizationOk returns a tuple with the EnableDraftsSynchronization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableDraftsSynchronizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDraftsSynchronization) {
		return nil, false
	}
	return o.EnableDraftsSynchronization, true
}

// HasEnableDraftsSynchronization returns a boolean if a field has been set.
func (o *UserSettings) HasEnableDraftsSynchronization() bool {
	if o != nil && !IsNil(o.EnableDraftsSynchronization) {
		return true
	}

	return false
}

// SetEnableDraftsSynchronization gets a reference to the given bool and assigns it to the EnableDraftsSynchronization field.
func (o *UserSettings) SetEnableDraftsSynchronization(v bool) {
	o.EnableDraftsSynchronization = &v
}

// GetEnableStreamDesktopNotifications returns the EnableStreamDesktopNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableStreamDesktopNotifications() bool {
	if o == nil || IsNil(o.EnableStreamDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamDesktopNotifications
}

// GetEnableStreamDesktopNotificationsOk returns a tuple with the EnableStreamDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableStreamDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamDesktopNotifications) {
		return nil, false
	}
	return o.EnableStreamDesktopNotifications, true
}

// HasEnableStreamDesktopNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableStreamDesktopNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamDesktopNotifications) {
		return true
	}

	return false
}

// SetEnableStreamDesktopNotifications gets a reference to the given bool and assigns it to the EnableStreamDesktopNotifications field.
func (o *UserSettings) SetEnableStreamDesktopNotifications(v bool) {
	o.EnableStreamDesktopNotifications = &v
}

// GetEnableStreamEmailNotifications returns the EnableStreamEmailNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableStreamEmailNotifications() bool {
	if o == nil || IsNil(o.EnableStreamEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamEmailNotifications
}

// GetEnableStreamEmailNotificationsOk returns a tuple with the EnableStreamEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableStreamEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamEmailNotifications) {
		return nil, false
	}
	return o.EnableStreamEmailNotifications, true
}

// HasEnableStreamEmailNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableStreamEmailNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamEmailNotifications) {
		return true
	}

	return false
}

// SetEnableStreamEmailNotifications gets a reference to the given bool and assigns it to the EnableStreamEmailNotifications field.
func (o *UserSettings) SetEnableStreamEmailNotifications(v bool) {
	o.EnableStreamEmailNotifications = &v
}

// GetEnableStreamPushNotifications returns the EnableStreamPushNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableStreamPushNotifications() bool {
	if o == nil || IsNil(o.EnableStreamPushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamPushNotifications
}

// GetEnableStreamPushNotificationsOk returns a tuple with the EnableStreamPushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableStreamPushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamPushNotifications) {
		return nil, false
	}
	return o.EnableStreamPushNotifications, true
}

// HasEnableStreamPushNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableStreamPushNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamPushNotifications) {
		return true
	}

	return false
}

// SetEnableStreamPushNotifications gets a reference to the given bool and assigns it to the EnableStreamPushNotifications field.
func (o *UserSettings) SetEnableStreamPushNotifications(v bool) {
	o.EnableStreamPushNotifications = &v
}

// GetEnableStreamAudibleNotifications returns the EnableStreamAudibleNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableStreamAudibleNotifications() bool {
	if o == nil || IsNil(o.EnableStreamAudibleNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamAudibleNotifications
}

// GetEnableStreamAudibleNotificationsOk returns a tuple with the EnableStreamAudibleNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableStreamAudibleNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamAudibleNotifications) {
		return nil, false
	}
	return o.EnableStreamAudibleNotifications, true
}

// HasEnableStreamAudibleNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableStreamAudibleNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamAudibleNotifications) {
		return true
	}

	return false
}

// SetEnableStreamAudibleNotifications gets a reference to the given bool and assigns it to the EnableStreamAudibleNotifications field.
func (o *UserSettings) SetEnableStreamAudibleNotifications(v bool) {
	o.EnableStreamAudibleNotifications = &v
}

// GetNotificationSound returns the NotificationSound field value if set, zero value otherwise.
func (o *UserSettings) GetNotificationSound() string {
	if o == nil || IsNil(o.NotificationSound) {
		var ret string
		return ret
	}
	return *o.NotificationSound
}

// GetNotificationSoundOk returns a tuple with the NotificationSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetNotificationSoundOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationSound) {
		return nil, false
	}
	return o.NotificationSound, true
}

// HasNotificationSound returns a boolean if a field has been set.
func (o *UserSettings) HasNotificationSound() bool {
	if o != nil && !IsNil(o.NotificationSound) {
		return true
	}

	return false
}

// SetNotificationSound gets a reference to the given string and assigns it to the NotificationSound field.
func (o *UserSettings) SetNotificationSound(v string) {
	o.NotificationSound = &v
}

// GetEnableDesktopNotifications returns the EnableDesktopNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableDesktopNotifications() bool {
	if o == nil || IsNil(o.EnableDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableDesktopNotifications
}

// GetEnableDesktopNotificationsOk returns a tuple with the EnableDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDesktopNotifications) {
		return nil, false
	}
	return o.EnableDesktopNotifications, true
}

// HasEnableDesktopNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableDesktopNotifications() bool {
	if o != nil && !IsNil(o.EnableDesktopNotifications) {
		return true
	}

	return false
}

// SetEnableDesktopNotifications gets a reference to the given bool and assigns it to the EnableDesktopNotifications field.
func (o *UserSettings) SetEnableDesktopNotifications(v bool) {
	o.EnableDesktopNotifications = &v
}

// GetEnableSounds returns the EnableSounds field value if set, zero value otherwise.
func (o *UserSettings) GetEnableSounds() bool {
	if o == nil || IsNil(o.EnableSounds) {
		var ret bool
		return ret
	}
	return *o.EnableSounds
}

// GetEnableSoundsOk returns a tuple with the EnableSounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableSoundsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSounds) {
		return nil, false
	}
	return o.EnableSounds, true
}

// HasEnableSounds returns a boolean if a field has been set.
func (o *UserSettings) HasEnableSounds() bool {
	if o != nil && !IsNil(o.EnableSounds) {
		return true
	}

	return false
}

// SetEnableSounds gets a reference to the given bool and assigns it to the EnableSounds field.
func (o *UserSettings) SetEnableSounds(v bool) {
	o.EnableSounds = &v
}

// GetEnableFollowedTopicDesktopNotifications returns the EnableFollowedTopicDesktopNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableFollowedTopicDesktopNotifications() bool {
	if o == nil || IsNil(o.EnableFollowedTopicDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableFollowedTopicDesktopNotifications
}

// GetEnableFollowedTopicDesktopNotificationsOk returns a tuple with the EnableFollowedTopicDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableFollowedTopicDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFollowedTopicDesktopNotifications) {
		return nil, false
	}
	return o.EnableFollowedTopicDesktopNotifications, true
}

// HasEnableFollowedTopicDesktopNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableFollowedTopicDesktopNotifications() bool {
	if o != nil && !IsNil(o.EnableFollowedTopicDesktopNotifications) {
		return true
	}

	return false
}

// SetEnableFollowedTopicDesktopNotifications gets a reference to the given bool and assigns it to the EnableFollowedTopicDesktopNotifications field.
func (o *UserSettings) SetEnableFollowedTopicDesktopNotifications(v bool) {
	o.EnableFollowedTopicDesktopNotifications = &v
}

// GetEnableFollowedTopicEmailNotifications returns the EnableFollowedTopicEmailNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableFollowedTopicEmailNotifications() bool {
	if o == nil || IsNil(o.EnableFollowedTopicEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableFollowedTopicEmailNotifications
}

// GetEnableFollowedTopicEmailNotificationsOk returns a tuple with the EnableFollowedTopicEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableFollowedTopicEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFollowedTopicEmailNotifications) {
		return nil, false
	}
	return o.EnableFollowedTopicEmailNotifications, true
}

// HasEnableFollowedTopicEmailNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableFollowedTopicEmailNotifications() bool {
	if o != nil && !IsNil(o.EnableFollowedTopicEmailNotifications) {
		return true
	}

	return false
}

// SetEnableFollowedTopicEmailNotifications gets a reference to the given bool and assigns it to the EnableFollowedTopicEmailNotifications field.
func (o *UserSettings) SetEnableFollowedTopicEmailNotifications(v bool) {
	o.EnableFollowedTopicEmailNotifications = &v
}

// GetEnableFollowedTopicPushNotifications returns the EnableFollowedTopicPushNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableFollowedTopicPushNotifications() bool {
	if o == nil || IsNil(o.EnableFollowedTopicPushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableFollowedTopicPushNotifications
}

// GetEnableFollowedTopicPushNotificationsOk returns a tuple with the EnableFollowedTopicPushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableFollowedTopicPushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFollowedTopicPushNotifications) {
		return nil, false
	}
	return o.EnableFollowedTopicPushNotifications, true
}

// HasEnableFollowedTopicPushNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableFollowedTopicPushNotifications() bool {
	if o != nil && !IsNil(o.EnableFollowedTopicPushNotifications) {
		return true
	}

	return false
}

// SetEnableFollowedTopicPushNotifications gets a reference to the given bool and assigns it to the EnableFollowedTopicPushNotifications field.
func (o *UserSettings) SetEnableFollowedTopicPushNotifications(v bool) {
	o.EnableFollowedTopicPushNotifications = &v
}

// GetEnableFollowedTopicAudibleNotifications returns the EnableFollowedTopicAudibleNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableFollowedTopicAudibleNotifications() bool {
	if o == nil || IsNil(o.EnableFollowedTopicAudibleNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableFollowedTopicAudibleNotifications
}

// GetEnableFollowedTopicAudibleNotificationsOk returns a tuple with the EnableFollowedTopicAudibleNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableFollowedTopicAudibleNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFollowedTopicAudibleNotifications) {
		return nil, false
	}
	return o.EnableFollowedTopicAudibleNotifications, true
}

// HasEnableFollowedTopicAudibleNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableFollowedTopicAudibleNotifications() bool {
	if o != nil && !IsNil(o.EnableFollowedTopicAudibleNotifications) {
		return true
	}

	return false
}

// SetEnableFollowedTopicAudibleNotifications gets a reference to the given bool and assigns it to the EnableFollowedTopicAudibleNotifications field.
func (o *UserSettings) SetEnableFollowedTopicAudibleNotifications(v bool) {
	o.EnableFollowedTopicAudibleNotifications = &v
}

// GetEmailNotificationsBatchingPeriodSeconds returns the EmailNotificationsBatchingPeriodSeconds field value if set, zero value otherwise.
func (o *UserSettings) GetEmailNotificationsBatchingPeriodSeconds() int32 {
	if o == nil || IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		var ret int32
		return ret
	}
	return *o.EmailNotificationsBatchingPeriodSeconds
}

// GetEmailNotificationsBatchingPeriodSecondsOk returns a tuple with the EmailNotificationsBatchingPeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEmailNotificationsBatchingPeriodSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		return nil, false
	}
	return o.EmailNotificationsBatchingPeriodSeconds, true
}

// HasEmailNotificationsBatchingPeriodSeconds returns a boolean if a field has been set.
func (o *UserSettings) HasEmailNotificationsBatchingPeriodSeconds() bool {
	if o != nil && !IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		return true
	}

	return false
}

// SetEmailNotificationsBatchingPeriodSeconds gets a reference to the given int32 and assigns it to the EmailNotificationsBatchingPeriodSeconds field.
func (o *UserSettings) SetEmailNotificationsBatchingPeriodSeconds(v int32) {
	o.EmailNotificationsBatchingPeriodSeconds = &v
}

// GetEnableOfflineEmailNotifications returns the EnableOfflineEmailNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableOfflineEmailNotifications() bool {
	if o == nil || IsNil(o.EnableOfflineEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOfflineEmailNotifications
}

// GetEnableOfflineEmailNotificationsOk returns a tuple with the EnableOfflineEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableOfflineEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOfflineEmailNotifications) {
		return nil, false
	}
	return o.EnableOfflineEmailNotifications, true
}

// HasEnableOfflineEmailNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableOfflineEmailNotifications() bool {
	if o != nil && !IsNil(o.EnableOfflineEmailNotifications) {
		return true
	}

	return false
}

// SetEnableOfflineEmailNotifications gets a reference to the given bool and assigns it to the EnableOfflineEmailNotifications field.
func (o *UserSettings) SetEnableOfflineEmailNotifications(v bool) {
	o.EnableOfflineEmailNotifications = &v
}

// GetEnableOfflinePushNotifications returns the EnableOfflinePushNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableOfflinePushNotifications() bool {
	if o == nil || IsNil(o.EnableOfflinePushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOfflinePushNotifications
}

// GetEnableOfflinePushNotificationsOk returns a tuple with the EnableOfflinePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableOfflinePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOfflinePushNotifications) {
		return nil, false
	}
	return o.EnableOfflinePushNotifications, true
}

// HasEnableOfflinePushNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableOfflinePushNotifications() bool {
	if o != nil && !IsNil(o.EnableOfflinePushNotifications) {
		return true
	}

	return false
}

// SetEnableOfflinePushNotifications gets a reference to the given bool and assigns it to the EnableOfflinePushNotifications field.
func (o *UserSettings) SetEnableOfflinePushNotifications(v bool) {
	o.EnableOfflinePushNotifications = &v
}

// GetEnableOnlinePushNotifications returns the EnableOnlinePushNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetEnableOnlinePushNotifications() bool {
	if o == nil || IsNil(o.EnableOnlinePushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOnlinePushNotifications
}

// GetEnableOnlinePushNotificationsOk returns a tuple with the EnableOnlinePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableOnlinePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOnlinePushNotifications) {
		return nil, false
	}
	return o.EnableOnlinePushNotifications, true
}

// HasEnableOnlinePushNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasEnableOnlinePushNotifications() bool {
	if o != nil && !IsNil(o.EnableOnlinePushNotifications) {
		return true
	}

	return false
}

// SetEnableOnlinePushNotifications gets a reference to the given bool and assigns it to the EnableOnlinePushNotifications field.
func (o *UserSettings) SetEnableOnlinePushNotifications(v bool) {
	o.EnableOnlinePushNotifications = &v
}

// GetEnableDigestEmails returns the EnableDigestEmails field value if set, zero value otherwise.
func (o *UserSettings) GetEnableDigestEmails() bool {
	if o == nil || IsNil(o.EnableDigestEmails) {
		var ret bool
		return ret
	}
	return *o.EnableDigestEmails
}

// GetEnableDigestEmailsOk returns a tuple with the EnableDigestEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableDigestEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDigestEmails) {
		return nil, false
	}
	return o.EnableDigestEmails, true
}

// HasEnableDigestEmails returns a boolean if a field has been set.
func (o *UserSettings) HasEnableDigestEmails() bool {
	if o != nil && !IsNil(o.EnableDigestEmails) {
		return true
	}

	return false
}

// SetEnableDigestEmails gets a reference to the given bool and assigns it to the EnableDigestEmails field.
func (o *UserSettings) SetEnableDigestEmails(v bool) {
	o.EnableDigestEmails = &v
}

// GetEnableMarketingEmails returns the EnableMarketingEmails field value if set, zero value otherwise.
func (o *UserSettings) GetEnableMarketingEmails() bool {
	if o == nil || IsNil(o.EnableMarketingEmails) {
		var ret bool
		return ret
	}
	return *o.EnableMarketingEmails
}

// GetEnableMarketingEmailsOk returns a tuple with the EnableMarketingEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableMarketingEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMarketingEmails) {
		return nil, false
	}
	return o.EnableMarketingEmails, true
}

// HasEnableMarketingEmails returns a boolean if a field has been set.
func (o *UserSettings) HasEnableMarketingEmails() bool {
	if o != nil && !IsNil(o.EnableMarketingEmails) {
		return true
	}

	return false
}

// SetEnableMarketingEmails gets a reference to the given bool and assigns it to the EnableMarketingEmails field.
func (o *UserSettings) SetEnableMarketingEmails(v bool) {
	o.EnableMarketingEmails = &v
}

// GetEnableLoginEmails returns the EnableLoginEmails field value if set, zero value otherwise.
func (o *UserSettings) GetEnableLoginEmails() bool {
	if o == nil || IsNil(o.EnableLoginEmails) {
		var ret bool
		return ret
	}
	return *o.EnableLoginEmails
}

// GetEnableLoginEmailsOk returns a tuple with the EnableLoginEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableLoginEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLoginEmails) {
		return nil, false
	}
	return o.EnableLoginEmails, true
}

// HasEnableLoginEmails returns a boolean if a field has been set.
func (o *UserSettings) HasEnableLoginEmails() bool {
	if o != nil && !IsNil(o.EnableLoginEmails) {
		return true
	}

	return false
}

// SetEnableLoginEmails gets a reference to the given bool and assigns it to the EnableLoginEmails field.
func (o *UserSettings) SetEnableLoginEmails(v bool) {
	o.EnableLoginEmails = &v
}

// GetMessageContentInEmailNotifications returns the MessageContentInEmailNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetMessageContentInEmailNotifications() bool {
	if o == nil || IsNil(o.MessageContentInEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.MessageContentInEmailNotifications
}

// GetMessageContentInEmailNotificationsOk returns a tuple with the MessageContentInEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetMessageContentInEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageContentInEmailNotifications) {
		return nil, false
	}
	return o.MessageContentInEmailNotifications, true
}

// HasMessageContentInEmailNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasMessageContentInEmailNotifications() bool {
	if o != nil && !IsNil(o.MessageContentInEmailNotifications) {
		return true
	}

	return false
}

// SetMessageContentInEmailNotifications gets a reference to the given bool and assigns it to the MessageContentInEmailNotifications field.
func (o *UserSettings) SetMessageContentInEmailNotifications(v bool) {
	o.MessageContentInEmailNotifications = &v
}

// GetPmContentInDesktopNotifications returns the PmContentInDesktopNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetPmContentInDesktopNotifications() bool {
	if o == nil || IsNil(o.PmContentInDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.PmContentInDesktopNotifications
}

// GetPmContentInDesktopNotificationsOk returns a tuple with the PmContentInDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetPmContentInDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.PmContentInDesktopNotifications) {
		return nil, false
	}
	return o.PmContentInDesktopNotifications, true
}

// HasPmContentInDesktopNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasPmContentInDesktopNotifications() bool {
	if o != nil && !IsNil(o.PmContentInDesktopNotifications) {
		return true
	}

	return false
}

// SetPmContentInDesktopNotifications gets a reference to the given bool and assigns it to the PmContentInDesktopNotifications field.
func (o *UserSettings) SetPmContentInDesktopNotifications(v bool) {
	o.PmContentInDesktopNotifications = &v
}

// GetWildcardMentionsNotify returns the WildcardMentionsNotify field value if set, zero value otherwise.
func (o *UserSettings) GetWildcardMentionsNotify() bool {
	if o == nil || IsNil(o.WildcardMentionsNotify) {
		var ret bool
		return ret
	}
	return *o.WildcardMentionsNotify
}

// GetWildcardMentionsNotifyOk returns a tuple with the WildcardMentionsNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWildcardMentionsNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.WildcardMentionsNotify) {
		return nil, false
	}
	return o.WildcardMentionsNotify, true
}

// HasWildcardMentionsNotify returns a boolean if a field has been set.
func (o *UserSettings) HasWildcardMentionsNotify() bool {
	if o != nil && !IsNil(o.WildcardMentionsNotify) {
		return true
	}

	return false
}

// SetWildcardMentionsNotify gets a reference to the given bool and assigns it to the WildcardMentionsNotify field.
func (o *UserSettings) SetWildcardMentionsNotify(v bool) {
	o.WildcardMentionsNotify = &v
}

// GetEnableFollowedTopicWildcardMentionsNotify returns the EnableFollowedTopicWildcardMentionsNotify field value if set, zero value otherwise.
func (o *UserSettings) GetEnableFollowedTopicWildcardMentionsNotify() bool {
	if o == nil || IsNil(o.EnableFollowedTopicWildcardMentionsNotify) {
		var ret bool
		return ret
	}
	return *o.EnableFollowedTopicWildcardMentionsNotify
}

// GetEnableFollowedTopicWildcardMentionsNotifyOk returns a tuple with the EnableFollowedTopicWildcardMentionsNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEnableFollowedTopicWildcardMentionsNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFollowedTopicWildcardMentionsNotify) {
		return nil, false
	}
	return o.EnableFollowedTopicWildcardMentionsNotify, true
}

// HasEnableFollowedTopicWildcardMentionsNotify returns a boolean if a field has been set.
func (o *UserSettings) HasEnableFollowedTopicWildcardMentionsNotify() bool {
	if o != nil && !IsNil(o.EnableFollowedTopicWildcardMentionsNotify) {
		return true
	}

	return false
}

// SetEnableFollowedTopicWildcardMentionsNotify gets a reference to the given bool and assigns it to the EnableFollowedTopicWildcardMentionsNotify field.
func (o *UserSettings) SetEnableFollowedTopicWildcardMentionsNotify(v bool) {
	o.EnableFollowedTopicWildcardMentionsNotify = &v
}

// GetDesktopIconCountDisplay returns the DesktopIconCountDisplay field value if set, zero value otherwise.
func (o *UserSettings) GetDesktopIconCountDisplay() int32 {
	if o == nil || IsNil(o.DesktopIconCountDisplay) {
		var ret int32
		return ret
	}
	return *o.DesktopIconCountDisplay
}

// GetDesktopIconCountDisplayOk returns a tuple with the DesktopIconCountDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDesktopIconCountDisplayOk() (*int32, bool) {
	if o == nil || IsNil(o.DesktopIconCountDisplay) {
		return nil, false
	}
	return o.DesktopIconCountDisplay, true
}

// HasDesktopIconCountDisplay returns a boolean if a field has been set.
func (o *UserSettings) HasDesktopIconCountDisplay() bool {
	if o != nil && !IsNil(o.DesktopIconCountDisplay) {
		return true
	}

	return false
}

// SetDesktopIconCountDisplay gets a reference to the given int32 and assigns it to the DesktopIconCountDisplay field.
func (o *UserSettings) SetDesktopIconCountDisplay(v int32) {
	o.DesktopIconCountDisplay = &v
}

// GetRealmNameInEmailNotificationsPolicy returns the RealmNameInEmailNotificationsPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetRealmNameInEmailNotificationsPolicy() int32 {
	if o == nil || IsNil(o.RealmNameInEmailNotificationsPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmNameInEmailNotificationsPolicy
}

// GetRealmNameInEmailNotificationsPolicyOk returns a tuple with the RealmNameInEmailNotificationsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetRealmNameInEmailNotificationsPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmNameInEmailNotificationsPolicy) {
		return nil, false
	}
	return o.RealmNameInEmailNotificationsPolicy, true
}

// HasRealmNameInEmailNotificationsPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasRealmNameInEmailNotificationsPolicy() bool {
	if o != nil && !IsNil(o.RealmNameInEmailNotificationsPolicy) {
		return true
	}

	return false
}

// SetRealmNameInEmailNotificationsPolicy gets a reference to the given int32 and assigns it to the RealmNameInEmailNotificationsPolicy field.
func (o *UserSettings) SetRealmNameInEmailNotificationsPolicy(v int32) {
	o.RealmNameInEmailNotificationsPolicy = &v
}

// GetAutomaticallyFollowTopicsPolicy returns the AutomaticallyFollowTopicsPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetAutomaticallyFollowTopicsPolicy() int32 {
	if o == nil || IsNil(o.AutomaticallyFollowTopicsPolicy) {
		var ret int32
		return ret
	}
	return *o.AutomaticallyFollowTopicsPolicy
}

// GetAutomaticallyFollowTopicsPolicyOk returns a tuple with the AutomaticallyFollowTopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAutomaticallyFollowTopicsPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomaticallyFollowTopicsPolicy) {
		return nil, false
	}
	return o.AutomaticallyFollowTopicsPolicy, true
}

// HasAutomaticallyFollowTopicsPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasAutomaticallyFollowTopicsPolicy() bool {
	if o != nil && !IsNil(o.AutomaticallyFollowTopicsPolicy) {
		return true
	}

	return false
}

// SetAutomaticallyFollowTopicsPolicy gets a reference to the given int32 and assigns it to the AutomaticallyFollowTopicsPolicy field.
func (o *UserSettings) SetAutomaticallyFollowTopicsPolicy(v int32) {
	o.AutomaticallyFollowTopicsPolicy = &v
}

// GetAutomaticallyUnmuteTopicsInMutedStreamsPolicy returns the AutomaticallyUnmuteTopicsInMutedStreamsPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetAutomaticallyUnmuteTopicsInMutedStreamsPolicy() int32 {
	if o == nil || IsNil(o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy) {
		var ret int32
		return ret
	}
	return *o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy
}

// GetAutomaticallyUnmuteTopicsInMutedStreamsPolicyOk returns a tuple with the AutomaticallyUnmuteTopicsInMutedStreamsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAutomaticallyUnmuteTopicsInMutedStreamsPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy) {
		return nil, false
	}
	return o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy, true
}

// HasAutomaticallyUnmuteTopicsInMutedStreamsPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasAutomaticallyUnmuteTopicsInMutedStreamsPolicy() bool {
	if o != nil && !IsNil(o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy) {
		return true
	}

	return false
}

// SetAutomaticallyUnmuteTopicsInMutedStreamsPolicy gets a reference to the given int32 and assigns it to the AutomaticallyUnmuteTopicsInMutedStreamsPolicy field.
func (o *UserSettings) SetAutomaticallyUnmuteTopicsInMutedStreamsPolicy(v int32) {
	o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy = &v
}

// GetAutomaticallyFollowTopicsWhereMentioned returns the AutomaticallyFollowTopicsWhereMentioned field value if set, zero value otherwise.
func (o *UserSettings) GetAutomaticallyFollowTopicsWhereMentioned() bool {
	if o == nil || IsNil(o.AutomaticallyFollowTopicsWhereMentioned) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyFollowTopicsWhereMentioned
}

// GetAutomaticallyFollowTopicsWhereMentionedOk returns a tuple with the AutomaticallyFollowTopicsWhereMentioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAutomaticallyFollowTopicsWhereMentionedOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallyFollowTopicsWhereMentioned) {
		return nil, false
	}
	return o.AutomaticallyFollowTopicsWhereMentioned, true
}

// HasAutomaticallyFollowTopicsWhereMentioned returns a boolean if a field has been set.
func (o *UserSettings) HasAutomaticallyFollowTopicsWhereMentioned() bool {
	if o != nil && !IsNil(o.AutomaticallyFollowTopicsWhereMentioned) {
		return true
	}

	return false
}

// SetAutomaticallyFollowTopicsWhereMentioned gets a reference to the given bool and assigns it to the AutomaticallyFollowTopicsWhereMentioned field.
func (o *UserSettings) SetAutomaticallyFollowTopicsWhereMentioned(v bool) {
	o.AutomaticallyFollowTopicsWhereMentioned = &v
}

// GetResolvedTopicNoticeAutoReadPolicy returns the ResolvedTopicNoticeAutoReadPolicy field value if set, zero value otherwise.
func (o *UserSettings) GetResolvedTopicNoticeAutoReadPolicy() string {
	if o == nil || IsNil(o.ResolvedTopicNoticeAutoReadPolicy) {
		var ret string
		return ret
	}
	return *o.ResolvedTopicNoticeAutoReadPolicy
}

// GetResolvedTopicNoticeAutoReadPolicyOk returns a tuple with the ResolvedTopicNoticeAutoReadPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetResolvedTopicNoticeAutoReadPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ResolvedTopicNoticeAutoReadPolicy) {
		return nil, false
	}
	return o.ResolvedTopicNoticeAutoReadPolicy, true
}

// HasResolvedTopicNoticeAutoReadPolicy returns a boolean if a field has been set.
func (o *UserSettings) HasResolvedTopicNoticeAutoReadPolicy() bool {
	if o != nil && !IsNil(o.ResolvedTopicNoticeAutoReadPolicy) {
		return true
	}

	return false
}

// SetResolvedTopicNoticeAutoReadPolicy gets a reference to the given string and assigns it to the ResolvedTopicNoticeAutoReadPolicy field.
func (o *UserSettings) SetResolvedTopicNoticeAutoReadPolicy(v string) {
	o.ResolvedTopicNoticeAutoReadPolicy = &v
}

// GetPresenceEnabled returns the PresenceEnabled field value if set, zero value otherwise.
func (o *UserSettings) GetPresenceEnabled() bool {
	if o == nil || IsNil(o.PresenceEnabled) {
		var ret bool
		return ret
	}
	return *o.PresenceEnabled
}

// GetPresenceEnabledOk returns a tuple with the PresenceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetPresenceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PresenceEnabled) {
		return nil, false
	}
	return o.PresenceEnabled, true
}

// HasPresenceEnabled returns a boolean if a field has been set.
func (o *UserSettings) HasPresenceEnabled() bool {
	if o != nil && !IsNil(o.PresenceEnabled) {
		return true
	}

	return false
}

// SetPresenceEnabled gets a reference to the given bool and assigns it to the PresenceEnabled field.
func (o *UserSettings) SetPresenceEnabled(v bool) {
	o.PresenceEnabled = &v
}

// GetAvailableNotificationSounds returns the AvailableNotificationSounds field value if set, zero value otherwise.
func (o *UserSettings) GetAvailableNotificationSounds() []string {
	if o == nil || IsNil(o.AvailableNotificationSounds) {
		var ret []string
		return ret
	}
	return o.AvailableNotificationSounds
}

// GetAvailableNotificationSoundsOk returns a tuple with the AvailableNotificationSounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAvailableNotificationSoundsOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableNotificationSounds) {
		return nil, false
	}
	return o.AvailableNotificationSounds, true
}

// HasAvailableNotificationSounds returns a boolean if a field has been set.
func (o *UserSettings) HasAvailableNotificationSounds() bool {
	if o != nil && !IsNil(o.AvailableNotificationSounds) {
		return true
	}

	return false
}

// SetAvailableNotificationSounds gets a reference to the given []string and assigns it to the AvailableNotificationSounds field.
func (o *UserSettings) SetAvailableNotificationSounds(v []string) {
	o.AvailableNotificationSounds = v
}

// GetEmojisetChoices returns the EmojisetChoices field value if set, zero value otherwise.
func (o *UserSettings) GetEmojisetChoices() []UserSettingsEmojisetChoice {
	if o == nil || IsNil(o.EmojisetChoices) {
		var ret []UserSettingsEmojisetChoice
		return ret
	}
	return o.EmojisetChoices
}

// GetEmojisetChoicesOk returns a tuple with the EmojisetChoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEmojisetChoicesOk() ([]UserSettingsEmojisetChoice, bool) {
	if o == nil || IsNil(o.EmojisetChoices) {
		return nil, false
	}
	return o.EmojisetChoices, true
}

// HasEmojisetChoices returns a boolean if a field has been set.
func (o *UserSettings) HasEmojisetChoices() bool {
	if o != nil && !IsNil(o.EmojisetChoices) {
		return true
	}

	return false
}

// SetEmojisetChoices gets a reference to the given []UserSettingsEmojisetChoice and assigns it to the EmojisetChoices field.
func (o *UserSettings) SetEmojisetChoices(v []UserSettingsEmojisetChoice) {
	o.EmojisetChoices = v
}

// GetSendPrivateTypingNotifications returns the SendPrivateTypingNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetSendPrivateTypingNotifications() bool {
	if o == nil || IsNil(o.SendPrivateTypingNotifications) {
		var ret bool
		return ret
	}
	return *o.SendPrivateTypingNotifications
}

// GetSendPrivateTypingNotificationsOk returns a tuple with the SendPrivateTypingNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetSendPrivateTypingNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendPrivateTypingNotifications) {
		return nil, false
	}
	return o.SendPrivateTypingNotifications, true
}

// HasSendPrivateTypingNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasSendPrivateTypingNotifications() bool {
	if o != nil && !IsNil(o.SendPrivateTypingNotifications) {
		return true
	}

	return false
}

// SetSendPrivateTypingNotifications gets a reference to the given bool and assigns it to the SendPrivateTypingNotifications field.
func (o *UserSettings) SetSendPrivateTypingNotifications(v bool) {
	o.SendPrivateTypingNotifications = &v
}

// GetSendStreamTypingNotifications returns the SendStreamTypingNotifications field value if set, zero value otherwise.
func (o *UserSettings) GetSendStreamTypingNotifications() bool {
	if o == nil || IsNil(o.SendStreamTypingNotifications) {
		var ret bool
		return ret
	}
	return *o.SendStreamTypingNotifications
}

// GetSendStreamTypingNotificationsOk returns a tuple with the SendStreamTypingNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetSendStreamTypingNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendStreamTypingNotifications) {
		return nil, false
	}
	return o.SendStreamTypingNotifications, true
}

// HasSendStreamTypingNotifications returns a boolean if a field has been set.
func (o *UserSettings) HasSendStreamTypingNotifications() bool {
	if o != nil && !IsNil(o.SendStreamTypingNotifications) {
		return true
	}

	return false
}

// SetSendStreamTypingNotifications gets a reference to the given bool and assigns it to the SendStreamTypingNotifications field.
func (o *UserSettings) SetSendStreamTypingNotifications(v bool) {
	o.SendStreamTypingNotifications = &v
}

// GetSendReadReceipts returns the SendReadReceipts field value if set, zero value otherwise.
func (o *UserSettings) GetSendReadReceipts() bool {
	if o == nil || IsNil(o.SendReadReceipts) {
		var ret bool
		return ret
	}
	return *o.SendReadReceipts
}

// GetSendReadReceiptsOk returns a tuple with the SendReadReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetSendReadReceiptsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendReadReceipts) {
		return nil, false
	}
	return o.SendReadReceipts, true
}

// HasSendReadReceipts returns a boolean if a field has been set.
func (o *UserSettings) HasSendReadReceipts() bool {
	if o != nil && !IsNil(o.SendReadReceipts) {
		return true
	}

	return false
}

// SetSendReadReceipts gets a reference to the given bool and assigns it to the SendReadReceipts field.
func (o *UserSettings) SetSendReadReceipts(v bool) {
	o.SendReadReceipts = &v
}

// GetAllowPrivateDataExport returns the AllowPrivateDataExport field value if set, zero value otherwise.
func (o *UserSettings) GetAllowPrivateDataExport() bool {
	if o == nil || IsNil(o.AllowPrivateDataExport) {
		var ret bool
		return ret
	}
	return *o.AllowPrivateDataExport
}

// GetAllowPrivateDataExportOk returns a tuple with the AllowPrivateDataExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAllowPrivateDataExportOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPrivateDataExport) {
		return nil, false
	}
	return o.AllowPrivateDataExport, true
}

// HasAllowPrivateDataExport returns a boolean if a field has been set.
func (o *UserSettings) HasAllowPrivateDataExport() bool {
	if o != nil && !IsNil(o.AllowPrivateDataExport) {
		return true
	}

	return false
}

// SetAllowPrivateDataExport gets a reference to the given bool and assigns it to the AllowPrivateDataExport field.
func (o *UserSettings) SetAllowPrivateDataExport(v bool) {
	o.AllowPrivateDataExport = &v
}

// GetEmailAddressVisibility returns the EmailAddressVisibility field value if set, zero value otherwise.
func (o *UserSettings) GetEmailAddressVisibility() int32 {
	if o == nil || IsNil(o.EmailAddressVisibility) {
		var ret int32
		return ret
	}
	return *o.EmailAddressVisibility
}

// GetEmailAddressVisibilityOk returns a tuple with the EmailAddressVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEmailAddressVisibilityOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailAddressVisibility) {
		return nil, false
	}
	return o.EmailAddressVisibility, true
}

// HasEmailAddressVisibility returns a boolean if a field has been set.
func (o *UserSettings) HasEmailAddressVisibility() bool {
	if o != nil && !IsNil(o.EmailAddressVisibility) {
		return true
	}

	return false
}

// SetEmailAddressVisibility gets a reference to the given int32 and assigns it to the EmailAddressVisibility field.
func (o *UserSettings) SetEmailAddressVisibility(v int32) {
	o.EmailAddressVisibility = &v
}

// GetWebNavigateToSentMessage returns the WebNavigateToSentMessage field value if set, zero value otherwise.
func (o *UserSettings) GetWebNavigateToSentMessage() bool {
	if o == nil || IsNil(o.WebNavigateToSentMessage) {
		var ret bool
		return ret
	}
	return *o.WebNavigateToSentMessage
}

// GetWebNavigateToSentMessageOk returns a tuple with the WebNavigateToSentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetWebNavigateToSentMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.WebNavigateToSentMessage) {
		return nil, false
	}
	return o.WebNavigateToSentMessage, true
}

// HasWebNavigateToSentMessage returns a boolean if a field has been set.
func (o *UserSettings) HasWebNavigateToSentMessage() bool {
	if o != nil && !IsNil(o.WebNavigateToSentMessage) {
		return true
	}

	return false
}

// SetWebNavigateToSentMessage gets a reference to the given bool and assigns it to the WebNavigateToSentMessage field.
func (o *UserSettings) SetWebNavigateToSentMessage(v bool) {
	o.WebNavigateToSentMessage = &v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TwentyFourHourTime.IsSet() {
		toSerialize["twenty_four_hour_time"] = o.TwentyFourHourTime.Get()
	}
	if !IsNil(o.WebMarkReadOnScrollPolicy) {
		toSerialize["web_mark_read_on_scroll_policy"] = o.WebMarkReadOnScrollPolicy
	}
	if !IsNil(o.WebChannelDefaultView) {
		toSerialize["web_channel_default_view"] = o.WebChannelDefaultView
	}
	if !IsNil(o.StarredMessageCounts) {
		toSerialize["starred_message_counts"] = o.StarredMessageCounts
	}
	if !IsNil(o.ReceivesTypingNotifications) {
		toSerialize["receives_typing_notifications"] = o.ReceivesTypingNotifications
	}
	if !IsNil(o.WebSuggestUpdateTimezone) {
		toSerialize["web_suggest_update_timezone"] = o.WebSuggestUpdateTimezone
	}
	if !IsNil(o.FluidLayoutWidth) {
		toSerialize["fluid_layout_width"] = o.FluidLayoutWidth
	}
	if !IsNil(o.HighContrastMode) {
		toSerialize["high_contrast_mode"] = o.HighContrastMode
	}
	if !IsNil(o.WebFontSizePx) {
		toSerialize["web_font_size_px"] = o.WebFontSizePx
	}
	if !IsNil(o.WebLineHeightPercent) {
		toSerialize["web_line_height_percent"] = o.WebLineHeightPercent
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["color_scheme"] = o.ColorScheme
	}
	if !IsNil(o.TranslateEmoticons) {
		toSerialize["translate_emoticons"] = o.TranslateEmoticons
	}
	if !IsNil(o.DisplayEmojiReactionUsers) {
		toSerialize["display_emoji_reaction_users"] = o.DisplayEmojiReactionUsers
	}
	if !IsNil(o.DefaultLanguage) {
		toSerialize["default_language"] = o.DefaultLanguage
	}
	if !IsNil(o.WebHomeView) {
		toSerialize["web_home_view"] = o.WebHomeView
	}
	if !IsNil(o.WebEscapeNavigatesToHomeView) {
		toSerialize["web_escape_navigates_to_home_view"] = o.WebEscapeNavigatesToHomeView
	}
	if !IsNil(o.LeftSideUserlist) {
		toSerialize["left_side_userlist"] = o.LeftSideUserlist
	}
	if !IsNil(o.Emojiset) {
		toSerialize["emojiset"] = o.Emojiset
	}
	if !IsNil(o.DemoteInactiveStreams) {
		toSerialize["demote_inactive_streams"] = o.DemoteInactiveStreams
	}
	if !IsNil(o.UserListStyle) {
		toSerialize["user_list_style"] = o.UserListStyle
	}
	if !IsNil(o.WebAnimateImagePreviews) {
		toSerialize["web_animate_image_previews"] = o.WebAnimateImagePreviews
	}
	if !IsNil(o.WebStreamUnreadsCountDisplayPolicy) {
		toSerialize["web_stream_unreads_count_display_policy"] = o.WebStreamUnreadsCountDisplayPolicy
	}
	if !IsNil(o.HideAiFeatures) {
		toSerialize["hide_ai_features"] = o.HideAiFeatures
	}
	if !IsNil(o.WebLeftSidebarShowChannelFolders) {
		toSerialize["web_left_sidebar_show_channel_folders"] = o.WebLeftSidebarShowChannelFolders
	}
	if !IsNil(o.WebLeftSidebarUnreadsCountSummary) {
		toSerialize["web_left_sidebar_unreads_count_summary"] = o.WebLeftSidebarUnreadsCountSummary
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.EnterSends) {
		toSerialize["enter_sends"] = o.EnterSends
	}
	if !IsNil(o.EnableDraftsSynchronization) {
		toSerialize["enable_drafts_synchronization"] = o.EnableDraftsSynchronization
	}
	if !IsNil(o.EnableStreamDesktopNotifications) {
		toSerialize["enable_stream_desktop_notifications"] = o.EnableStreamDesktopNotifications
	}
	if !IsNil(o.EnableStreamEmailNotifications) {
		toSerialize["enable_stream_email_notifications"] = o.EnableStreamEmailNotifications
	}
	if !IsNil(o.EnableStreamPushNotifications) {
		toSerialize["enable_stream_push_notifications"] = o.EnableStreamPushNotifications
	}
	if !IsNil(o.EnableStreamAudibleNotifications) {
		toSerialize["enable_stream_audible_notifications"] = o.EnableStreamAudibleNotifications
	}
	if !IsNil(o.NotificationSound) {
		toSerialize["notification_sound"] = o.NotificationSound
	}
	if !IsNil(o.EnableDesktopNotifications) {
		toSerialize["enable_desktop_notifications"] = o.EnableDesktopNotifications
	}
	if !IsNil(o.EnableSounds) {
		toSerialize["enable_sounds"] = o.EnableSounds
	}
	if !IsNil(o.EnableFollowedTopicDesktopNotifications) {
		toSerialize["enable_followed_topic_desktop_notifications"] = o.EnableFollowedTopicDesktopNotifications
	}
	if !IsNil(o.EnableFollowedTopicEmailNotifications) {
		toSerialize["enable_followed_topic_email_notifications"] = o.EnableFollowedTopicEmailNotifications
	}
	if !IsNil(o.EnableFollowedTopicPushNotifications) {
		toSerialize["enable_followed_topic_push_notifications"] = o.EnableFollowedTopicPushNotifications
	}
	if !IsNil(o.EnableFollowedTopicAudibleNotifications) {
		toSerialize["enable_followed_topic_audible_notifications"] = o.EnableFollowedTopicAudibleNotifications
	}
	if !IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		toSerialize["email_notifications_batching_period_seconds"] = o.EmailNotificationsBatchingPeriodSeconds
	}
	if !IsNil(o.EnableOfflineEmailNotifications) {
		toSerialize["enable_offline_email_notifications"] = o.EnableOfflineEmailNotifications
	}
	if !IsNil(o.EnableOfflinePushNotifications) {
		toSerialize["enable_offline_push_notifications"] = o.EnableOfflinePushNotifications
	}
	if !IsNil(o.EnableOnlinePushNotifications) {
		toSerialize["enable_online_push_notifications"] = o.EnableOnlinePushNotifications
	}
	if !IsNil(o.EnableDigestEmails) {
		toSerialize["enable_digest_emails"] = o.EnableDigestEmails
	}
	if !IsNil(o.EnableMarketingEmails) {
		toSerialize["enable_marketing_emails"] = o.EnableMarketingEmails
	}
	if !IsNil(o.EnableLoginEmails) {
		toSerialize["enable_login_emails"] = o.EnableLoginEmails
	}
	if !IsNil(o.MessageContentInEmailNotifications) {
		toSerialize["message_content_in_email_notifications"] = o.MessageContentInEmailNotifications
	}
	if !IsNil(o.PmContentInDesktopNotifications) {
		toSerialize["pm_content_in_desktop_notifications"] = o.PmContentInDesktopNotifications
	}
	if !IsNil(o.WildcardMentionsNotify) {
		toSerialize["wildcard_mentions_notify"] = o.WildcardMentionsNotify
	}
	if !IsNil(o.EnableFollowedTopicWildcardMentionsNotify) {
		toSerialize["enable_followed_topic_wildcard_mentions_notify"] = o.EnableFollowedTopicWildcardMentionsNotify
	}
	if !IsNil(o.DesktopIconCountDisplay) {
		toSerialize["desktop_icon_count_display"] = o.DesktopIconCountDisplay
	}
	if !IsNil(o.RealmNameInEmailNotificationsPolicy) {
		toSerialize["realm_name_in_email_notifications_policy"] = o.RealmNameInEmailNotificationsPolicy
	}
	if !IsNil(o.AutomaticallyFollowTopicsPolicy) {
		toSerialize["automatically_follow_topics_policy"] = o.AutomaticallyFollowTopicsPolicy
	}
	if !IsNil(o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy) {
		toSerialize["automatically_unmute_topics_in_muted_streams_policy"] = o.AutomaticallyUnmuteTopicsInMutedStreamsPolicy
	}
	if !IsNil(o.AutomaticallyFollowTopicsWhereMentioned) {
		toSerialize["automatically_follow_topics_where_mentioned"] = o.AutomaticallyFollowTopicsWhereMentioned
	}
	if !IsNil(o.ResolvedTopicNoticeAutoReadPolicy) {
		toSerialize["resolved_topic_notice_auto_read_policy"] = o.ResolvedTopicNoticeAutoReadPolicy
	}
	if !IsNil(o.PresenceEnabled) {
		toSerialize["presence_enabled"] = o.PresenceEnabled
	}
	if !IsNil(o.AvailableNotificationSounds) {
		toSerialize["available_notification_sounds"] = o.AvailableNotificationSounds
	}
	if !IsNil(o.EmojisetChoices) {
		toSerialize["emojiset_choices"] = o.EmojisetChoices
	}
	if !IsNil(o.SendPrivateTypingNotifications) {
		toSerialize["send_private_typing_notifications"] = o.SendPrivateTypingNotifications
	}
	if !IsNil(o.SendStreamTypingNotifications) {
		toSerialize["send_stream_typing_notifications"] = o.SendStreamTypingNotifications
	}
	if !IsNil(o.SendReadReceipts) {
		toSerialize["send_read_receipts"] = o.SendReadReceipts
	}
	if !IsNil(o.AllowPrivateDataExport) {
		toSerialize["allow_private_data_export"] = o.AllowPrivateDataExport
	}
	if !IsNil(o.EmailAddressVisibility) {
		toSerialize["email_address_visibility"] = o.EmailAddressVisibility
	}
	if !IsNil(o.WebNavigateToSentMessage) {
		toSerialize["web_navigate_to_sent_message"] = o.WebNavigateToSentMessage
	}
	return toSerialize, nil
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
