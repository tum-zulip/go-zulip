/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetServerSettings200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetServerSettings200Response{}

// GetServerSettings200Response struct for GetServerSettings200Response
type GetServerSettings200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](zulip.com/api/rest-error-handling#ignored-parameters documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// Deprecated
	AuthenticationMethods *AuthMethods `json:"authentication_methods,omitempty"`
	// A list of dictionaries describing the available external authentication methods (E.g. Google, GitHub, or SAML) enabled for this organization.  The list is sorted in the order in which these authentication methods should be displayed.  **Changes**: New in Zulip 2.1.0.
	ExternalAuthenticationMethods []ExternalAuthMethod `json:"external_authentication_methods,omitempty"`
	// An integer indicating what features are available on the server. The feature level increases monotonically; a value of N means the server supports all API features introduced before feature level N. This is designed to provide a simple way for client apps to decide whether the server supports a given feature or API change. See the [changelog](zulip.com/api/changelog for details on what each feature level means.  **Changes**: New in Zulip 3.0 (feature level 1). We recommend using an implied value of 0 for Zulip servers that do not send this field.
	ZulipFeatureLevel *int32 `json:"zulip_feature_level,omitempty"`
	// The server's version number. This is often a release version number, like `2.1.7`. But for a server running a [version from Git][git-release], it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.  [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
	ZulipVersion *string `json:"zulip_version,omitempty"`
	// The `git merge-base` between `zulip_version` and official branches in the public [Zulip server and web app repository](https://github.com/zulip/zulip), in the same format as `zulip_version`. This will equal `zulip_version` if the server is not running a fork of the Zulip server.  This will be `\"\"` if unavailable.  **Changes**: New in Zulip 5.0 (feature level 88).
	ZulipMergeBase *string `json:"zulip_merge_base,omitempty"`
	// Whether mobile/push notifications are configured.
	PushNotificationsEnabled *bool `json:"push_notifications_enabled,omitempty"`
	// Whether the Zulip client that has sent a request to this endpoint is deemed incompatible with the server.
	IsIncompatible *bool `json:"is_incompatible,omitempty"`
	// Setting for allowing users authenticate with an email-password combination.
	EmailAuthEnabled *bool `json:"email_auth_enabled,omitempty"`
	// Whether all valid usernames for authentication to this organization will be email addresses. This is important for clients to know whether to do client side validation of email address format in a login prompt.  This value will be false if the server has [LDAP authentication][ldap-auth] enabled with a username and password combination.  [ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory
	RequireEmailFormatUsernames *bool `json:"require_email_format_usernames,omitempty"`
	// The organization's canonical URL. Alias of `realm_url`.  **Changes**: Deprecated in Zulip 9.0 (feature level 257). The term \"URI\" is deprecated in [web standards](https://url.spec.whatwg.org/#goals).
	// Deprecated
	RealmUri *string `json:"realm_uri,omitempty"`
	// The organization's canonical URL.  **Changes**: New in Zulip 9.0 (feature level 257), replacing the deprecated `realm_uri`.
	RealmUrl *string `json:"realm_url,omitempty"`
	// The organization's name (for display purposes).
	RealmName *string `json:"realm_name,omitempty"`
	// The URL for the organization's logo formatted as a square image, used for identifying the organization in small locations in the mobile and desktop apps.
	RealmIcon *string `json:"realm_icon,omitempty"`
	// HTML description of the organization, as configured by the [organization profile](zulip.com/help/create-your-organization-profile.
	RealmDescription *string `json:"realm_description,omitempty"`
	// Whether the organization has enabled the creation of [web-public channels](zulip.com/help/public-access-option and at least one web-public channel on the server currently exists. Clients that support viewing content in web-public channels without an account can use this to determine whether to offer that feature on the login page for an organization.  **Changes**: New in Zulip 5.0 (feature level 116).
	RealmWebPublicAccessEnabled *bool `json:"realm_web_public_access_enabled,omitempty"`
}

type _GetServerSettings200Response GetServerSettings200Response

// NewGetServerSettings200Response instantiates a new GetServerSettings200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetServerSettings200Response(result string, msg string) *GetServerSettings200Response {
	this := GetServerSettings200Response{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewGetServerSettings200ResponseWithDefaults instantiates a new GetServerSettings200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetServerSettings200ResponseWithDefaults() *GetServerSettings200Response {
	this := GetServerSettings200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *GetServerSettings200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *GetServerSettings200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *GetServerSettings200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *GetServerSettings200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *GetServerSettings200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetAuthenticationMethods returns the AuthenticationMethods field value if set, zero value otherwise.
// Deprecated
func (o *GetServerSettings200Response) GetAuthenticationMethods() AuthMethods {
	if o == nil || IsNil(o.AuthenticationMethods) {
		var ret AuthMethods
		return ret
	}
	return *o.AuthenticationMethods
}

// GetAuthenticationMethodsOk returns a tuple with the AuthenticationMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetServerSettings200Response) GetAuthenticationMethodsOk() (*AuthMethods, bool) {
	if o == nil || IsNil(o.AuthenticationMethods) {
		return nil, false
	}
	return o.AuthenticationMethods, true
}

// HasAuthenticationMethods returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasAuthenticationMethods() bool {
	if o != nil && !IsNil(o.AuthenticationMethods) {
		return true
	}

	return false
}

// SetAuthenticationMethods gets a reference to the given AuthMethods and assigns it to the AuthenticationMethods field.
// Deprecated
func (o *GetServerSettings200Response) SetAuthenticationMethods(v AuthMethods) {
	o.AuthenticationMethods = &v
}

// GetExternalAuthenticationMethods returns the ExternalAuthenticationMethods field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetExternalAuthenticationMethods() []ExternalAuthMethod {
	if o == nil || IsNil(o.ExternalAuthenticationMethods) {
		var ret []ExternalAuthMethod
		return ret
	}
	return o.ExternalAuthenticationMethods
}

// GetExternalAuthenticationMethodsOk returns a tuple with the ExternalAuthenticationMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetExternalAuthenticationMethodsOk() ([]ExternalAuthMethod, bool) {
	if o == nil || IsNil(o.ExternalAuthenticationMethods) {
		return nil, false
	}
	return o.ExternalAuthenticationMethods, true
}

// HasExternalAuthenticationMethods returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasExternalAuthenticationMethods() bool {
	if o != nil && !IsNil(o.ExternalAuthenticationMethods) {
		return true
	}

	return false
}

// SetExternalAuthenticationMethods gets a reference to the given []ExternalAuthMethod and assigns it to the ExternalAuthenticationMethods field.
func (o *GetServerSettings200Response) SetExternalAuthenticationMethods(v []ExternalAuthMethod) {
	o.ExternalAuthenticationMethods = v
}

// GetZulipFeatureLevel returns the ZulipFeatureLevel field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetZulipFeatureLevel() int32 {
	if o == nil || IsNil(o.ZulipFeatureLevel) {
		var ret int32
		return ret
	}
	return *o.ZulipFeatureLevel
}

// GetZulipFeatureLevelOk returns a tuple with the ZulipFeatureLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetZulipFeatureLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.ZulipFeatureLevel) {
		return nil, false
	}
	return o.ZulipFeatureLevel, true
}

// HasZulipFeatureLevel returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasZulipFeatureLevel() bool {
	if o != nil && !IsNil(o.ZulipFeatureLevel) {
		return true
	}

	return false
}

// SetZulipFeatureLevel gets a reference to the given int32 and assigns it to the ZulipFeatureLevel field.
func (o *GetServerSettings200Response) SetZulipFeatureLevel(v int32) {
	o.ZulipFeatureLevel = &v
}

// GetZulipVersion returns the ZulipVersion field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetZulipVersion() string {
	if o == nil || IsNil(o.ZulipVersion) {
		var ret string
		return ret
	}
	return *o.ZulipVersion
}

// GetZulipVersionOk returns a tuple with the ZulipVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetZulipVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ZulipVersion) {
		return nil, false
	}
	return o.ZulipVersion, true
}

// HasZulipVersion returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasZulipVersion() bool {
	if o != nil && !IsNil(o.ZulipVersion) {
		return true
	}

	return false
}

// SetZulipVersion gets a reference to the given string and assigns it to the ZulipVersion field.
func (o *GetServerSettings200Response) SetZulipVersion(v string) {
	o.ZulipVersion = &v
}

// GetZulipMergeBase returns the ZulipMergeBase field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetZulipMergeBase() string {
	if o == nil || IsNil(o.ZulipMergeBase) {
		var ret string
		return ret
	}
	return *o.ZulipMergeBase
}

// GetZulipMergeBaseOk returns a tuple with the ZulipMergeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetZulipMergeBaseOk() (*string, bool) {
	if o == nil || IsNil(o.ZulipMergeBase) {
		return nil, false
	}
	return o.ZulipMergeBase, true
}

// HasZulipMergeBase returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasZulipMergeBase() bool {
	if o != nil && !IsNil(o.ZulipMergeBase) {
		return true
	}

	return false
}

// SetZulipMergeBase gets a reference to the given string and assigns it to the ZulipMergeBase field.
func (o *GetServerSettings200Response) SetZulipMergeBase(v string) {
	o.ZulipMergeBase = &v
}

// GetPushNotificationsEnabled returns the PushNotificationsEnabled field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetPushNotificationsEnabled() bool {
	if o == nil || IsNil(o.PushNotificationsEnabled) {
		var ret bool
		return ret
	}
	return *o.PushNotificationsEnabled
}

// GetPushNotificationsEnabledOk returns a tuple with the PushNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetPushNotificationsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PushNotificationsEnabled) {
		return nil, false
	}
	return o.PushNotificationsEnabled, true
}

// HasPushNotificationsEnabled returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasPushNotificationsEnabled() bool {
	if o != nil && !IsNil(o.PushNotificationsEnabled) {
		return true
	}

	return false
}

// SetPushNotificationsEnabled gets a reference to the given bool and assigns it to the PushNotificationsEnabled field.
func (o *GetServerSettings200Response) SetPushNotificationsEnabled(v bool) {
	o.PushNotificationsEnabled = &v
}

// GetIsIncompatible returns the IsIncompatible field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetIsIncompatible() bool {
	if o == nil || IsNil(o.IsIncompatible) {
		var ret bool
		return ret
	}
	return *o.IsIncompatible
}

// GetIsIncompatibleOk returns a tuple with the IsIncompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetIsIncompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIncompatible) {
		return nil, false
	}
	return o.IsIncompatible, true
}

// HasIsIncompatible returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasIsIncompatible() bool {
	if o != nil && !IsNil(o.IsIncompatible) {
		return true
	}

	return false
}

// SetIsIncompatible gets a reference to the given bool and assigns it to the IsIncompatible field.
func (o *GetServerSettings200Response) SetIsIncompatible(v bool) {
	o.IsIncompatible = &v
}

// GetEmailAuthEnabled returns the EmailAuthEnabled field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetEmailAuthEnabled() bool {
	if o == nil || IsNil(o.EmailAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.EmailAuthEnabled
}

// GetEmailAuthEnabledOk returns a tuple with the EmailAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetEmailAuthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailAuthEnabled) {
		return nil, false
	}
	return o.EmailAuthEnabled, true
}

// HasEmailAuthEnabled returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasEmailAuthEnabled() bool {
	if o != nil && !IsNil(o.EmailAuthEnabled) {
		return true
	}

	return false
}

// SetEmailAuthEnabled gets a reference to the given bool and assigns it to the EmailAuthEnabled field.
func (o *GetServerSettings200Response) SetEmailAuthEnabled(v bool) {
	o.EmailAuthEnabled = &v
}

// GetRequireEmailFormatUsernames returns the RequireEmailFormatUsernames field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRequireEmailFormatUsernames() bool {
	if o == nil || IsNil(o.RequireEmailFormatUsernames) {
		var ret bool
		return ret
	}
	return *o.RequireEmailFormatUsernames
}

// GetRequireEmailFormatUsernamesOk returns a tuple with the RequireEmailFormatUsernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRequireEmailFormatUsernamesOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireEmailFormatUsernames) {
		return nil, false
	}
	return o.RequireEmailFormatUsernames, true
}

// HasRequireEmailFormatUsernames returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRequireEmailFormatUsernames() bool {
	if o != nil && !IsNil(o.RequireEmailFormatUsernames) {
		return true
	}

	return false
}

// SetRequireEmailFormatUsernames gets a reference to the given bool and assigns it to the RequireEmailFormatUsernames field.
func (o *GetServerSettings200Response) SetRequireEmailFormatUsernames(v bool) {
	o.RequireEmailFormatUsernames = &v
}

// GetRealmUri returns the RealmUri field value if set, zero value otherwise.
// Deprecated
func (o *GetServerSettings200Response) GetRealmUri() string {
	if o == nil || IsNil(o.RealmUri) {
		var ret string
		return ret
	}
	return *o.RealmUri
}

// GetRealmUriOk returns a tuple with the RealmUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetServerSettings200Response) GetRealmUriOk() (*string, bool) {
	if o == nil || IsNil(o.RealmUri) {
		return nil, false
	}
	return o.RealmUri, true
}

// HasRealmUri returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmUri() bool {
	if o != nil && !IsNil(o.RealmUri) {
		return true
	}

	return false
}

// SetRealmUri gets a reference to the given string and assigns it to the RealmUri field.
// Deprecated
func (o *GetServerSettings200Response) SetRealmUri(v string) {
	o.RealmUri = &v
}

// GetRealmUrl returns the RealmUrl field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRealmUrl() string {
	if o == nil || IsNil(o.RealmUrl) {
		var ret string
		return ret
	}
	return *o.RealmUrl
}

// GetRealmUrlOk returns a tuple with the RealmUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRealmUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealmUrl) {
		return nil, false
	}
	return o.RealmUrl, true
}

// HasRealmUrl returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmUrl() bool {
	if o != nil && !IsNil(o.RealmUrl) {
		return true
	}

	return false
}

// SetRealmUrl gets a reference to the given string and assigns it to the RealmUrl field.
func (o *GetServerSettings200Response) SetRealmUrl(v string) {
	o.RealmUrl = &v
}

// GetRealmName returns the RealmName field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRealmName() string {
	if o == nil || IsNil(o.RealmName) {
		var ret string
		return ret
	}
	return *o.RealmName
}

// GetRealmNameOk returns a tuple with the RealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRealmNameOk() (*string, bool) {
	if o == nil || IsNil(o.RealmName) {
		return nil, false
	}
	return o.RealmName, true
}

// HasRealmName returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmName() bool {
	if o != nil && !IsNil(o.RealmName) {
		return true
	}

	return false
}

// SetRealmName gets a reference to the given string and assigns it to the RealmName field.
func (o *GetServerSettings200Response) SetRealmName(v string) {
	o.RealmName = &v
}

// GetRealmIcon returns the RealmIcon field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRealmIcon() string {
	if o == nil || IsNil(o.RealmIcon) {
		var ret string
		return ret
	}
	return *o.RealmIcon
}

// GetRealmIconOk returns a tuple with the RealmIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRealmIconOk() (*string, bool) {
	if o == nil || IsNil(o.RealmIcon) {
		return nil, false
	}
	return o.RealmIcon, true
}

// HasRealmIcon returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmIcon() bool {
	if o != nil && !IsNil(o.RealmIcon) {
		return true
	}

	return false
}

// SetRealmIcon gets a reference to the given string and assigns it to the RealmIcon field.
func (o *GetServerSettings200Response) SetRealmIcon(v string) {
	o.RealmIcon = &v
}

// GetRealmDescription returns the RealmDescription field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRealmDescription() string {
	if o == nil || IsNil(o.RealmDescription) {
		var ret string
		return ret
	}
	return *o.RealmDescription
}

// GetRealmDescriptionOk returns a tuple with the RealmDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRealmDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RealmDescription) {
		return nil, false
	}
	return o.RealmDescription, true
}

// HasRealmDescription returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmDescription() bool {
	if o != nil && !IsNil(o.RealmDescription) {
		return true
	}

	return false
}

// SetRealmDescription gets a reference to the given string and assigns it to the RealmDescription field.
func (o *GetServerSettings200Response) SetRealmDescription(v string) {
	o.RealmDescription = &v
}

// GetRealmWebPublicAccessEnabled returns the RealmWebPublicAccessEnabled field value if set, zero value otherwise.
func (o *GetServerSettings200Response) GetRealmWebPublicAccessEnabled() bool {
	if o == nil || IsNil(o.RealmWebPublicAccessEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmWebPublicAccessEnabled
}

// GetRealmWebPublicAccessEnabledOk returns a tuple with the RealmWebPublicAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerSettings200Response) GetRealmWebPublicAccessEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmWebPublicAccessEnabled) {
		return nil, false
	}
	return o.RealmWebPublicAccessEnabled, true
}

// HasRealmWebPublicAccessEnabled returns a boolean if a field has been set.
func (o *GetServerSettings200Response) HasRealmWebPublicAccessEnabled() bool {
	if o != nil && !IsNil(o.RealmWebPublicAccessEnabled) {
		return true
	}

	return false
}

// SetRealmWebPublicAccessEnabled gets a reference to the given bool and assigns it to the RealmWebPublicAccessEnabled field.
func (o *GetServerSettings200Response) SetRealmWebPublicAccessEnabled(v bool) {
	o.RealmWebPublicAccessEnabled = &v
}

func (o GetServerSettings200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetServerSettings200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	if !IsNil(o.AuthenticationMethods) {
		toSerialize["authentication_methods"] = o.AuthenticationMethods
	}
	if !IsNil(o.ExternalAuthenticationMethods) {
		toSerialize["external_authentication_methods"] = o.ExternalAuthenticationMethods
	}
	if !IsNil(o.ZulipFeatureLevel) {
		toSerialize["zulip_feature_level"] = o.ZulipFeatureLevel
	}
	if !IsNil(o.ZulipVersion) {
		toSerialize["zulip_version"] = o.ZulipVersion
	}
	if !IsNil(o.ZulipMergeBase) {
		toSerialize["zulip_merge_base"] = o.ZulipMergeBase
	}
	if !IsNil(o.PushNotificationsEnabled) {
		toSerialize["push_notifications_enabled"] = o.PushNotificationsEnabled
	}
	if !IsNil(o.IsIncompatible) {
		toSerialize["is_incompatible"] = o.IsIncompatible
	}
	if !IsNil(o.EmailAuthEnabled) {
		toSerialize["email_auth_enabled"] = o.EmailAuthEnabled
	}
	if !IsNil(o.RequireEmailFormatUsernames) {
		toSerialize["require_email_format_usernames"] = o.RequireEmailFormatUsernames
	}
	if !IsNil(o.RealmUri) {
		toSerialize["realm_uri"] = o.RealmUri
	}
	if !IsNil(o.RealmUrl) {
		toSerialize["realm_url"] = o.RealmUrl
	}
	if !IsNil(o.RealmName) {
		toSerialize["realm_name"] = o.RealmName
	}
	if !IsNil(o.RealmIcon) {
		toSerialize["realm_icon"] = o.RealmIcon
	}
	if !IsNil(o.RealmDescription) {
		toSerialize["realm_description"] = o.RealmDescription
	}
	if !IsNil(o.RealmWebPublicAccessEnabled) {
		toSerialize["realm_web_public_access_enabled"] = o.RealmWebPublicAccessEnabled
	}
	return toSerialize, nil
}

func (o *GetServerSettings200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetServerSettings200Response := _GetServerSettings200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetServerSettings200Response)

	if err != nil {
		return err
	}

	*o = GetServerSettings200Response(varGetServerSettings200Response)

	return err
}

type NullableGetServerSettings200Response struct {
	value *GetServerSettings200Response
	isSet bool
}

func (v NullableGetServerSettings200Response) Get() *GetServerSettings200Response {
	return v.value
}

func (v *NullableGetServerSettings200Response) Set(val *GetServerSettings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerSettings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerSettings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerSettings200Response(val *GetServerSettings200Response) *NullableGetServerSettings200Response {
	return &NullableGetServerSettings200Response{value: val, isSet: true}
}

func (v NullableGetServerSettings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerSettings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
