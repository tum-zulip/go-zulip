/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmEmojiUpdateEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmEmojiUpdateEvent{}

// RealmEmojiUpdateEvent Event sent to all users in a Zulip organization when a [custom emoji](zulip.com/help/custom-emoji has been updated, typically when a new emoji has been added or an old one has been deactivated. The event contains all custom emoji configured for the organization, not just the updated custom emoji.
type RealmEmojiUpdateEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// An object in which each key describes a realm emoji.
	RealmEmoji *map[string]RealmEmoji `json:"realm_emoji,omitempty"`
}

// NewSubscriptionAddEvent3 instantiates a new RealmEmojiUpdateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionAddEvent3() *RealmEmojiUpdateEvent {
	this := RealmEmojiUpdateEvent{}
	return &this
}

// NewSubscriptionAddEvent3WithDefaults instantiates a new RealmEmojiUpdateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionAddEvent3WithDefaults() *RealmEmojiUpdateEvent {
	this := RealmEmojiUpdateEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmEmojiUpdateEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmojiUpdateEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmEmojiUpdateEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmEmojiUpdateEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmEmojiUpdateEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmojiUpdateEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmEmojiUpdateEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmEmojiUpdateEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RealmEmojiUpdateEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmojiUpdateEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RealmEmojiUpdateEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RealmEmojiUpdateEvent) SetOp(v string) {
	o.Op = &v
}

// GetRealmEmoji returns the RealmEmoji field value if set, zero value otherwise.
func (o *RealmEmojiUpdateEvent) GetRealmEmoji() map[string]RealmEmoji {
	if o == nil || IsNil(o.RealmEmoji) {
		var ret map[string]RealmEmoji
		return ret
	}
	return *o.RealmEmoji
}

// GetRealmEmojiOk returns a tuple with the RealmEmoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmojiUpdateEvent) GetRealmEmojiOk() (*map[string]RealmEmoji, bool) {
	if o == nil || IsNil(o.RealmEmoji) {
		return nil, false
	}
	return o.RealmEmoji, true
}

// HasRealmEmoji returns a boolean if a field has been set.
func (o *RealmEmojiUpdateEvent) HasRealmEmoji() bool {
	if o != nil && !IsNil(o.RealmEmoji) {
		return true
	}

	return false
}

// SetRealmEmoji gets a reference to the given map[string]RealmEmoji and assigns it to the RealmEmoji field.
func (o *RealmEmojiUpdateEvent) SetRealmEmoji(v map[string]RealmEmoji) {
	o.RealmEmoji = &v
}

func (o RealmEmojiUpdateEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmEmojiUpdateEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.RealmEmoji) {
		toSerialize["realm_emoji"] = o.RealmEmoji
	}
	return toSerialize, nil
}

type NullableSubscriptionAddEvent3 struct {
	value *RealmEmojiUpdateEvent
	isSet bool
}

func (v NullableSubscriptionAddEvent3) Get() *RealmEmojiUpdateEvent {
	return v.value
}

func (v *NullableSubscriptionAddEvent3) Set(val *RealmEmojiUpdateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionAddEvent3) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionAddEvent3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionAddEvent3(val *RealmEmojiUpdateEvent) *NullableSubscriptionAddEvent3 {
	return &NullableSubscriptionAddEvent3{value: val, isSet: true}
}

func (v NullableSubscriptionAddEvent3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionAddEvent3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
