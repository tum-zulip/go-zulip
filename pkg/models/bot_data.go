/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// BotData - Object with extra configuration details for the bot. The fields in the object depend on the type of bot.
type BotData struct {
	OutgoingWebhookBotData *OutgoingWebhookBotData
	EmbeddedBotData        *EmbeddedBotData
}

// OutgoingWebhookBotDataAsBotData is a convenience function that returns OutgoingWebhookBotData wrapped in BotData
func OutgoingWebhookBotDataAsBotData(v *OutgoingWebhookBotData) BotData {
	return BotData{
		OutgoingWebhookBotData: v,
	}
}

// EmbeddedBotDataAsBotData is a convenience function that returns EmbeddedBotData wrapped in BotData
func EmbeddedBotDataAsBotData(v *EmbeddedBotData) BotData {
	return BotData{
		EmbeddedBotData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BotData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OutgoingWebhookBotData
	err = newStrictDecoder(data).Decode(&dst.OutgoingWebhookBotData)
	if err == nil {
		jsonOutgoingWebhookBotData, _ := json.Marshal(dst.OutgoingWebhookBotData)
		if string(jsonOutgoingWebhookBotData) == "{}" { // empty struct
			dst.OutgoingWebhookBotData = nil
		} else {
			if err = validator.Validate(dst.OutgoingWebhookBotData); err != nil {
				dst.OutgoingWebhookBotData = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutgoingWebhookBotData = nil
	}

	// try to unmarshal data into EmbeddedBotData
	err = newStrictDecoder(data).Decode(&dst.EmbeddedBotData)
	if err == nil {
		jsonEmbeddedBotData, _ := json.Marshal(dst.EmbeddedBotData)
		if string(jsonEmbeddedBotData) == "{}" { // empty struct
			dst.EmbeddedBotData = nil
		} else {
			if err = validator.Validate(dst.EmbeddedBotData); err != nil {
				dst.EmbeddedBotData = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbeddedBotData = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OutgoingWebhookBotData = nil
		dst.EmbeddedBotData = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BotData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BotData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BotData) MarshalJSON() ([]byte, error) {
	if src.OutgoingWebhookBotData != nil {
		return json.Marshal(&src.OutgoingWebhookBotData)
	}

	if src.EmbeddedBotData != nil {
		return json.Marshal(&src.EmbeddedBotData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BotData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OutgoingWebhookBotData != nil {
		return obj.OutgoingWebhookBotData
	}

	if obj.EmbeddedBotData != nil {
		return obj.EmbeddedBotData
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj BotData) GetActualInstanceValue() interface{} {
	if obj.OutgoingWebhookBotData != nil {
		return *obj.OutgoingWebhookBotData
	}

	if obj.EmbeddedBotData != nil {
		return *obj.EmbeddedBotData
	}

	// all schemas are nil
	return nil
}

type NullableBotData struct {
	value *BotData
	isSet bool
}

func (v NullableBotData) Get() *BotData {
	return v.value
}

func (v *NullableBotData) Set(val *BotData) {
	v.value = val
	v.isSet = true
}

func (v NullableBotData) IsSet() bool {
	return v.isSet
}

func (v *NullableBotData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBotData(val *BotData) *NullableBotData {
	return &NullableBotData{value: val, isSet: true}
}

func (v NullableBotData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBotData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
