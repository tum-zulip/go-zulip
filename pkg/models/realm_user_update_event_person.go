/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// RealmUserUpdateEventPerson - Object containing the changed details of the user. It has multiple forms depending on the value changed.  **Changes**: Removed `is_billing_admin` field in Zulip 10.0 (feature level 363), as it was replaced by the `can_manage_billing_group` realm setting.
type RealmUserUpdateEventPerson struct {
	RealmUserUpdateEventPersonOneOf  *RealmUserUpdateEventPersonOneOf
	RealmUserUpdateEventPersonOneOf1 *RealmUserUpdateEventPersonOneOf1
	RealmUserUpdateEventPersonOneOf2 *RealmUserUpdateEventPersonOneOf2
	RealmUserUpdateEventPersonOneOf3 *RealmUserUpdateEventPersonOneOf3
	RealmUserUpdateEventPersonOneOf4 *RealmUserUpdateEventPersonOneOf4
	RealmUserUpdateEventPersonOneOf5 *RealmUserUpdateEventPersonOneOf5
	RealmUserUpdateEventPersonOneOf6 *RealmUserUpdateEventPersonOneOf6
	RealmUserUpdateEventPersonOneOf7 *RealmUserUpdateEventPersonOneOf7
	RealmUserUpdateEventPersonOneOf8 *RealmUserUpdateEventPersonOneOf8
}

// RealmUserUpdateEventPersonOneOfAsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOfAsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf: v,
	}
}

// RealmUserUpdateEventPersonOneOf1AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf1 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf1AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf1) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf1: v,
	}
}

// RealmUserUpdateEventPersonOneOf2AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf2 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf2AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf2) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf2: v,
	}
}

// RealmUserUpdateEventPersonOneOf3AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf3 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf3AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf3) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf3: v,
	}
}

// RealmUserUpdateEventPersonOneOf4AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf4 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf4AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf4) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf4: v,
	}
}

// RealmUserUpdateEventPersonOneOf5AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf5 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf5AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf5) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf5: v,
	}
}

// RealmUserUpdateEventPersonOneOf6AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf6 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf6AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf6) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf6: v,
	}
}

// RealmUserUpdateEventPersonOneOf7AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf7 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf7AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf7) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf7: v,
	}
}

// RealmUserUpdateEventPersonOneOf8AsRealmUserUpdateEventPerson is a convenience function that returns RealmUserUpdateEventPersonOneOf8 wrapped in RealmUserUpdateEventPerson
func RealmUserUpdateEventPersonOneOf8AsRealmUserUpdateEventPerson(v *RealmUserUpdateEventPersonOneOf8) RealmUserUpdateEventPerson {
	return RealmUserUpdateEventPerson{
		RealmUserUpdateEventPersonOneOf8: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RealmUserUpdateEventPerson) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RealmUserUpdateEventPersonOneOf
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf)
		if string(jsonRealmUserUpdateEventPersonOneOf) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf); err != nil {
				dst.RealmUserUpdateEventPersonOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf1
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf1)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf1, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf1)
		if string(jsonRealmUserUpdateEventPersonOneOf1) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf1 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf1); err != nil {
				dst.RealmUserUpdateEventPersonOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf1 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf2
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf2)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf2, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf2)
		if string(jsonRealmUserUpdateEventPersonOneOf2) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf2 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf2); err != nil {
				dst.RealmUserUpdateEventPersonOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf2 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf3
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf3)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf3, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf3)
		if string(jsonRealmUserUpdateEventPersonOneOf3) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf3 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf3); err != nil {
				dst.RealmUserUpdateEventPersonOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf3 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf4
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf4)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf4, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf4)
		if string(jsonRealmUserUpdateEventPersonOneOf4) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf4 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf4); err != nil {
				dst.RealmUserUpdateEventPersonOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf4 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf5
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf5)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf5, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf5)
		if string(jsonRealmUserUpdateEventPersonOneOf5) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf5 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf5); err != nil {
				dst.RealmUserUpdateEventPersonOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf5 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf6
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf6)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf6, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf6)
		if string(jsonRealmUserUpdateEventPersonOneOf6) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf6 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf6); err != nil {
				dst.RealmUserUpdateEventPersonOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf6 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf7
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf7)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf7, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf7)
		if string(jsonRealmUserUpdateEventPersonOneOf7) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf7 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf7); err != nil {
				dst.RealmUserUpdateEventPersonOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf7 = nil
	}

	// try to unmarshal data into RealmUserUpdateEventPersonOneOf8
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEventPersonOneOf8)
	if err == nil {
		jsonRealmUserUpdateEventPersonOneOf8, _ := json.Marshal(dst.RealmUserUpdateEventPersonOneOf8)
		if string(jsonRealmUserUpdateEventPersonOneOf8) == "{}" { // empty struct
			dst.RealmUserUpdateEventPersonOneOf8 = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEventPersonOneOf8); err != nil {
				dst.RealmUserUpdateEventPersonOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEventPersonOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RealmUserUpdateEventPersonOneOf = nil
		dst.RealmUserUpdateEventPersonOneOf1 = nil
		dst.RealmUserUpdateEventPersonOneOf2 = nil
		dst.RealmUserUpdateEventPersonOneOf3 = nil
		dst.RealmUserUpdateEventPersonOneOf4 = nil
		dst.RealmUserUpdateEventPersonOneOf5 = nil
		dst.RealmUserUpdateEventPersonOneOf6 = nil
		dst.RealmUserUpdateEventPersonOneOf7 = nil
		dst.RealmUserUpdateEventPersonOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RealmUserUpdateEventPerson)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RealmUserUpdateEventPerson)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RealmUserUpdateEventPerson) MarshalJSON() ([]byte, error) {
	if src.RealmUserUpdateEventPersonOneOf != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf)
	}

	if src.RealmUserUpdateEventPersonOneOf1 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf1)
	}

	if src.RealmUserUpdateEventPersonOneOf2 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf2)
	}

	if src.RealmUserUpdateEventPersonOneOf3 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf3)
	}

	if src.RealmUserUpdateEventPersonOneOf4 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf4)
	}

	if src.RealmUserUpdateEventPersonOneOf5 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf5)
	}

	if src.RealmUserUpdateEventPersonOneOf6 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf6)
	}

	if src.RealmUserUpdateEventPersonOneOf7 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf7)
	}

	if src.RealmUserUpdateEventPersonOneOf8 != nil {
		return json.Marshal(&src.RealmUserUpdateEventPersonOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RealmUserUpdateEventPerson) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RealmUserUpdateEventPersonOneOf != nil {
		return obj.RealmUserUpdateEventPersonOneOf
	}

	if obj.RealmUserUpdateEventPersonOneOf1 != nil {
		return obj.RealmUserUpdateEventPersonOneOf1
	}

	if obj.RealmUserUpdateEventPersonOneOf2 != nil {
		return obj.RealmUserUpdateEventPersonOneOf2
	}

	if obj.RealmUserUpdateEventPersonOneOf3 != nil {
		return obj.RealmUserUpdateEventPersonOneOf3
	}

	if obj.RealmUserUpdateEventPersonOneOf4 != nil {
		return obj.RealmUserUpdateEventPersonOneOf4
	}

	if obj.RealmUserUpdateEventPersonOneOf5 != nil {
		return obj.RealmUserUpdateEventPersonOneOf5
	}

	if obj.RealmUserUpdateEventPersonOneOf6 != nil {
		return obj.RealmUserUpdateEventPersonOneOf6
	}

	if obj.RealmUserUpdateEventPersonOneOf7 != nil {
		return obj.RealmUserUpdateEventPersonOneOf7
	}

	if obj.RealmUserUpdateEventPersonOneOf8 != nil {
		return obj.RealmUserUpdateEventPersonOneOf8
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RealmUserUpdateEventPerson) GetActualInstanceValue() interface{} {
	if obj.RealmUserUpdateEventPersonOneOf != nil {
		return *obj.RealmUserUpdateEventPersonOneOf
	}

	if obj.RealmUserUpdateEventPersonOneOf1 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf1
	}

	if obj.RealmUserUpdateEventPersonOneOf2 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf2
	}

	if obj.RealmUserUpdateEventPersonOneOf3 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf3
	}

	if obj.RealmUserUpdateEventPersonOneOf4 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf4
	}

	if obj.RealmUserUpdateEventPersonOneOf5 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf5
	}

	if obj.RealmUserUpdateEventPersonOneOf6 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf6
	}

	if obj.RealmUserUpdateEventPersonOneOf7 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf7
	}

	if obj.RealmUserUpdateEventPersonOneOf8 != nil {
		return *obj.RealmUserUpdateEventPersonOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableRealmUserUpdateEventPerson struct {
	value *RealmUserUpdateEventPerson
	isSet bool
}

func (v NullableRealmUserUpdateEventPerson) Get() *RealmUserUpdateEventPerson {
	return v.value
}

func (v *NullableRealmUserUpdateEventPerson) Set(val *RealmUserUpdateEventPerson) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEventPerson) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEventPerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEventPerson(val *RealmUserUpdateEventPerson) *NullableRealmUserUpdateEventPerson {
	return &NullableRealmUserUpdateEventPerson{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEventPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEventPerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
