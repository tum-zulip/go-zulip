/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the PresenceEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresenceEvent{}

// PresenceEvent Event sent to all users in an organization when a user comes back online after being offline for a while.  In addition to handling these events, a client that wants to maintain presence data must poll the [main presence endpoint](https://zulip.com/api/get-presence). Most updates to presence data, refreshing the timestamps of users who are already online, do not appear in the event queue. This design is an optimization by allowing those updates to be batched up, because there is no urgency in the information that an already-online user is still online.  These events are provided because when a user transitions from offline to online, that is information the client may want to show promptly in the UI to avoid showing a confusing state (for example, if the newly-online user sends a message or otherwise demonstrates they're online).  If the client supports the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities), these events will include the `presences` field, which provides the modified user's presence data in the modern format. Clients are strongly encouraged to implement this client capability, as legacy format support will be removed in a future release.  If the `CAN_ACCESS_ALL_USERS_GROUP_LIMITS_PRESENCE` server-level setting is set to `true`, then the event is only sent to users who can access the user who came back online.  **Changes**: Prior to Zulip 11.0 (feature level 419), the `simplified_presence_events` client capability did not exist. Therefore, all events were in the legacy format, and did not include the `presences` field.  Prior to Zulip 8.0 (feature level 228), this event was sent to all users in the organization.
type PresenceEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Only present for clients that support the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities).  A dictionary mapping user IDs to the presence data (modern format) for the modified user(s). Clients should support updating multiple users in a single event.  **Changes**: New in Zulip 11.0 (feature level 419).
	Presences *map[string]ModernPresenceFormat `json:"presences,omitempty"`
	// Not present for clients that support the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities).  The ID of the modified user.
	UserId *int32 `json:"user_id,omitempty"`
	// Not present for clients that support the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities).  The Zulip API email of the user.  **Deprecated**: This field will be removed in a future release as it is redundant with the `user_id`.
	// Deprecated
	Email *string `json:"email,omitempty"`
	// Not present for clients that support the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities).  The timestamp of when the Zulip server received the user's presence as a UNIX timestamp.
	ServerTimestamp *float32 `json:"server_timestamp,omitempty"`
	// Not present for clients that support the `simplified_presence_events` [client capability](/api/register-queue#parameter-client_capabilities).  Object containing the presence data (legacy format) of of the modified user.
	Presence *map[string]UpdateDisplaySettingsEvent5PresenceValue `json:"presence,omitempty"`
}

// NewUpdateDisplaySettingsEvent5 instantiates a new PresenceEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDisplaySettingsEvent5() *PresenceEvent {
	this := PresenceEvent{}
	return &this
}

// NewUpdateDisplaySettingsEvent5WithDefaults instantiates a new PresenceEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDisplaySettingsEvent5WithDefaults() *PresenceEvent {
	this := PresenceEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PresenceEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PresenceEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PresenceEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PresenceEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PresenceEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PresenceEvent) SetType(v string) {
	o.Type = &v
}

// GetPresences returns the Presences field value if set, zero value otherwise.
func (o *PresenceEvent) GetPresences() map[string]ModernPresenceFormat {
	if o == nil || IsNil(o.Presences) {
		var ret map[string]ModernPresenceFormat
		return ret
	}
	return *o.Presences
}

// GetPresencesOk returns a tuple with the Presences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetPresencesOk() (*map[string]ModernPresenceFormat, bool) {
	if o == nil || IsNil(o.Presences) {
		return nil, false
	}
	return o.Presences, true
}

// HasPresences returns a boolean if a field has been set.
func (o *PresenceEvent) HasPresences() bool {
	if o != nil && !IsNil(o.Presences) {
		return true
	}

	return false
}

// SetPresences gets a reference to the given map[string]ModernPresenceFormat and assigns it to the Presences field.
func (o *PresenceEvent) SetPresences(v map[string]ModernPresenceFormat) {
	o.Presences = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PresenceEvent) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PresenceEvent) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PresenceEvent) SetUserId(v int32) {
	o.UserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
// Deprecated
func (o *PresenceEvent) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PresenceEvent) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PresenceEvent) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
// Deprecated
func (o *PresenceEvent) SetEmail(v string) {
	o.Email = &v
}

// GetServerTimestamp returns the ServerTimestamp field value if set, zero value otherwise.
func (o *PresenceEvent) GetServerTimestamp() float32 {
	if o == nil || IsNil(o.ServerTimestamp) {
		var ret float32
		return ret
	}
	return *o.ServerTimestamp
}

// GetServerTimestampOk returns a tuple with the ServerTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetServerTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTimestamp) {
		return nil, false
	}
	return o.ServerTimestamp, true
}

// HasServerTimestamp returns a boolean if a field has been set.
func (o *PresenceEvent) HasServerTimestamp() bool {
	if o != nil && !IsNil(o.ServerTimestamp) {
		return true
	}

	return false
}

// SetServerTimestamp gets a reference to the given float32 and assigns it to the ServerTimestamp field.
func (o *PresenceEvent) SetServerTimestamp(v float32) {
	o.ServerTimestamp = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise.
func (o *PresenceEvent) GetPresence() map[string]UpdateDisplaySettingsEvent5PresenceValue {
	if o == nil || IsNil(o.Presence) {
		var ret map[string]UpdateDisplaySettingsEvent5PresenceValue
		return ret
	}
	return *o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceEvent) GetPresenceOk() (*map[string]UpdateDisplaySettingsEvent5PresenceValue, bool) {
	if o == nil || IsNil(o.Presence) {
		return nil, false
	}
	return o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *PresenceEvent) HasPresence() bool {
	if o != nil && !IsNil(o.Presence) {
		return true
	}

	return false
}

// SetPresence gets a reference to the given map[string]UpdateDisplaySettingsEvent5PresenceValue and assigns it to the Presence field.
func (o *PresenceEvent) SetPresence(v map[string]UpdateDisplaySettingsEvent5PresenceValue) {
	o.Presence = &v
}

func (o PresenceEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresenceEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Presences) {
		toSerialize["presences"] = o.Presences
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ServerTimestamp) {
		toSerialize["server_timestamp"] = o.ServerTimestamp
	}
	if !IsNil(o.Presence) {
		toSerialize["presence"] = o.Presence
	}
	return toSerialize, nil
}

type NullableUpdateDisplaySettingsEvent5 struct {
	value *PresenceEvent
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent5) Get() *PresenceEvent {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent5) Set(val *PresenceEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent5) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent5(val *PresenceEvent) *NullableUpdateDisplaySettingsEvent5 {
	return &NullableUpdateDisplaySettingsEvent5{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
