/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetUserGroups200ResponseAllOfUserGroupsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserGroups200ResponseAllOfUserGroupsInner{}

// GetUserGroups200ResponseAllOfUserGroupsInner struct for GetUserGroups200ResponseAllOfUserGroupsInner
type GetUserGroups200ResponseAllOfUserGroupsInner struct {
	// The human-readable description of the user group. 
	Description *string `json:"description,omitempty"`
	// The user group's integer ID. 
	Id *int32 `json:"id,omitempty"`
	// The UNIX timestamp for when the user group was created, in UTC seconds.  A `null` value means the user group has no recorded date, which is often because the group predates the metadata being tracked starting in Zulip 8.0, or because it was created via a data import tool or [management command][management-commands].  **Changes**: New in Zulip 10.0 (feature level 292).  [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html 
	DateCreated NullableInt32 `json:"date_created,omitempty"`
	// The ID of the user who created this user group.  A `null` value means the user group has no recorded creator, which is often because the group predates the metadata being tracked starting in Zulip 8.0, or because it was created via a data import tool or [management command][management-commands].  **Changes**: New in Zulip 10.0 (feature level 292).  [management-commands]: https://zulip.readthedocs.io/en/latest/production/management-commands.html 
	CreatorId NullableInt32 `json:"creator_id,omitempty"`
	// The integer user IDs of the user group's members, which are guaranteed to be non-deactivated users in the organization.  **Changes**: Prior to Zulip 10.0 (feature level 303), this list also included deactivated users who were members of the user group before being deactivated. 
	Members []int32 `json:"members,omitempty"`
	// The integer user group IDs of the direct subgroups.  **Changes**: New in Zulip 6.0 (feature level 131). Introduced in feature level 127 as `subgroups`, but clients can ignore older events as this feature level predates subgroups being fully implemented. 
	DirectSubgroupIds []int32 `json:"direct_subgroup_ids,omitempty"`
	// User group name. 
	Name *string `json:"name,omitempty"`
	// Whether the user group is a system group which cannot be modified by users.  **Changes**: New in Zulip 5.0 (feature level 93). 
	IsSystemGroup *bool `json:"is_system_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to add members to this user group.  **Changes**: New in Zulip 10.0 (feature level 305). Previously, this permission was controlled by the `can_manage_group` setting.  Will be one of the following:  [setting-values]: /api/group-setting-values 
	CanAddMembersGroup *GroupSettingValue `json:"can_add_members_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to join this user group.  **Changes**: New in Zulip 10.0 (feature level 301).  Will be one of the following:  [setting-values]: /api/group-setting-values 
	CanJoinGroup *GroupSettingValue `json:"can_join_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to leave this user group.  **Changes**: New in Zulip 10.0 (feature level 308).  Will be one of the following:  [setting-values]: /api/group-setting-values 
	CanLeaveGroup *GroupSettingValue `json:"can_leave_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to [manage this user group][manage-user-groups].  **Changes**: New in Zulip 10.0 (feature level 283).  Will be one of the following:  [setting-values]: /api/group-setting-values [manage-user-groups]: /help/manage-user-groups 
	CanManageGroup *GroupSettingValue `json:"can_manage_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to [mention this user group][mentions].  **Changes**: Before Zulip 9.0 (feature level 258), this setting was always the integer form of a [group-setting value][setting-values].  Before Zulip 8.0 (feature level 198), this setting was named `can_mention_group_id`.  New in Zulip 8.0 (feature level 191). Previously, groups could be mentioned only if they were not [system groups][system-groups].  Will be one of the following:  [setting-values]: /api/group-setting-values [system-groups]: /api/group-setting-values#system-groups [mentions]: /help/mention-a-user-or-group 
	CanMentionGroup *GroupSettingValue `json:"can_mention_group,omitempty"`
	// A [group-setting value][setting-values] defining the set of users who have permission to remove members from this user group.  **Changes**: New in Zulip 10.0 (feature level 324). Previously, this permission was controlled by the `can_manage_group` setting.  Will be one of the following:  [setting-values]: /api/group-setting-values 
	CanRemoveMembersGroup *GroupSettingValue `json:"can_remove_members_group,omitempty"`
	// Whether the user group is deactivated. Deactivated groups cannot be used as a subgroup of another group or used for any other purpose.  **Changes**: New in Zulip 10.0 (feature level 290). 
	Deactivated *bool `json:"deactivated,omitempty"`
}

// NewGetUserGroups200ResponseAllOfUserGroupsInner instantiates a new GetUserGroups200ResponseAllOfUserGroupsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserGroups200ResponseAllOfUserGroupsInner() *GetUserGroups200ResponseAllOfUserGroupsInner {
	this := GetUserGroups200ResponseAllOfUserGroupsInner{}
	return &this
}

// NewGetUserGroups200ResponseAllOfUserGroupsInnerWithDefaults instantiates a new GetUserGroups200ResponseAllOfUserGroupsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserGroups200ResponseAllOfUserGroupsInnerWithDefaults() *GetUserGroups200ResponseAllOfUserGroupsInner {
	this := GetUserGroups200ResponseAllOfUserGroupsInner{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetId(v int32) {
	o.Id = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDateCreated() int32 {
	if o == nil || IsNil(o.DateCreated.Get()) {
		var ret int32
		return ret
	}
	return *o.DateCreated.Get()
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDateCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateCreated.Get(), o.DateCreated.IsSet()
}

// HasDateCreated returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasDateCreated() bool {
	if o != nil && o.DateCreated.IsSet() {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given NullableInt32 and assigns it to the DateCreated field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetDateCreated(v int32) {
	o.DateCreated.Set(&v)
}
// SetDateCreatedNil sets the value for DateCreated to be an explicit nil
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetDateCreatedNil() {
	o.DateCreated.Set(nil)
}

// UnsetDateCreated ensures that no value is present for DateCreated, not even an explicit nil
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) UnsetDateCreated() {
	o.DateCreated.Unset()
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCreatorId() int32 {
	if o == nil || IsNil(o.CreatorId.Get()) {
		var ret int32
		return ret
	}
	return *o.CreatorId.Get()
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorId.Get(), o.CreatorId.IsSet()
}

// HasCreatorId returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCreatorId() bool {
	if o != nil && o.CreatorId.IsSet() {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given NullableInt32 and assigns it to the CreatorId field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCreatorId(v int32) {
	o.CreatorId.Set(&v)
}
// SetCreatorIdNil sets the value for CreatorId to be an explicit nil
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCreatorIdNil() {
	o.CreatorId.Set(nil)
}

// UnsetCreatorId ensures that no value is present for CreatorId, not even an explicit nil
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) UnsetCreatorId() {
	o.CreatorId.Unset()
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetMembers() []int32 {
	if o == nil || IsNil(o.Members) {
		var ret []int32
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetMembersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []int32 and assigns it to the Members field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetMembers(v []int32) {
	o.Members = v
}

// GetDirectSubgroupIds returns the DirectSubgroupIds field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDirectSubgroupIds() []int32 {
	if o == nil || IsNil(o.DirectSubgroupIds) {
		var ret []int32
		return ret
	}
	return o.DirectSubgroupIds
}

// GetDirectSubgroupIdsOk returns a tuple with the DirectSubgroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDirectSubgroupIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DirectSubgroupIds) {
		return nil, false
	}
	return o.DirectSubgroupIds, true
}

// HasDirectSubgroupIds returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasDirectSubgroupIds() bool {
	if o != nil && !IsNil(o.DirectSubgroupIds) {
		return true
	}

	return false
}

// SetDirectSubgroupIds gets a reference to the given []int32 and assigns it to the DirectSubgroupIds field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetDirectSubgroupIds(v []int32) {
	o.DirectSubgroupIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetName(v string) {
	o.Name = &v
}

// GetIsSystemGroup returns the IsSystemGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetIsSystemGroup() bool {
	if o == nil || IsNil(o.IsSystemGroup) {
		var ret bool
		return ret
	}
	return *o.IsSystemGroup
}

// GetIsSystemGroupOk returns a tuple with the IsSystemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetIsSystemGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSystemGroup) {
		return nil, false
	}
	return o.IsSystemGroup, true
}

// HasIsSystemGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasIsSystemGroup() bool {
	if o != nil && !IsNil(o.IsSystemGroup) {
		return true
	}

	return false
}

// SetIsSystemGroup gets a reference to the given bool and assigns it to the IsSystemGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetIsSystemGroup(v bool) {
	o.IsSystemGroup = &v
}

// GetCanAddMembersGroup returns the CanAddMembersGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanAddMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddMembersGroup
}

// GetCanAddMembersGroupOk returns a tuple with the CanAddMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanAddMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		return nil, false
	}
	return o.CanAddMembersGroup, true
}

// HasCanAddMembersGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanAddMembersGroup() bool {
	if o != nil && !IsNil(o.CanAddMembersGroup) {
		return true
	}

	return false
}

// SetCanAddMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddMembersGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanAddMembersGroup(v GroupSettingValue) {
	o.CanAddMembersGroup = &v
}

// GetCanJoinGroup returns the CanJoinGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanJoinGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanJoinGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanJoinGroup
}

// GetCanJoinGroupOk returns a tuple with the CanJoinGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanJoinGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanJoinGroup) {
		return nil, false
	}
	return o.CanJoinGroup, true
}

// HasCanJoinGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanJoinGroup() bool {
	if o != nil && !IsNil(o.CanJoinGroup) {
		return true
	}

	return false
}

// SetCanJoinGroup gets a reference to the given GroupSettingValue and assigns it to the CanJoinGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanJoinGroup(v GroupSettingValue) {
	o.CanJoinGroup = &v
}

// GetCanLeaveGroup returns the CanLeaveGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanLeaveGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanLeaveGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanLeaveGroup
}

// GetCanLeaveGroupOk returns a tuple with the CanLeaveGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanLeaveGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanLeaveGroup) {
		return nil, false
	}
	return o.CanLeaveGroup, true
}

// HasCanLeaveGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanLeaveGroup() bool {
	if o != nil && !IsNil(o.CanLeaveGroup) {
		return true
	}

	return false
}

// SetCanLeaveGroup gets a reference to the given GroupSettingValue and assigns it to the CanLeaveGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanLeaveGroup(v GroupSettingValue) {
	o.CanLeaveGroup = &v
}

// GetCanManageGroup returns the CanManageGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanManageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanManageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanManageGroup
}

// GetCanManageGroupOk returns a tuple with the CanManageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanManageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanManageGroup) {
		return nil, false
	}
	return o.CanManageGroup, true
}

// HasCanManageGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanManageGroup() bool {
	if o != nil && !IsNil(o.CanManageGroup) {
		return true
	}

	return false
}

// SetCanManageGroup gets a reference to the given GroupSettingValue and assigns it to the CanManageGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanManageGroup(v GroupSettingValue) {
	o.CanManageGroup = &v
}

// GetCanMentionGroup returns the CanMentionGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanMentionGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMentionGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMentionGroup
}

// GetCanMentionGroupOk returns a tuple with the CanMentionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanMentionGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMentionGroup) {
		return nil, false
	}
	return o.CanMentionGroup, true
}

// HasCanMentionGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanMentionGroup() bool {
	if o != nil && !IsNil(o.CanMentionGroup) {
		return true
	}

	return false
}

// SetCanMentionGroup gets a reference to the given GroupSettingValue and assigns it to the CanMentionGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanMentionGroup(v GroupSettingValue) {
	o.CanMentionGroup = &v
}

// GetCanRemoveMembersGroup returns the CanRemoveMembersGroup field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanRemoveMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanRemoveMembersGroup
}

// GetCanRemoveMembersGroupOk returns a tuple with the CanRemoveMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetCanRemoveMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		return nil, false
	}
	return o.CanRemoveMembersGroup, true
}

// HasCanRemoveMembersGroup returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasCanRemoveMembersGroup() bool {
	if o != nil && !IsNil(o.CanRemoveMembersGroup) {
		return true
	}

	return false
}

// SetCanRemoveMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanRemoveMembersGroup field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetCanRemoveMembersGroup(v GroupSettingValue) {
	o.CanRemoveMembersGroup = &v
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDeactivated() bool {
	if o == nil || IsNil(o.Deactivated) {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) GetDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deactivated) {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) HasDeactivated() bool {
	if o != nil && !IsNil(o.Deactivated) {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *GetUserGroups200ResponseAllOfUserGroupsInner) SetDeactivated(v bool) {
	o.Deactivated = &v
}

func (o GetUserGroups200ResponseAllOfUserGroupsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserGroups200ResponseAllOfUserGroupsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DateCreated.IsSet() {
		toSerialize["date_created"] = o.DateCreated.Get()
	}
	if o.CreatorId.IsSet() {
		toSerialize["creator_id"] = o.CreatorId.Get()
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.DirectSubgroupIds) {
		toSerialize["direct_subgroup_ids"] = o.DirectSubgroupIds
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsSystemGroup) {
		toSerialize["is_system_group"] = o.IsSystemGroup
	}
	if !IsNil(o.CanAddMembersGroup) {
		toSerialize["can_add_members_group"] = o.CanAddMembersGroup
	}
	if !IsNil(o.CanJoinGroup) {
		toSerialize["can_join_group"] = o.CanJoinGroup
	}
	if !IsNil(o.CanLeaveGroup) {
		toSerialize["can_leave_group"] = o.CanLeaveGroup
	}
	if !IsNil(o.CanManageGroup) {
		toSerialize["can_manage_group"] = o.CanManageGroup
	}
	if !IsNil(o.CanMentionGroup) {
		toSerialize["can_mention_group"] = o.CanMentionGroup
	}
	if !IsNil(o.CanRemoveMembersGroup) {
		toSerialize["can_remove_members_group"] = o.CanRemoveMembersGroup
	}
	if !IsNil(o.Deactivated) {
		toSerialize["deactivated"] = o.Deactivated
	}
	return toSerialize, nil
}

type NullableGetUserGroups200ResponseAllOfUserGroupsInner struct {
	value *GetUserGroups200ResponseAllOfUserGroupsInner
	isSet bool
}

func (v NullableGetUserGroups200ResponseAllOfUserGroupsInner) Get() *GetUserGroups200ResponseAllOfUserGroupsInner {
	return v.value
}

func (v *NullableGetUserGroups200ResponseAllOfUserGroupsInner) Set(val *GetUserGroups200ResponseAllOfUserGroupsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserGroups200ResponseAllOfUserGroupsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserGroups200ResponseAllOfUserGroupsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserGroups200ResponseAllOfUserGroupsInner(val *GetUserGroups200ResponseAllOfUserGroupsInner) *NullableGetUserGroups200ResponseAllOfUserGroupsInner {
	return &NullableGetUserGroups200ResponseAllOfUserGroupsInner{value: val, isSet: true}
}

func (v NullableGetUserGroups200ResponseAllOfUserGroupsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserGroups200ResponseAllOfUserGroupsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


