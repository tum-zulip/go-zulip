/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmPlayground type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmPlayground{}

// RealmPlayground Object containing details about a realm playground.
type RealmPlayground struct {
	// The unique ID for the realm playground.
	Id *int32 `json:"id,omitempty"`
	// The user-visible display name of the playground. Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49).
	Name *string `json:"name,omitempty"`
	// The name of the Pygments language lexer for that programming language.
	PygmentsLanguage *string `json:"pygments_language,omitempty"`
	// The [RFC 6570](https://www.rfc-editor.org/rfc/rfc6570.html) compliant URL template for the playground. The template contains exactly one variable named `code`, which determines how the extracted code should be substituted in the playground URL.  **Changes**: New in Zulip 8.0 (feature level 196). This replaced the `url_prefix` parameter, which was used to construct URLs by just concatenating url_prefix and code.
	UrlTemplate *string `json:"url_template,omitempty"`
}

// NewRealmPlayground instantiates a new RealmPlayground object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmPlayground() *RealmPlayground {
	this := RealmPlayground{}
	return &this
}

// NewRealmPlaygroundWithDefaults instantiates a new RealmPlayground object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmPlaygroundWithDefaults() *RealmPlayground {
	this := RealmPlayground{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmPlayground) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlayground) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmPlayground) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmPlayground) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealmPlayground) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlayground) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealmPlayground) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealmPlayground) SetName(v string) {
	o.Name = &v
}

// GetPygmentsLanguage returns the PygmentsLanguage field value if set, zero value otherwise.
func (o *RealmPlayground) GetPygmentsLanguage() string {
	if o == nil || IsNil(o.PygmentsLanguage) {
		var ret string
		return ret
	}
	return *o.PygmentsLanguage
}

// GetPygmentsLanguageOk returns a tuple with the PygmentsLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlayground) GetPygmentsLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PygmentsLanguage) {
		return nil, false
	}
	return o.PygmentsLanguage, true
}

// HasPygmentsLanguage returns a boolean if a field has been set.
func (o *RealmPlayground) HasPygmentsLanguage() bool {
	if o != nil && !IsNil(o.PygmentsLanguage) {
		return true
	}

	return false
}

// SetPygmentsLanguage gets a reference to the given string and assigns it to the PygmentsLanguage field.
func (o *RealmPlayground) SetPygmentsLanguage(v string) {
	o.PygmentsLanguage = &v
}

// GetUrlTemplate returns the UrlTemplate field value if set, zero value otherwise.
func (o *RealmPlayground) GetUrlTemplate() string {
	if o == nil || IsNil(o.UrlTemplate) {
		var ret string
		return ret
	}
	return *o.UrlTemplate
}

// GetUrlTemplateOk returns a tuple with the UrlTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmPlayground) GetUrlTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.UrlTemplate) {
		return nil, false
	}
	return o.UrlTemplate, true
}

// HasUrlTemplate returns a boolean if a field has been set.
func (o *RealmPlayground) HasUrlTemplate() bool {
	if o != nil && !IsNil(o.UrlTemplate) {
		return true
	}

	return false
}

// SetUrlTemplate gets a reference to the given string and assigns it to the UrlTemplate field.
func (o *RealmPlayground) SetUrlTemplate(v string) {
	o.UrlTemplate = &v
}

func (o RealmPlayground) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmPlayground) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PygmentsLanguage) {
		toSerialize["pygments_language"] = o.PygmentsLanguage
	}
	if !IsNil(o.UrlTemplate) {
		toSerialize["url_template"] = o.UrlTemplate
	}
	return toSerialize, nil
}

type NullableRealmPlayground struct {
	value *RealmPlayground
	isSet bool
}

func (v NullableRealmPlayground) Get() *RealmPlayground {
	return v.value
}

func (v *NullableRealmPlayground) Set(val *RealmPlayground) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmPlayground) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmPlayground) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmPlayground(val *RealmPlayground) *NullableRealmPlayground {
	return &NullableRealmPlayground{value: val, isSet: true}
}

func (v NullableRealmPlayground) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmPlayground) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
