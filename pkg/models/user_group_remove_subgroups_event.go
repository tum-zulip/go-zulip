/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserGroupRemoveSubgroupsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupRemoveSubgroupsEvent{}

// UserGroupRemoveSubgroupsEvent Event sent to all users when subgroups have been removed from a user group.  **Changes**: New in Zulip 6.0 (feature level 127).
type UserGroupRemoveSubgroupsEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The ID of the user group whose details have changed.
	GroupId *int32 `json:"group_id,omitempty"`
	// Array containing the IDs of the subgroups that have been removed from the user group.  **Changes**: New in Zulip 6.0 (feature level 131). Previously, this was called `subgroup_ids`, but clients can ignore older events as this feature level predates subgroups being fully implemented.
	DirectSubgroupIds []int32 `json:"direct_subgroup_ids,omitempty"`
}

// NewRealmUserUpdateEvent8 instantiates a new UserGroupRemoveSubgroupsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmUserUpdateEvent8() *UserGroupRemoveSubgroupsEvent {
	this := UserGroupRemoveSubgroupsEvent{}
	return &this
}

// NewRealmUserUpdateEvent8WithDefaults instantiates a new UserGroupRemoveSubgroupsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmUserUpdateEvent8WithDefaults() *UserGroupRemoveSubgroupsEvent {
	this := UserGroupRemoveSubgroupsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserGroupRemoveSubgroupsEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupRemoveSubgroupsEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserGroupRemoveSubgroupsEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserGroupRemoveSubgroupsEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserGroupRemoveSubgroupsEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupRemoveSubgroupsEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserGroupRemoveSubgroupsEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserGroupRemoveSubgroupsEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *UserGroupRemoveSubgroupsEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupRemoveSubgroupsEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *UserGroupRemoveSubgroupsEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *UserGroupRemoveSubgroupsEvent) SetOp(v string) {
	o.Op = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *UserGroupRemoveSubgroupsEvent) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupRemoveSubgroupsEvent) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *UserGroupRemoveSubgroupsEvent) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *UserGroupRemoveSubgroupsEvent) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetDirectSubgroupIds returns the DirectSubgroupIds field value if set, zero value otherwise.
func (o *UserGroupRemoveSubgroupsEvent) GetDirectSubgroupIds() []int32 {
	if o == nil || IsNil(o.DirectSubgroupIds) {
		var ret []int32
		return ret
	}
	return o.DirectSubgroupIds
}

// GetDirectSubgroupIdsOk returns a tuple with the DirectSubgroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupRemoveSubgroupsEvent) GetDirectSubgroupIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DirectSubgroupIds) {
		return nil, false
	}
	return o.DirectSubgroupIds, true
}

// HasDirectSubgroupIds returns a boolean if a field has been set.
func (o *UserGroupRemoveSubgroupsEvent) HasDirectSubgroupIds() bool {
	if o != nil && !IsNil(o.DirectSubgroupIds) {
		return true
	}

	return false
}

// SetDirectSubgroupIds gets a reference to the given []int32 and assigns it to the DirectSubgroupIds field.
func (o *UserGroupRemoveSubgroupsEvent) SetDirectSubgroupIds(v []int32) {
	o.DirectSubgroupIds = v
}

func (o UserGroupRemoveSubgroupsEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupRemoveSubgroupsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.DirectSubgroupIds) {
		toSerialize["direct_subgroup_ids"] = o.DirectSubgroupIds
	}
	return toSerialize, nil
}

type NullableRealmUserUpdateEvent8 struct {
	value *UserGroupRemoveSubgroupsEvent
	isSet bool
}

func (v NullableRealmUserUpdateEvent8) Get() *UserGroupRemoveSubgroupsEvent {
	return v.value
}

func (v *NullableRealmUserUpdateEvent8) Set(val *UserGroupRemoveSubgroupsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEvent8) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEvent8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEvent8(val *UserGroupRemoveSubgroupsEvent) *NullableRealmUserUpdateEvent8 {
	return &NullableRealmUserUpdateEvent8{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEvent8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEvent8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
