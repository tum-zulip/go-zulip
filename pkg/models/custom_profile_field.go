/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomProfileField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomProfileField{}

// CustomProfileField Dictionary containing the details of a custom profile field configured for this organization.
type CustomProfileField struct {
	// The ID of the custom profile field. This will be referenced in the custom profile fields section of user objects.
	Id int32 `json:"id"`
	// An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Custom profile fields](/help/custom-profile-fields#profile-field-types) article for details on what each type means.  - **1**: Short text - **2**: Long text - **3**: List of options - **4**: Date picker - **5**: Link - **6**: Person picker - **7**: External account - **8**: Pronouns  **Changes**: Field type `8` added in Zulip 6.0 (feature level 151).
	Type int32 `json:"type"`
	// Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.
	Order int32 `json:"order"`
	// The name of the custom profile field.
	Name string `json:"name"`
	// The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.
	Hint string `json:"hint"`
	// Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.
	FieldData *string `json:"field_data,omitempty"`
	// Whether the custom profile field, display or not on the user card.  Currently it's value not allowed to be `true` of `Long text` and `Person picker` [profile field types](/help/custom-profile-fields#profile-field-types).  This field is only included when its value is `true`.  **Changes**: New in Zulip 6.0 (feature level 146).
	DisplayInProfileSummary *bool `json:"display_in_profile_summary,omitempty"`
	// Whether an organization administrator has configured this profile field as required.  Because the required property is mutable, clients cannot assume that a required custom profile field has a value. The Zulip web application displays a prominent banner to any user who has not set a value for a required field.  **Changes**: New in Zulip 9.0 (feature level 244).
	Required bool `json:"required"`
	// Whether regular users can edit this profile field on their own account.  Note that organization administrators can edit custom profile fields for any user regardless of this setting.  **Changes**: New in Zulip 10.0 (feature level 296).
	EditableByUser bool `json:"editable_by_user"`
}

type _CustomProfileField CustomProfileField

// NewCustomProfileField instantiates a new CustomProfileField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomProfileField(id int32, type_ int32, order int32, name string, hint string, required bool, editableByUser bool) *CustomProfileField {
	this := CustomProfileField{}
	this.Id = id
	this.Type = type_
	this.Order = order
	this.Name = name
	this.Hint = hint
	var displayInProfileSummary bool = false
	this.DisplayInProfileSummary = &displayInProfileSummary
	this.Required = required
	this.EditableByUser = editableByUser
	return &this
}

// NewCustomProfileFieldWithDefaults instantiates a new CustomProfileField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomProfileFieldWithDefaults() *CustomProfileField {
	this := CustomProfileField{}
	var displayInProfileSummary bool = false
	this.DisplayInProfileSummary = &displayInProfileSummary
	var editableByUser bool = true
	this.EditableByUser = editableByUser
	return &this
}

// GetId returns the Id field value
func (o *CustomProfileField) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomProfileField) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *CustomProfileField) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomProfileField) SetType(v int32) {
	o.Type = v
}

// GetOrder returns the Order field value
func (o *CustomProfileField) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *CustomProfileField) SetOrder(v int32) {
	o.Order = v
}

// GetName returns the Name field value
func (o *CustomProfileField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomProfileField) SetName(v string) {
	o.Name = v
}

// GetHint returns the Hint field value
func (o *CustomProfileField) GetHint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hint
}

// GetHintOk returns a tuple with the Hint field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetHintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hint, true
}

// SetHint sets field value
func (o *CustomProfileField) SetHint(v string) {
	o.Hint = v
}

// GetFieldData returns the FieldData field value if set, zero value otherwise.
func (o *CustomProfileField) GetFieldData() string {
	if o == nil || IsNil(o.FieldData) {
		var ret string
		return ret
	}
	return *o.FieldData
}

// GetFieldDataOk returns a tuple with the FieldData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetFieldDataOk() (*string, bool) {
	if o == nil || IsNil(o.FieldData) {
		return nil, false
	}
	return o.FieldData, true
}

// HasFieldData returns a boolean if a field has been set.
func (o *CustomProfileField) HasFieldData() bool {
	if o != nil && !IsNil(o.FieldData) {
		return true
	}

	return false
}

// SetFieldData gets a reference to the given string and assigns it to the FieldData field.
func (o *CustomProfileField) SetFieldData(v string) {
	o.FieldData = &v
}

// GetDisplayInProfileSummary returns the DisplayInProfileSummary field value if set, zero value otherwise.
func (o *CustomProfileField) GetDisplayInProfileSummary() bool {
	if o == nil || IsNil(o.DisplayInProfileSummary) {
		var ret bool
		return ret
	}
	return *o.DisplayInProfileSummary
}

// GetDisplayInProfileSummaryOk returns a tuple with the DisplayInProfileSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetDisplayInProfileSummaryOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayInProfileSummary) {
		return nil, false
	}
	return o.DisplayInProfileSummary, true
}

// HasDisplayInProfileSummary returns a boolean if a field has been set.
func (o *CustomProfileField) HasDisplayInProfileSummary() bool {
	if o != nil && !IsNil(o.DisplayInProfileSummary) {
		return true
	}

	return false
}

// SetDisplayInProfileSummary gets a reference to the given bool and assigns it to the DisplayInProfileSummary field.
func (o *CustomProfileField) SetDisplayInProfileSummary(v bool) {
	o.DisplayInProfileSummary = &v
}

// GetRequired returns the Required field value
func (o *CustomProfileField) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *CustomProfileField) SetRequired(v bool) {
	o.Required = v
}

// GetEditableByUser returns the EditableByUser field value
func (o *CustomProfileField) GetEditableByUser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EditableByUser
}

// GetEditableByUserOk returns a tuple with the EditableByUser field value
// and a boolean to check if the value has been set.
func (o *CustomProfileField) GetEditableByUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EditableByUser, true
}

// SetEditableByUser sets field value
func (o *CustomProfileField) SetEditableByUser(v bool) {
	o.EditableByUser = v
}

func (o CustomProfileField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomProfileField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["order"] = o.Order
	toSerialize["name"] = o.Name
	toSerialize["hint"] = o.Hint
	if !IsNil(o.FieldData) {
		toSerialize["field_data"] = o.FieldData
	}
	if !IsNil(o.DisplayInProfileSummary) {
		toSerialize["display_in_profile_summary"] = o.DisplayInProfileSummary
	}
	toSerialize["required"] = o.Required
	toSerialize["editable_by_user"] = o.EditableByUser
	return toSerialize, nil
}

func (o *CustomProfileField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"order",
		"name",
		"hint",
		"required",
		"editable_by_user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomProfileField := _CustomProfileField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomProfileField)

	if err != nil {
		return err
	}

	*o = CustomProfileField(varCustomProfileField)

	return err
}

type NullableCustomProfileField struct {
	value *CustomProfileField
	isSet bool
}

func (v NullableCustomProfileField) Get() *CustomProfileField {
	return v.value
}

func (v *NullableCustomProfileField) Set(val *CustomProfileField) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomProfileField) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomProfileField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomProfileField(val *CustomProfileField) *NullableCustomProfileField {
	return &NullableCustomProfileField{value: val, isSet: true}
}

func (v NullableCustomProfileField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomProfileField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
