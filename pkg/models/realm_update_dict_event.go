/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmUpdateDictEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmUpdateDictEvent{}

// RealmUpdateDictEvent The more general of two event types that may be used when sending an event to all users in a Zulip organization when the configuration of the organization (realm) has changed.  Unlike the simpler [realm/update](#realm-update) event format, this event type supports multiple properties being changed in a single event.  This event is also sent when deactivating or reactivating a user for settings set to anonymous user groups which the user is direct member of. When deactivating the user, event is only sent to users who cannot access the deactivated user.  **Changes**: Starting with Zulip 10.0 (feature level 303), this event can also be sent when deactivating or reactivating a user.  In Zulip 7.0 (feature level 163), the realm setting `email_address_visibility` was removed. It was replaced by a [user setting](/api/update-settings#parameter-email_address_visibility) with a [realm user default][user-defaults], with the encoding of different values preserved. Clients can support all versions by supporting the current API and treating every user as having the realm's `email_address_visibility` value.  [user-defaults]: /api/update-realm-user-settings-defaults#parameter-email_address_visibility
type RealmUpdateDictEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// Always `\"default\"`. Present for backwards-compatibility with older clients that predate the `update_dict` event style.  **Deprecated** and will be removed in a future release.
	// Deprecated
	Property *string                       `json:"property,omitempty"`
	Data     *SubscriptionRemoveEvent7Data `json:"data,omitempty"`
}

// NewSubscriptionRemoveEvent7 instantiates a new RealmUpdateDictEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRemoveEvent7() *RealmUpdateDictEvent {
	this := RealmUpdateDictEvent{}
	return &this
}

// NewSubscriptionRemoveEvent7WithDefaults instantiates a new RealmUpdateDictEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRemoveEvent7WithDefaults() *RealmUpdateDictEvent {
	this := RealmUpdateDictEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmUpdateDictEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUpdateDictEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmUpdateDictEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmUpdateDictEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmUpdateDictEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUpdateDictEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmUpdateDictEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmUpdateDictEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RealmUpdateDictEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUpdateDictEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RealmUpdateDictEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RealmUpdateDictEvent) SetOp(v string) {
	o.Op = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
// Deprecated
func (o *RealmUpdateDictEvent) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RealmUpdateDictEvent) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *RealmUpdateDictEvent) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
// Deprecated
func (o *RealmUpdateDictEvent) SetProperty(v string) {
	o.Property = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RealmUpdateDictEvent) GetData() SubscriptionRemoveEvent7Data {
	if o == nil || IsNil(o.Data) {
		var ret SubscriptionRemoveEvent7Data
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUpdateDictEvent) GetDataOk() (*SubscriptionRemoveEvent7Data, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RealmUpdateDictEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SubscriptionRemoveEvent7Data and assigns it to the Data field.
func (o *RealmUpdateDictEvent) SetData(v SubscriptionRemoveEvent7Data) {
	o.Data = &v
}

func (o RealmUpdateDictEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmUpdateDictEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableSubscriptionRemoveEvent7 struct {
	value *RealmUpdateDictEvent
	isSet bool
}

func (v NullableSubscriptionRemoveEvent7) Get() *RealmUpdateDictEvent {
	return v.value
}

func (v *NullableSubscriptionRemoveEvent7) Set(val *RealmUpdateDictEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRemoveEvent7) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRemoveEvent7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRemoveEvent7(val *RealmUpdateDictEvent) *NullableSubscriptionRemoveEvent7 {
	return &NullableSubscriptionRemoveEvent7{value: val, isSet: true}
}

func (v NullableSubscriptionRemoveEvent7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRemoveEvent7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
