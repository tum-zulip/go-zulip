/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf7{}

// GetEvents200ResponseAllOfEventsInnerOneOf7 Event sent to a user's clients when a property of the user's subscription to a channel has been updated. This event is used only for personal properties like `is_muted` or `pin_to_top`. See the [`stream op: update` event](/api/get-events#stream-update) for updates to global properties of a channel. 
type GetEvents200ResponseAllOfEventsInnerOneOf7 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// The ID of the channel whose subscription details have changed. 
	StreamId *int32 `json:"stream_id,omitempty"`
	// The property of the subscription which has changed. For details on the various subscription properties that a user can change, see [POST /users/me/subscriptions/properties](/api/update-subscription-settings).  Clients should generally handle an unknown property received here without crashing, since that will naturally happen when connecting to a Zulip server running a new version that adds a new subscription property.  **Changes**: As of Zulip 6.0 (feature level 139), updates to the `is_muted` property or the deprecated `in_home_view` property will send two `subscription` update events, one for each property, to support clients fully migrating to use the `is_muted` property. Prior to this feature level, updates to either property only sent one event with the deprecated `in_home_view` property. 
	Property *string `json:"property,omitempty"`
	Value *GetEvents200ResponseAllOfEventsInnerOneOf7Value `json:"value,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf7 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf7() *GetEvents200ResponseAllOfEventsInnerOneOf7 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf7{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf7WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf7WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf7 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf7{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetOp(v string) {
	o.Op = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetProperty(v string) {
	o.Property = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetValue() GetEvents200ResponseAllOfEventsInnerOneOf7Value {
	if o == nil || IsNil(o.Value) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf7Value
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) GetValueOk() (*GetEvents200ResponseAllOfEventsInnerOneOf7Value, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf7Value and assigns it to the Value field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf7) SetValue(v GetEvents200ResponseAllOfEventsInnerOneOf7Value) {
	o.Value = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf7) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf7 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf7
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf7) Get() *GetEvents200ResponseAllOfEventsInnerOneOf7 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf7) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf7(val *GetEvents200ResponseAllOfEventsInnerOneOf7) *NullableGetEvents200ResponseAllOfEventsInnerOneOf7 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf7{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


