/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegisterQueue200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterQueue200Response{}

// RegisterQueue200Response struct for RegisterQueue200Response
type RegisterQueue200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](/api/rest-error-handling#ignored-parameters) documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// The ID of the queue that has been allocated for your client.  Will be `null` only for unauthenticated access in realms that have enabled the [public access option](/help/public-access-option).
	QueueId NullableString `json:"queue_id,omitempty"`
	// The initial value of `last_event_id` to pass to `GET /api/v1/events`.
	LastEventId *int32 `json:"last_event_id,omitempty"`
	// The server's current [Zulip feature level](/api/changelog).  **Changes**: As of Zulip 3.0 (feature level 3), this is always present in the endpoint's response. Previously, it was only present if `event_types` included `zulip_version`.  New in Zulip 3.0 (feature level 1).
	ZulipFeatureLevel *int32 `json:"zulip_feature_level,omitempty"`
	// The server's version number. This is often a release version number, like `2.1.7`. But for a server running a [version from Git][git-release], it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.  **Changes**: As of Zulip 3.0 (feature level 3), this is always present in the endpoint's response. Previously, it was only present if `event_types` included `zulip_version`.  [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
	ZulipVersion *string `json:"zulip_version,omitempty"`
	// The `git merge-base` between `zulip_version` and official branches in the public [Zulip server and web app repository](https://github.com/zulip/zulip), in the same format as `zulip_version`. This will equal `zulip_version` if the server is not running a fork of the Zulip server.  This will be `\"\"` if the server does not know its `merge-base`.  **Changes**: New in Zulip 5.0 (feature level 88).
	ZulipMergeBase *string `json:"zulip_merge_base,omitempty"`
	// Present if `alert_words` is present in `fetch_event_types`.  An array of strings, each an [alert word](/help/dm-mention-alert-notifications#alert-words) that the current user has configured.
	AlertWords []string `json:"alert_words,omitempty"`
	// Present if `custom_profile_fields` is present in `fetch_event_types`.  An array of dictionaries where each dictionary contains the details of a single custom profile field that is available to users in this Zulip organization. This must be combined with the custom profile field values on individual user objects to display users' profiles.
	CustomProfileFields []CustomProfileField `json:"custom_profile_fields,omitempty"`
	// Present if `custom_profile_fields` is present in `fetch_event_types`.  An array of objects; each object describes a type of custom profile field that could be configured on this Zulip server. Each custom profile type has an ID and the `type` property of a custom profile field is equal to one of these IDs.  This attribute is only useful for clients containing UI for changing the set of configured custom profile fields in a Zulip organization.
	CustomProfileFieldTypes *map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue `json:"custom_profile_field_types,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The UNIX timestamp (UTC) for when the organization was created.  **Changes**: New in Zulip 8.0 (feature level 203).
	RealmDateCreated *int32 `json:"realm_date_created,omitempty"`
	// Present if `realm` is present in `fetch_event_types`, and the realm is a demo organization.  The UNIX timestamp (UTC) when the demo organization will be automatically deleted. Clients should use this to display a prominent warning to the user that the organization will be deleted at the indicated time.  **Changes**: New in Zulip 5.0 (feature level 94).
	DemoOrganizationScheduledDeletionDate *int32 `json:"demo_organization_scheduled_deletion_date,omitempty"`
	// An array containing draft objects for the user. These drafts are being stored on the backend for the purpose of syncing across devices. This array will be empty if `enable_drafts_synchronization` is set to `false`.
	Drafts []Draft `json:"drafts,omitempty"`
	// Present if `onboarding_steps` is present in `fetch_event_types`.  An array of dictionaries, where each dictionary contains details about a single onboarding step that should be shown to the user.  We expect that only official Zulip clients will interact with this data.  **Changes**: Before Zulip 8.0 (feature level 233), this array was named `hotspots`. Prior to this feature level, one-time notice onboarding steps were not supported, and the `type` field in these objects did not exist as all onboarding steps were implicitly hotspots.
	OnboardingSteps []OnboardingStep `json:"onboarding_steps,omitempty"`
	// Present if `onboarding_steps` is present in `fetch_event_types`.  URL of the navigation tour video to display to new users during onboarding. If `null`, the onboarding video experience is disabled.  **Changes**: New in Zulip 10.0 (feature level 369).
	NavigationTourVideoUrl NullableString `json:"navigation_tour_video_url,omitempty"`
	// Present if `message` is present in `fetch_event_types`.  The highest message ID among all messages the user has received as of the moment of this request.  **Deprecated**: This field may be removed in future versions as it no longer has a clear purpose. Clients wishing to fetch the latest messages should pass `\"anchor\": \"latest\"` to `GET /messages`.
	// Deprecated
	MaxMessageId *int32 `json:"max_message_id,omitempty"`
	// The maximum allowed length for a reminder note.  **Changes**: New in Zulip 11.0 (feature level 415).
	MaxReminderNoteLength *int32 `json:"max_reminder_note_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a channel name, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 4.0 (feature level 53). Previously, this required `stream` in `fetch_event_types`, was called `stream_name_max_length`, and always had a value of 60.
	MaxStreamNameLength *int32 `json:"max_stream_name_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a channel description, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 4.0 (feature level 53). Previously, this required `stream` in `fetch_event_types`, was called `stream_description_max_length`, and always had a value of 1024.
	MaxStreamDescriptionLength *int32 `json:"max_stream_description_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a channel folder name, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 11.0 (feature level 410). Clients should use 60 as a fallback value on previous feature levels.
	MaxChannelFolderNameLength *int32 `json:"max_channel_folder_name_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a channel folder description, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 11.0 (feature level 410). Clients should use 1024 as a fallback value on previous feature levels.
	MaxChannelFolderDescriptionLength *int32 `json:"max_channel_folder_description_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a topic, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 4.0 (feature level 53). Previously, this property always had a value of 60.
	MaxTopicLength *int32 `json:"max_topic_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum allowed length for a message, in Unicode code points. Clients should use this property rather than hardcoding field sizes.  **Changes**: New in Zulip 4.0 (feature level 53). Previously, this property always had a value of 10000.
	MaxMessageLength *int32 `json:"max_message_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The minimum permitted number of days before full data deletion (users, channels, messages, etc.) of a deactivated organization. If `null`, then a deactivated organization's data can be deleted immediately.  **Changes**: New in Zulip 10.0 (feature level 332)
	ServerMinDeactivatedRealmDeletionDays NullableInt32 `json:"server_min_deactivated_realm_deletion_days,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum permitted number of days before full data deletion (users, channels, messages, etc.) of a deactivated organization. If `null`, then a deactivated organization's data can be retained indefinitely.  **Changes**: New in Zulip 10.0 (feature level 332).
	ServerMaxDeactivatedRealmDeletionDays NullableInt32 `json:"server_max_deactivated_realm_deletion_days,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  For clients implementing the [presence](/api/get-presence) system, the time interval the client should use for sending presence requests to the server (and thus receive presence updates from the server).  It is important for presence implementations to use both this and `server_presence_offline_threshold_seconds` correctly, so that a Zulip server can change these values to manage the trade-off between load and freshness of presence data.  **Changes**: New in Zulip 7.0 (feature level 164). Clients should use 60 for older Zulip servers, since that's the value that was hardcoded in the Zulip mobile apps prior to this parameter being introduced.
	ServerPresencePingIntervalSeconds *int32 `json:"server_presence_ping_interval_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  How old a presence timestamp for a given user can be before the user should be displayed as offline by clients displaying Zulip presence data. See the related `server_presence_ping_interval_seconds` for details.  **Changes**: New in Zulip 7.0 (feature level 164). Clients should use 140 for older Zulip servers, since that's the value that was hardcoded in the Zulip client apps prior to this parameter being introduced.
	ServerPresenceOfflineThresholdSeconds *int32 `json:"server_presence_offline_threshold_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  For clients implementing [typing notifications](/api/set-typing-status) protocol, the time interval in milliseconds that the client should wait for additional [typing start](/api/get-events#typing-start) events from the server before removing an active typing indicator.  **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 15000 for older Zulip servers, since that's the value that was hardcoded in the Zulip apps prior to this parameter being introduced.
	ServerTypingStartedExpiryPeriodMilliseconds *int32 `json:"server_typing_started_expiry_period_milliseconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  For clients implementing [typing notifications](/api/set-typing-status) protocol, the time interval in milliseconds that the client should wait when a user stops interacting with the compose UI before sending a stop notification to the server.  **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 5000 for older Zulip servers, since that's the value that was hardcoded in the Zulip apps prior to this parameter being introduced.
	ServerTypingStoppedWaitPeriodMilliseconds *int32 `json:"server_typing_stopped_wait_period_milliseconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  For clients implementing [typing notifications](/api/set-typing-status) protocol, the time interval in milliseconds that the client should use to send regular start notifications to the server to indicate that the user is still actively interacting with the compose UI.  **Changes**: New in Zulip 8.0 (feature level 204). Clients should use 10000 for older Zulip servers, since that's the value that was hardcoded in the Zulip apps prior to this parameter being introduced.
	ServerTypingStartedWaitPeriodMilliseconds *int32 `json:"server_typing_started_wait_period_milliseconds,omitempty"`
	// Present if `scheduled_messages` is present in `fetch_event_types`.  An array of all undelivered scheduled messages by the user.  **Changes**: New in Zulip 7.0 (feature level 179).
	ScheduledMessages []ScheduledMessage `json:"scheduled_messages,omitempty"`
	// Present if `reminders` is present in `fetch_event_types`.  An array of all undelivered reminders scheduled by the user.  **Changes**: New in Zulip 11.0 (feature level 399).
	Reminders []ScheduledMessage `json:"reminders,omitempty"`
	// Present if `muted_topics` is present in `fetch_event_types`.  Array of tuples, where each tuple describes a muted topic. The first element of the tuple is the channel name in which the topic has to be muted, the second element is the topic name to be muted and the third element is an integer UNIX timestamp representing when the topic was muted.  **Changes**: Deprecated in Zulip 6.0 (feature level 134). Starting with this version, `muted_topics` will only be present in the response if the `user_topic` object, which generalizes and replaces this field, is not explicitly requested via `fetch_event_types`.  Before Zulip 3.0 (feature level 1), the `muted_topics` array objects were 2-item tuples and did not include the timestamp information for when the topic was muted.
	// Deprecated
	MutedTopics [][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner `json:"muted_topics,omitempty"`
	// Present if `muted_users` is present in `fetch_event_types`.  A list of dictionaries where each dictionary describes a [muted user](/api/mute-user).  **Changes**: New in Zulip 4.0 (feature level 48).
	MutedUsers []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner `json:"muted_users,omitempty"`
	// Present if `presence` is present in `fetch_event_types`.  A dictionary where each entry describes the presence details of a user in the Zulip organization.  The format of the entry (modern or legacy) depends on the value of [`slim_presence`](#parameter-slim_presence).  Users who have been offline for multiple weeks may not appear in this object.
	Presences *map[string]RegisterQueue200ResponseAllOfPresencesValue `json:"presences,omitempty"`
	// Present if `presence` is present in `fetch_event_types`.  Provides the `last_update_id` value of the latest presence data fetched by the server and included in the response in `presences`. This can be used as the value of the `presence_last_update_id` parameter when polling for presence data at the [/users/me/presence](/api/update-presence) endpoint to tell the server to only fetch the relevant newer data in order to skip redundant already-known presence information.  **Changes**: New in Zulip 9.0 (feature level 263).
	PresenceLastUpdateId *int32 `json:"presence_last_update_id,omitempty"`
	// Present if `presence` is present in `fetch_event_types`.  The time when the server fetched the `presences` data included in the response. Matches the similar field in presence responses.  **Changes**: New in Zulip 5.0 (feature level 70).
	ServerTimestamp *float32 `json:"server_timestamp,omitempty"`
	// Present if `realm_domains` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes a domain within which users can join the organization without and invitation.
	RealmDomains []RealmDomain `json:"realm_domains,omitempty"`
	// Present if `realm_emoji` is present in `fetch_event_types`.  A dictionary of objects where each object describes a custom emoji that has been uploaded in this Zulip organization.
	RealmEmoji *map[string]RealmEmoji `json:"realm_emoji,omitempty"`
	// Present if `realm_linkifiers` is present in `fetch_event_types`.  An ordered array of objects where each object describes a single [linkifier](/help/add-a-custom-linkifier).  The order of the array reflects the order that each linkifier should be processed when linkifying messages and topics. By default, new linkifiers are ordered last. This order can be modified with [`PATCH /realm/linkifiers`](/api/reorder-linkifiers).  Clients will receive an empty array unless the event queue is registered with the client capability `{\"linkifier_url_template\": true}`. See [`client_capabilities`](/api/register-queue#parameter-client_capabilities) parameter for how this can be specified.  **Changes**: Before Zulip 7.0 (feature level 176), the `linkifier_url_template` client capability was not required. The requirement was added because linkifiers were updated to contain a URL template instead of a URL format string, which was a not backwards-compatible change.  New in Zulip 4.0 (feature level 54). Clients can access this data for servers on earlier feature levels via the legacy `realm_filters` property.
	RealmLinkifiers []RegisterQueue200ResponseAllOfRealmLinkifiersInner `json:"realm_linkifiers,omitempty"`
	// Legacy property for [linkifiers](/help/add-a-custom-linkifier). Present if `realm_filters` is present in `fetch_event_types`.  When present, this is always an empty array.  **Changes**: Prior to Zulip 7.0 (feature level 176), this was an array of tuples, where each tuple described a linkifier. The first element of the tuple was a string regex pattern which represented the pattern to be linkified on matching, for example `\"#(?P<id>[123])\"`. The second element was a URL format string that the pattern should be linkified with. A URL format string for the above example would be `\"https://realm.com/my_realm_filter/%(id)s\"`. And the third element was the ID of the realm filter.  **Deprecated** in Zulip 4.0 (feature level 54), replaced by the `realm_linkifiers` key.
	// Deprecated
	RealmFilters [][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner `json:"realm_filters,omitempty"`
	// Present if `realm_playgrounds` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes a [code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.  **Changes**: New in Zulip 4.0 (feature level 49).
	RealmPlaygrounds []RealmPlayground `json:"realm_playgrounds,omitempty"`
	// Present if `realm_user_groups` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes a [user group](/help/user-groups) in the Zulip organization.  Deactivated groups will only be included if `include_deactivated_groups` client capability is set to `true`.  **Changes**: Prior to Zulip 10.0 (feature level 294), deactivated groups were included for all the clients.
	RealmUserGroups []UserGroup `json:"realm_user_groups,omitempty"`
	// Present if `realm_bot` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes a bot that the current user can administer. If the current user is an organization administrator, this will include all bots in the organization. Otherwise, it will only include bots owned by the user (either because the user created the bot or an administrator transferred the bot's ownership to the user).
	RealmBots []Bot `json:"realm_bots,omitempty"`
	// Present if `realm_embedded_bots` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes an type of embedded bot that is available to be configured on this Zulip server.  Clients only need these data if they contain UI for creating or administering bots.
	RealmEmbeddedBots []RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner `json:"realm_embedded_bots,omitempty"`
	// Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes a type of incoming webhook integration that is available to be configured on this Zulip server.  Clients only need these data if they contain UI for creating or administering bots.
	RealmIncomingWebhookBots []RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner `json:"realm_incoming_webhook_bots,omitempty"`
	// Present if `recent_private_conversations` is present in `fetch_event_types`.  An array of dictionaries containing data on all direct message and group direct message conversations that the user has received (or sent) messages in, organized by conversation. This data set is designed to support UI elements such as the \"Direct messages\" widget in the web application showing recent direct message conversations that the user has participated in.  \"Recent\" is defined as the server's discretion; the original implementation interpreted that as \"the 1000 most recent direct messages the user received\".
	RecentPrivateConversations []RegisterQueue200ResponseAllOfRecentPrivateConversationsInner `json:"recent_private_conversations,omitempty"`
	// Present if `navigation_views` is present in `fetch_event_types`. An array of dictionaries containing data on all of the current user's navigation views.  **Changes**: New in Zulip 11.0 (feature level 390).
	NavigationViews []NavigationView `json:"navigation_views,omitempty"`
	// Present if `saved_snippets` is present in `fetch_event_types`.  An array of dictionaries containing data on all of the current user's saved snippets.  **Changes**: New in Zulip 10.0 (feature level 297).
	SavedSnippets []SavedSnippet `json:"saved_snippets,omitempty"`
	// Present if `subscription` is present in `fetch_event_types`.  A array of dictionaries where each dictionary describes the properties of a channel the user is subscribed to (as well as that user's personal per-channel settings).  **Changes**: Removed `email_address` field from the dictionary in Zulip 8.0 (feature level 226).  Removed `role` field from the dictionary in Zulip 6.0 (feature level 133).
	Subscriptions []Subscription `json:"subscriptions,omitempty"`
	// Present if `subscription` is present in `fetch_event_types`.  A array of dictionaries where each dictionary describes one of the channels the user has unsubscribed from but was previously subscribed to along with the subscription details.  Unlike `never_subscribed`, the user might have messages in their personal message history that were sent to these channels.  **Changes**: Prior to Zulip 10.0 (feature level 349), if a user was in `can_administer_channel_group` of a channel that they had unsubscribed from, but not an organization administrator, the channel in question would not be part of this array.  Removed `email_address` field from the dictionary in Zulip 8.0 (feature level 226).  Removed `role` field from the dictionary in Zulip 6.0 (feature level 133).
	Unsubscribed []Subscription `json:"unsubscribed,omitempty"`
	// Present if `subscription` is present in `fetch_event_types`.  A array of dictionaries where each dictionary describes one of the channels that is visible to the user and the user has never been subscribed to.  Important for clients containing UI where one can browse channels to subscribe to.  **Changes**: Before Zulip 10.0 (feature level 362), archived channels did not appear in this list, even if the `archived_channels` [client capability][client-capabilities] was declared by the client.  Prior to Zulip 10.0 (feature level 349), if a user was in `can_administer_channel_group` of a channel that they never subscribed to, but not an organization administrator, the channel in question would not be part of this array.
	NeverSubscribed []RegisterQueue200ResponseAllOfNeverSubscribedInner `json:"never_subscribed,omitempty"`
	// Present if `channel_folders` is present in `fetch_event_types`.  An array of dictionaries where each dictionary describes one of the channel folders in the organization.  Only channel folders with one or more public web channels are visible to spectators.  **Changes**: New in Zulip 11.0 (feature level 389).
	ChannelFolders []ChannelFolder                          `json:"channel_folders,omitempty"`
	UnreadMsgs     *RegisterQueue200ResponseAllOfUnreadMsgs `json:"unread_msgs,omitempty"`
	// Present if `starred_messages` is present in `fetch_event_types`.  Array containing the IDs of all messages which have been [starred](/help/star-a-message) by the user.
	StarredMessages []int32 `json:"starred_messages,omitempty"`
	// Present if `stream` is present in `fetch_event_types`.  Array of dictionaries where each dictionary contains details about a single channel in the organization that is visible to the user.  For organization administrators, this will include all private channels in the organization.  **Changes**: Before Zulip 11.0 (feature level 378), archived channels did not appear in this list, even if the `archived_channels` [client capability][client-capabilities] was declared by the client.  As of Zulip 8.0 (feature level 205), this will include all web-public channels in the organization as well.
	Streams []BasicChannel `json:"streams,omitempty"`
	// Present if `default_streams` is present in `fetch_event_types`.  An array of IDs of all the [default channels](/help/set-default-streams-for-new-users) in the organization.  **Changes**: Before Zulip 10.0 (feature level 330), we sent array of dictionaries where each dictionary contained details about a single default stream for the Zulip organization.
	RealmDefaultStreams []int32 `json:"realm_default_streams,omitempty"`
	// Present if `default_stream_groups` is present in `fetch_event_types`.  An array of dictionaries where each dictionary contains details about a single default channel group configured for this Zulip organization.  Default channel groups are an experimental feature.
	RealmDefaultStreamGroups []DefaultChannelGroup `json:"realm_default_stream_groups,omitempty"`
	// Present if `stop_words` is present in `fetch_event_types`.  An array containing the stop words used by the Zulip server's full-text search implementation. Useful for showing helpful error messages when a search returns limited results because a stop word in the query was ignored.
	StopWords []string `json:"stop_words,omitempty"`
	// Present if `user_status` is present in `fetch_event_types`.  A dictionary which contains the [status](/help/status-and-availability) of all users in the Zulip organization who have set a status.  **Changes**: The emoji parameters are new in Zulip 5.0 (feature level 86). Previously, Zulip did not support emoji associated with statuses.
	UserStatus   map[string]RegisterQueue200ResponseAllOfUserStatus `json:"user_status,omitempty"`
	UserSettings *RegisterQueue200ResponseAllOfUserSettings         `json:"user_settings,omitempty"`
	// Present if `user_topic` is present in `fetch_event_types`.  **Changes**: New in Zulip 6.0 (feature level 134), deprecating and replacing the previous `muted_topics` structure.
	UserTopics []RegisterQueue200ResponseAllOfUserTopicsInner `json:"user_topics,omitempty"`
	// Present if `video_calls` is present in `fetch_event_types`.  A boolean which signifies whether the user has a Zoom token and has thus completed OAuth flow for the [Zoom integration](/help/configure-call-provider). Clients need to know whether initiating Zoom OAuth is required before creating a Zoom call.
	HasZoomToken *bool `json:"has_zoom_token,omitempty"`
	// Present if `giphy` is present in `fetch_event_types`.  GIPHY's client-side SDKs needs this API key to use the GIPHY API. GIPHY API keys are not secret (their main purpose appears to be allowing GIPHY to block a problematic app). Please don't use our API key for an app unrelated to Zulip.  Developers of clients should also read the [GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-) before using this API key.  **Changes**: Added in Zulip 4.0 (feature level 47).
	GiphyApiKey *string `json:"giphy_api_key,omitempty"`
	// Present if `push_device` is present in `fetch_event_types`.  Dictionary where each entry describes the user's push device's registration status and error code (if registration failed).  **Changes**: New in Zulip 11.0 (feature level 406).
	PushDevices *map[string]RegisterQueue200ResponseAllOfPushDevicesValue `json:"push_devices,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableDesktopNotifications *bool `json:"enable_desktop_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableDigestEmails *bool `json:"enable_digest_emails,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableLoginEmails *bool `json:"enable_login_emails,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableMarketingEmails *bool `json:"enable_marketing_emails,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EmailNotificationsBatchingPeriodSeconds *int32 `json:"email_notifications_batching_period_seconds,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableOfflineEmailNotifications *bool `json:"enable_offline_email_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableOfflinePushNotifications *bool `json:"enable_offline_push_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableOnlinePushNotifications *bool `json:"enable_online_push_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableSounds *bool `json:"enable_sounds,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableStreamDesktopNotifications *bool `json:"enable_stream_desktop_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableStreamEmailNotifications *bool `json:"enable_stream_email_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableStreamPushNotifications *bool `json:"enable_stream_push_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableStreamAudibleNotifications *bool `json:"enable_stream_audible_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	WildcardMentionsNotify *bool `json:"wildcard_mentions_notify,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	MessageContentInEmailNotifications *bool `json:"message_content_in_email_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	NotificationSound *string `json:"notification_sound,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	PmContentInDesktopNotifications *bool `json:"pm_content_in_desktop_notifications,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	DesktopIconCountDisplay *int32 `json:"desktop_icon_count_display,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: In Zulip 7.0 (feature level 168), replaced previous `realm_name_in_notifications` global notifications setting with `realm_name_in_email_notifications_policy`.  **Deprecated** since Zulip 5.0 (feature level 89); both `realm_name_in_notifications` and the newer `realm_name_in_email_notifications_policy` are deprecated. Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	RealmNameInEmailNotificationsPolicy *int32 `json:"realm_name_in_email_notifications_policy,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The current value of this global notification setting for the user. See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	PresenceEnabled *bool `json:"presence_enabled,omitempty"`
	// Present if `update_global_notifications` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Array containing the names of the notification sound options supported by this Zulip server. Only relevant to support UI for configuring notification sounds.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	AvailableNotificationSounds []string `json:"available_notification_sounds,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The color scheme selected by the user.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	ColorScheme *int32 `json:"color_scheme,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The default language chosen by the user.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	DefaultLanguage *string `json:"default_language,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen to hide inactive channels.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	DemoteInactiveStreams *int32 `json:"demote_inactive_streams,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The name of the emoji set that the user has chosen.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	Emojiset *string `json:"emojiset,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether drafts synchronization is enabled for the user. If disabled, clients will receive an error when trying to use the `drafts` endpoints.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  New in Zulip 5.0 (feature level 87).  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EnableDraftsSynchronization *bool `json:"enable_drafts_synchronization,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen for the layout width to be fluid.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	FluidLayoutWidth *bool `json:"fluid_layout_width,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The [home view](/help/configure-home-view) in Zulip, represented as the URL suffix after `#` to be rendered when Zulip loads.  Currently supported values are `all_messages` and `recent_topics`.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: New in Zulip 8.0 (feature level 219). Previously, this was called `default_view`, which was new in Zulip 4.0 (feature level 42).  **Deprecated** in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	WebHomeView *string `json:"web_home_view,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether has switched on high contrast mode.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	HighContrastMode *bool `json:"high_contrast_mode,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen for the userlist to be displayed on the left side of the screen (for desktop app and web app) in narrow windows.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	LeftSideUserlist *bool `json:"left_side_userlist,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen the number of starred messages to be displayed similar to unread counts.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	StarredMessageCounts *bool `json:"starred_message_counts,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  The user's [profile time zone](/help/change-your-timezone), which is used primarily to display the user's local time to other users.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	Timezone *string `json:"timezone,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen for emoticons to be translated into emoji in the Zulip compose box.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	TranslateEmoticons *bool `json:"translate_emoticons,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user has chosen a twenty four hour time display (true) or a twelve hour one (false).  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	TwentyFourHourTime *bool `json:"twenty_four_hour_time,omitempty"`
	// Whether the user is configured to receive typing notifications from other users. The server will only deliver typing notifications events to users who for whom this is enabled.  **Changes**: New in Zulip 9.0 (feature level 253). Previously, there were only options to disable sending typing notifications.
	ReceivesTypingNotifications *bool `json:"receives_typing_notifications,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Whether the user setting for [sending on pressing Enter][set-enter-send] in the compose box is enabled.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and process the `user_settings` event type instead.  Prior to Zulip 5.0 (feature level 84), this field was present in response if `realm_user` was present in `fetch_event_types`, not `update_display_settings`.  [capabilities]: /api/register-queue#parameter-client_capabilities [set-enter-send]: /help/configure-send-message-keys
	// Deprecated
	EnterSends *bool `json:"enter_sends,omitempty"`
	// Present if `update_display_settings` is present in `fetch_event_types` and only for clients that did not include `user_settings_object` in their [`client_capabilities`][capabilities] when registering the event queue.  Array of dictionaries where each dictionary describes an emoji set supported by this version of the Zulip server.  Only relevant to clients with configuration UI for choosing an emoji set; the currently selected emoji set is available in the `emojiset` key.  See [PATCH /settings](/api/update-settings) for details on the meaning of this setting.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and access the `user_settings` object instead.  [capabilities]: /api/register-queue#parameter-client_capabilities
	// Deprecated
	EmojisetChoices []RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner `json:"emojiset_choices,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  What typesof message edit history are accessible to users via [message edit history](/help/view-a-messages-edit-history).  - \"all\" = All edit history is visible. - \"moves\" = Only moves are visible. - \"none\" = No edit history is visible.  **Changes**: New in Zulip 10.0 (feature level 358), replacing the previous `allow_edit_history` boolean setting; `true` corresponds to `all`, and `false` to `none`.
	RealmMessageEditHistoryVisibilityPolicy *string `json:"realm_message_edit_history_visibility_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this organization is configured to allow users to access [message edit history](/help/view-a-messages-edit-history).  The value of `realm_allow_edit_history` is set as `false` if the `realm_message_edit_history_visibility_policy` is configured as \"None\" and `true` if it is configured as \"Moves only\" or \"All\".  **Changes**: Deprecated in Zulip 10.0 (feature level 358) and will be removed in the future, as it is an inaccurate version `realm_message_edit_history_visibility_policy`, which replaces this field.
	// Deprecated
	RealmAllowEditHistory *bool `json:"realm_allow_edit_history,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to add custom emoji in the organization.  **Changes**: New in Zulip 10.0 (feature level 307). Previously, this permission was controlled by the enum `add_custom_emoji_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators.  Before Zulip 5.0 (feature level 85), the `realm_add_emoji_by_admins_only` boolean setting controlled this permission; `true` corresponded to `Admins`, and `false` to `Everyone`.
	RealmCanAddCustomEmojiGroup *GroupSettingValue `json:"realm_can_add_custom_emoji_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to add subscribers to channels in the organization.  **Changes**: New in Zulip 10.0 (feature level 341). Previously, this permission was controlled by the enum `invite_to_stream_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators.
	RealmCanAddSubscribersGroup *GroupSettingValue `json:"realm_can_add_subscribers_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to delete any message in the organization.  **Changes**: New in Zulip 10.0 (feature level 281). Previously, this permission was limited to administrators only and was uneditable.
	RealmCanDeleteAnyMessageGroup *GroupSettingValue `json:"realm_can_delete_any_message_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to delete messages that they have sent in the organization.  **Changes**: New in Zulip 10.0 (feature level 291). Previously, this permission was controlled by the enum `delete_own_message_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone.  Before Zulip 5.0 (feature level 101), the `allow_message_deleting` boolean setting controlled this permission; `true` corresponded to `Everyone`, and `false` to `Admins`.
	RealmCanDeleteOwnMessageGroup *GroupSettingValue `json:"realm_can_delete_own_message_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to change per-channel `can_delete_any_message_group` and `can_delete_own_message_group` permission settings. Note that the user must be a member of both this group and the `can_administer_channel_group` of the channel whose message delete settings they want to change.  Organization administrators can always change these settings of every channel.  **Changes**: New in Zulip 11.0 (feature level 407).
	RealmCanSetDeleteMessagePolicyGroup *GroupSettingValue `json:"realm_can_set_delete_message_policy_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to change per-channel `topics_policy` setting. Note that the user must be a member of both this group and the `can_administer_channel_group` of the channel whose `topics_policy` they want to change.  Organization administrators can always change the `topics_policy` setting of every channel.  **Changes**: New in Zulip 11.0 (feature level 392).
	RealmCanSetTopicsPolicyGroup *GroupSettingValue `json:"realm_can_set_topics_policy_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to send email invitations for inviting other users to the organization.  **Changes**: New in Zulip 10.0 (feature level 321). Previously, this permission was controlled by the enum `invite_to_realm_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.  Before Zulip 4.0 (feature level 50), the `invite_by_admins_only` boolean setting controlled this permission; `true` corresponded to `Admins`, and `false` to `Members`.
	RealmCanInviteUsersGroup *GroupSettingValue `json:"realm_can_invite_users_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to use wildcard mentions in large channels.  All users will receive a warning/reminder when using mentions in large channels, even when permitted to do so.  **Changes**: New in Zulip 10.0 (feature level 352). Previously, this permission was controlled by the enum `wildcard_mention_policy`.
	RealmCanMentionManyUsersGroup *GroupSettingValue `json:"realm_can_mention_many_users_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to move messages from one channel to another in the organization.  **Changes**: New in Zulip 10.0 (feature level 310). Previously, this permission was controlled by the enum `move_messages_between_streams_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 6=Nobody.  In Zulip 7.0 (feature level 159), `Nobody` was added as an option to `move_messages_between_streams_policy` enum.
	RealmCanMoveMessagesBetweenChannelsGroup *GroupSettingValue `json:"realm_can_move_messages_between_channels_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to move messages from one topic to another within a channel in the organization.  **Changes**: New in Zulip 10.0 (feature level 316). Previously, this permission was controlled by the enum `edit_topic_policy`. Values were 1=Members, 2=Admins, 3=Full members, 4=Moderators, 5=Everyone, 6=Nobody.  In Zulip 7.0 (feature level 159), `Nobody` was added as an option to `edit_topic_policy` enum.
	RealmCanMoveMessagesBetweenTopicsGroup *GroupSettingValue `json:"realm_can_move_messages_between_topics_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create user groups in this organization.  **Changes**: New in Zulip 10.0 (feature level 299). Previously `realm_user_group_edit_policy` field used to control the permission to create user groups.
	RealmCanCreateGroups *GroupSettingValue `json:"realm_can_create_groups,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create all types of bot users in the organization. See also `can_create_write_only_bots_group`.  **Changes**: New in Zulip 10.0 (feature level 344). Previously, this permission was controlled by the enum `bot_creation_policy`. Values were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
	RealmCanCreateBotsGroup *GroupSettingValue `json:"realm_can_create_bots_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create bot users that can only send messages in the organization, i.e. incoming webhooks, in addition to the users who are present in `can_create_bots_group`.  **Changes**: New in Zulip 10.0 (feature level 344). Previously, this permission was controlled by the enum `bot_creation_policy`. Values were 1=Members, 2=Generic bots limited to administrators, 3=Administrators.
	RealmCanCreateWriteOnlyBotsGroup *GroupSettingValue `json:"realm_can_create_write_only_bots_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to administer all existing groups in this organization.  **Changes**: Prior to Zulip 10.0 (feature level 305), only users who were a member of the group or had the moderator role or above could exercise the permission on a given group.  New in Zulip 10.0 (feature level 299). Previously the `user_group_edit_policy` field controlled the permission to manage user groups. Valid values were as follows:  - 1 = All members can create and edit user groups - 2 = Only organization administrators can create and edit   user groups - 3 = Only [full members][calc-full-member] can create and   edit user groups. - 4 = Only organization administrators and moderators can   create and edit user groups.  [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	RealmCanManageAllGroups *GroupSettingValue `json:"realm_can_manage_all_groups,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to manage plans and billing in the organization.  **Changes**: New in Zulip 10.0 (feature level 363). Previously, only owners and users with `is_billing_admin` property set to `true` were allowed to manage plans and billing.
	RealmCanManageBillingGroup *GroupSettingValue `json:"realm_can_manage_billing_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create public channels in this organization.  **Changes**: New in Zulip 9.0 (feature level 264). Previously `realm_create_public_stream_policy` field used to control the permission to create public channels.
	RealmCanCreatePublicChannelGroup *GroupSettingValue `json:"realm_can_create_public_channel_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create private channels in this organization.  **Changes**: New in Zulip 9.0 (feature level 266). Previously `realm_create_private_stream_policy` field used to control the permission to create private channels.
	RealmCanCreatePrivateChannelGroup *GroupSettingValue `json:"realm_can_create_private_channel_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to create web-public channels in this organization.  Has no effect and should not be displayed in settings UI unless the Zulip server has the `WEB_PUBLIC_STREAMS_ENABLED` server-level setting enabled and the organization has enabled the `enable_spectator_access` realm setting.  **Changes**: New in Zulip 10.0 (feature level 280). Previously `realm_create_web_public_stream_policy` field used to control the permission to create web-public channels.
	RealmCanCreateWebPublicChannelGroup *GroupSettingValue `json:"realm_can_create_web_public_channel_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to [resolve topics](/help/resolve-a-topic) in the organization.  **Changes**: New in Zulip 10.0 (feature level 367). Previously, permission to resolve topics was controlled by the more general `can_move_messages_between_topics_group permission for moving messages`.
	RealmCanResolveTopicsGroup *GroupSettingValue `json:"realm_can_resolve_topics_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A deprecated representation of a superset of the users who have permission to create public channels in the organization, available for backwards-compatibility. Clients should use `can_create_public_channel_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 1 = Members only - 2 = Admins only - 3 = [Full members][calc-full-member] only - 4 = Admins and moderators only  **Changes**: Deprecated in Zulip 9.0 (feature level 264) and replaced by `realm_can_create_public_channel_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  Before Zulip 5.0 (feature level 102), permission to create channels was controlled by the `realm_create_stream_policy` setting.  [permission-level]: /api/roles-and-permissions#permission-levels [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	// Deprecated
	RealmCreatePublicStreamPolicy *int32 `json:"realm_create_public_stream_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A deprecated representation of a superset of the users who have permission to create private channels in the organization, available for backwards-compatibility. Clients should use `can_create_private_channel_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 1 = Members only - 2 = Admins only - 3 = [Full members][calc-full-member] only - 4 = Admins and moderators only  **Changes**: Deprecated in Zulip 9.0 (feature level 266) and replaced by `realm_can_create_private_channel_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  **Changes**: Before Zulip 5.0 (feature level 102), permission to create channels was controlled by the `realm_create_stream_policy` setting.  [permission-level]: /api/roles-and-permissions#permission-levels [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	// Deprecated
	RealmCreatePrivateStreamPolicy *int32 `json:"realm_create_private_stream_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A deprecated representation of a superset of the users who have permission to create web-public channels in the organization, available for backwards-compatibility. Clients should use `can_create_web_public_channel_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 2 = Admins only - 4 = Admins and moderators only - 6 = Nobody - 7 = Owners only  **Changes**: Deprecated in Zulip 10.0 (feature level 280) and replaced by `realm_can_create_web_public_channel_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  **Changes**: Added in Zulip 5.0 (feature level 103).  [permission-level]: /api/roles-and-permissions#permission-levels
	// Deprecated
	RealmCreateWebPublicStreamPolicy *int32 `json:"realm_create_web_public_stream_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A deprecated representation of a superset of the users who have permission to use wildcard mentions in large channels, available for backwards-compatibility. Clients should use `can_mention_many_users_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 1 = Any user can use wildcard mentions in large channels. - 2 = Only members can use wildcard mentions in large channels. - 3 = Only [full members][calc-full-member] can use wildcard mentions in large channels. - 5 = Only organization administrators can use wildcard mentions in large channels. - 6 = Nobody can use wildcard mentions in large channels. - 7 = Only organization administrators and moderators can use wildcard mentions in large channels.  All users will receive a warning/reminder when using mentions in large channels, even when permitted to do so.  **Changes**: Deprecated in Zulip 10.0 (feature level 352) and replaced by `realm_can_mention_many_users_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  Channel administrators option removed in Zulip 6.0 (feature level 133).  Moderators option added in Zulip 4.0 (feature level 62).  New in Zulip 4.0 (feature level 33).  [permission-level]: /api/roles-and-permissions#permission-levels [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	// Deprecated
	RealmWildcardMentionPolicy *int32 `json:"realm_wildcard_mention_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The [organization language][org-lang] for automated messages and invitation emails.  [org-lang]: /help/configure-organization-language
	RealmDefaultLanguage *string `json:"realm_default_language,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  This organization's configured custom message for Welcome Bot to send to new user accounts, in Zulip Markdown format.  **Changes**: New in Zulip 11.0 (feature level 416).
	RealmWelcomeMessageCustomText *string `json:"realm_welcome_message_custom_text,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The description of the organization, used on login and registration pages.
	RealmDescription *string `json:"realm_description,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization has enabled [weekly digest emails](/help/digest-emails).
	RealmDigestEmailsEnabled *bool `json:"realm_digest_emails_enabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization disallows disposable email addresses.
	RealmDisallowDisposableEmailAddresses *bool `json:"realm_disallow_disposable_email_addresses,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether users are allowed to change their own email address in this organization. This is typically disabled for organizations that synchronize accounts from LDAP or a similar corporate database.
	RealmEmailChangesDisabled *bool `json:"realm_email_changes_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether an invitation is required to join this organization.
	RealmInviteRequired *bool `json:"realm_invite_required,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who are allowed to create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link) to the organization.  **Changes**: Prior to Zulip 10.0 (feature level 314), this value used to be of type integer and did not accept anonymous user groups.  New in Zulip 8.0 (feature level 209).
	RealmCreateMultiuseInviteGroup *GroupSettingValue `json:"realm_create_multiuse_invite_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this organization has been configured to enable [previews of linked images](/help/image-video-and-website-previews).
	RealmInlineImagePreview *bool `json:"realm_inline_image_preview,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this organization has been configured to enable [previews of linked websites](/help/image-video-and-website-previews).
	RealmInlineUrlEmbedPreview *bool `json:"realm_inline_url_embed_preview,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The organization's default policy for sending channel messages to the [empty \"general chat\" topic](/help/require-topics).  - `\"allow_empty_topic\"`: Channel messages can be sent to the empty topic. - `\"disable_empty_topic\"`: Channel messages cannot be sent to the empty topic.  **Changes**: New in Zulip 11.0 (feature level 392). Previously, this was controlled by the boolean `realm_mandatory_topics` setting, which is now deprecated.
	RealmTopicsPolicy *string `json:"realm_topics_policy,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether [topics are required](/help/require-topics) for messages in this organization.  **Changes**: Deprecated in Zulip 11.0 (feature level 392). This is now controlled by the realm `topics_policy` setting.
	// Deprecated
	RealmMandatoryTopics *bool `json:"realm_mandatory_topics,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The default [message retention policy](/help/message-retention-policy) for this organization. It can have one special value:  - `-1` denoting that the messages will be retained forever for this realm, by default.  **Changes**: Prior to Zulip 3.0 (feature level 22), no limit was encoded as `null` instead of `-1`. Clients can correctly handle all server versions by treating both `-1` and `null` as indicating unlimited message retention.
	RealmMessageRetentionDays *int32 `json:"realm_message_retention_days,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The name of the organization, used in login pages etc.
	RealmName *string `json:"realm_name,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this realm is configured to disallow sending mobile push notifications with message content through the legacy mobile push notifications APIs. The new API uses end-to-end encryption to protect message content and metadata from being accessible to the push bouncer service, APNs, and FCM. Clients that support the new E2EE API will use it automatically regardless of this setting.  If `true`, mobile push notifications sent to clients that lack support for E2EE push notifications will always have \"New message\" as their content. Note that these legacy mobile notifications will still contain metadata, which may include the message's ID, the sender's name, email address, and avatar.  In a future release, once the official mobile apps have implemented fully validated their E2EE protocol support, this setting will become strict, and disable the legacy protocol entirely.  **Changes**: New in Zulip 11.0 (feature level 409). Previously, this behavior was available only via the `PUSH_NOTIFICATION_REDACT_CONTENT` global server setting.
	RealmRequireE2eePushNotifications *bool `json:"realm_require_e2ee_push_notifications,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Indicates whether the organization is configured to require users to have unique full names. If true, the server will reject attempts to create a new user, or change the name of an existing user, where doing so would lead to two users whose names are identical modulo case and unicode normalization.  **Changes**: New in Zulip 9.0 (feature level 246). Previously, the Zulip server could not be configured to enforce unique names.
	RealmRequireUniqueNames *bool `json:"realm_require_unique_names,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Indicates whether users are [allowed to change](/help/restrict-name-and-email-changes) their name via the Zulip UI in this organization. Typically disabled in organizations syncing this type of account information from an external user database like LDAP.
	RealmNameChangesDisabled *bool `json:"realm_name_changes_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Indicates whether users are [allowed to change](/help/restrict-name-and-email-changes) their avatar via the Zulip UI in this organization. Typically disabled in organizations syncing this type of account information from an external user database like LDAP.
	RealmAvatarChangesDisabled *bool `json:"realm_avatar_changes_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions) this organization are required to have an email address in one of the `realm_domains` configured for the organization.
	RealmEmailsRestrictedToDomains *bool `json:"realm_emails_restricted_to_domains,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether or not this organization is configured to send the standard Zulip [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
	RealmSendWelcomeEmails *bool `json:"realm_send_welcome_emails,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether notification emails in this organization are allowed to contain Zulip the message content, or simply indicate that a new message was sent.
	RealmMessageContentAllowedInEmailNotifications *bool `json:"realm_message_content_allowed_in_email_notifications,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether web-public channels and related anonymous access APIs/features are enabled in this organization.  Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings] is enabled on the Zulip server. See also the `can_create_web_public_channel_group` realm setting.  **Changes**: New in Zulip 5.0 (feature level 109).  [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html
	RealmEnableSpectatorAccess *bool `json:"realm_enable_spectator_access,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization has given permission to be advertised in the Zulip [communities directory](/help/communities-directory).  Useful only to clients supporting changing this setting for the organization.  Giving permission via this setting does not guarantee that an organization will be listed in the Zulip communities directory.  **Changes**: New in Zulip 6.0 (feature level 129).
	RealmWantAdvertiseInCommunitiesDirectory *bool `json:"realm_want_advertise_in_communities_directory,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The configured [video call provider](/help/configure-call-provider) for the organization.  - 0 = None - 1 = Jitsi Meet - 3 = Zoom (User OAuth integration) - 4 = BigBlueButton - 5 = Zoom (Server to Server OAuth integration)  Note that only one of the [Zoom integrations][zoom-video-calls] can be configured on a Zulip server.  **Changes**: In Zulip 10.0 (feature level 353), added the Zoom Server to Server OAuth option.  In Zulip 3.0 (feature level 1), added the None option to disable video call UI.  [zoom-video-calls]: https://zulip.readthedocs.io/en/latest/production/video-calls.html#zoom
	RealmVideoChatProvider *int32 `json:"realm_video_chat_provider,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL of the custom Jitsi Meet server configured in this organization's settings.  `null`, the default, means that the organization is using the should use the server-level configuration, `server_jitsi_server_url`. A correct client supporting only the modern API should use `realm_jitsi_server_url || server_jitsi_server_url` to create calls.  **Changes**: New in Zulip 8.0 (feature level 212). Previously, this was only available as a server-level configuration, which was available via the `jitsi_server_url` field.
	RealmJitsiServerUrl NullableString `json:"realm_jitsi_server_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The configured GIPHY rating for the organization.  **Changes**: New in Zulip 4.0 (feature level 55).
	RealmGiphyRating *int32 `json:"realm_giphy_rating,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Members whose accounts have been created at least this many days ago will be treated as [full members][calc-full-member] for the purpose of settings that restrict access to new members.  [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	RealmWaitingPeriodThreshold *int32 `json:"realm_waiting_period_threshold,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The day of the week when the organization will send its weekly digest email to inactive users.
	RealmDigestWeekday *int32 `json:"realm_digest_weekday,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to start a new direct message conversation involving other non-bot users. Users who are outside this group and attempt to send the first direct message to a given collection of recipient users will receive an error, unless all other recipients are bots or the sender.  **Changes**: New in Zulip 9.0 (feature level 270).  Previously, access to send direct messages was controlled by the `private_message_policy` realm setting, which supported values of 1 (enabled) and 2 (disabled).
	RealmDirectMessageInitiatorGroup *GroupSettingValue `json:"realm_direct_message_initiator_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who have permission to fully use direct messages. Users outside this group can only send direct messages to conversations where all the recipients are in this group, are bots, or are the sender, ensuring that every direct message conversation will be visible to at least one user in this group.  **Changes**: New in Zulip 9.0 (feature level 270).  Previously, access to send direct messages was controlled by the `private_message_policy` realm setting, which supported values of 1 (enabled) and 2 (disabled).
	RealmDirectMessagePermissionGroup *GroupSettingValue `json:"realm_direct_message_permission_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The default pygments language code to be used for code blocks in this organization. If an empty string, no default has been set.  **Changes**: Prior to Zulip 8.0 (feature level 195), a server bug meant that both `null` and an empty string could represent that no default was set for this realm setting. Clients supporting older server versions should treat either value (`null` or `\"\"`) as no default being set.
	RealmDefaultCodeBlockLanguage *string `json:"realm_default_code_block_language,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Messages sent more than this many seconds ago cannot be deleted with this organization's [message deletion policy](/help/restrict-message-editing-and-deletion).  Will not be 0. A `null` value means no limit: messages can be deleted regardless of how long ago they were sent.  **Changes**: No limit was represented using the special value `0` before Zulip 5.0 (feature level 100).
	RealmMessageContentDeleteLimitSeconds NullableInt32 `json:"realm_message_content_delete_limit_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Dictionary of authentication method keys mapped to dictionaries that describe the properties of the named authentication method for the organization - its enabled status and availability for use by the organization.  Clients should use this to implement server-settings UI to change which methods are enabled for the organization. For authentication UI itself, clients should use the pre-authentication metadata returned by [`GET /server_settings`](/api/get-server-settings).  **Changes**: In Zulip 9.0 (feature level 241), the values in this dictionary were changed. Previously, the values were a simple boolean indicating whether the backend is enabled or not.
	RealmAuthenticationMethods *map[string]RealmAuthenticationMethod `json:"realm_authentication_methods,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this organization's [message edit policy][config-message-editing] allows editing the content of messages.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  [config-message-editing]: /help/restrict-message-editing-and-deletion
	RealmAllowMessageEditing *bool `json:"realm_allow_message_editing,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Messages sent more than this many seconds ago cannot be edited with this organization's [message edit policy](/help/restrict-message-editing-and-deletion).  Will not be `0`. A `null` value means no limit, so messages can be edited regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: Before Zulip 6.0 (feature level 138), no limit was represented using the special value `0`.
	RealmMessageContentEditLimitSeconds NullableInt32 `json:"realm_message_content_edit_limit_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Messages sent more than this many seconds ago cannot be moved within a channel to another topic by users who have permission to do so based on this organization's [topic edit policy](/help/restrict-moving-messages). This setting does not affect moderators and administrators.  Will not be `0`. A `null` value means no limit, so message topics can be edited regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: New in Zulip 7.0 (feature level 162). Previously, this time limit was always 72 hours for users who were not administrators or moderators.
	RealmMoveMessagesWithinStreamLimitSeconds NullableInt32 `json:"realm_move_messages_within_stream_limit_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Messages sent more than this many seconds ago cannot be moved between channels by users who have permission to do so based on this organization's [message move policy](/help/restrict-moving-messages). This setting does not affect moderators and administrators.  Will not be `0`. A `null` value means no limit, so messages can be moved regardless of how long ago they were sent.  See [`PATCH /messages/{message_id}`](/api/update-message) for details and history of how message editing permissions work.  **Changes**: New in Zulip 7.0 (feature level 162). Previously, there was no time limit for moving messages between channels for users with permission to do so.
	RealmMoveMessagesBetweenStreamsLimitSeconds NullableInt32 `json:"realm_move_messages_between_streams_limit_seconds,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether read receipts is enabled in the organization or not.  If disabled, read receipt data will be unavailable to clients, regardless of individual users' personal read receipt settings. See also the `send_read_receipts` setting within `realm_user_settings_defaults`.  **Changes**: New in Zulip 6.0 (feature level 137).
	RealmEnableReadReceipts *bool `json:"realm_enable_read_receipts,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL of the organization's [profile icon](/help/create-your-organization-profile).
	RealmIconUrl *string `json:"realm_icon_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  String indicating whether the organization's [profile icon](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's icon.  - \"G\" means generated by Gravatar (the default). - \"U\" means uploaded by an organization administrator.
	RealmIconSource *string `json:"realm_icon_source,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum file size allowed for the organization's icon. Useful for UI allowing editing the organization's icon.  **Changes**: New in Zulip 5.0 (feature level 72). Previously, this was called `max_icon_file_size`.
	MaxIconFileSizeMib *int32 `json:"max_icon_file_size_mib,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL of the organization's wide logo configured in the [organization profile](/help/create-your-organization-profile).
	RealmLogoUrl *string `json:"realm_logo_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  String indicating whether the organization's [profile wide logo](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's wide logo.  - \"D\" means the logo is the default Zulip logo. - \"U\" means uploaded by an organization administrator.
	RealmLogoSource *string `json:"realm_logo_source,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL of the organization's dark theme wide-format logo configured in the [organization profile](/help/create-your-organization-profile).
	RealmNightLogoUrl *string `json:"realm_night_logo_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  String indicating whether the organization's dark theme [profile wide logo](/help/create-your-organization-profile) was uploaded by a user or is the default. Useful for UI allowing editing the organization's wide logo.  - \"D\" means the logo is the default Zulip logo. - \"U\" means uploaded by an organization administrator.
	RealmNightLogoSource *string `json:"realm_night_logo_source,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum file size allowed for the uploaded organization logos.  **Changes**: New in Zulip 5.0 (feature level 72). Previously, this was called `max_logo_file_size`.
	MaxLogoFileSizeMib *int32 `json:"max_logo_file_size_mib,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The fake email domain that will be used for new bots created this organization. Useful for UI for creating bots.
	RealmBotDomain *string `json:"realm_bot_domain,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL for the organization. Alias of `realm_url`.  **Changes**: Deprecated in Zulip 9.0 (feature level 257). The term \"URI\" is deprecated in [web standards](https://url.spec.whatwg.org/#goals).
	// Deprecated
	RealmUri *string `json:"realm_uri,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL for the organization.  **Changes**: New in Zulip 9.0 (feature level 257), replacing the deprecated `realm_uri`.
	RealmUrl *string `json:"realm_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Dictionary where each entry describes a supported [video call provider](/help/configure-call-provider) that is configured on this server and could be selected by an organization administrator.  Useful for administrative settings UI that allows changing the realm setting `video_chat_provider`.
	RealmAvailableVideoChatProviders *map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue `json:"realm_available_video_chat_providers,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether online presence of other users is shown in this organization.
	RealmPresenceDisabled *bool `json:"realm_presence_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this Zulip server is configured to allow organizations to enable [digest emails](/help/digest-emails).  Relevant for administrative settings UI that can change the digest email settings.
	SettingsSendDigestEmails *bool `json:"settings_send_digest_emails,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization is a Zephyr mirror realm.
	RealmIsZephyrMirrorRealm *bool `json:"realm_is_zephyr_mirror_realm,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization has enabled Zulip's default email and password authentication feature. Determines whether Zulip stores a password for the user and clients should offer any UI for changing the user's Zulip password.
	RealmEmailAuthEnabled *bool `json:"realm_email_auth_enabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization allows any sort of password-based authentication (whether via EmailAuthBackend or LDAP passwords).  Determines whether a client might ever need to display a password prompt (clients will primarily look at this attribute in [server_settings](/api/get-server-settings) before presenting a login page).
	RealmPasswordAuthEnabled *bool `json:"realm_password_auth_enabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether push notifications are enabled for this organization. Typically `true` for Zulip Cloud and self-hosted realms that have a valid registration for the [Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html), and `false` for self-hosted servers that do not.  **Changes**: Before Zulip 8.0 (feature level 231), this incorrectly was `true` for servers that were partly configured to use the Mobile Push Notifications Service but not properly registered.
	RealmPushNotificationsEnabled *bool `json:"realm_push_notifications_enabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  If the server expects the realm's push notifications access to end at a definite time in the future, the UNIX timestamp (UTC) at which this is expected to happen. Mobile clients should use this field to display warnings to users when the indicated timestamp is near.  **Changes**: New in Zulip 8.0 (feature level 231).
	RealmPushNotificationsEnabledEndTimestamp NullableInt32 `json:"realm_push_notifications_enabled_end_timestamp,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The total quota for uploaded files in this organization.  Clients are not responsible for checking this quota; it is included in the API only for display purposes.  If `null`, there is no limit.  **Changes**: Before Zulip 9.0 (feature level 251), this field was incorrectly measured in bytes, not MiB.  New in Zulip 5.0 (feature level 72). Previously, this was called `realm_upload_quota`.
	RealmUploadQuotaMib NullableInt32 `json:"realm_upload_quota_mib,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The [organization type](/help/organization-type) for the realm. Useful only to clients supporting changing this setting for the organization, or clients implementing onboarding content or other features that varies with organization type.  - 0 = Unspecified - 10 = Business - 20 = Open-source project - 30 = Education (non-profit) - 35 = Education (for-profit) - 40 = Research - 50 = Event or conference - 60 = Non-profit (registered) - 70 = Government - 80 = Political group - 90 = Community - 100 = Personal - 1000 = Other  **Changes**: New in Zulip 6.0 (feature level 128).
	RealmOrgType *int32 `json:"realm_org_type,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The plan type of the organization.  - 1 = Self-hosted organization (SELF_HOSTED) - 2 = Zulip Cloud free plan (LIMITED) - 3 = Zulip Cloud Standard plan (STANDARD) - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
	RealmPlanType *int32 `json:"realm_plan_type,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether clients should show a warning when a user is composing a DM to a guest user in this organization.  **Changes**: New in Zulip 10.0 (feature level 348).
	RealmEnableGuestUserDmWarning *bool `json:"realm_enable_guest_user_dm_warning,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether clients should display \"(guest)\" after the names of guest users to prominently highlight their status.  **Changes**: New in Zulip 8.0 (feature level 216).
	RealmEnableGuestUserIndicator *bool `json:"realm_enable_guest_user_indicator,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who are allowed to access all users in the organization.  **Changes**: Prior to Zulip 10.0 (feature level 314), this value used to be of type integer and did not accept anonymous user groups.  New in Zulip 8.0 (feature level 225).
	RealmCanAccessAllUsersGroup *GroupSettingValue `json:"realm_can_access_all_users_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A [group-setting value](/api/group-setting-values) defining the set of users who are allowed to use AI summarization.  **Changes**: New in Zulip 10.0 (feature level 350).
	RealmCanSummarizeTopicsGroup *GroupSettingValue `json:"realm_can_summarize_topics_group,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the organization is using a limited (Zulip Cloud Free) plan.
	ZulipPlanIsNotLimited *bool `json:"zulip_plan_is_not_limited,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Text to use when displaying UI for wide organization logos, a feature that is currently not available on the Zulip Cloud Free plan.  Useful only for clients supporting administrative UI for uploading a new wide organization logo to brand the organization.
	UpgradeTextForWideOrganizationLogo *string `json:"upgrade_text_for_wide_organization_logo,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Dictionary where each entry describes a default external account type that can be configured with Zulip's [custom profile fields feature](/help/custom-profile-fields).  **Changes**: New in Zulip 2.1.0.
	RealmDefaultExternalAccounts *map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue `json:"realm_default_external_accounts,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The base URL to be used to create Jitsi video calls. Equals `realm_jitsi_server_url || server_jitsi_server_url`.  **Changes**: Deprecated in Zulip 8.0 (feature level 212) and will eventually be removed. Previously, the Jitsi server to use was not configurable on a per-realm basis, and this field contained the server's configured Jitsi server. (Which is now provided as `server_jitsi_server_url`). Clients supporting older versions should fall back to this field when creating calls: using `realm_jitsi_server_url || server_jitsi_server_url` with newer servers and using `jitsi_server_url` with servers below feature level 212.
	// Deprecated
	JitsiServerUrl *string `json:"jitsi_server_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether this Zulip server is a development environment. Used to control certain features or UI (such as error popups) that should only apply when connected to a Zulip development environment.
	DevelopmentEnvironment *bool `json:"development_environment,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A timestamp indicating when the process hosting this event queue was started. Clients will likely only find this value useful for inclusion in detailed error reports.
	ServerGeneration *int32 `json:"server_generation,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  This Zulip server's configured minimum required length for passwords. Necessary for password change UI to show whether the password will be accepted.
	PasswordMinLength *int32 `json:"password_min_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  This Zulip server's configured maximum length for passwords. Necessary for password change UI to show whether the password will be accepted.  **Changes**: New in Zulip 10.0 (feature level 338).
	PasswordMaxLength *int32 `json:"password_max_length,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  This Zulip server's configured minimum `zxcvbn` minimum guesses. Necessary for password change UI to show whether the password will be accepted.
	PasswordMinGuesses *int32 `json:"password_min_guesses,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Dictionary where each entry describes a valid rating that is configured on this server and could be selected by an organization administrator.  Useful for administrative settings UI that allows changing the allowed rating of GIFs.
	GiphyRatingOptions *map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue `json:"giphy_rating_options,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum file size that can be uploaded to this Zulip organization.
	MaxFileUploadSizeMib *int32 `json:"max_file_upload_size_mib,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The maximum avatar size that can be uploaded to this Zulip server.
	MaxAvatarFileSizeMib *int32 `json:"max_avatar_file_size_mib,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the server is configured with support for inline image previews. Clients containing administrative UI for changing `realm_inline_image_preview` should consult this field before offering that feature.
	ServerInlineImagePreview *bool `json:"server_inline_image_preview,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the server is configured with support for inline URL previews. Clients containing administrative UI for changing `realm_inline_url_embed_preview` should consult this field before offering that feature.
	ServerInlineUrlEmbedPreview *bool `json:"server_inline_url_embed_preview,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  A list describing the image formats that uploaded images will be thumbnailed into. Any image with a source starting with `/user_uploads/thumbnail/` can have its last path component replaced with any of the names contained in this list, to obtain the desired thumbnail size.  **Changes**: New in Zulip 9.0 (feature level 273).
	ServerThumbnailFormats []RegisterQueue200ResponseAllOfServerThumbnailFormatsInner `json:"server_thumbnail_formats,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the server allows avatar changes. Similar to `realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED` Zulip server level setting.
	ServerAvatarChangesDisabled *bool `json:"server_avatar_changes_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the server allows name changes. Similar to `realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED` Zulip server level setting.
	ServerNameChangesDisabled *bool `json:"server_name_changes_disabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Whether the server is running an old version based on the Zulip [server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag), such that the web app will display to the current user a prominent warning.  **Changes**: New in Zulip 5.0 (feature level 74).
	ServerNeedsUpgrade *bool `json:"server_needs_upgrade,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The value of the `WEB_PUBLIC_STREAMS_ENABLED` Zulip server level setting. A server that has disabled this setting intends to not offer [web public channels](/help/public-access-option) to realms it hosts. (Zulip Cloud defaults to `true`; self-hosted servers default to `false`).  Clients should use this to determine whether to offer UI for the realm-level setting for enabling web-public channels (`realm_enable_spectator_access`).  **Changes**: New in Zulip 5.0 (feature level 110).
	ServerWebPublicStreamsEnabled *bool `json:"server_web_public_streams_enabled,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL to a JSON file that describes which emoji names map to which emoji codes, for all Unicode emoji this Zulip server accepts.  The data at the given URL is a JSON object with one property, `code_to_names`. The value of that property is a JSON object where each key is an [emoji code](/api/add-reaction#parameter-emoji_code) for an available Unicode emoji, and each value is the corresponding [emoji names](/api/add-reaction#parameter-emoji_name) for this emoji, with the canonical name for the emoji always appearing first.  The HTTP response at that URL will have appropriate HTTP caching headers, such any HTTP implementation should get a cached version if emoji haven't changed since the last request.  **Changes**: New in Zulip 6.0 (feature level 140).
	ServerEmojiDataUrl *string `json:"server_emoji_data_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The URL of the Jitsi server that the Zulip server is configured to use by default; the organization-level setting `realm_jitsi_server_url` takes precedence over this setting when both are set.  **Changes**: New in Zulip 8.0 (feature level 212). Previously, this value was available as the now-deprecated `jitsi_server_url`.
	ServerJitsiServerUrl NullableString `json:"server_jitsi_server_url,omitempty"`
	// Present if `realm` is present in `fetch_event_types`  Whether topic summarization is enabled in the server or not depending upon whether `TOPIC_SUMMARIZATION_MODEL` is set or not.  **Changes**: New in Zulip 10.0 (feature level 350).
	ServerCanSummarizeTopics *bool `json:"server_can_summarize_topics,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Recommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls. This is guaranteed to be somewhat greater than the heartbeat frequency. It is important that clients respect this parameter, so that increases in the heartbeat frequency do not break clients.  **Changes**: New in Zulip 5.0 (feature level 74). Previously, this was hardcoded to 90 seconds, and clients should use that as a fallback value when interacting with servers where this field is not present.
	EventQueueLongpollTimeoutSeconds *int32                                     `json:"event_queue_longpoll_timeout_seconds,omitempty"`
	RealmBilling                     *RegisterQueue200ResponseAllOfRealmBilling `json:"realm_billing,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The ID of the private channel to which messages flagged by users for moderation are sent. Moderators can use this channel to review and act on reported content.  Will be `-1` if moderation requests are disabled.  Clients should check whether moderation requests are disabled to determine whether to present a \"report message\" feature in their UI within a given organization.  **Changes**: New in Zulip 10.0 (feature level 331). Previously, no \"report message\" feature existed in Zulip.
	RealmModerationRequestChannelId *int32 `json:"realm_moderation_request_channel_id,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The ID of the channel to which automated messages announcing the [creation of new channels][new-channel-announce] are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  [new-channel-announce]: /help/configure-automated-notices#new-channel-announcements  **Changes**: In Zulip 9.0 (feature level 241), renamed 'realm_notifications_stream_id' to `realm_new_stream_announcements_stream_id`.
	RealmNewStreamAnnouncementsStreamId *int32 `json:"realm_new_stream_announcements_stream_id,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The ID of the channel to which automated messages announcing that [new users have joined the organization][new-user-announce] are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  [new-user-announce]: /help/configure-automated-notices#new-user-announcements  **Changes**: In Zulip 9.0 (feature level 241), renamed 'realm_signup_notifications_stream_id' to `realm_signup_announcements_stream_id`.
	RealmSignupAnnouncementsStreamId *int32 `json:"realm_signup_announcements_stream_id,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  The ID of the channel to which automated messages announcing new features or other end-user updates about the Zulip software are sent.  Will be `-1` if such automated messages are disabled.  Since these automated messages are sent by the server, this field is primarily relevant to clients containing UI for changing it.  **Changes**: New in Zulip 9.0 (feature level 242).
	RealmZulipUpdateAnnouncementsStreamId *int32 `json:"realm_zulip_update_announcements_stream_id,omitempty"`
	// Present if `realm` is present in `fetch_event_types`.  Clients declaring the `empty_topic_name` client capability should use the value of `realm_empty_topic_display_name` to determine how to display the empty string topic.  Clients not declaring the `empty_topic_name` client capability receive `realm_empty_topic_display_name` value as the topic name replacing empty string.  **Changes**: New in Zulip 10.0 (feature level 334). Previously, the empty string was not a valid topic name.
	RealmEmptyTopicDisplayName *string                                                 `json:"realm_empty_topic_display_name,omitempty"`
	RealmUserSettingsDefaults  *RegisterQueue200ResponseAllOfRealmUserSettingsDefaults `json:"realm_user_settings_defaults,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  A array of dictionaries where each entry describes a user whose account has not been deactivated. Note that unlike the usual User dictionary, this does not contain the `is_active` key, as all the users present in this array have active accounts.  If the current user is a guest whose access to users is limited by a `can_access_all_users_group` policy, and the event queue was registered with the `user_list_incomplete` client capability, then users that the current user cannot access will not be included in this array. If the current user's access to a user is restricted but the client lacks this capability, then that inaccessible user will appear in the users array as an \"Unknown user\" object with the usual format but placeholder data whose only variable content is the user ID.  See also `cross_realm_bots` and `realm_non_active_users`.  **Changes**: Before Zulip 8.0 (feature level 232), the `user_list_incomplete` client capability did not exist, and so all clients whose access to a new user was prevented by `can_access_all_users_group` policy would receive a fake \"Unknown user\" event for such users.
	RealmUsers []User `json:"realm_users,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  A array of dictionaries where each entry describes a user whose account has been deactivated. Note that unlike the usual User dictionary this does not contain the `is_active` key as all the users present in this array have deactivated accounts.
	RealmNonActiveUsers []User `json:"realm_non_active_users,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The avatar data source type for the current user.  Value values are `G` (gravatar) and `U` (uploaded by user).
	AvatarSource *string `json:"avatar_source,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The avatar URL for the current user at 500x500 resolution, appropriate for use in settings UI showing the user's avatar.
	AvatarUrlMedium *string `json:"avatar_url_medium,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The URL of the avatar for the current user at 100x100 resolution. See also `avatar_url_medium`.
	AvatarUrl *string `json:"avatar_url,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is allowed to create at least one type of channel with the organization's [channel creation policy](/help/configure-who-can-create-channels). Its value will always equal `can_create_public_streams || can_create_private_streams`.  **Changes**: Deprecated in Zulip 5.0 (feature level 102), when the new `create_private_stream_policy` and `create_public_stream_policy` properties introduced the possibility that a user could only create one type of channel.  This field will be removed in a future release.
	// Deprecated
	CanCreateStreams *bool `json:"can_create_streams,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is allowed to create public channels with the organization's [channel creation policy](/help/configure-who-can-create-channels).  **Changes**: New in Zulip 5.0 (feature level 102). In older versions, the deprecated `can_create_streams` property should be used to determine whether the user can create public channels.
	CanCreatePublicStreams *bool `json:"can_create_public_streams,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is allowed to create private channels with the organization's [channel creation policy](/help/configure-who-can-create-channels).  **Changes**: New in Zulip 5.0 (feature level 102). In older versions, the deprecated `can_create_streams` property should be used to determine whether the user can create private channels.
	CanCreatePrivateStreams *bool `json:"can_create_private_streams,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is allowed to create public channels with the organization's [channel creation policy](/help/configure-who-can-create-channels).  Note that this will be false if the Zulip server does not have the `WEB_PUBLIC_STREAMS_ENABLED` setting enabled or if the organization has not enabled the `enable_spectator_access` realm setting.  **Changes**: New in Zulip 5.0 (feature level 103).
	CanCreateWebPublicStreams *bool `json:"can_create_web_public_streams,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is allowed to subscribe other users to channels with the organization's [channels policy](/help/configure-who-can-invite-to-channels).
	CanSubscribeOtherUsers *bool `json:"can_subscribe_other_users,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user [is allowed to invite others][who-can-send-invitations] to the organization.  **Changes**: New in Zulip 4.0 (feature level 51).  [who-can-send-invitations]: /help/restrict-account-creation#change-who-can-send-invitations
	CanInviteOthersToRealm *bool `json:"can_invite_others_to_realm,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is at least an [organization administrator](/api/roles-and-permissions).
	IsAdmin *bool `json:"is_admin,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is an [organization owner](/api/roles-and-permissions).  **Changes**: New in Zulip 3.0 (feature level 11).
	IsOwner *bool `json:"is_owner,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is at least an [organization moderator](/api/roles-and-permissions).  **Changes**: Prior to Zulip 11.0 (feature level 380), this was only true for users whose role was exactly the moderator role.  New in Zulip 4.0 (feature level 60).
	IsModerator *bool `json:"is_moderator,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Whether the current user is a [guest user](/api/roles-and-permissions).
	IsGuest *bool `json:"is_guest,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The unique ID for the current user.
	UserId *int32 `json:"user_id,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The Zulip API email address for the current user. See also `delivery_email`; these may be the same or different depending on the user's `email_address_visibility` policy.
	Email *string `json:"email,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The user's email address, appropriate for UI for changing the user's email address. See also `email`.
	DeliveryEmail *string `json:"delivery_email,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  The full name of the current user.
	FullName *string `json:"full_name,omitempty"`
	// Present if `realm_user` is present in `fetch_event_types`.  Array of dictionaries where each dictionary contains details of a single cross realm bot. Cross-realm bots are special system bot accounts like Notification Bot.  Most clients will want to combine this with `realm_users` in many contexts.
	CrossRealmBots                    []RegisterQueue200ResponseAllOfCrossRealmBotsInner              `json:"cross_realm_bots,omitempty"`
	ServerSupportedPermissionSettings *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings `json:"server_supported_permission_settings,omitempty"`
	// Maximum number of new subscribers for which the server will respect the `send_new_subscription_messages` parameter when [adding subscribers to a channel](/api/subscribe#parameter-send_new_subscription_messages).  **Changes**: New in Zulip 11.0 (feature level 397).
	MaxBulkNewSubscriptionMessages *float32 `json:"max_bulk_new_subscription_messages,omitempty"`
}

type _RegisterQueue200Response RegisterQueue200Response

// NewRegisterQueue200Response instantiates a new RegisterQueue200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterQueue200Response(result string, msg string) *RegisterQueue200Response {
	this := RegisterQueue200Response{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewRegisterQueue200ResponseWithDefaults instantiates a new RegisterQueue200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterQueue200ResponseWithDefaults() *RegisterQueue200Response {
	this := RegisterQueue200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *RegisterQueue200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *RegisterQueue200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *RegisterQueue200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *RegisterQueue200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *RegisterQueue200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetQueueId returns the QueueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetQueueId() string {
	if o == nil || IsNil(o.QueueId.Get()) {
		var ret string
		return ret
	}
	return *o.QueueId.Get()
}

// GetQueueIdOk returns a tuple with the QueueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetQueueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueueId.Get(), o.QueueId.IsSet()
}

// HasQueueId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasQueueId() bool {
	if o != nil && o.QueueId.IsSet() {
		return true
	}

	return false
}

// SetQueueId gets a reference to the given NullableString and assigns it to the QueueId field.
func (o *RegisterQueue200Response) SetQueueId(v string) {
	o.QueueId.Set(&v)
}

// SetQueueIdNil sets the value for QueueId to be an explicit nil
func (o *RegisterQueue200Response) SetQueueIdNil() {
	o.QueueId.Set(nil)
}

// UnsetQueueId ensures that no value is present for QueueId, not even an explicit nil
func (o *RegisterQueue200Response) UnsetQueueId() {
	o.QueueId.Unset()
}

// GetLastEventId returns the LastEventId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetLastEventId() int32 {
	if o == nil || IsNil(o.LastEventId) {
		var ret int32
		return ret
	}
	return *o.LastEventId
}

// GetLastEventIdOk returns a tuple with the LastEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetLastEventIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastEventId) {
		return nil, false
	}
	return o.LastEventId, true
}

// HasLastEventId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasLastEventId() bool {
	if o != nil && !IsNil(o.LastEventId) {
		return true
	}

	return false
}

// SetLastEventId gets a reference to the given int32 and assigns it to the LastEventId field.
func (o *RegisterQueue200Response) SetLastEventId(v int32) {
	o.LastEventId = &v
}

// GetZulipFeatureLevel returns the ZulipFeatureLevel field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetZulipFeatureLevel() int32 {
	if o == nil || IsNil(o.ZulipFeatureLevel) {
		var ret int32
		return ret
	}
	return *o.ZulipFeatureLevel
}

// GetZulipFeatureLevelOk returns a tuple with the ZulipFeatureLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetZulipFeatureLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.ZulipFeatureLevel) {
		return nil, false
	}
	return o.ZulipFeatureLevel, true
}

// HasZulipFeatureLevel returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasZulipFeatureLevel() bool {
	if o != nil && !IsNil(o.ZulipFeatureLevel) {
		return true
	}

	return false
}

// SetZulipFeatureLevel gets a reference to the given int32 and assigns it to the ZulipFeatureLevel field.
func (o *RegisterQueue200Response) SetZulipFeatureLevel(v int32) {
	o.ZulipFeatureLevel = &v
}

// GetZulipVersion returns the ZulipVersion field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetZulipVersion() string {
	if o == nil || IsNil(o.ZulipVersion) {
		var ret string
		return ret
	}
	return *o.ZulipVersion
}

// GetZulipVersionOk returns a tuple with the ZulipVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetZulipVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ZulipVersion) {
		return nil, false
	}
	return o.ZulipVersion, true
}

// HasZulipVersion returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasZulipVersion() bool {
	if o != nil && !IsNil(o.ZulipVersion) {
		return true
	}

	return false
}

// SetZulipVersion gets a reference to the given string and assigns it to the ZulipVersion field.
func (o *RegisterQueue200Response) SetZulipVersion(v string) {
	o.ZulipVersion = &v
}

// GetZulipMergeBase returns the ZulipMergeBase field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetZulipMergeBase() string {
	if o == nil || IsNil(o.ZulipMergeBase) {
		var ret string
		return ret
	}
	return *o.ZulipMergeBase
}

// GetZulipMergeBaseOk returns a tuple with the ZulipMergeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetZulipMergeBaseOk() (*string, bool) {
	if o == nil || IsNil(o.ZulipMergeBase) {
		return nil, false
	}
	return o.ZulipMergeBase, true
}

// HasZulipMergeBase returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasZulipMergeBase() bool {
	if o != nil && !IsNil(o.ZulipMergeBase) {
		return true
	}

	return false
}

// SetZulipMergeBase gets a reference to the given string and assigns it to the ZulipMergeBase field.
func (o *RegisterQueue200Response) SetZulipMergeBase(v string) {
	o.ZulipMergeBase = &v
}

// GetAlertWords returns the AlertWords field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetAlertWords() []string {
	if o == nil || IsNil(o.AlertWords) {
		var ret []string
		return ret
	}
	return o.AlertWords
}

// GetAlertWordsOk returns a tuple with the AlertWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetAlertWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlertWords) {
		return nil, false
	}
	return o.AlertWords, true
}

// HasAlertWords returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasAlertWords() bool {
	if o != nil && !IsNil(o.AlertWords) {
		return true
	}

	return false
}

// SetAlertWords gets a reference to the given []string and assigns it to the AlertWords field.
func (o *RegisterQueue200Response) SetAlertWords(v []string) {
	o.AlertWords = v
}

// GetCustomProfileFields returns the CustomProfileFields field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCustomProfileFields() []CustomProfileField {
	if o == nil || IsNil(o.CustomProfileFields) {
		var ret []CustomProfileField
		return ret
	}
	return o.CustomProfileFields
}

// GetCustomProfileFieldsOk returns a tuple with the CustomProfileFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCustomProfileFieldsOk() ([]CustomProfileField, bool) {
	if o == nil || IsNil(o.CustomProfileFields) {
		return nil, false
	}
	return o.CustomProfileFields, true
}

// HasCustomProfileFields returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCustomProfileFields() bool {
	if o != nil && !IsNil(o.CustomProfileFields) {
		return true
	}

	return false
}

// SetCustomProfileFields gets a reference to the given []CustomProfileField and assigns it to the CustomProfileFields field.
func (o *RegisterQueue200Response) SetCustomProfileFields(v []CustomProfileField) {
	o.CustomProfileFields = v
}

// GetCustomProfileFieldTypes returns the CustomProfileFieldTypes field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCustomProfileFieldTypes() map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue {
	if o == nil || IsNil(o.CustomProfileFieldTypes) {
		var ret map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue
		return ret
	}
	return *o.CustomProfileFieldTypes
}

// GetCustomProfileFieldTypesOk returns a tuple with the CustomProfileFieldTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCustomProfileFieldTypesOk() (*map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue, bool) {
	if o == nil || IsNil(o.CustomProfileFieldTypes) {
		return nil, false
	}
	return o.CustomProfileFieldTypes, true
}

// HasCustomProfileFieldTypes returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCustomProfileFieldTypes() bool {
	if o != nil && !IsNil(o.CustomProfileFieldTypes) {
		return true
	}

	return false
}

// SetCustomProfileFieldTypes gets a reference to the given map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue and assigns it to the CustomProfileFieldTypes field.
func (o *RegisterQueue200Response) SetCustomProfileFieldTypes(v map[string]RegisterQueue200ResponseAllOfCustomProfileFieldTypesValue) {
	o.CustomProfileFieldTypes = &v
}

// GetRealmDateCreated returns the RealmDateCreated field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDateCreated() int32 {
	if o == nil || IsNil(o.RealmDateCreated) {
		var ret int32
		return ret
	}
	return *o.RealmDateCreated
}

// GetRealmDateCreatedOk returns a tuple with the RealmDateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDateCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmDateCreated) {
		return nil, false
	}
	return o.RealmDateCreated, true
}

// HasRealmDateCreated returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDateCreated() bool {
	if o != nil && !IsNil(o.RealmDateCreated) {
		return true
	}

	return false
}

// SetRealmDateCreated gets a reference to the given int32 and assigns it to the RealmDateCreated field.
func (o *RegisterQueue200Response) SetRealmDateCreated(v int32) {
	o.RealmDateCreated = &v
}

// GetDemoOrganizationScheduledDeletionDate returns the DemoOrganizationScheduledDeletionDate field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetDemoOrganizationScheduledDeletionDate() int32 {
	if o == nil || IsNil(o.DemoOrganizationScheduledDeletionDate) {
		var ret int32
		return ret
	}
	return *o.DemoOrganizationScheduledDeletionDate
}

// GetDemoOrganizationScheduledDeletionDateOk returns a tuple with the DemoOrganizationScheduledDeletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetDemoOrganizationScheduledDeletionDateOk() (*int32, bool) {
	if o == nil || IsNil(o.DemoOrganizationScheduledDeletionDate) {
		return nil, false
	}
	return o.DemoOrganizationScheduledDeletionDate, true
}

// HasDemoOrganizationScheduledDeletionDate returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDemoOrganizationScheduledDeletionDate() bool {
	if o != nil && !IsNil(o.DemoOrganizationScheduledDeletionDate) {
		return true
	}

	return false
}

// SetDemoOrganizationScheduledDeletionDate gets a reference to the given int32 and assigns it to the DemoOrganizationScheduledDeletionDate field.
func (o *RegisterQueue200Response) SetDemoOrganizationScheduledDeletionDate(v int32) {
	o.DemoOrganizationScheduledDeletionDate = &v
}

// GetDrafts returns the Drafts field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetDrafts() []Draft {
	if o == nil || IsNil(o.Drafts) {
		var ret []Draft
		return ret
	}
	return o.Drafts
}

// GetDraftsOk returns a tuple with the Drafts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetDraftsOk() ([]Draft, bool) {
	if o == nil || IsNil(o.Drafts) {
		return nil, false
	}
	return o.Drafts, true
}

// HasDrafts returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDrafts() bool {
	if o != nil && !IsNil(o.Drafts) {
		return true
	}

	return false
}

// SetDrafts gets a reference to the given []Draft and assigns it to the Drafts field.
func (o *RegisterQueue200Response) SetDrafts(v []Draft) {
	o.Drafts = v
}

// GetOnboardingSteps returns the OnboardingSteps field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetOnboardingSteps() []OnboardingStep {
	if o == nil || IsNil(o.OnboardingSteps) {
		var ret []OnboardingStep
		return ret
	}
	return o.OnboardingSteps
}

// GetOnboardingStepsOk returns a tuple with the OnboardingSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetOnboardingStepsOk() ([]OnboardingStep, bool) {
	if o == nil || IsNil(o.OnboardingSteps) {
		return nil, false
	}
	return o.OnboardingSteps, true
}

// HasOnboardingSteps returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasOnboardingSteps() bool {
	if o != nil && !IsNil(o.OnboardingSteps) {
		return true
	}

	return false
}

// SetOnboardingSteps gets a reference to the given []OnboardingStep and assigns it to the OnboardingSteps field.
func (o *RegisterQueue200Response) SetOnboardingSteps(v []OnboardingStep) {
	o.OnboardingSteps = v
}

// GetNavigationTourVideoUrl returns the NavigationTourVideoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetNavigationTourVideoUrl() string {
	if o == nil || IsNil(o.NavigationTourVideoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.NavigationTourVideoUrl.Get()
}

// GetNavigationTourVideoUrlOk returns a tuple with the NavigationTourVideoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetNavigationTourVideoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NavigationTourVideoUrl.Get(), o.NavigationTourVideoUrl.IsSet()
}

// HasNavigationTourVideoUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasNavigationTourVideoUrl() bool {
	if o != nil && o.NavigationTourVideoUrl.IsSet() {
		return true
	}

	return false
}

// SetNavigationTourVideoUrl gets a reference to the given NullableString and assigns it to the NavigationTourVideoUrl field.
func (o *RegisterQueue200Response) SetNavigationTourVideoUrl(v string) {
	o.NavigationTourVideoUrl.Set(&v)
}

// SetNavigationTourVideoUrlNil sets the value for NavigationTourVideoUrl to be an explicit nil
func (o *RegisterQueue200Response) SetNavigationTourVideoUrlNil() {
	o.NavigationTourVideoUrl.Set(nil)
}

// UnsetNavigationTourVideoUrl ensures that no value is present for NavigationTourVideoUrl, not even an explicit nil
func (o *RegisterQueue200Response) UnsetNavigationTourVideoUrl() {
	o.NavigationTourVideoUrl.Unset()
}

// GetMaxMessageId returns the MaxMessageId field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetMaxMessageId() int32 {
	if o == nil || IsNil(o.MaxMessageId) {
		var ret int32
		return ret
	}
	return *o.MaxMessageId
}

// GetMaxMessageIdOk returns a tuple with the MaxMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetMaxMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMessageId) {
		return nil, false
	}
	return o.MaxMessageId, true
}

// HasMaxMessageId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxMessageId() bool {
	if o != nil && !IsNil(o.MaxMessageId) {
		return true
	}

	return false
}

// SetMaxMessageId gets a reference to the given int32 and assigns it to the MaxMessageId field.
// Deprecated
func (o *RegisterQueue200Response) SetMaxMessageId(v int32) {
	o.MaxMessageId = &v
}

// GetMaxReminderNoteLength returns the MaxReminderNoteLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxReminderNoteLength() int32 {
	if o == nil || IsNil(o.MaxReminderNoteLength) {
		var ret int32
		return ret
	}
	return *o.MaxReminderNoteLength
}

// GetMaxReminderNoteLengthOk returns a tuple with the MaxReminderNoteLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxReminderNoteLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxReminderNoteLength) {
		return nil, false
	}
	return o.MaxReminderNoteLength, true
}

// HasMaxReminderNoteLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxReminderNoteLength() bool {
	if o != nil && !IsNil(o.MaxReminderNoteLength) {
		return true
	}

	return false
}

// SetMaxReminderNoteLength gets a reference to the given int32 and assigns it to the MaxReminderNoteLength field.
func (o *RegisterQueue200Response) SetMaxReminderNoteLength(v int32) {
	o.MaxReminderNoteLength = &v
}

// GetMaxStreamNameLength returns the MaxStreamNameLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxStreamNameLength() int32 {
	if o == nil || IsNil(o.MaxStreamNameLength) {
		var ret int32
		return ret
	}
	return *o.MaxStreamNameLength
}

// GetMaxStreamNameLengthOk returns a tuple with the MaxStreamNameLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxStreamNameLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStreamNameLength) {
		return nil, false
	}
	return o.MaxStreamNameLength, true
}

// HasMaxStreamNameLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxStreamNameLength() bool {
	if o != nil && !IsNil(o.MaxStreamNameLength) {
		return true
	}

	return false
}

// SetMaxStreamNameLength gets a reference to the given int32 and assigns it to the MaxStreamNameLength field.
func (o *RegisterQueue200Response) SetMaxStreamNameLength(v int32) {
	o.MaxStreamNameLength = &v
}

// GetMaxStreamDescriptionLength returns the MaxStreamDescriptionLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxStreamDescriptionLength() int32 {
	if o == nil || IsNil(o.MaxStreamDescriptionLength) {
		var ret int32
		return ret
	}
	return *o.MaxStreamDescriptionLength
}

// GetMaxStreamDescriptionLengthOk returns a tuple with the MaxStreamDescriptionLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxStreamDescriptionLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStreamDescriptionLength) {
		return nil, false
	}
	return o.MaxStreamDescriptionLength, true
}

// HasMaxStreamDescriptionLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxStreamDescriptionLength() bool {
	if o != nil && !IsNil(o.MaxStreamDescriptionLength) {
		return true
	}

	return false
}

// SetMaxStreamDescriptionLength gets a reference to the given int32 and assigns it to the MaxStreamDescriptionLength field.
func (o *RegisterQueue200Response) SetMaxStreamDescriptionLength(v int32) {
	o.MaxStreamDescriptionLength = &v
}

// GetMaxChannelFolderNameLength returns the MaxChannelFolderNameLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxChannelFolderNameLength() int32 {
	if o == nil || IsNil(o.MaxChannelFolderNameLength) {
		var ret int32
		return ret
	}
	return *o.MaxChannelFolderNameLength
}

// GetMaxChannelFolderNameLengthOk returns a tuple with the MaxChannelFolderNameLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxChannelFolderNameLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxChannelFolderNameLength) {
		return nil, false
	}
	return o.MaxChannelFolderNameLength, true
}

// HasMaxChannelFolderNameLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxChannelFolderNameLength() bool {
	if o != nil && !IsNil(o.MaxChannelFolderNameLength) {
		return true
	}

	return false
}

// SetMaxChannelFolderNameLength gets a reference to the given int32 and assigns it to the MaxChannelFolderNameLength field.
func (o *RegisterQueue200Response) SetMaxChannelFolderNameLength(v int32) {
	o.MaxChannelFolderNameLength = &v
}

// GetMaxChannelFolderDescriptionLength returns the MaxChannelFolderDescriptionLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxChannelFolderDescriptionLength() int32 {
	if o == nil || IsNil(o.MaxChannelFolderDescriptionLength) {
		var ret int32
		return ret
	}
	return *o.MaxChannelFolderDescriptionLength
}

// GetMaxChannelFolderDescriptionLengthOk returns a tuple with the MaxChannelFolderDescriptionLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxChannelFolderDescriptionLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxChannelFolderDescriptionLength) {
		return nil, false
	}
	return o.MaxChannelFolderDescriptionLength, true
}

// HasMaxChannelFolderDescriptionLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxChannelFolderDescriptionLength() bool {
	if o != nil && !IsNil(o.MaxChannelFolderDescriptionLength) {
		return true
	}

	return false
}

// SetMaxChannelFolderDescriptionLength gets a reference to the given int32 and assigns it to the MaxChannelFolderDescriptionLength field.
func (o *RegisterQueue200Response) SetMaxChannelFolderDescriptionLength(v int32) {
	o.MaxChannelFolderDescriptionLength = &v
}

// GetMaxTopicLength returns the MaxTopicLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxTopicLength() int32 {
	if o == nil || IsNil(o.MaxTopicLength) {
		var ret int32
		return ret
	}
	return *o.MaxTopicLength
}

// GetMaxTopicLengthOk returns a tuple with the MaxTopicLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxTopicLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTopicLength) {
		return nil, false
	}
	return o.MaxTopicLength, true
}

// HasMaxTopicLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxTopicLength() bool {
	if o != nil && !IsNil(o.MaxTopicLength) {
		return true
	}

	return false
}

// SetMaxTopicLength gets a reference to the given int32 and assigns it to the MaxTopicLength field.
func (o *RegisterQueue200Response) SetMaxTopicLength(v int32) {
	o.MaxTopicLength = &v
}

// GetMaxMessageLength returns the MaxMessageLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxMessageLength() int32 {
	if o == nil || IsNil(o.MaxMessageLength) {
		var ret int32
		return ret
	}
	return *o.MaxMessageLength
}

// GetMaxMessageLengthOk returns a tuple with the MaxMessageLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxMessageLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMessageLength) {
		return nil, false
	}
	return o.MaxMessageLength, true
}

// HasMaxMessageLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxMessageLength() bool {
	if o != nil && !IsNil(o.MaxMessageLength) {
		return true
	}

	return false
}

// SetMaxMessageLength gets a reference to the given int32 and assigns it to the MaxMessageLength field.
func (o *RegisterQueue200Response) SetMaxMessageLength(v int32) {
	o.MaxMessageLength = &v
}

// GetServerMinDeactivatedRealmDeletionDays returns the ServerMinDeactivatedRealmDeletionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetServerMinDeactivatedRealmDeletionDays() int32 {
	if o == nil || IsNil(o.ServerMinDeactivatedRealmDeletionDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ServerMinDeactivatedRealmDeletionDays.Get()
}

// GetServerMinDeactivatedRealmDeletionDaysOk returns a tuple with the ServerMinDeactivatedRealmDeletionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetServerMinDeactivatedRealmDeletionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerMinDeactivatedRealmDeletionDays.Get(), o.ServerMinDeactivatedRealmDeletionDays.IsSet()
}

// HasServerMinDeactivatedRealmDeletionDays returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerMinDeactivatedRealmDeletionDays() bool {
	if o != nil && o.ServerMinDeactivatedRealmDeletionDays.IsSet() {
		return true
	}

	return false
}

// SetServerMinDeactivatedRealmDeletionDays gets a reference to the given NullableInt32 and assigns it to the ServerMinDeactivatedRealmDeletionDays field.
func (o *RegisterQueue200Response) SetServerMinDeactivatedRealmDeletionDays(v int32) {
	o.ServerMinDeactivatedRealmDeletionDays.Set(&v)
}

// SetServerMinDeactivatedRealmDeletionDaysNil sets the value for ServerMinDeactivatedRealmDeletionDays to be an explicit nil
func (o *RegisterQueue200Response) SetServerMinDeactivatedRealmDeletionDaysNil() {
	o.ServerMinDeactivatedRealmDeletionDays.Set(nil)
}

// UnsetServerMinDeactivatedRealmDeletionDays ensures that no value is present for ServerMinDeactivatedRealmDeletionDays, not even an explicit nil
func (o *RegisterQueue200Response) UnsetServerMinDeactivatedRealmDeletionDays() {
	o.ServerMinDeactivatedRealmDeletionDays.Unset()
}

// GetServerMaxDeactivatedRealmDeletionDays returns the ServerMaxDeactivatedRealmDeletionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetServerMaxDeactivatedRealmDeletionDays() int32 {
	if o == nil || IsNil(o.ServerMaxDeactivatedRealmDeletionDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ServerMaxDeactivatedRealmDeletionDays.Get()
}

// GetServerMaxDeactivatedRealmDeletionDaysOk returns a tuple with the ServerMaxDeactivatedRealmDeletionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetServerMaxDeactivatedRealmDeletionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerMaxDeactivatedRealmDeletionDays.Get(), o.ServerMaxDeactivatedRealmDeletionDays.IsSet()
}

// HasServerMaxDeactivatedRealmDeletionDays returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerMaxDeactivatedRealmDeletionDays() bool {
	if o != nil && o.ServerMaxDeactivatedRealmDeletionDays.IsSet() {
		return true
	}

	return false
}

// SetServerMaxDeactivatedRealmDeletionDays gets a reference to the given NullableInt32 and assigns it to the ServerMaxDeactivatedRealmDeletionDays field.
func (o *RegisterQueue200Response) SetServerMaxDeactivatedRealmDeletionDays(v int32) {
	o.ServerMaxDeactivatedRealmDeletionDays.Set(&v)
}

// SetServerMaxDeactivatedRealmDeletionDaysNil sets the value for ServerMaxDeactivatedRealmDeletionDays to be an explicit nil
func (o *RegisterQueue200Response) SetServerMaxDeactivatedRealmDeletionDaysNil() {
	o.ServerMaxDeactivatedRealmDeletionDays.Set(nil)
}

// UnsetServerMaxDeactivatedRealmDeletionDays ensures that no value is present for ServerMaxDeactivatedRealmDeletionDays, not even an explicit nil
func (o *RegisterQueue200Response) UnsetServerMaxDeactivatedRealmDeletionDays() {
	o.ServerMaxDeactivatedRealmDeletionDays.Unset()
}

// GetServerPresencePingIntervalSeconds returns the ServerPresencePingIntervalSeconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerPresencePingIntervalSeconds() int32 {
	if o == nil || IsNil(o.ServerPresencePingIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.ServerPresencePingIntervalSeconds
}

// GetServerPresencePingIntervalSecondsOk returns a tuple with the ServerPresencePingIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerPresencePingIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerPresencePingIntervalSeconds) {
		return nil, false
	}
	return o.ServerPresencePingIntervalSeconds, true
}

// HasServerPresencePingIntervalSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerPresencePingIntervalSeconds() bool {
	if o != nil && !IsNil(o.ServerPresencePingIntervalSeconds) {
		return true
	}

	return false
}

// SetServerPresencePingIntervalSeconds gets a reference to the given int32 and assigns it to the ServerPresencePingIntervalSeconds field.
func (o *RegisterQueue200Response) SetServerPresencePingIntervalSeconds(v int32) {
	o.ServerPresencePingIntervalSeconds = &v
}

// GetServerPresenceOfflineThresholdSeconds returns the ServerPresenceOfflineThresholdSeconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerPresenceOfflineThresholdSeconds() int32 {
	if o == nil || IsNil(o.ServerPresenceOfflineThresholdSeconds) {
		var ret int32
		return ret
	}
	return *o.ServerPresenceOfflineThresholdSeconds
}

// GetServerPresenceOfflineThresholdSecondsOk returns a tuple with the ServerPresenceOfflineThresholdSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerPresenceOfflineThresholdSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerPresenceOfflineThresholdSeconds) {
		return nil, false
	}
	return o.ServerPresenceOfflineThresholdSeconds, true
}

// HasServerPresenceOfflineThresholdSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerPresenceOfflineThresholdSeconds() bool {
	if o != nil && !IsNil(o.ServerPresenceOfflineThresholdSeconds) {
		return true
	}

	return false
}

// SetServerPresenceOfflineThresholdSeconds gets a reference to the given int32 and assigns it to the ServerPresenceOfflineThresholdSeconds field.
func (o *RegisterQueue200Response) SetServerPresenceOfflineThresholdSeconds(v int32) {
	o.ServerPresenceOfflineThresholdSeconds = &v
}

// GetServerTypingStartedExpiryPeriodMilliseconds returns the ServerTypingStartedExpiryPeriodMilliseconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerTypingStartedExpiryPeriodMilliseconds() int32 {
	if o == nil || IsNil(o.ServerTypingStartedExpiryPeriodMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ServerTypingStartedExpiryPeriodMilliseconds
}

// GetServerTypingStartedExpiryPeriodMillisecondsOk returns a tuple with the ServerTypingStartedExpiryPeriodMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerTypingStartedExpiryPeriodMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypingStartedExpiryPeriodMilliseconds) {
		return nil, false
	}
	return o.ServerTypingStartedExpiryPeriodMilliseconds, true
}

// HasServerTypingStartedExpiryPeriodMilliseconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerTypingStartedExpiryPeriodMilliseconds() bool {
	if o != nil && !IsNil(o.ServerTypingStartedExpiryPeriodMilliseconds) {
		return true
	}

	return false
}

// SetServerTypingStartedExpiryPeriodMilliseconds gets a reference to the given int32 and assigns it to the ServerTypingStartedExpiryPeriodMilliseconds field.
func (o *RegisterQueue200Response) SetServerTypingStartedExpiryPeriodMilliseconds(v int32) {
	o.ServerTypingStartedExpiryPeriodMilliseconds = &v
}

// GetServerTypingStoppedWaitPeriodMilliseconds returns the ServerTypingStoppedWaitPeriodMilliseconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerTypingStoppedWaitPeriodMilliseconds() int32 {
	if o == nil || IsNil(o.ServerTypingStoppedWaitPeriodMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ServerTypingStoppedWaitPeriodMilliseconds
}

// GetServerTypingStoppedWaitPeriodMillisecondsOk returns a tuple with the ServerTypingStoppedWaitPeriodMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerTypingStoppedWaitPeriodMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypingStoppedWaitPeriodMilliseconds) {
		return nil, false
	}
	return o.ServerTypingStoppedWaitPeriodMilliseconds, true
}

// HasServerTypingStoppedWaitPeriodMilliseconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerTypingStoppedWaitPeriodMilliseconds() bool {
	if o != nil && !IsNil(o.ServerTypingStoppedWaitPeriodMilliseconds) {
		return true
	}

	return false
}

// SetServerTypingStoppedWaitPeriodMilliseconds gets a reference to the given int32 and assigns it to the ServerTypingStoppedWaitPeriodMilliseconds field.
func (o *RegisterQueue200Response) SetServerTypingStoppedWaitPeriodMilliseconds(v int32) {
	o.ServerTypingStoppedWaitPeriodMilliseconds = &v
}

// GetServerTypingStartedWaitPeriodMilliseconds returns the ServerTypingStartedWaitPeriodMilliseconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerTypingStartedWaitPeriodMilliseconds() int32 {
	if o == nil || IsNil(o.ServerTypingStartedWaitPeriodMilliseconds) {
		var ret int32
		return ret
	}
	return *o.ServerTypingStartedWaitPeriodMilliseconds
}

// GetServerTypingStartedWaitPeriodMillisecondsOk returns a tuple with the ServerTypingStartedWaitPeriodMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerTypingStartedWaitPeriodMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypingStartedWaitPeriodMilliseconds) {
		return nil, false
	}
	return o.ServerTypingStartedWaitPeriodMilliseconds, true
}

// HasServerTypingStartedWaitPeriodMilliseconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerTypingStartedWaitPeriodMilliseconds() bool {
	if o != nil && !IsNil(o.ServerTypingStartedWaitPeriodMilliseconds) {
		return true
	}

	return false
}

// SetServerTypingStartedWaitPeriodMilliseconds gets a reference to the given int32 and assigns it to the ServerTypingStartedWaitPeriodMilliseconds field.
func (o *RegisterQueue200Response) SetServerTypingStartedWaitPeriodMilliseconds(v int32) {
	o.ServerTypingStartedWaitPeriodMilliseconds = &v
}

// GetScheduledMessages returns the ScheduledMessages field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetScheduledMessages() []ScheduledMessage {
	if o == nil || IsNil(o.ScheduledMessages) {
		var ret []ScheduledMessage
		return ret
	}
	return o.ScheduledMessages
}

// GetScheduledMessagesOk returns a tuple with the ScheduledMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetScheduledMessagesOk() ([]ScheduledMessage, bool) {
	if o == nil || IsNil(o.ScheduledMessages) {
		return nil, false
	}
	return o.ScheduledMessages, true
}

// HasScheduledMessages returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasScheduledMessages() bool {
	if o != nil && !IsNil(o.ScheduledMessages) {
		return true
	}

	return false
}

// SetScheduledMessages gets a reference to the given []ScheduledMessage and assigns it to the ScheduledMessages field.
func (o *RegisterQueue200Response) SetScheduledMessages(v []ScheduledMessage) {
	o.ScheduledMessages = v
}

// GetReminders returns the Reminders field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetReminders() []ScheduledMessage {
	if o == nil || IsNil(o.Reminders) {
		var ret []ScheduledMessage
		return ret
	}
	return o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRemindersOk() ([]ScheduledMessage, bool) {
	if o == nil || IsNil(o.Reminders) {
		return nil, false
	}
	return o.Reminders, true
}

// HasReminders returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasReminders() bool {
	if o != nil && !IsNil(o.Reminders) {
		return true
	}

	return false
}

// SetReminders gets a reference to the given []ScheduledMessage and assigns it to the Reminders field.
func (o *RegisterQueue200Response) SetReminders(v []ScheduledMessage) {
	o.Reminders = v
}

// GetMutedTopics returns the MutedTopics field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetMutedTopics() [][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner {
	if o == nil || IsNil(o.MutedTopics) {
		var ret [][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner
		return ret
	}
	return o.MutedTopics
}

// GetMutedTopicsOk returns a tuple with the MutedTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetMutedTopicsOk() ([][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner, bool) {
	if o == nil || IsNil(o.MutedTopics) {
		return nil, false
	}
	return o.MutedTopics, true
}

// HasMutedTopics returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMutedTopics() bool {
	if o != nil && !IsNil(o.MutedTopics) {
		return true
	}

	return false
}

// SetMutedTopics gets a reference to the given [][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner and assigns it to the MutedTopics field.
// Deprecated
func (o *RegisterQueue200Response) SetMutedTopics(v [][]GetEvents200ResponseAllOfEventsInnerOneOf31MutedTopicsInnerInner) {
	o.MutedTopics = v
}

// GetMutedUsers returns the MutedUsers field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMutedUsers() []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner {
	if o == nil || IsNil(o.MutedUsers) {
		var ret []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner
		return ret
	}
	return o.MutedUsers
}

// GetMutedUsersOk returns a tuple with the MutedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMutedUsersOk() ([]GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner, bool) {
	if o == nil || IsNil(o.MutedUsers) {
		return nil, false
	}
	return o.MutedUsers, true
}

// HasMutedUsers returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMutedUsers() bool {
	if o != nil && !IsNil(o.MutedUsers) {
		return true
	}

	return false
}

// SetMutedUsers gets a reference to the given []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner and assigns it to the MutedUsers field.
func (o *RegisterQueue200Response) SetMutedUsers(v []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner) {
	o.MutedUsers = v
}

// GetPresences returns the Presences field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPresences() map[string]RegisterQueue200ResponseAllOfPresencesValue {
	if o == nil || IsNil(o.Presences) {
		var ret map[string]RegisterQueue200ResponseAllOfPresencesValue
		return ret
	}
	return *o.Presences
}

// GetPresencesOk returns a tuple with the Presences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPresencesOk() (*map[string]RegisterQueue200ResponseAllOfPresencesValue, bool) {
	if o == nil || IsNil(o.Presences) {
		return nil, false
	}
	return o.Presences, true
}

// HasPresences returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPresences() bool {
	if o != nil && !IsNil(o.Presences) {
		return true
	}

	return false
}

// SetPresences gets a reference to the given map[string]RegisterQueue200ResponseAllOfPresencesValue and assigns it to the Presences field.
func (o *RegisterQueue200Response) SetPresences(v map[string]RegisterQueue200ResponseAllOfPresencesValue) {
	o.Presences = &v
}

// GetPresenceLastUpdateId returns the PresenceLastUpdateId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPresenceLastUpdateId() int32 {
	if o == nil || IsNil(o.PresenceLastUpdateId) {
		var ret int32
		return ret
	}
	return *o.PresenceLastUpdateId
}

// GetPresenceLastUpdateIdOk returns a tuple with the PresenceLastUpdateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPresenceLastUpdateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PresenceLastUpdateId) {
		return nil, false
	}
	return o.PresenceLastUpdateId, true
}

// HasPresenceLastUpdateId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPresenceLastUpdateId() bool {
	if o != nil && !IsNil(o.PresenceLastUpdateId) {
		return true
	}

	return false
}

// SetPresenceLastUpdateId gets a reference to the given int32 and assigns it to the PresenceLastUpdateId field.
func (o *RegisterQueue200Response) SetPresenceLastUpdateId(v int32) {
	o.PresenceLastUpdateId = &v
}

// GetServerTimestamp returns the ServerTimestamp field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerTimestamp() float32 {
	if o == nil || IsNil(o.ServerTimestamp) {
		var ret float32
		return ret
	}
	return *o.ServerTimestamp
}

// GetServerTimestampOk returns a tuple with the ServerTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTimestamp) {
		return nil, false
	}
	return o.ServerTimestamp, true
}

// HasServerTimestamp returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerTimestamp() bool {
	if o != nil && !IsNil(o.ServerTimestamp) {
		return true
	}

	return false
}

// SetServerTimestamp gets a reference to the given float32 and assigns it to the ServerTimestamp field.
func (o *RegisterQueue200Response) SetServerTimestamp(v float32) {
	o.ServerTimestamp = &v
}

// GetRealmDomains returns the RealmDomains field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDomains() []RealmDomain {
	if o == nil || IsNil(o.RealmDomains) {
		var ret []RealmDomain
		return ret
	}
	return o.RealmDomains
}

// GetRealmDomainsOk returns a tuple with the RealmDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDomainsOk() ([]RealmDomain, bool) {
	if o == nil || IsNil(o.RealmDomains) {
		return nil, false
	}
	return o.RealmDomains, true
}

// HasRealmDomains returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDomains() bool {
	if o != nil && !IsNil(o.RealmDomains) {
		return true
	}

	return false
}

// SetRealmDomains gets a reference to the given []RealmDomain and assigns it to the RealmDomains field.
func (o *RegisterQueue200Response) SetRealmDomains(v []RealmDomain) {
	o.RealmDomains = v
}

// GetRealmEmoji returns the RealmEmoji field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmoji() map[string]RealmEmoji {
	if o == nil || IsNil(o.RealmEmoji) {
		var ret map[string]RealmEmoji
		return ret
	}
	return *o.RealmEmoji
}

// GetRealmEmojiOk returns a tuple with the RealmEmoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmojiOk() (*map[string]RealmEmoji, bool) {
	if o == nil || IsNil(o.RealmEmoji) {
		return nil, false
	}
	return o.RealmEmoji, true
}

// HasRealmEmoji returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmoji() bool {
	if o != nil && !IsNil(o.RealmEmoji) {
		return true
	}

	return false
}

// SetRealmEmoji gets a reference to the given map[string]RealmEmoji and assigns it to the RealmEmoji field.
func (o *RegisterQueue200Response) SetRealmEmoji(v map[string]RealmEmoji) {
	o.RealmEmoji = &v
}

// GetRealmLinkifiers returns the RealmLinkifiers field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmLinkifiers() []RegisterQueue200ResponseAllOfRealmLinkifiersInner {
	if o == nil || IsNil(o.RealmLinkifiers) {
		var ret []RegisterQueue200ResponseAllOfRealmLinkifiersInner
		return ret
	}
	return o.RealmLinkifiers
}

// GetRealmLinkifiersOk returns a tuple with the RealmLinkifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmLinkifiersOk() ([]RegisterQueue200ResponseAllOfRealmLinkifiersInner, bool) {
	if o == nil || IsNil(o.RealmLinkifiers) {
		return nil, false
	}
	return o.RealmLinkifiers, true
}

// HasRealmLinkifiers returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmLinkifiers() bool {
	if o != nil && !IsNil(o.RealmLinkifiers) {
		return true
	}

	return false
}

// SetRealmLinkifiers gets a reference to the given []RegisterQueue200ResponseAllOfRealmLinkifiersInner and assigns it to the RealmLinkifiers field.
func (o *RegisterQueue200Response) SetRealmLinkifiers(v []RegisterQueue200ResponseAllOfRealmLinkifiersInner) {
	o.RealmLinkifiers = v
}

// GetRealmFilters returns the RealmFilters field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmFilters() [][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner {
	if o == nil || IsNil(o.RealmFilters) {
		var ret [][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner
		return ret
	}
	return o.RealmFilters
}

// GetRealmFiltersOk returns a tuple with the RealmFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmFiltersOk() ([][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner, bool) {
	if o == nil || IsNil(o.RealmFilters) {
		return nil, false
	}
	return o.RealmFilters, true
}

// HasRealmFilters returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmFilters() bool {
	if o != nil && !IsNil(o.RealmFilters) {
		return true
	}

	return false
}

// SetRealmFilters gets a reference to the given [][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner and assigns it to the RealmFilters field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmFilters(v [][]GetEvents200ResponseAllOfEventsInnerOneOf51RealmFiltersInnerInner) {
	o.RealmFilters = v
}

// GetRealmPlaygrounds returns the RealmPlaygrounds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmPlaygrounds() []RealmPlayground {
	if o == nil || IsNil(o.RealmPlaygrounds) {
		var ret []RealmPlayground
		return ret
	}
	return o.RealmPlaygrounds
}

// GetRealmPlaygroundsOk returns a tuple with the RealmPlaygrounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmPlaygroundsOk() ([]RealmPlayground, bool) {
	if o == nil || IsNil(o.RealmPlaygrounds) {
		return nil, false
	}
	return o.RealmPlaygrounds, true
}

// HasRealmPlaygrounds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPlaygrounds() bool {
	if o != nil && !IsNil(o.RealmPlaygrounds) {
		return true
	}

	return false
}

// SetRealmPlaygrounds gets a reference to the given []RealmPlayground and assigns it to the RealmPlaygrounds field.
func (o *RegisterQueue200Response) SetRealmPlaygrounds(v []RealmPlayground) {
	o.RealmPlaygrounds = v
}

// GetRealmUserGroups returns the RealmUserGroups field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmUserGroups() []UserGroup {
	if o == nil || IsNil(o.RealmUserGroups) {
		var ret []UserGroup
		return ret
	}
	return o.RealmUserGroups
}

// GetRealmUserGroupsOk returns a tuple with the RealmUserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmUserGroupsOk() ([]UserGroup, bool) {
	if o == nil || IsNil(o.RealmUserGroups) {
		return nil, false
	}
	return o.RealmUserGroups, true
}

// HasRealmUserGroups returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUserGroups() bool {
	if o != nil && !IsNil(o.RealmUserGroups) {
		return true
	}

	return false
}

// SetRealmUserGroups gets a reference to the given []UserGroup and assigns it to the RealmUserGroups field.
func (o *RegisterQueue200Response) SetRealmUserGroups(v []UserGroup) {
	o.RealmUserGroups = v
}

// GetRealmBots returns the RealmBots field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmBots() []Bot {
	if o == nil || IsNil(o.RealmBots) {
		var ret []Bot
		return ret
	}
	return o.RealmBots
}

// GetRealmBotsOk returns a tuple with the RealmBots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmBotsOk() ([]Bot, bool) {
	if o == nil || IsNil(o.RealmBots) {
		return nil, false
	}
	return o.RealmBots, true
}

// HasRealmBots returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmBots() bool {
	if o != nil && !IsNil(o.RealmBots) {
		return true
	}

	return false
}

// SetRealmBots gets a reference to the given []Bot and assigns it to the RealmBots field.
func (o *RegisterQueue200Response) SetRealmBots(v []Bot) {
	o.RealmBots = v
}

// GetRealmEmbeddedBots returns the RealmEmbeddedBots field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmbeddedBots() []RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner {
	if o == nil || IsNil(o.RealmEmbeddedBots) {
		var ret []RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner
		return ret
	}
	return o.RealmEmbeddedBots
}

// GetRealmEmbeddedBotsOk returns a tuple with the RealmEmbeddedBots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmbeddedBotsOk() ([]RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner, bool) {
	if o == nil || IsNil(o.RealmEmbeddedBots) {
		return nil, false
	}
	return o.RealmEmbeddedBots, true
}

// HasRealmEmbeddedBots returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmbeddedBots() bool {
	if o != nil && !IsNil(o.RealmEmbeddedBots) {
		return true
	}

	return false
}

// SetRealmEmbeddedBots gets a reference to the given []RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner and assigns it to the RealmEmbeddedBots field.
func (o *RegisterQueue200Response) SetRealmEmbeddedBots(v []RegisterQueue200ResponseAllOfRealmEmbeddedBotsInner) {
	o.RealmEmbeddedBots = v
}

// GetRealmIncomingWebhookBots returns the RealmIncomingWebhookBots field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmIncomingWebhookBots() []RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner {
	if o == nil || IsNil(o.RealmIncomingWebhookBots) {
		var ret []RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner
		return ret
	}
	return o.RealmIncomingWebhookBots
}

// GetRealmIncomingWebhookBotsOk returns a tuple with the RealmIncomingWebhookBots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmIncomingWebhookBotsOk() ([]RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner, bool) {
	if o == nil || IsNil(o.RealmIncomingWebhookBots) {
		return nil, false
	}
	return o.RealmIncomingWebhookBots, true
}

// HasRealmIncomingWebhookBots returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmIncomingWebhookBots() bool {
	if o != nil && !IsNil(o.RealmIncomingWebhookBots) {
		return true
	}

	return false
}

// SetRealmIncomingWebhookBots gets a reference to the given []RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner and assigns it to the RealmIncomingWebhookBots field.
func (o *RegisterQueue200Response) SetRealmIncomingWebhookBots(v []RegisterQueue200ResponseAllOfRealmIncomingWebhookBotsInner) {
	o.RealmIncomingWebhookBots = v
}

// GetRecentPrivateConversations returns the RecentPrivateConversations field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRecentPrivateConversations() []RegisterQueue200ResponseAllOfRecentPrivateConversationsInner {
	if o == nil || IsNil(o.RecentPrivateConversations) {
		var ret []RegisterQueue200ResponseAllOfRecentPrivateConversationsInner
		return ret
	}
	return o.RecentPrivateConversations
}

// GetRecentPrivateConversationsOk returns a tuple with the RecentPrivateConversations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRecentPrivateConversationsOk() ([]RegisterQueue200ResponseAllOfRecentPrivateConversationsInner, bool) {
	if o == nil || IsNil(o.RecentPrivateConversations) {
		return nil, false
	}
	return o.RecentPrivateConversations, true
}

// HasRecentPrivateConversations returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRecentPrivateConversations() bool {
	if o != nil && !IsNil(o.RecentPrivateConversations) {
		return true
	}

	return false
}

// SetRecentPrivateConversations gets a reference to the given []RegisterQueue200ResponseAllOfRecentPrivateConversationsInner and assigns it to the RecentPrivateConversations field.
func (o *RegisterQueue200Response) SetRecentPrivateConversations(v []RegisterQueue200ResponseAllOfRecentPrivateConversationsInner) {
	o.RecentPrivateConversations = v
}

// GetNavigationViews returns the NavigationViews field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetNavigationViews() []NavigationView {
	if o == nil || IsNil(o.NavigationViews) {
		var ret []NavigationView
		return ret
	}
	return o.NavigationViews
}

// GetNavigationViewsOk returns a tuple with the NavigationViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetNavigationViewsOk() ([]NavigationView, bool) {
	if o == nil || IsNil(o.NavigationViews) {
		return nil, false
	}
	return o.NavigationViews, true
}

// HasNavigationViews returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasNavigationViews() bool {
	if o != nil && !IsNil(o.NavigationViews) {
		return true
	}

	return false
}

// SetNavigationViews gets a reference to the given []NavigationView and assigns it to the NavigationViews field.
func (o *RegisterQueue200Response) SetNavigationViews(v []NavigationView) {
	o.NavigationViews = v
}

// GetSavedSnippets returns the SavedSnippets field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetSavedSnippets() []SavedSnippet {
	if o == nil || IsNil(o.SavedSnippets) {
		var ret []SavedSnippet
		return ret
	}
	return o.SavedSnippets
}

// GetSavedSnippetsOk returns a tuple with the SavedSnippets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetSavedSnippetsOk() ([]SavedSnippet, bool) {
	if o == nil || IsNil(o.SavedSnippets) {
		return nil, false
	}
	return o.SavedSnippets, true
}

// HasSavedSnippets returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasSavedSnippets() bool {
	if o != nil && !IsNil(o.SavedSnippets) {
		return true
	}

	return false
}

// SetSavedSnippets gets a reference to the given []SavedSnippet and assigns it to the SavedSnippets field.
func (o *RegisterQueue200Response) SetSavedSnippets(v []SavedSnippet) {
	o.SavedSnippets = v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetSubscriptions() []Subscription {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []Subscription
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetSubscriptionsOk() ([]Subscription, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []Subscription and assigns it to the Subscriptions field.
func (o *RegisterQueue200Response) SetSubscriptions(v []Subscription) {
	o.Subscriptions = v
}

// GetUnsubscribed returns the Unsubscribed field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUnsubscribed() []Subscription {
	if o == nil || IsNil(o.Unsubscribed) {
		var ret []Subscription
		return ret
	}
	return o.Unsubscribed
}

// GetUnsubscribedOk returns a tuple with the Unsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUnsubscribedOk() ([]Subscription, bool) {
	if o == nil || IsNil(o.Unsubscribed) {
		return nil, false
	}
	return o.Unsubscribed, true
}

// HasUnsubscribed returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUnsubscribed() bool {
	if o != nil && !IsNil(o.Unsubscribed) {
		return true
	}

	return false
}

// SetUnsubscribed gets a reference to the given []Subscription and assigns it to the Unsubscribed field.
func (o *RegisterQueue200Response) SetUnsubscribed(v []Subscription) {
	o.Unsubscribed = v
}

// GetNeverSubscribed returns the NeverSubscribed field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetNeverSubscribed() []RegisterQueue200ResponseAllOfNeverSubscribedInner {
	if o == nil || IsNil(o.NeverSubscribed) {
		var ret []RegisterQueue200ResponseAllOfNeverSubscribedInner
		return ret
	}
	return o.NeverSubscribed
}

// GetNeverSubscribedOk returns a tuple with the NeverSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetNeverSubscribedOk() ([]RegisterQueue200ResponseAllOfNeverSubscribedInner, bool) {
	if o == nil || IsNil(o.NeverSubscribed) {
		return nil, false
	}
	return o.NeverSubscribed, true
}

// HasNeverSubscribed returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasNeverSubscribed() bool {
	if o != nil && !IsNil(o.NeverSubscribed) {
		return true
	}

	return false
}

// SetNeverSubscribed gets a reference to the given []RegisterQueue200ResponseAllOfNeverSubscribedInner and assigns it to the NeverSubscribed field.
func (o *RegisterQueue200Response) SetNeverSubscribed(v []RegisterQueue200ResponseAllOfNeverSubscribedInner) {
	o.NeverSubscribed = v
}

// GetChannelFolders returns the ChannelFolders field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetChannelFolders() []ChannelFolder {
	if o == nil || IsNil(o.ChannelFolders) {
		var ret []ChannelFolder
		return ret
	}
	return o.ChannelFolders
}

// GetChannelFoldersOk returns a tuple with the ChannelFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetChannelFoldersOk() ([]ChannelFolder, bool) {
	if o == nil || IsNil(o.ChannelFolders) {
		return nil, false
	}
	return o.ChannelFolders, true
}

// HasChannelFolders returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasChannelFolders() bool {
	if o != nil && !IsNil(o.ChannelFolders) {
		return true
	}

	return false
}

// SetChannelFolders gets a reference to the given []ChannelFolder and assigns it to the ChannelFolders field.
func (o *RegisterQueue200Response) SetChannelFolders(v []ChannelFolder) {
	o.ChannelFolders = v
}

// GetUnreadMsgs returns the UnreadMsgs field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUnreadMsgs() RegisterQueue200ResponseAllOfUnreadMsgs {
	if o == nil || IsNil(o.UnreadMsgs) {
		var ret RegisterQueue200ResponseAllOfUnreadMsgs
		return ret
	}
	return *o.UnreadMsgs
}

// GetUnreadMsgsOk returns a tuple with the UnreadMsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUnreadMsgsOk() (*RegisterQueue200ResponseAllOfUnreadMsgs, bool) {
	if o == nil || IsNil(o.UnreadMsgs) {
		return nil, false
	}
	return o.UnreadMsgs, true
}

// HasUnreadMsgs returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUnreadMsgs() bool {
	if o != nil && !IsNil(o.UnreadMsgs) {
		return true
	}

	return false
}

// SetUnreadMsgs gets a reference to the given RegisterQueue200ResponseAllOfUnreadMsgs and assigns it to the UnreadMsgs field.
func (o *RegisterQueue200Response) SetUnreadMsgs(v RegisterQueue200ResponseAllOfUnreadMsgs) {
	o.UnreadMsgs = &v
}

// GetStarredMessages returns the StarredMessages field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetStarredMessages() []int32 {
	if o == nil || IsNil(o.StarredMessages) {
		var ret []int32
		return ret
	}
	return o.StarredMessages
}

// GetStarredMessagesOk returns a tuple with the StarredMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetStarredMessagesOk() ([]int32, bool) {
	if o == nil || IsNil(o.StarredMessages) {
		return nil, false
	}
	return o.StarredMessages, true
}

// HasStarredMessages returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasStarredMessages() bool {
	if o != nil && !IsNil(o.StarredMessages) {
		return true
	}

	return false
}

// SetStarredMessages gets a reference to the given []int32 and assigns it to the StarredMessages field.
func (o *RegisterQueue200Response) SetStarredMessages(v []int32) {
	o.StarredMessages = v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetStreams() []BasicChannel {
	if o == nil || IsNil(o.Streams) {
		var ret []BasicChannel
		return ret
	}
	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetStreamsOk() ([]BasicChannel, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []BasicChannel and assigns it to the Streams field.
func (o *RegisterQueue200Response) SetStreams(v []BasicChannel) {
	o.Streams = v
}

// GetRealmDefaultStreams returns the RealmDefaultStreams field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDefaultStreams() []int32 {
	if o == nil || IsNil(o.RealmDefaultStreams) {
		var ret []int32
		return ret
	}
	return o.RealmDefaultStreams
}

// GetRealmDefaultStreamsOk returns a tuple with the RealmDefaultStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDefaultStreamsOk() ([]int32, bool) {
	if o == nil || IsNil(o.RealmDefaultStreams) {
		return nil, false
	}
	return o.RealmDefaultStreams, true
}

// HasRealmDefaultStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDefaultStreams() bool {
	if o != nil && !IsNil(o.RealmDefaultStreams) {
		return true
	}

	return false
}

// SetRealmDefaultStreams gets a reference to the given []int32 and assigns it to the RealmDefaultStreams field.
func (o *RegisterQueue200Response) SetRealmDefaultStreams(v []int32) {
	o.RealmDefaultStreams = v
}

// GetRealmDefaultStreamGroups returns the RealmDefaultStreamGroups field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDefaultStreamGroups() []DefaultChannelGroup {
	if o == nil || IsNil(o.RealmDefaultStreamGroups) {
		var ret []DefaultChannelGroup
		return ret
	}
	return o.RealmDefaultStreamGroups
}

// GetRealmDefaultStreamGroupsOk returns a tuple with the RealmDefaultStreamGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDefaultStreamGroupsOk() ([]DefaultChannelGroup, bool) {
	if o == nil || IsNil(o.RealmDefaultStreamGroups) {
		return nil, false
	}
	return o.RealmDefaultStreamGroups, true
}

// HasRealmDefaultStreamGroups returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDefaultStreamGroups() bool {
	if o != nil && !IsNil(o.RealmDefaultStreamGroups) {
		return true
	}

	return false
}

// SetRealmDefaultStreamGroups gets a reference to the given []DefaultChannelGroup and assigns it to the RealmDefaultStreamGroups field.
func (o *RegisterQueue200Response) SetRealmDefaultStreamGroups(v []DefaultChannelGroup) {
	o.RealmDefaultStreamGroups = v
}

// GetStopWords returns the StopWords field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetStopWords() []string {
	if o == nil || IsNil(o.StopWords) {
		var ret []string
		return ret
	}
	return o.StopWords
}

// GetStopWordsOk returns a tuple with the StopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetStopWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.StopWords) {
		return nil, false
	}
	return o.StopWords, true
}

// HasStopWords returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasStopWords() bool {
	if o != nil && !IsNil(o.StopWords) {
		return true
	}

	return false
}

// SetStopWords gets a reference to the given []string and assigns it to the StopWords field.
func (o *RegisterQueue200Response) SetStopWords(v []string) {
	o.StopWords = v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUserStatus() map[string]RegisterQueue200ResponseAllOfUserStatus {
	if o == nil || IsNil(o.UserStatus) {
		var ret map[string]RegisterQueue200ResponseAllOfUserStatus
		return ret
	}
	return o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUserStatusOk() (map[string]RegisterQueue200ResponseAllOfUserStatus, bool) {
	if o == nil || IsNil(o.UserStatus) {
		return map[string]RegisterQueue200ResponseAllOfUserStatus{}, false
	}
	return o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUserStatus() bool {
	if o != nil && !IsNil(o.UserStatus) {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given map[string]RegisterQueue200ResponseAllOfUserStatus and assigns it to the UserStatus field.
func (o *RegisterQueue200Response) SetUserStatus(v map[string]RegisterQueue200ResponseAllOfUserStatus) {
	o.UserStatus = v
}

// GetUserSettings returns the UserSettings field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUserSettings() RegisterQueue200ResponseAllOfUserSettings {
	if o == nil || IsNil(o.UserSettings) {
		var ret RegisterQueue200ResponseAllOfUserSettings
		return ret
	}
	return *o.UserSettings
}

// GetUserSettingsOk returns a tuple with the UserSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUserSettingsOk() (*RegisterQueue200ResponseAllOfUserSettings, bool) {
	if o == nil || IsNil(o.UserSettings) {
		return nil, false
	}
	return o.UserSettings, true
}

// HasUserSettings returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUserSettings() bool {
	if o != nil && !IsNil(o.UserSettings) {
		return true
	}

	return false
}

// SetUserSettings gets a reference to the given RegisterQueue200ResponseAllOfUserSettings and assigns it to the UserSettings field.
func (o *RegisterQueue200Response) SetUserSettings(v RegisterQueue200ResponseAllOfUserSettings) {
	o.UserSettings = &v
}

// GetUserTopics returns the UserTopics field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUserTopics() []RegisterQueue200ResponseAllOfUserTopicsInner {
	if o == nil || IsNil(o.UserTopics) {
		var ret []RegisterQueue200ResponseAllOfUserTopicsInner
		return ret
	}
	return o.UserTopics
}

// GetUserTopicsOk returns a tuple with the UserTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUserTopicsOk() ([]RegisterQueue200ResponseAllOfUserTopicsInner, bool) {
	if o == nil || IsNil(o.UserTopics) {
		return nil, false
	}
	return o.UserTopics, true
}

// HasUserTopics returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUserTopics() bool {
	if o != nil && !IsNil(o.UserTopics) {
		return true
	}

	return false
}

// SetUserTopics gets a reference to the given []RegisterQueue200ResponseAllOfUserTopicsInner and assigns it to the UserTopics field.
func (o *RegisterQueue200Response) SetUserTopics(v []RegisterQueue200ResponseAllOfUserTopicsInner) {
	o.UserTopics = v
}

// GetHasZoomToken returns the HasZoomToken field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetHasZoomToken() bool {
	if o == nil || IsNil(o.HasZoomToken) {
		var ret bool
		return ret
	}
	return *o.HasZoomToken
}

// GetHasZoomTokenOk returns a tuple with the HasZoomToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetHasZoomTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.HasZoomToken) {
		return nil, false
	}
	return o.HasZoomToken, true
}

// HasHasZoomToken returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasHasZoomToken() bool {
	if o != nil && !IsNil(o.HasZoomToken) {
		return true
	}

	return false
}

// SetHasZoomToken gets a reference to the given bool and assigns it to the HasZoomToken field.
func (o *RegisterQueue200Response) SetHasZoomToken(v bool) {
	o.HasZoomToken = &v
}

// GetGiphyApiKey returns the GiphyApiKey field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetGiphyApiKey() string {
	if o == nil || IsNil(o.GiphyApiKey) {
		var ret string
		return ret
	}
	return *o.GiphyApiKey
}

// GetGiphyApiKeyOk returns a tuple with the GiphyApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetGiphyApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.GiphyApiKey) {
		return nil, false
	}
	return o.GiphyApiKey, true
}

// HasGiphyApiKey returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasGiphyApiKey() bool {
	if o != nil && !IsNil(o.GiphyApiKey) {
		return true
	}

	return false
}

// SetGiphyApiKey gets a reference to the given string and assigns it to the GiphyApiKey field.
func (o *RegisterQueue200Response) SetGiphyApiKey(v string) {
	o.GiphyApiKey = &v
}

// GetPushDevices returns the PushDevices field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPushDevices() map[string]RegisterQueue200ResponseAllOfPushDevicesValue {
	if o == nil || IsNil(o.PushDevices) {
		var ret map[string]RegisterQueue200ResponseAllOfPushDevicesValue
		return ret
	}
	return *o.PushDevices
}

// GetPushDevicesOk returns a tuple with the PushDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPushDevicesOk() (*map[string]RegisterQueue200ResponseAllOfPushDevicesValue, bool) {
	if o == nil || IsNil(o.PushDevices) {
		return nil, false
	}
	return o.PushDevices, true
}

// HasPushDevices returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPushDevices() bool {
	if o != nil && !IsNil(o.PushDevices) {
		return true
	}

	return false
}

// SetPushDevices gets a reference to the given map[string]RegisterQueue200ResponseAllOfPushDevicesValue and assigns it to the PushDevices field.
func (o *RegisterQueue200Response) SetPushDevices(v map[string]RegisterQueue200ResponseAllOfPushDevicesValue) {
	o.PushDevices = &v
}

// GetEnableDesktopNotifications returns the EnableDesktopNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDesktopNotifications() bool {
	if o == nil || IsNil(o.EnableDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableDesktopNotifications
}

// GetEnableDesktopNotificationsOk returns a tuple with the EnableDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDesktopNotifications) {
		return nil, false
	}
	return o.EnableDesktopNotifications, true
}

// HasEnableDesktopNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableDesktopNotifications() bool {
	if o != nil && !IsNil(o.EnableDesktopNotifications) {
		return true
	}

	return false
}

// SetEnableDesktopNotifications gets a reference to the given bool and assigns it to the EnableDesktopNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableDesktopNotifications(v bool) {
	o.EnableDesktopNotifications = &v
}

// GetEnableDigestEmails returns the EnableDigestEmails field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDigestEmails() bool {
	if o == nil || IsNil(o.EnableDigestEmails) {
		var ret bool
		return ret
	}
	return *o.EnableDigestEmails
}

// GetEnableDigestEmailsOk returns a tuple with the EnableDigestEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDigestEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDigestEmails) {
		return nil, false
	}
	return o.EnableDigestEmails, true
}

// HasEnableDigestEmails returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableDigestEmails() bool {
	if o != nil && !IsNil(o.EnableDigestEmails) {
		return true
	}

	return false
}

// SetEnableDigestEmails gets a reference to the given bool and assigns it to the EnableDigestEmails field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableDigestEmails(v bool) {
	o.EnableDigestEmails = &v
}

// GetEnableLoginEmails returns the EnableLoginEmails field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableLoginEmails() bool {
	if o == nil || IsNil(o.EnableLoginEmails) {
		var ret bool
		return ret
	}
	return *o.EnableLoginEmails
}

// GetEnableLoginEmailsOk returns a tuple with the EnableLoginEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableLoginEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLoginEmails) {
		return nil, false
	}
	return o.EnableLoginEmails, true
}

// HasEnableLoginEmails returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableLoginEmails() bool {
	if o != nil && !IsNil(o.EnableLoginEmails) {
		return true
	}

	return false
}

// SetEnableLoginEmails gets a reference to the given bool and assigns it to the EnableLoginEmails field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableLoginEmails(v bool) {
	o.EnableLoginEmails = &v
}

// GetEnableMarketingEmails returns the EnableMarketingEmails field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableMarketingEmails() bool {
	if o == nil || IsNil(o.EnableMarketingEmails) {
		var ret bool
		return ret
	}
	return *o.EnableMarketingEmails
}

// GetEnableMarketingEmailsOk returns a tuple with the EnableMarketingEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableMarketingEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMarketingEmails) {
		return nil, false
	}
	return o.EnableMarketingEmails, true
}

// HasEnableMarketingEmails returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableMarketingEmails() bool {
	if o != nil && !IsNil(o.EnableMarketingEmails) {
		return true
	}

	return false
}

// SetEnableMarketingEmails gets a reference to the given bool and assigns it to the EnableMarketingEmails field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableMarketingEmails(v bool) {
	o.EnableMarketingEmails = &v
}

// GetEmailNotificationsBatchingPeriodSeconds returns the EmailNotificationsBatchingPeriodSeconds field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEmailNotificationsBatchingPeriodSeconds() int32 {
	if o == nil || IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		var ret int32
		return ret
	}
	return *o.EmailNotificationsBatchingPeriodSeconds
}

// GetEmailNotificationsBatchingPeriodSecondsOk returns a tuple with the EmailNotificationsBatchingPeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEmailNotificationsBatchingPeriodSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		return nil, false
	}
	return o.EmailNotificationsBatchingPeriodSeconds, true
}

// HasEmailNotificationsBatchingPeriodSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEmailNotificationsBatchingPeriodSeconds() bool {
	if o != nil && !IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		return true
	}

	return false
}

// SetEmailNotificationsBatchingPeriodSeconds gets a reference to the given int32 and assigns it to the EmailNotificationsBatchingPeriodSeconds field.
// Deprecated
func (o *RegisterQueue200Response) SetEmailNotificationsBatchingPeriodSeconds(v int32) {
	o.EmailNotificationsBatchingPeriodSeconds = &v
}

// GetEnableOfflineEmailNotifications returns the EnableOfflineEmailNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOfflineEmailNotifications() bool {
	if o == nil || IsNil(o.EnableOfflineEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOfflineEmailNotifications
}

// GetEnableOfflineEmailNotificationsOk returns a tuple with the EnableOfflineEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOfflineEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOfflineEmailNotifications) {
		return nil, false
	}
	return o.EnableOfflineEmailNotifications, true
}

// HasEnableOfflineEmailNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableOfflineEmailNotifications() bool {
	if o != nil && !IsNil(o.EnableOfflineEmailNotifications) {
		return true
	}

	return false
}

// SetEnableOfflineEmailNotifications gets a reference to the given bool and assigns it to the EnableOfflineEmailNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableOfflineEmailNotifications(v bool) {
	o.EnableOfflineEmailNotifications = &v
}

// GetEnableOfflinePushNotifications returns the EnableOfflinePushNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOfflinePushNotifications() bool {
	if o == nil || IsNil(o.EnableOfflinePushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOfflinePushNotifications
}

// GetEnableOfflinePushNotificationsOk returns a tuple with the EnableOfflinePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOfflinePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOfflinePushNotifications) {
		return nil, false
	}
	return o.EnableOfflinePushNotifications, true
}

// HasEnableOfflinePushNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableOfflinePushNotifications() bool {
	if o != nil && !IsNil(o.EnableOfflinePushNotifications) {
		return true
	}

	return false
}

// SetEnableOfflinePushNotifications gets a reference to the given bool and assigns it to the EnableOfflinePushNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableOfflinePushNotifications(v bool) {
	o.EnableOfflinePushNotifications = &v
}

// GetEnableOnlinePushNotifications returns the EnableOnlinePushNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOnlinePushNotifications() bool {
	if o == nil || IsNil(o.EnableOnlinePushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableOnlinePushNotifications
}

// GetEnableOnlinePushNotificationsOk returns a tuple with the EnableOnlinePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableOnlinePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOnlinePushNotifications) {
		return nil, false
	}
	return o.EnableOnlinePushNotifications, true
}

// HasEnableOnlinePushNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableOnlinePushNotifications() bool {
	if o != nil && !IsNil(o.EnableOnlinePushNotifications) {
		return true
	}

	return false
}

// SetEnableOnlinePushNotifications gets a reference to the given bool and assigns it to the EnableOnlinePushNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableOnlinePushNotifications(v bool) {
	o.EnableOnlinePushNotifications = &v
}

// GetEnableSounds returns the EnableSounds field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableSounds() bool {
	if o == nil || IsNil(o.EnableSounds) {
		var ret bool
		return ret
	}
	return *o.EnableSounds
}

// GetEnableSoundsOk returns a tuple with the EnableSounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableSoundsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSounds) {
		return nil, false
	}
	return o.EnableSounds, true
}

// HasEnableSounds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableSounds() bool {
	if o != nil && !IsNil(o.EnableSounds) {
		return true
	}

	return false
}

// SetEnableSounds gets a reference to the given bool and assigns it to the EnableSounds field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableSounds(v bool) {
	o.EnableSounds = &v
}

// GetEnableStreamDesktopNotifications returns the EnableStreamDesktopNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamDesktopNotifications() bool {
	if o == nil || IsNil(o.EnableStreamDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamDesktopNotifications
}

// GetEnableStreamDesktopNotificationsOk returns a tuple with the EnableStreamDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamDesktopNotifications) {
		return nil, false
	}
	return o.EnableStreamDesktopNotifications, true
}

// HasEnableStreamDesktopNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableStreamDesktopNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamDesktopNotifications) {
		return true
	}

	return false
}

// SetEnableStreamDesktopNotifications gets a reference to the given bool and assigns it to the EnableStreamDesktopNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableStreamDesktopNotifications(v bool) {
	o.EnableStreamDesktopNotifications = &v
}

// GetEnableStreamEmailNotifications returns the EnableStreamEmailNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamEmailNotifications() bool {
	if o == nil || IsNil(o.EnableStreamEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamEmailNotifications
}

// GetEnableStreamEmailNotificationsOk returns a tuple with the EnableStreamEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamEmailNotifications) {
		return nil, false
	}
	return o.EnableStreamEmailNotifications, true
}

// HasEnableStreamEmailNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableStreamEmailNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamEmailNotifications) {
		return true
	}

	return false
}

// SetEnableStreamEmailNotifications gets a reference to the given bool and assigns it to the EnableStreamEmailNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableStreamEmailNotifications(v bool) {
	o.EnableStreamEmailNotifications = &v
}

// GetEnableStreamPushNotifications returns the EnableStreamPushNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamPushNotifications() bool {
	if o == nil || IsNil(o.EnableStreamPushNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamPushNotifications
}

// GetEnableStreamPushNotificationsOk returns a tuple with the EnableStreamPushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamPushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamPushNotifications) {
		return nil, false
	}
	return o.EnableStreamPushNotifications, true
}

// HasEnableStreamPushNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableStreamPushNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamPushNotifications) {
		return true
	}

	return false
}

// SetEnableStreamPushNotifications gets a reference to the given bool and assigns it to the EnableStreamPushNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableStreamPushNotifications(v bool) {
	o.EnableStreamPushNotifications = &v
}

// GetEnableStreamAudibleNotifications returns the EnableStreamAudibleNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamAudibleNotifications() bool {
	if o == nil || IsNil(o.EnableStreamAudibleNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableStreamAudibleNotifications
}

// GetEnableStreamAudibleNotificationsOk returns a tuple with the EnableStreamAudibleNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableStreamAudibleNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableStreamAudibleNotifications) {
		return nil, false
	}
	return o.EnableStreamAudibleNotifications, true
}

// HasEnableStreamAudibleNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableStreamAudibleNotifications() bool {
	if o != nil && !IsNil(o.EnableStreamAudibleNotifications) {
		return true
	}

	return false
}

// SetEnableStreamAudibleNotifications gets a reference to the given bool and assigns it to the EnableStreamAudibleNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableStreamAudibleNotifications(v bool) {
	o.EnableStreamAudibleNotifications = &v
}

// GetWildcardMentionsNotify returns the WildcardMentionsNotify field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetWildcardMentionsNotify() bool {
	if o == nil || IsNil(o.WildcardMentionsNotify) {
		var ret bool
		return ret
	}
	return *o.WildcardMentionsNotify
}

// GetWildcardMentionsNotifyOk returns a tuple with the WildcardMentionsNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetWildcardMentionsNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.WildcardMentionsNotify) {
		return nil, false
	}
	return o.WildcardMentionsNotify, true
}

// HasWildcardMentionsNotify returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasWildcardMentionsNotify() bool {
	if o != nil && !IsNil(o.WildcardMentionsNotify) {
		return true
	}

	return false
}

// SetWildcardMentionsNotify gets a reference to the given bool and assigns it to the WildcardMentionsNotify field.
// Deprecated
func (o *RegisterQueue200Response) SetWildcardMentionsNotify(v bool) {
	o.WildcardMentionsNotify = &v
}

// GetMessageContentInEmailNotifications returns the MessageContentInEmailNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetMessageContentInEmailNotifications() bool {
	if o == nil || IsNil(o.MessageContentInEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.MessageContentInEmailNotifications
}

// GetMessageContentInEmailNotificationsOk returns a tuple with the MessageContentInEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetMessageContentInEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageContentInEmailNotifications) {
		return nil, false
	}
	return o.MessageContentInEmailNotifications, true
}

// HasMessageContentInEmailNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMessageContentInEmailNotifications() bool {
	if o != nil && !IsNil(o.MessageContentInEmailNotifications) {
		return true
	}

	return false
}

// SetMessageContentInEmailNotifications gets a reference to the given bool and assigns it to the MessageContentInEmailNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetMessageContentInEmailNotifications(v bool) {
	o.MessageContentInEmailNotifications = &v
}

// GetNotificationSound returns the NotificationSound field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetNotificationSound() string {
	if o == nil || IsNil(o.NotificationSound) {
		var ret string
		return ret
	}
	return *o.NotificationSound
}

// GetNotificationSoundOk returns a tuple with the NotificationSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetNotificationSoundOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationSound) {
		return nil, false
	}
	return o.NotificationSound, true
}

// HasNotificationSound returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasNotificationSound() bool {
	if o != nil && !IsNil(o.NotificationSound) {
		return true
	}

	return false
}

// SetNotificationSound gets a reference to the given string and assigns it to the NotificationSound field.
// Deprecated
func (o *RegisterQueue200Response) SetNotificationSound(v string) {
	o.NotificationSound = &v
}

// GetPmContentInDesktopNotifications returns the PmContentInDesktopNotifications field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetPmContentInDesktopNotifications() bool {
	if o == nil || IsNil(o.PmContentInDesktopNotifications) {
		var ret bool
		return ret
	}
	return *o.PmContentInDesktopNotifications
}

// GetPmContentInDesktopNotificationsOk returns a tuple with the PmContentInDesktopNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetPmContentInDesktopNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.PmContentInDesktopNotifications) {
		return nil, false
	}
	return o.PmContentInDesktopNotifications, true
}

// HasPmContentInDesktopNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPmContentInDesktopNotifications() bool {
	if o != nil && !IsNil(o.PmContentInDesktopNotifications) {
		return true
	}

	return false
}

// SetPmContentInDesktopNotifications gets a reference to the given bool and assigns it to the PmContentInDesktopNotifications field.
// Deprecated
func (o *RegisterQueue200Response) SetPmContentInDesktopNotifications(v bool) {
	o.PmContentInDesktopNotifications = &v
}

// GetDesktopIconCountDisplay returns the DesktopIconCountDisplay field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetDesktopIconCountDisplay() int32 {
	if o == nil || IsNil(o.DesktopIconCountDisplay) {
		var ret int32
		return ret
	}
	return *o.DesktopIconCountDisplay
}

// GetDesktopIconCountDisplayOk returns a tuple with the DesktopIconCountDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetDesktopIconCountDisplayOk() (*int32, bool) {
	if o == nil || IsNil(o.DesktopIconCountDisplay) {
		return nil, false
	}
	return o.DesktopIconCountDisplay, true
}

// HasDesktopIconCountDisplay returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDesktopIconCountDisplay() bool {
	if o != nil && !IsNil(o.DesktopIconCountDisplay) {
		return true
	}

	return false
}

// SetDesktopIconCountDisplay gets a reference to the given int32 and assigns it to the DesktopIconCountDisplay field.
// Deprecated
func (o *RegisterQueue200Response) SetDesktopIconCountDisplay(v int32) {
	o.DesktopIconCountDisplay = &v
}

// GetRealmNameInEmailNotificationsPolicy returns the RealmNameInEmailNotificationsPolicy field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmNameInEmailNotificationsPolicy() int32 {
	if o == nil || IsNil(o.RealmNameInEmailNotificationsPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmNameInEmailNotificationsPolicy
}

// GetRealmNameInEmailNotificationsPolicyOk returns a tuple with the RealmNameInEmailNotificationsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmNameInEmailNotificationsPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmNameInEmailNotificationsPolicy) {
		return nil, false
	}
	return o.RealmNameInEmailNotificationsPolicy, true
}

// HasRealmNameInEmailNotificationsPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNameInEmailNotificationsPolicy() bool {
	if o != nil && !IsNil(o.RealmNameInEmailNotificationsPolicy) {
		return true
	}

	return false
}

// SetRealmNameInEmailNotificationsPolicy gets a reference to the given int32 and assigns it to the RealmNameInEmailNotificationsPolicy field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmNameInEmailNotificationsPolicy(v int32) {
	o.RealmNameInEmailNotificationsPolicy = &v
}

// GetPresenceEnabled returns the PresenceEnabled field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetPresenceEnabled() bool {
	if o == nil || IsNil(o.PresenceEnabled) {
		var ret bool
		return ret
	}
	return *o.PresenceEnabled
}

// GetPresenceEnabledOk returns a tuple with the PresenceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetPresenceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PresenceEnabled) {
		return nil, false
	}
	return o.PresenceEnabled, true
}

// HasPresenceEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPresenceEnabled() bool {
	if o != nil && !IsNil(o.PresenceEnabled) {
		return true
	}

	return false
}

// SetPresenceEnabled gets a reference to the given bool and assigns it to the PresenceEnabled field.
// Deprecated
func (o *RegisterQueue200Response) SetPresenceEnabled(v bool) {
	o.PresenceEnabled = &v
}

// GetAvailableNotificationSounds returns the AvailableNotificationSounds field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetAvailableNotificationSounds() []string {
	if o == nil || IsNil(o.AvailableNotificationSounds) {
		var ret []string
		return ret
	}
	return o.AvailableNotificationSounds
}

// GetAvailableNotificationSoundsOk returns a tuple with the AvailableNotificationSounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetAvailableNotificationSoundsOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableNotificationSounds) {
		return nil, false
	}
	return o.AvailableNotificationSounds, true
}

// HasAvailableNotificationSounds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasAvailableNotificationSounds() bool {
	if o != nil && !IsNil(o.AvailableNotificationSounds) {
		return true
	}

	return false
}

// SetAvailableNotificationSounds gets a reference to the given []string and assigns it to the AvailableNotificationSounds field.
// Deprecated
func (o *RegisterQueue200Response) SetAvailableNotificationSounds(v []string) {
	o.AvailableNotificationSounds = v
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetColorScheme() int32 {
	if o == nil || IsNil(o.ColorScheme) {
		var ret int32
		return ret
	}
	return *o.ColorScheme
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetColorSchemeOk() (*int32, bool) {
	if o == nil || IsNil(o.ColorScheme) {
		return nil, false
	}
	return o.ColorScheme, true
}

// HasColorScheme returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasColorScheme() bool {
	if o != nil && !IsNil(o.ColorScheme) {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given int32 and assigns it to the ColorScheme field.
// Deprecated
func (o *RegisterQueue200Response) SetColorScheme(v int32) {
	o.ColorScheme = &v
}

// GetDefaultLanguage returns the DefaultLanguage field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetDefaultLanguage() string {
	if o == nil || IsNil(o.DefaultLanguage) {
		var ret string
		return ret
	}
	return *o.DefaultLanguage
}

// GetDefaultLanguageOk returns a tuple with the DefaultLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetDefaultLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLanguage) {
		return nil, false
	}
	return o.DefaultLanguage, true
}

// HasDefaultLanguage returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDefaultLanguage() bool {
	if o != nil && !IsNil(o.DefaultLanguage) {
		return true
	}

	return false
}

// SetDefaultLanguage gets a reference to the given string and assigns it to the DefaultLanguage field.
// Deprecated
func (o *RegisterQueue200Response) SetDefaultLanguage(v string) {
	o.DefaultLanguage = &v
}

// GetDemoteInactiveStreams returns the DemoteInactiveStreams field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetDemoteInactiveStreams() int32 {
	if o == nil || IsNil(o.DemoteInactiveStreams) {
		var ret int32
		return ret
	}
	return *o.DemoteInactiveStreams
}

// GetDemoteInactiveStreamsOk returns a tuple with the DemoteInactiveStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetDemoteInactiveStreamsOk() (*int32, bool) {
	if o == nil || IsNil(o.DemoteInactiveStreams) {
		return nil, false
	}
	return o.DemoteInactiveStreams, true
}

// HasDemoteInactiveStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDemoteInactiveStreams() bool {
	if o != nil && !IsNil(o.DemoteInactiveStreams) {
		return true
	}

	return false
}

// SetDemoteInactiveStreams gets a reference to the given int32 and assigns it to the DemoteInactiveStreams field.
// Deprecated
func (o *RegisterQueue200Response) SetDemoteInactiveStreams(v int32) {
	o.DemoteInactiveStreams = &v
}

// GetEmojiset returns the Emojiset field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEmojiset() string {
	if o == nil || IsNil(o.Emojiset) {
		var ret string
		return ret
	}
	return *o.Emojiset
}

// GetEmojisetOk returns a tuple with the Emojiset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEmojisetOk() (*string, bool) {
	if o == nil || IsNil(o.Emojiset) {
		return nil, false
	}
	return o.Emojiset, true
}

// HasEmojiset returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEmojiset() bool {
	if o != nil && !IsNil(o.Emojiset) {
		return true
	}

	return false
}

// SetEmojiset gets a reference to the given string and assigns it to the Emojiset field.
// Deprecated
func (o *RegisterQueue200Response) SetEmojiset(v string) {
	o.Emojiset = &v
}

// GetEnableDraftsSynchronization returns the EnableDraftsSynchronization field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDraftsSynchronization() bool {
	if o == nil || IsNil(o.EnableDraftsSynchronization) {
		var ret bool
		return ret
	}
	return *o.EnableDraftsSynchronization
}

// GetEnableDraftsSynchronizationOk returns a tuple with the EnableDraftsSynchronization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnableDraftsSynchronizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDraftsSynchronization) {
		return nil, false
	}
	return o.EnableDraftsSynchronization, true
}

// HasEnableDraftsSynchronization returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnableDraftsSynchronization() bool {
	if o != nil && !IsNil(o.EnableDraftsSynchronization) {
		return true
	}

	return false
}

// SetEnableDraftsSynchronization gets a reference to the given bool and assigns it to the EnableDraftsSynchronization field.
// Deprecated
func (o *RegisterQueue200Response) SetEnableDraftsSynchronization(v bool) {
	o.EnableDraftsSynchronization = &v
}

// GetFluidLayoutWidth returns the FluidLayoutWidth field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetFluidLayoutWidth() bool {
	if o == nil || IsNil(o.FluidLayoutWidth) {
		var ret bool
		return ret
	}
	return *o.FluidLayoutWidth
}

// GetFluidLayoutWidthOk returns a tuple with the FluidLayoutWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetFluidLayoutWidthOk() (*bool, bool) {
	if o == nil || IsNil(o.FluidLayoutWidth) {
		return nil, false
	}
	return o.FluidLayoutWidth, true
}

// HasFluidLayoutWidth returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasFluidLayoutWidth() bool {
	if o != nil && !IsNil(o.FluidLayoutWidth) {
		return true
	}

	return false
}

// SetFluidLayoutWidth gets a reference to the given bool and assigns it to the FluidLayoutWidth field.
// Deprecated
func (o *RegisterQueue200Response) SetFluidLayoutWidth(v bool) {
	o.FluidLayoutWidth = &v
}

// GetWebHomeView returns the WebHomeView field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetWebHomeView() string {
	if o == nil || IsNil(o.WebHomeView) {
		var ret string
		return ret
	}
	return *o.WebHomeView
}

// GetWebHomeViewOk returns a tuple with the WebHomeView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetWebHomeViewOk() (*string, bool) {
	if o == nil || IsNil(o.WebHomeView) {
		return nil, false
	}
	return o.WebHomeView, true
}

// HasWebHomeView returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasWebHomeView() bool {
	if o != nil && !IsNil(o.WebHomeView) {
		return true
	}

	return false
}

// SetWebHomeView gets a reference to the given string and assigns it to the WebHomeView field.
// Deprecated
func (o *RegisterQueue200Response) SetWebHomeView(v string) {
	o.WebHomeView = &v
}

// GetHighContrastMode returns the HighContrastMode field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetHighContrastMode() bool {
	if o == nil || IsNil(o.HighContrastMode) {
		var ret bool
		return ret
	}
	return *o.HighContrastMode
}

// GetHighContrastModeOk returns a tuple with the HighContrastMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetHighContrastModeOk() (*bool, bool) {
	if o == nil || IsNil(o.HighContrastMode) {
		return nil, false
	}
	return o.HighContrastMode, true
}

// HasHighContrastMode returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasHighContrastMode() bool {
	if o != nil && !IsNil(o.HighContrastMode) {
		return true
	}

	return false
}

// SetHighContrastMode gets a reference to the given bool and assigns it to the HighContrastMode field.
// Deprecated
func (o *RegisterQueue200Response) SetHighContrastMode(v bool) {
	o.HighContrastMode = &v
}

// GetLeftSideUserlist returns the LeftSideUserlist field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetLeftSideUserlist() bool {
	if o == nil || IsNil(o.LeftSideUserlist) {
		var ret bool
		return ret
	}
	return *o.LeftSideUserlist
}

// GetLeftSideUserlistOk returns a tuple with the LeftSideUserlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetLeftSideUserlistOk() (*bool, bool) {
	if o == nil || IsNil(o.LeftSideUserlist) {
		return nil, false
	}
	return o.LeftSideUserlist, true
}

// HasLeftSideUserlist returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasLeftSideUserlist() bool {
	if o != nil && !IsNil(o.LeftSideUserlist) {
		return true
	}

	return false
}

// SetLeftSideUserlist gets a reference to the given bool and assigns it to the LeftSideUserlist field.
// Deprecated
func (o *RegisterQueue200Response) SetLeftSideUserlist(v bool) {
	o.LeftSideUserlist = &v
}

// GetStarredMessageCounts returns the StarredMessageCounts field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetStarredMessageCounts() bool {
	if o == nil || IsNil(o.StarredMessageCounts) {
		var ret bool
		return ret
	}
	return *o.StarredMessageCounts
}

// GetStarredMessageCountsOk returns a tuple with the StarredMessageCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetStarredMessageCountsOk() (*bool, bool) {
	if o == nil || IsNil(o.StarredMessageCounts) {
		return nil, false
	}
	return o.StarredMessageCounts, true
}

// HasStarredMessageCounts returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasStarredMessageCounts() bool {
	if o != nil && !IsNil(o.StarredMessageCounts) {
		return true
	}

	return false
}

// SetStarredMessageCounts gets a reference to the given bool and assigns it to the StarredMessageCounts field.
// Deprecated
func (o *RegisterQueue200Response) SetStarredMessageCounts(v bool) {
	o.StarredMessageCounts = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
// Deprecated
func (o *RegisterQueue200Response) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTranslateEmoticons returns the TranslateEmoticons field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetTranslateEmoticons() bool {
	if o == nil || IsNil(o.TranslateEmoticons) {
		var ret bool
		return ret
	}
	return *o.TranslateEmoticons
}

// GetTranslateEmoticonsOk returns a tuple with the TranslateEmoticons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetTranslateEmoticonsOk() (*bool, bool) {
	if o == nil || IsNil(o.TranslateEmoticons) {
		return nil, false
	}
	return o.TranslateEmoticons, true
}

// HasTranslateEmoticons returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasTranslateEmoticons() bool {
	if o != nil && !IsNil(o.TranslateEmoticons) {
		return true
	}

	return false
}

// SetTranslateEmoticons gets a reference to the given bool and assigns it to the TranslateEmoticons field.
// Deprecated
func (o *RegisterQueue200Response) SetTranslateEmoticons(v bool) {
	o.TranslateEmoticons = &v
}

// GetTwentyFourHourTime returns the TwentyFourHourTime field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetTwentyFourHourTime() bool {
	if o == nil || IsNil(o.TwentyFourHourTime) {
		var ret bool
		return ret
	}
	return *o.TwentyFourHourTime
}

// GetTwentyFourHourTimeOk returns a tuple with the TwentyFourHourTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetTwentyFourHourTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.TwentyFourHourTime) {
		return nil, false
	}
	return o.TwentyFourHourTime, true
}

// HasTwentyFourHourTime returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasTwentyFourHourTime() bool {
	if o != nil && !IsNil(o.TwentyFourHourTime) {
		return true
	}

	return false
}

// SetTwentyFourHourTime gets a reference to the given bool and assigns it to the TwentyFourHourTime field.
// Deprecated
func (o *RegisterQueue200Response) SetTwentyFourHourTime(v bool) {
	o.TwentyFourHourTime = &v
}

// GetReceivesTypingNotifications returns the ReceivesTypingNotifications field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetReceivesTypingNotifications() bool {
	if o == nil || IsNil(o.ReceivesTypingNotifications) {
		var ret bool
		return ret
	}
	return *o.ReceivesTypingNotifications
}

// GetReceivesTypingNotificationsOk returns a tuple with the ReceivesTypingNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetReceivesTypingNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReceivesTypingNotifications) {
		return nil, false
	}
	return o.ReceivesTypingNotifications, true
}

// HasReceivesTypingNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasReceivesTypingNotifications() bool {
	if o != nil && !IsNil(o.ReceivesTypingNotifications) {
		return true
	}

	return false
}

// SetReceivesTypingNotifications gets a reference to the given bool and assigns it to the ReceivesTypingNotifications field.
func (o *RegisterQueue200Response) SetReceivesTypingNotifications(v bool) {
	o.ReceivesTypingNotifications = &v
}

// GetEnterSends returns the EnterSends field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEnterSends() bool {
	if o == nil || IsNil(o.EnterSends) {
		var ret bool
		return ret
	}
	return *o.EnterSends
}

// GetEnterSendsOk returns a tuple with the EnterSends field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEnterSendsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnterSends) {
		return nil, false
	}
	return o.EnterSends, true
}

// HasEnterSends returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEnterSends() bool {
	if o != nil && !IsNil(o.EnterSends) {
		return true
	}

	return false
}

// SetEnterSends gets a reference to the given bool and assigns it to the EnterSends field.
// Deprecated
func (o *RegisterQueue200Response) SetEnterSends(v bool) {
	o.EnterSends = &v
}

// GetEmojisetChoices returns the EmojisetChoices field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetEmojisetChoices() []RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner {
	if o == nil || IsNil(o.EmojisetChoices) {
		var ret []RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner
		return ret
	}
	return o.EmojisetChoices
}

// GetEmojisetChoicesOk returns a tuple with the EmojisetChoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetEmojisetChoicesOk() ([]RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner, bool) {
	if o == nil || IsNil(o.EmojisetChoices) {
		return nil, false
	}
	return o.EmojisetChoices, true
}

// HasEmojisetChoices returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEmojisetChoices() bool {
	if o != nil && !IsNil(o.EmojisetChoices) {
		return true
	}

	return false
}

// SetEmojisetChoices gets a reference to the given []RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner and assigns it to the EmojisetChoices field.
// Deprecated
func (o *RegisterQueue200Response) SetEmojisetChoices(v []RegisterQueue200ResponseAllOfUserSettingsEmojisetChoicesInner) {
	o.EmojisetChoices = v
}

// GetRealmMessageEditHistoryVisibilityPolicy returns the RealmMessageEditHistoryVisibilityPolicy field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmMessageEditHistoryVisibilityPolicy() string {
	if o == nil || IsNil(o.RealmMessageEditHistoryVisibilityPolicy) {
		var ret string
		return ret
	}
	return *o.RealmMessageEditHistoryVisibilityPolicy
}

// GetRealmMessageEditHistoryVisibilityPolicyOk returns a tuple with the RealmMessageEditHistoryVisibilityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmMessageEditHistoryVisibilityPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RealmMessageEditHistoryVisibilityPolicy) {
		return nil, false
	}
	return o.RealmMessageEditHistoryVisibilityPolicy, true
}

// HasRealmMessageEditHistoryVisibilityPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMessageEditHistoryVisibilityPolicy() bool {
	if o != nil && !IsNil(o.RealmMessageEditHistoryVisibilityPolicy) {
		return true
	}

	return false
}

// SetRealmMessageEditHistoryVisibilityPolicy gets a reference to the given string and assigns it to the RealmMessageEditHistoryVisibilityPolicy field.
func (o *RegisterQueue200Response) SetRealmMessageEditHistoryVisibilityPolicy(v string) {
	o.RealmMessageEditHistoryVisibilityPolicy = &v
}

// GetRealmAllowEditHistory returns the RealmAllowEditHistory field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmAllowEditHistory() bool {
	if o == nil || IsNil(o.RealmAllowEditHistory) {
		var ret bool
		return ret
	}
	return *o.RealmAllowEditHistory
}

// GetRealmAllowEditHistoryOk returns a tuple with the RealmAllowEditHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmAllowEditHistoryOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmAllowEditHistory) {
		return nil, false
	}
	return o.RealmAllowEditHistory, true
}

// HasRealmAllowEditHistory returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmAllowEditHistory() bool {
	if o != nil && !IsNil(o.RealmAllowEditHistory) {
		return true
	}

	return false
}

// SetRealmAllowEditHistory gets a reference to the given bool and assigns it to the RealmAllowEditHistory field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmAllowEditHistory(v bool) {
	o.RealmAllowEditHistory = &v
}

// GetRealmCanAddCustomEmojiGroup returns the RealmCanAddCustomEmojiGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanAddCustomEmojiGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanAddCustomEmojiGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanAddCustomEmojiGroup
}

// GetRealmCanAddCustomEmojiGroupOk returns a tuple with the RealmCanAddCustomEmojiGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanAddCustomEmojiGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanAddCustomEmojiGroup) {
		return nil, false
	}
	return o.RealmCanAddCustomEmojiGroup, true
}

// HasRealmCanAddCustomEmojiGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanAddCustomEmojiGroup() bool {
	if o != nil && !IsNil(o.RealmCanAddCustomEmojiGroup) {
		return true
	}

	return false
}

// SetRealmCanAddCustomEmojiGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanAddCustomEmojiGroup field.
func (o *RegisterQueue200Response) SetRealmCanAddCustomEmojiGroup(v GroupSettingValue) {
	o.RealmCanAddCustomEmojiGroup = &v
}

// GetRealmCanAddSubscribersGroup returns the RealmCanAddSubscribersGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanAddSubscribersGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanAddSubscribersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanAddSubscribersGroup
}

// GetRealmCanAddSubscribersGroupOk returns a tuple with the RealmCanAddSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanAddSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanAddSubscribersGroup) {
		return nil, false
	}
	return o.RealmCanAddSubscribersGroup, true
}

// HasRealmCanAddSubscribersGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanAddSubscribersGroup() bool {
	if o != nil && !IsNil(o.RealmCanAddSubscribersGroup) {
		return true
	}

	return false
}

// SetRealmCanAddSubscribersGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanAddSubscribersGroup field.
func (o *RegisterQueue200Response) SetRealmCanAddSubscribersGroup(v GroupSettingValue) {
	o.RealmCanAddSubscribersGroup = &v
}

// GetRealmCanDeleteAnyMessageGroup returns the RealmCanDeleteAnyMessageGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanDeleteAnyMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanDeleteAnyMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanDeleteAnyMessageGroup
}

// GetRealmCanDeleteAnyMessageGroupOk returns a tuple with the RealmCanDeleteAnyMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanDeleteAnyMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanDeleteAnyMessageGroup) {
		return nil, false
	}
	return o.RealmCanDeleteAnyMessageGroup, true
}

// HasRealmCanDeleteAnyMessageGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanDeleteAnyMessageGroup() bool {
	if o != nil && !IsNil(o.RealmCanDeleteAnyMessageGroup) {
		return true
	}

	return false
}

// SetRealmCanDeleteAnyMessageGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanDeleteAnyMessageGroup field.
func (o *RegisterQueue200Response) SetRealmCanDeleteAnyMessageGroup(v GroupSettingValue) {
	o.RealmCanDeleteAnyMessageGroup = &v
}

// GetRealmCanDeleteOwnMessageGroup returns the RealmCanDeleteOwnMessageGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanDeleteOwnMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanDeleteOwnMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanDeleteOwnMessageGroup
}

// GetRealmCanDeleteOwnMessageGroupOk returns a tuple with the RealmCanDeleteOwnMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanDeleteOwnMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanDeleteOwnMessageGroup) {
		return nil, false
	}
	return o.RealmCanDeleteOwnMessageGroup, true
}

// HasRealmCanDeleteOwnMessageGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanDeleteOwnMessageGroup() bool {
	if o != nil && !IsNil(o.RealmCanDeleteOwnMessageGroup) {
		return true
	}

	return false
}

// SetRealmCanDeleteOwnMessageGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanDeleteOwnMessageGroup field.
func (o *RegisterQueue200Response) SetRealmCanDeleteOwnMessageGroup(v GroupSettingValue) {
	o.RealmCanDeleteOwnMessageGroup = &v
}

// GetRealmCanSetDeleteMessagePolicyGroup returns the RealmCanSetDeleteMessagePolicyGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanSetDeleteMessagePolicyGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanSetDeleteMessagePolicyGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanSetDeleteMessagePolicyGroup
}

// GetRealmCanSetDeleteMessagePolicyGroupOk returns a tuple with the RealmCanSetDeleteMessagePolicyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanSetDeleteMessagePolicyGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanSetDeleteMessagePolicyGroup) {
		return nil, false
	}
	return o.RealmCanSetDeleteMessagePolicyGroup, true
}

// HasRealmCanSetDeleteMessagePolicyGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanSetDeleteMessagePolicyGroup() bool {
	if o != nil && !IsNil(o.RealmCanSetDeleteMessagePolicyGroup) {
		return true
	}

	return false
}

// SetRealmCanSetDeleteMessagePolicyGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanSetDeleteMessagePolicyGroup field.
func (o *RegisterQueue200Response) SetRealmCanSetDeleteMessagePolicyGroup(v GroupSettingValue) {
	o.RealmCanSetDeleteMessagePolicyGroup = &v
}

// GetRealmCanSetTopicsPolicyGroup returns the RealmCanSetTopicsPolicyGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanSetTopicsPolicyGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanSetTopicsPolicyGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanSetTopicsPolicyGroup
}

// GetRealmCanSetTopicsPolicyGroupOk returns a tuple with the RealmCanSetTopicsPolicyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanSetTopicsPolicyGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanSetTopicsPolicyGroup) {
		return nil, false
	}
	return o.RealmCanSetTopicsPolicyGroup, true
}

// HasRealmCanSetTopicsPolicyGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanSetTopicsPolicyGroup() bool {
	if o != nil && !IsNil(o.RealmCanSetTopicsPolicyGroup) {
		return true
	}

	return false
}

// SetRealmCanSetTopicsPolicyGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanSetTopicsPolicyGroup field.
func (o *RegisterQueue200Response) SetRealmCanSetTopicsPolicyGroup(v GroupSettingValue) {
	o.RealmCanSetTopicsPolicyGroup = &v
}

// GetRealmCanInviteUsersGroup returns the RealmCanInviteUsersGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanInviteUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanInviteUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanInviteUsersGroup
}

// GetRealmCanInviteUsersGroupOk returns a tuple with the RealmCanInviteUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanInviteUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanInviteUsersGroup) {
		return nil, false
	}
	return o.RealmCanInviteUsersGroup, true
}

// HasRealmCanInviteUsersGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanInviteUsersGroup() bool {
	if o != nil && !IsNil(o.RealmCanInviteUsersGroup) {
		return true
	}

	return false
}

// SetRealmCanInviteUsersGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanInviteUsersGroup field.
func (o *RegisterQueue200Response) SetRealmCanInviteUsersGroup(v GroupSettingValue) {
	o.RealmCanInviteUsersGroup = &v
}

// GetRealmCanMentionManyUsersGroup returns the RealmCanMentionManyUsersGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanMentionManyUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanMentionManyUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanMentionManyUsersGroup
}

// GetRealmCanMentionManyUsersGroupOk returns a tuple with the RealmCanMentionManyUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanMentionManyUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanMentionManyUsersGroup) {
		return nil, false
	}
	return o.RealmCanMentionManyUsersGroup, true
}

// HasRealmCanMentionManyUsersGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanMentionManyUsersGroup() bool {
	if o != nil && !IsNil(o.RealmCanMentionManyUsersGroup) {
		return true
	}

	return false
}

// SetRealmCanMentionManyUsersGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanMentionManyUsersGroup field.
func (o *RegisterQueue200Response) SetRealmCanMentionManyUsersGroup(v GroupSettingValue) {
	o.RealmCanMentionManyUsersGroup = &v
}

// GetRealmCanMoveMessagesBetweenChannelsGroup returns the RealmCanMoveMessagesBetweenChannelsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanMoveMessagesBetweenChannelsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanMoveMessagesBetweenChannelsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanMoveMessagesBetweenChannelsGroup
}

// GetRealmCanMoveMessagesBetweenChannelsGroupOk returns a tuple with the RealmCanMoveMessagesBetweenChannelsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanMoveMessagesBetweenChannelsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanMoveMessagesBetweenChannelsGroup) {
		return nil, false
	}
	return o.RealmCanMoveMessagesBetweenChannelsGroup, true
}

// HasRealmCanMoveMessagesBetweenChannelsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanMoveMessagesBetweenChannelsGroup() bool {
	if o != nil && !IsNil(o.RealmCanMoveMessagesBetweenChannelsGroup) {
		return true
	}

	return false
}

// SetRealmCanMoveMessagesBetweenChannelsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanMoveMessagesBetweenChannelsGroup field.
func (o *RegisterQueue200Response) SetRealmCanMoveMessagesBetweenChannelsGroup(v GroupSettingValue) {
	o.RealmCanMoveMessagesBetweenChannelsGroup = &v
}

// GetRealmCanMoveMessagesBetweenTopicsGroup returns the RealmCanMoveMessagesBetweenTopicsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanMoveMessagesBetweenTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanMoveMessagesBetweenTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanMoveMessagesBetweenTopicsGroup
}

// GetRealmCanMoveMessagesBetweenTopicsGroupOk returns a tuple with the RealmCanMoveMessagesBetweenTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanMoveMessagesBetweenTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanMoveMessagesBetweenTopicsGroup) {
		return nil, false
	}
	return o.RealmCanMoveMessagesBetweenTopicsGroup, true
}

// HasRealmCanMoveMessagesBetweenTopicsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanMoveMessagesBetweenTopicsGroup() bool {
	if o != nil && !IsNil(o.RealmCanMoveMessagesBetweenTopicsGroup) {
		return true
	}

	return false
}

// SetRealmCanMoveMessagesBetweenTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanMoveMessagesBetweenTopicsGroup field.
func (o *RegisterQueue200Response) SetRealmCanMoveMessagesBetweenTopicsGroup(v GroupSettingValue) {
	o.RealmCanMoveMessagesBetweenTopicsGroup = &v
}

// GetRealmCanCreateGroups returns the RealmCanCreateGroups field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreateGroups() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreateGroups) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreateGroups
}

// GetRealmCanCreateGroupsOk returns a tuple with the RealmCanCreateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreateGroupsOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreateGroups) {
		return nil, false
	}
	return o.RealmCanCreateGroups, true
}

// HasRealmCanCreateGroups returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreateGroups() bool {
	if o != nil && !IsNil(o.RealmCanCreateGroups) {
		return true
	}

	return false
}

// SetRealmCanCreateGroups gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreateGroups field.
func (o *RegisterQueue200Response) SetRealmCanCreateGroups(v GroupSettingValue) {
	o.RealmCanCreateGroups = &v
}

// GetRealmCanCreateBotsGroup returns the RealmCanCreateBotsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreateBotsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreateBotsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreateBotsGroup
}

// GetRealmCanCreateBotsGroupOk returns a tuple with the RealmCanCreateBotsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreateBotsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreateBotsGroup) {
		return nil, false
	}
	return o.RealmCanCreateBotsGroup, true
}

// HasRealmCanCreateBotsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreateBotsGroup() bool {
	if o != nil && !IsNil(o.RealmCanCreateBotsGroup) {
		return true
	}

	return false
}

// SetRealmCanCreateBotsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreateBotsGroup field.
func (o *RegisterQueue200Response) SetRealmCanCreateBotsGroup(v GroupSettingValue) {
	o.RealmCanCreateBotsGroup = &v
}

// GetRealmCanCreateWriteOnlyBotsGroup returns the RealmCanCreateWriteOnlyBotsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreateWriteOnlyBotsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreateWriteOnlyBotsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreateWriteOnlyBotsGroup
}

// GetRealmCanCreateWriteOnlyBotsGroupOk returns a tuple with the RealmCanCreateWriteOnlyBotsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreateWriteOnlyBotsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreateWriteOnlyBotsGroup) {
		return nil, false
	}
	return o.RealmCanCreateWriteOnlyBotsGroup, true
}

// HasRealmCanCreateWriteOnlyBotsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreateWriteOnlyBotsGroup() bool {
	if o != nil && !IsNil(o.RealmCanCreateWriteOnlyBotsGroup) {
		return true
	}

	return false
}

// SetRealmCanCreateWriteOnlyBotsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreateWriteOnlyBotsGroup field.
func (o *RegisterQueue200Response) SetRealmCanCreateWriteOnlyBotsGroup(v GroupSettingValue) {
	o.RealmCanCreateWriteOnlyBotsGroup = &v
}

// GetRealmCanManageAllGroups returns the RealmCanManageAllGroups field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanManageAllGroups() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanManageAllGroups) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanManageAllGroups
}

// GetRealmCanManageAllGroupsOk returns a tuple with the RealmCanManageAllGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanManageAllGroupsOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanManageAllGroups) {
		return nil, false
	}
	return o.RealmCanManageAllGroups, true
}

// HasRealmCanManageAllGroups returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanManageAllGroups() bool {
	if o != nil && !IsNil(o.RealmCanManageAllGroups) {
		return true
	}

	return false
}

// SetRealmCanManageAllGroups gets a reference to the given GroupSettingValue and assigns it to the RealmCanManageAllGroups field.
func (o *RegisterQueue200Response) SetRealmCanManageAllGroups(v GroupSettingValue) {
	o.RealmCanManageAllGroups = &v
}

// GetRealmCanManageBillingGroup returns the RealmCanManageBillingGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanManageBillingGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanManageBillingGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanManageBillingGroup
}

// GetRealmCanManageBillingGroupOk returns a tuple with the RealmCanManageBillingGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanManageBillingGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanManageBillingGroup) {
		return nil, false
	}
	return o.RealmCanManageBillingGroup, true
}

// HasRealmCanManageBillingGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanManageBillingGroup() bool {
	if o != nil && !IsNil(o.RealmCanManageBillingGroup) {
		return true
	}

	return false
}

// SetRealmCanManageBillingGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanManageBillingGroup field.
func (o *RegisterQueue200Response) SetRealmCanManageBillingGroup(v GroupSettingValue) {
	o.RealmCanManageBillingGroup = &v
}

// GetRealmCanCreatePublicChannelGroup returns the RealmCanCreatePublicChannelGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreatePublicChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreatePublicChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreatePublicChannelGroup
}

// GetRealmCanCreatePublicChannelGroupOk returns a tuple with the RealmCanCreatePublicChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreatePublicChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreatePublicChannelGroup) {
		return nil, false
	}
	return o.RealmCanCreatePublicChannelGroup, true
}

// HasRealmCanCreatePublicChannelGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreatePublicChannelGroup() bool {
	if o != nil && !IsNil(o.RealmCanCreatePublicChannelGroup) {
		return true
	}

	return false
}

// SetRealmCanCreatePublicChannelGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreatePublicChannelGroup field.
func (o *RegisterQueue200Response) SetRealmCanCreatePublicChannelGroup(v GroupSettingValue) {
	o.RealmCanCreatePublicChannelGroup = &v
}

// GetRealmCanCreatePrivateChannelGroup returns the RealmCanCreatePrivateChannelGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreatePrivateChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreatePrivateChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreatePrivateChannelGroup
}

// GetRealmCanCreatePrivateChannelGroupOk returns a tuple with the RealmCanCreatePrivateChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreatePrivateChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreatePrivateChannelGroup) {
		return nil, false
	}
	return o.RealmCanCreatePrivateChannelGroup, true
}

// HasRealmCanCreatePrivateChannelGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreatePrivateChannelGroup() bool {
	if o != nil && !IsNil(o.RealmCanCreatePrivateChannelGroup) {
		return true
	}

	return false
}

// SetRealmCanCreatePrivateChannelGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreatePrivateChannelGroup field.
func (o *RegisterQueue200Response) SetRealmCanCreatePrivateChannelGroup(v GroupSettingValue) {
	o.RealmCanCreatePrivateChannelGroup = &v
}

// GetRealmCanCreateWebPublicChannelGroup returns the RealmCanCreateWebPublicChannelGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanCreateWebPublicChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanCreateWebPublicChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanCreateWebPublicChannelGroup
}

// GetRealmCanCreateWebPublicChannelGroupOk returns a tuple with the RealmCanCreateWebPublicChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanCreateWebPublicChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanCreateWebPublicChannelGroup) {
		return nil, false
	}
	return o.RealmCanCreateWebPublicChannelGroup, true
}

// HasRealmCanCreateWebPublicChannelGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanCreateWebPublicChannelGroup() bool {
	if o != nil && !IsNil(o.RealmCanCreateWebPublicChannelGroup) {
		return true
	}

	return false
}

// SetRealmCanCreateWebPublicChannelGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanCreateWebPublicChannelGroup field.
func (o *RegisterQueue200Response) SetRealmCanCreateWebPublicChannelGroup(v GroupSettingValue) {
	o.RealmCanCreateWebPublicChannelGroup = &v
}

// GetRealmCanResolveTopicsGroup returns the RealmCanResolveTopicsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanResolveTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanResolveTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanResolveTopicsGroup
}

// GetRealmCanResolveTopicsGroupOk returns a tuple with the RealmCanResolveTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanResolveTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanResolveTopicsGroup) {
		return nil, false
	}
	return o.RealmCanResolveTopicsGroup, true
}

// HasRealmCanResolveTopicsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanResolveTopicsGroup() bool {
	if o != nil && !IsNil(o.RealmCanResolveTopicsGroup) {
		return true
	}

	return false
}

// SetRealmCanResolveTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanResolveTopicsGroup field.
func (o *RegisterQueue200Response) SetRealmCanResolveTopicsGroup(v GroupSettingValue) {
	o.RealmCanResolveTopicsGroup = &v
}

// GetRealmCreatePublicStreamPolicy returns the RealmCreatePublicStreamPolicy field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreatePublicStreamPolicy() int32 {
	if o == nil || IsNil(o.RealmCreatePublicStreamPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmCreatePublicStreamPolicy
}

// GetRealmCreatePublicStreamPolicyOk returns a tuple with the RealmCreatePublicStreamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreatePublicStreamPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmCreatePublicStreamPolicy) {
		return nil, false
	}
	return o.RealmCreatePublicStreamPolicy, true
}

// HasRealmCreatePublicStreamPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCreatePublicStreamPolicy() bool {
	if o != nil && !IsNil(o.RealmCreatePublicStreamPolicy) {
		return true
	}

	return false
}

// SetRealmCreatePublicStreamPolicy gets a reference to the given int32 and assigns it to the RealmCreatePublicStreamPolicy field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmCreatePublicStreamPolicy(v int32) {
	o.RealmCreatePublicStreamPolicy = &v
}

// GetRealmCreatePrivateStreamPolicy returns the RealmCreatePrivateStreamPolicy field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreatePrivateStreamPolicy() int32 {
	if o == nil || IsNil(o.RealmCreatePrivateStreamPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmCreatePrivateStreamPolicy
}

// GetRealmCreatePrivateStreamPolicyOk returns a tuple with the RealmCreatePrivateStreamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreatePrivateStreamPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmCreatePrivateStreamPolicy) {
		return nil, false
	}
	return o.RealmCreatePrivateStreamPolicy, true
}

// HasRealmCreatePrivateStreamPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCreatePrivateStreamPolicy() bool {
	if o != nil && !IsNil(o.RealmCreatePrivateStreamPolicy) {
		return true
	}

	return false
}

// SetRealmCreatePrivateStreamPolicy gets a reference to the given int32 and assigns it to the RealmCreatePrivateStreamPolicy field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmCreatePrivateStreamPolicy(v int32) {
	o.RealmCreatePrivateStreamPolicy = &v
}

// GetRealmCreateWebPublicStreamPolicy returns the RealmCreateWebPublicStreamPolicy field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreateWebPublicStreamPolicy() int32 {
	if o == nil || IsNil(o.RealmCreateWebPublicStreamPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmCreateWebPublicStreamPolicy
}

// GetRealmCreateWebPublicStreamPolicyOk returns a tuple with the RealmCreateWebPublicStreamPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmCreateWebPublicStreamPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmCreateWebPublicStreamPolicy) {
		return nil, false
	}
	return o.RealmCreateWebPublicStreamPolicy, true
}

// HasRealmCreateWebPublicStreamPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCreateWebPublicStreamPolicy() bool {
	if o != nil && !IsNil(o.RealmCreateWebPublicStreamPolicy) {
		return true
	}

	return false
}

// SetRealmCreateWebPublicStreamPolicy gets a reference to the given int32 and assigns it to the RealmCreateWebPublicStreamPolicy field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmCreateWebPublicStreamPolicy(v int32) {
	o.RealmCreateWebPublicStreamPolicy = &v
}

// GetRealmWildcardMentionPolicy returns the RealmWildcardMentionPolicy field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmWildcardMentionPolicy() int32 {
	if o == nil || IsNil(o.RealmWildcardMentionPolicy) {
		var ret int32
		return ret
	}
	return *o.RealmWildcardMentionPolicy
}

// GetRealmWildcardMentionPolicyOk returns a tuple with the RealmWildcardMentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmWildcardMentionPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmWildcardMentionPolicy) {
		return nil, false
	}
	return o.RealmWildcardMentionPolicy, true
}

// HasRealmWildcardMentionPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmWildcardMentionPolicy() bool {
	if o != nil && !IsNil(o.RealmWildcardMentionPolicy) {
		return true
	}

	return false
}

// SetRealmWildcardMentionPolicy gets a reference to the given int32 and assigns it to the RealmWildcardMentionPolicy field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmWildcardMentionPolicy(v int32) {
	o.RealmWildcardMentionPolicy = &v
}

// GetRealmDefaultLanguage returns the RealmDefaultLanguage field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDefaultLanguage() string {
	if o == nil || IsNil(o.RealmDefaultLanguage) {
		var ret string
		return ret
	}
	return *o.RealmDefaultLanguage
}

// GetRealmDefaultLanguageOk returns a tuple with the RealmDefaultLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDefaultLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.RealmDefaultLanguage) {
		return nil, false
	}
	return o.RealmDefaultLanguage, true
}

// HasRealmDefaultLanguage returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDefaultLanguage() bool {
	if o != nil && !IsNil(o.RealmDefaultLanguage) {
		return true
	}

	return false
}

// SetRealmDefaultLanguage gets a reference to the given string and assigns it to the RealmDefaultLanguage field.
func (o *RegisterQueue200Response) SetRealmDefaultLanguage(v string) {
	o.RealmDefaultLanguage = &v
}

// GetRealmWelcomeMessageCustomText returns the RealmWelcomeMessageCustomText field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmWelcomeMessageCustomText() string {
	if o == nil || IsNil(o.RealmWelcomeMessageCustomText) {
		var ret string
		return ret
	}
	return *o.RealmWelcomeMessageCustomText
}

// GetRealmWelcomeMessageCustomTextOk returns a tuple with the RealmWelcomeMessageCustomText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmWelcomeMessageCustomTextOk() (*string, bool) {
	if o == nil || IsNil(o.RealmWelcomeMessageCustomText) {
		return nil, false
	}
	return o.RealmWelcomeMessageCustomText, true
}

// HasRealmWelcomeMessageCustomText returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmWelcomeMessageCustomText() bool {
	if o != nil && !IsNil(o.RealmWelcomeMessageCustomText) {
		return true
	}

	return false
}

// SetRealmWelcomeMessageCustomText gets a reference to the given string and assigns it to the RealmWelcomeMessageCustomText field.
func (o *RegisterQueue200Response) SetRealmWelcomeMessageCustomText(v string) {
	o.RealmWelcomeMessageCustomText = &v
}

// GetRealmDescription returns the RealmDescription field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDescription() string {
	if o == nil || IsNil(o.RealmDescription) {
		var ret string
		return ret
	}
	return *o.RealmDescription
}

// GetRealmDescriptionOk returns a tuple with the RealmDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RealmDescription) {
		return nil, false
	}
	return o.RealmDescription, true
}

// HasRealmDescription returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDescription() bool {
	if o != nil && !IsNil(o.RealmDescription) {
		return true
	}

	return false
}

// SetRealmDescription gets a reference to the given string and assigns it to the RealmDescription field.
func (o *RegisterQueue200Response) SetRealmDescription(v string) {
	o.RealmDescription = &v
}

// GetRealmDigestEmailsEnabled returns the RealmDigestEmailsEnabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDigestEmailsEnabled() bool {
	if o == nil || IsNil(o.RealmDigestEmailsEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmDigestEmailsEnabled
}

// GetRealmDigestEmailsEnabledOk returns a tuple with the RealmDigestEmailsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDigestEmailsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmDigestEmailsEnabled) {
		return nil, false
	}
	return o.RealmDigestEmailsEnabled, true
}

// HasRealmDigestEmailsEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDigestEmailsEnabled() bool {
	if o != nil && !IsNil(o.RealmDigestEmailsEnabled) {
		return true
	}

	return false
}

// SetRealmDigestEmailsEnabled gets a reference to the given bool and assigns it to the RealmDigestEmailsEnabled field.
func (o *RegisterQueue200Response) SetRealmDigestEmailsEnabled(v bool) {
	o.RealmDigestEmailsEnabled = &v
}

// GetRealmDisallowDisposableEmailAddresses returns the RealmDisallowDisposableEmailAddresses field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDisallowDisposableEmailAddresses() bool {
	if o == nil || IsNil(o.RealmDisallowDisposableEmailAddresses) {
		var ret bool
		return ret
	}
	return *o.RealmDisallowDisposableEmailAddresses
}

// GetRealmDisallowDisposableEmailAddressesOk returns a tuple with the RealmDisallowDisposableEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDisallowDisposableEmailAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmDisallowDisposableEmailAddresses) {
		return nil, false
	}
	return o.RealmDisallowDisposableEmailAddresses, true
}

// HasRealmDisallowDisposableEmailAddresses returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDisallowDisposableEmailAddresses() bool {
	if o != nil && !IsNil(o.RealmDisallowDisposableEmailAddresses) {
		return true
	}

	return false
}

// SetRealmDisallowDisposableEmailAddresses gets a reference to the given bool and assigns it to the RealmDisallowDisposableEmailAddresses field.
func (o *RegisterQueue200Response) SetRealmDisallowDisposableEmailAddresses(v bool) {
	o.RealmDisallowDisposableEmailAddresses = &v
}

// GetRealmEmailChangesDisabled returns the RealmEmailChangesDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmailChangesDisabled() bool {
	if o == nil || IsNil(o.RealmEmailChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.RealmEmailChangesDisabled
}

// GetRealmEmailChangesDisabledOk returns a tuple with the RealmEmailChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmailChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEmailChangesDisabled) {
		return nil, false
	}
	return o.RealmEmailChangesDisabled, true
}

// HasRealmEmailChangesDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmailChangesDisabled() bool {
	if o != nil && !IsNil(o.RealmEmailChangesDisabled) {
		return true
	}

	return false
}

// SetRealmEmailChangesDisabled gets a reference to the given bool and assigns it to the RealmEmailChangesDisabled field.
func (o *RegisterQueue200Response) SetRealmEmailChangesDisabled(v bool) {
	o.RealmEmailChangesDisabled = &v
}

// GetRealmInviteRequired returns the RealmInviteRequired field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmInviteRequired() bool {
	if o == nil || IsNil(o.RealmInviteRequired) {
		var ret bool
		return ret
	}
	return *o.RealmInviteRequired
}

// GetRealmInviteRequiredOk returns a tuple with the RealmInviteRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmInviteRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmInviteRequired) {
		return nil, false
	}
	return o.RealmInviteRequired, true
}

// HasRealmInviteRequired returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmInviteRequired() bool {
	if o != nil && !IsNil(o.RealmInviteRequired) {
		return true
	}

	return false
}

// SetRealmInviteRequired gets a reference to the given bool and assigns it to the RealmInviteRequired field.
func (o *RegisterQueue200Response) SetRealmInviteRequired(v bool) {
	o.RealmInviteRequired = &v
}

// GetRealmCreateMultiuseInviteGroup returns the RealmCreateMultiuseInviteGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCreateMultiuseInviteGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCreateMultiuseInviteGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCreateMultiuseInviteGroup
}

// GetRealmCreateMultiuseInviteGroupOk returns a tuple with the RealmCreateMultiuseInviteGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCreateMultiuseInviteGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCreateMultiuseInviteGroup) {
		return nil, false
	}
	return o.RealmCreateMultiuseInviteGroup, true
}

// HasRealmCreateMultiuseInviteGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCreateMultiuseInviteGroup() bool {
	if o != nil && !IsNil(o.RealmCreateMultiuseInviteGroup) {
		return true
	}

	return false
}

// SetRealmCreateMultiuseInviteGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCreateMultiuseInviteGroup field.
func (o *RegisterQueue200Response) SetRealmCreateMultiuseInviteGroup(v GroupSettingValue) {
	o.RealmCreateMultiuseInviteGroup = &v
}

// GetRealmInlineImagePreview returns the RealmInlineImagePreview field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmInlineImagePreview() bool {
	if o == nil || IsNil(o.RealmInlineImagePreview) {
		var ret bool
		return ret
	}
	return *o.RealmInlineImagePreview
}

// GetRealmInlineImagePreviewOk returns a tuple with the RealmInlineImagePreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmInlineImagePreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmInlineImagePreview) {
		return nil, false
	}
	return o.RealmInlineImagePreview, true
}

// HasRealmInlineImagePreview returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmInlineImagePreview() bool {
	if o != nil && !IsNil(o.RealmInlineImagePreview) {
		return true
	}

	return false
}

// SetRealmInlineImagePreview gets a reference to the given bool and assigns it to the RealmInlineImagePreview field.
func (o *RegisterQueue200Response) SetRealmInlineImagePreview(v bool) {
	o.RealmInlineImagePreview = &v
}

// GetRealmInlineUrlEmbedPreview returns the RealmInlineUrlEmbedPreview field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmInlineUrlEmbedPreview() bool {
	if o == nil || IsNil(o.RealmInlineUrlEmbedPreview) {
		var ret bool
		return ret
	}
	return *o.RealmInlineUrlEmbedPreview
}

// GetRealmInlineUrlEmbedPreviewOk returns a tuple with the RealmInlineUrlEmbedPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmInlineUrlEmbedPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmInlineUrlEmbedPreview) {
		return nil, false
	}
	return o.RealmInlineUrlEmbedPreview, true
}

// HasRealmInlineUrlEmbedPreview returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmInlineUrlEmbedPreview() bool {
	if o != nil && !IsNil(o.RealmInlineUrlEmbedPreview) {
		return true
	}

	return false
}

// SetRealmInlineUrlEmbedPreview gets a reference to the given bool and assigns it to the RealmInlineUrlEmbedPreview field.
func (o *RegisterQueue200Response) SetRealmInlineUrlEmbedPreview(v bool) {
	o.RealmInlineUrlEmbedPreview = &v
}

// GetRealmTopicsPolicy returns the RealmTopicsPolicy field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmTopicsPolicy() string {
	if o == nil || IsNil(o.RealmTopicsPolicy) {
		var ret string
		return ret
	}
	return *o.RealmTopicsPolicy
}

// GetRealmTopicsPolicyOk returns a tuple with the RealmTopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmTopicsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RealmTopicsPolicy) {
		return nil, false
	}
	return o.RealmTopicsPolicy, true
}

// HasRealmTopicsPolicy returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmTopicsPolicy() bool {
	if o != nil && !IsNil(o.RealmTopicsPolicy) {
		return true
	}

	return false
}

// SetRealmTopicsPolicy gets a reference to the given string and assigns it to the RealmTopicsPolicy field.
func (o *RegisterQueue200Response) SetRealmTopicsPolicy(v string) {
	o.RealmTopicsPolicy = &v
}

// GetRealmMandatoryTopics returns the RealmMandatoryTopics field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmMandatoryTopics() bool {
	if o == nil || IsNil(o.RealmMandatoryTopics) {
		var ret bool
		return ret
	}
	return *o.RealmMandatoryTopics
}

// GetRealmMandatoryTopicsOk returns a tuple with the RealmMandatoryTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmMandatoryTopicsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmMandatoryTopics) {
		return nil, false
	}
	return o.RealmMandatoryTopics, true
}

// HasRealmMandatoryTopics returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMandatoryTopics() bool {
	if o != nil && !IsNil(o.RealmMandatoryTopics) {
		return true
	}

	return false
}

// SetRealmMandatoryTopics gets a reference to the given bool and assigns it to the RealmMandatoryTopics field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmMandatoryTopics(v bool) {
	o.RealmMandatoryTopics = &v
}

// GetRealmMessageRetentionDays returns the RealmMessageRetentionDays field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmMessageRetentionDays() int32 {
	if o == nil || IsNil(o.RealmMessageRetentionDays) {
		var ret int32
		return ret
	}
	return *o.RealmMessageRetentionDays
}

// GetRealmMessageRetentionDaysOk returns a tuple with the RealmMessageRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmMessageRetentionDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmMessageRetentionDays) {
		return nil, false
	}
	return o.RealmMessageRetentionDays, true
}

// HasRealmMessageRetentionDays returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMessageRetentionDays() bool {
	if o != nil && !IsNil(o.RealmMessageRetentionDays) {
		return true
	}

	return false
}

// SetRealmMessageRetentionDays gets a reference to the given int32 and assigns it to the RealmMessageRetentionDays field.
func (o *RegisterQueue200Response) SetRealmMessageRetentionDays(v int32) {
	o.RealmMessageRetentionDays = &v
}

// GetRealmName returns the RealmName field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmName() string {
	if o == nil || IsNil(o.RealmName) {
		var ret string
		return ret
	}
	return *o.RealmName
}

// GetRealmNameOk returns a tuple with the RealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNameOk() (*string, bool) {
	if o == nil || IsNil(o.RealmName) {
		return nil, false
	}
	return o.RealmName, true
}

// HasRealmName returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmName() bool {
	if o != nil && !IsNil(o.RealmName) {
		return true
	}

	return false
}

// SetRealmName gets a reference to the given string and assigns it to the RealmName field.
func (o *RegisterQueue200Response) SetRealmName(v string) {
	o.RealmName = &v
}

// GetRealmRequireE2eePushNotifications returns the RealmRequireE2eePushNotifications field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmRequireE2eePushNotifications() bool {
	if o == nil || IsNil(o.RealmRequireE2eePushNotifications) {
		var ret bool
		return ret
	}
	return *o.RealmRequireE2eePushNotifications
}

// GetRealmRequireE2eePushNotificationsOk returns a tuple with the RealmRequireE2eePushNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmRequireE2eePushNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmRequireE2eePushNotifications) {
		return nil, false
	}
	return o.RealmRequireE2eePushNotifications, true
}

// HasRealmRequireE2eePushNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmRequireE2eePushNotifications() bool {
	if o != nil && !IsNil(o.RealmRequireE2eePushNotifications) {
		return true
	}

	return false
}

// SetRealmRequireE2eePushNotifications gets a reference to the given bool and assigns it to the RealmRequireE2eePushNotifications field.
func (o *RegisterQueue200Response) SetRealmRequireE2eePushNotifications(v bool) {
	o.RealmRequireE2eePushNotifications = &v
}

// GetRealmRequireUniqueNames returns the RealmRequireUniqueNames field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmRequireUniqueNames() bool {
	if o == nil || IsNil(o.RealmRequireUniqueNames) {
		var ret bool
		return ret
	}
	return *o.RealmRequireUniqueNames
}

// GetRealmRequireUniqueNamesOk returns a tuple with the RealmRequireUniqueNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmRequireUniqueNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmRequireUniqueNames) {
		return nil, false
	}
	return o.RealmRequireUniqueNames, true
}

// HasRealmRequireUniqueNames returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmRequireUniqueNames() bool {
	if o != nil && !IsNil(o.RealmRequireUniqueNames) {
		return true
	}

	return false
}

// SetRealmRequireUniqueNames gets a reference to the given bool and assigns it to the RealmRequireUniqueNames field.
func (o *RegisterQueue200Response) SetRealmRequireUniqueNames(v bool) {
	o.RealmRequireUniqueNames = &v
}

// GetRealmNameChangesDisabled returns the RealmNameChangesDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmNameChangesDisabled() bool {
	if o == nil || IsNil(o.RealmNameChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.RealmNameChangesDisabled
}

// GetRealmNameChangesDisabledOk returns a tuple with the RealmNameChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNameChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmNameChangesDisabled) {
		return nil, false
	}
	return o.RealmNameChangesDisabled, true
}

// HasRealmNameChangesDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNameChangesDisabled() bool {
	if o != nil && !IsNil(o.RealmNameChangesDisabled) {
		return true
	}

	return false
}

// SetRealmNameChangesDisabled gets a reference to the given bool and assigns it to the RealmNameChangesDisabled field.
func (o *RegisterQueue200Response) SetRealmNameChangesDisabled(v bool) {
	o.RealmNameChangesDisabled = &v
}

// GetRealmAvatarChangesDisabled returns the RealmAvatarChangesDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmAvatarChangesDisabled() bool {
	if o == nil || IsNil(o.RealmAvatarChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.RealmAvatarChangesDisabled
}

// GetRealmAvatarChangesDisabledOk returns a tuple with the RealmAvatarChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmAvatarChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmAvatarChangesDisabled) {
		return nil, false
	}
	return o.RealmAvatarChangesDisabled, true
}

// HasRealmAvatarChangesDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmAvatarChangesDisabled() bool {
	if o != nil && !IsNil(o.RealmAvatarChangesDisabled) {
		return true
	}

	return false
}

// SetRealmAvatarChangesDisabled gets a reference to the given bool and assigns it to the RealmAvatarChangesDisabled field.
func (o *RegisterQueue200Response) SetRealmAvatarChangesDisabled(v bool) {
	o.RealmAvatarChangesDisabled = &v
}

// GetRealmEmailsRestrictedToDomains returns the RealmEmailsRestrictedToDomains field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmailsRestrictedToDomains() bool {
	if o == nil || IsNil(o.RealmEmailsRestrictedToDomains) {
		var ret bool
		return ret
	}
	return *o.RealmEmailsRestrictedToDomains
}

// GetRealmEmailsRestrictedToDomainsOk returns a tuple with the RealmEmailsRestrictedToDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmailsRestrictedToDomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEmailsRestrictedToDomains) {
		return nil, false
	}
	return o.RealmEmailsRestrictedToDomains, true
}

// HasRealmEmailsRestrictedToDomains returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmailsRestrictedToDomains() bool {
	if o != nil && !IsNil(o.RealmEmailsRestrictedToDomains) {
		return true
	}

	return false
}

// SetRealmEmailsRestrictedToDomains gets a reference to the given bool and assigns it to the RealmEmailsRestrictedToDomains field.
func (o *RegisterQueue200Response) SetRealmEmailsRestrictedToDomains(v bool) {
	o.RealmEmailsRestrictedToDomains = &v
}

// GetRealmSendWelcomeEmails returns the RealmSendWelcomeEmails field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmSendWelcomeEmails() bool {
	if o == nil || IsNil(o.RealmSendWelcomeEmails) {
		var ret bool
		return ret
	}
	return *o.RealmSendWelcomeEmails
}

// GetRealmSendWelcomeEmailsOk returns a tuple with the RealmSendWelcomeEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmSendWelcomeEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmSendWelcomeEmails) {
		return nil, false
	}
	return o.RealmSendWelcomeEmails, true
}

// HasRealmSendWelcomeEmails returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmSendWelcomeEmails() bool {
	if o != nil && !IsNil(o.RealmSendWelcomeEmails) {
		return true
	}

	return false
}

// SetRealmSendWelcomeEmails gets a reference to the given bool and assigns it to the RealmSendWelcomeEmails field.
func (o *RegisterQueue200Response) SetRealmSendWelcomeEmails(v bool) {
	o.RealmSendWelcomeEmails = &v
}

// GetRealmMessageContentAllowedInEmailNotifications returns the RealmMessageContentAllowedInEmailNotifications field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmMessageContentAllowedInEmailNotifications() bool {
	if o == nil || IsNil(o.RealmMessageContentAllowedInEmailNotifications) {
		var ret bool
		return ret
	}
	return *o.RealmMessageContentAllowedInEmailNotifications
}

// GetRealmMessageContentAllowedInEmailNotificationsOk returns a tuple with the RealmMessageContentAllowedInEmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmMessageContentAllowedInEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmMessageContentAllowedInEmailNotifications) {
		return nil, false
	}
	return o.RealmMessageContentAllowedInEmailNotifications, true
}

// HasRealmMessageContentAllowedInEmailNotifications returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMessageContentAllowedInEmailNotifications() bool {
	if o != nil && !IsNil(o.RealmMessageContentAllowedInEmailNotifications) {
		return true
	}

	return false
}

// SetRealmMessageContentAllowedInEmailNotifications gets a reference to the given bool and assigns it to the RealmMessageContentAllowedInEmailNotifications field.
func (o *RegisterQueue200Response) SetRealmMessageContentAllowedInEmailNotifications(v bool) {
	o.RealmMessageContentAllowedInEmailNotifications = &v
}

// GetRealmEnableSpectatorAccess returns the RealmEnableSpectatorAccess field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEnableSpectatorAccess() bool {
	if o == nil || IsNil(o.RealmEnableSpectatorAccess) {
		var ret bool
		return ret
	}
	return *o.RealmEnableSpectatorAccess
}

// GetRealmEnableSpectatorAccessOk returns a tuple with the RealmEnableSpectatorAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEnableSpectatorAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEnableSpectatorAccess) {
		return nil, false
	}
	return o.RealmEnableSpectatorAccess, true
}

// HasRealmEnableSpectatorAccess returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEnableSpectatorAccess() bool {
	if o != nil && !IsNil(o.RealmEnableSpectatorAccess) {
		return true
	}

	return false
}

// SetRealmEnableSpectatorAccess gets a reference to the given bool and assigns it to the RealmEnableSpectatorAccess field.
func (o *RegisterQueue200Response) SetRealmEnableSpectatorAccess(v bool) {
	o.RealmEnableSpectatorAccess = &v
}

// GetRealmWantAdvertiseInCommunitiesDirectory returns the RealmWantAdvertiseInCommunitiesDirectory field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmWantAdvertiseInCommunitiesDirectory() bool {
	if o == nil || IsNil(o.RealmWantAdvertiseInCommunitiesDirectory) {
		var ret bool
		return ret
	}
	return *o.RealmWantAdvertiseInCommunitiesDirectory
}

// GetRealmWantAdvertiseInCommunitiesDirectoryOk returns a tuple with the RealmWantAdvertiseInCommunitiesDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmWantAdvertiseInCommunitiesDirectoryOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmWantAdvertiseInCommunitiesDirectory) {
		return nil, false
	}
	return o.RealmWantAdvertiseInCommunitiesDirectory, true
}

// HasRealmWantAdvertiseInCommunitiesDirectory returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmWantAdvertiseInCommunitiesDirectory() bool {
	if o != nil && !IsNil(o.RealmWantAdvertiseInCommunitiesDirectory) {
		return true
	}

	return false
}

// SetRealmWantAdvertiseInCommunitiesDirectory gets a reference to the given bool and assigns it to the RealmWantAdvertiseInCommunitiesDirectory field.
func (o *RegisterQueue200Response) SetRealmWantAdvertiseInCommunitiesDirectory(v bool) {
	o.RealmWantAdvertiseInCommunitiesDirectory = &v
}

// GetRealmVideoChatProvider returns the RealmVideoChatProvider field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmVideoChatProvider() int32 {
	if o == nil || IsNil(o.RealmVideoChatProvider) {
		var ret int32
		return ret
	}
	return *o.RealmVideoChatProvider
}

// GetRealmVideoChatProviderOk returns a tuple with the RealmVideoChatProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmVideoChatProviderOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmVideoChatProvider) {
		return nil, false
	}
	return o.RealmVideoChatProvider, true
}

// HasRealmVideoChatProvider returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmVideoChatProvider() bool {
	if o != nil && !IsNil(o.RealmVideoChatProvider) {
		return true
	}

	return false
}

// SetRealmVideoChatProvider gets a reference to the given int32 and assigns it to the RealmVideoChatProvider field.
func (o *RegisterQueue200Response) SetRealmVideoChatProvider(v int32) {
	o.RealmVideoChatProvider = &v
}

// GetRealmJitsiServerUrl returns the RealmJitsiServerUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmJitsiServerUrl() string {
	if o == nil || IsNil(o.RealmJitsiServerUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RealmJitsiServerUrl.Get()
}

// GetRealmJitsiServerUrlOk returns a tuple with the RealmJitsiServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmJitsiServerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmJitsiServerUrl.Get(), o.RealmJitsiServerUrl.IsSet()
}

// HasRealmJitsiServerUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmJitsiServerUrl() bool {
	if o != nil && o.RealmJitsiServerUrl.IsSet() {
		return true
	}

	return false
}

// SetRealmJitsiServerUrl gets a reference to the given NullableString and assigns it to the RealmJitsiServerUrl field.
func (o *RegisterQueue200Response) SetRealmJitsiServerUrl(v string) {
	o.RealmJitsiServerUrl.Set(&v)
}

// SetRealmJitsiServerUrlNil sets the value for RealmJitsiServerUrl to be an explicit nil
func (o *RegisterQueue200Response) SetRealmJitsiServerUrlNil() {
	o.RealmJitsiServerUrl.Set(nil)
}

// UnsetRealmJitsiServerUrl ensures that no value is present for RealmJitsiServerUrl, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmJitsiServerUrl() {
	o.RealmJitsiServerUrl.Unset()
}

// GetRealmGiphyRating returns the RealmGiphyRating field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmGiphyRating() int32 {
	if o == nil || IsNil(o.RealmGiphyRating) {
		var ret int32
		return ret
	}
	return *o.RealmGiphyRating
}

// GetRealmGiphyRatingOk returns a tuple with the RealmGiphyRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmGiphyRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmGiphyRating) {
		return nil, false
	}
	return o.RealmGiphyRating, true
}

// HasRealmGiphyRating returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmGiphyRating() bool {
	if o != nil && !IsNil(o.RealmGiphyRating) {
		return true
	}

	return false
}

// SetRealmGiphyRating gets a reference to the given int32 and assigns it to the RealmGiphyRating field.
func (o *RegisterQueue200Response) SetRealmGiphyRating(v int32) {
	o.RealmGiphyRating = &v
}

// GetRealmWaitingPeriodThreshold returns the RealmWaitingPeriodThreshold field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmWaitingPeriodThreshold() int32 {
	if o == nil || IsNil(o.RealmWaitingPeriodThreshold) {
		var ret int32
		return ret
	}
	return *o.RealmWaitingPeriodThreshold
}

// GetRealmWaitingPeriodThresholdOk returns a tuple with the RealmWaitingPeriodThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmWaitingPeriodThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmWaitingPeriodThreshold) {
		return nil, false
	}
	return o.RealmWaitingPeriodThreshold, true
}

// HasRealmWaitingPeriodThreshold returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmWaitingPeriodThreshold() bool {
	if o != nil && !IsNil(o.RealmWaitingPeriodThreshold) {
		return true
	}

	return false
}

// SetRealmWaitingPeriodThreshold gets a reference to the given int32 and assigns it to the RealmWaitingPeriodThreshold field.
func (o *RegisterQueue200Response) SetRealmWaitingPeriodThreshold(v int32) {
	o.RealmWaitingPeriodThreshold = &v
}

// GetRealmDigestWeekday returns the RealmDigestWeekday field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDigestWeekday() int32 {
	if o == nil || IsNil(o.RealmDigestWeekday) {
		var ret int32
		return ret
	}
	return *o.RealmDigestWeekday
}

// GetRealmDigestWeekdayOk returns a tuple with the RealmDigestWeekday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDigestWeekdayOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmDigestWeekday) {
		return nil, false
	}
	return o.RealmDigestWeekday, true
}

// HasRealmDigestWeekday returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDigestWeekday() bool {
	if o != nil && !IsNil(o.RealmDigestWeekday) {
		return true
	}

	return false
}

// SetRealmDigestWeekday gets a reference to the given int32 and assigns it to the RealmDigestWeekday field.
func (o *RegisterQueue200Response) SetRealmDigestWeekday(v int32) {
	o.RealmDigestWeekday = &v
}

// GetRealmDirectMessageInitiatorGroup returns the RealmDirectMessageInitiatorGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDirectMessageInitiatorGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmDirectMessageInitiatorGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmDirectMessageInitiatorGroup
}

// GetRealmDirectMessageInitiatorGroupOk returns a tuple with the RealmDirectMessageInitiatorGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDirectMessageInitiatorGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmDirectMessageInitiatorGroup) {
		return nil, false
	}
	return o.RealmDirectMessageInitiatorGroup, true
}

// HasRealmDirectMessageInitiatorGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDirectMessageInitiatorGroup() bool {
	if o != nil && !IsNil(o.RealmDirectMessageInitiatorGroup) {
		return true
	}

	return false
}

// SetRealmDirectMessageInitiatorGroup gets a reference to the given GroupSettingValue and assigns it to the RealmDirectMessageInitiatorGroup field.
func (o *RegisterQueue200Response) SetRealmDirectMessageInitiatorGroup(v GroupSettingValue) {
	o.RealmDirectMessageInitiatorGroup = &v
}

// GetRealmDirectMessagePermissionGroup returns the RealmDirectMessagePermissionGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDirectMessagePermissionGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmDirectMessagePermissionGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmDirectMessagePermissionGroup
}

// GetRealmDirectMessagePermissionGroupOk returns a tuple with the RealmDirectMessagePermissionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDirectMessagePermissionGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmDirectMessagePermissionGroup) {
		return nil, false
	}
	return o.RealmDirectMessagePermissionGroup, true
}

// HasRealmDirectMessagePermissionGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDirectMessagePermissionGroup() bool {
	if o != nil && !IsNil(o.RealmDirectMessagePermissionGroup) {
		return true
	}

	return false
}

// SetRealmDirectMessagePermissionGroup gets a reference to the given GroupSettingValue and assigns it to the RealmDirectMessagePermissionGroup field.
func (o *RegisterQueue200Response) SetRealmDirectMessagePermissionGroup(v GroupSettingValue) {
	o.RealmDirectMessagePermissionGroup = &v
}

// GetRealmDefaultCodeBlockLanguage returns the RealmDefaultCodeBlockLanguage field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDefaultCodeBlockLanguage() string {
	if o == nil || IsNil(o.RealmDefaultCodeBlockLanguage) {
		var ret string
		return ret
	}
	return *o.RealmDefaultCodeBlockLanguage
}

// GetRealmDefaultCodeBlockLanguageOk returns a tuple with the RealmDefaultCodeBlockLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDefaultCodeBlockLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.RealmDefaultCodeBlockLanguage) {
		return nil, false
	}
	return o.RealmDefaultCodeBlockLanguage, true
}

// HasRealmDefaultCodeBlockLanguage returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDefaultCodeBlockLanguage() bool {
	if o != nil && !IsNil(o.RealmDefaultCodeBlockLanguage) {
		return true
	}

	return false
}

// SetRealmDefaultCodeBlockLanguage gets a reference to the given string and assigns it to the RealmDefaultCodeBlockLanguage field.
func (o *RegisterQueue200Response) SetRealmDefaultCodeBlockLanguage(v string) {
	o.RealmDefaultCodeBlockLanguage = &v
}

// GetRealmMessageContentDeleteLimitSeconds returns the RealmMessageContentDeleteLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmMessageContentDeleteLimitSeconds() int32 {
	if o == nil || IsNil(o.RealmMessageContentDeleteLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmMessageContentDeleteLimitSeconds.Get()
}

// GetRealmMessageContentDeleteLimitSecondsOk returns a tuple with the RealmMessageContentDeleteLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmMessageContentDeleteLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmMessageContentDeleteLimitSeconds.Get(), o.RealmMessageContentDeleteLimitSeconds.IsSet()
}

// HasRealmMessageContentDeleteLimitSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMessageContentDeleteLimitSeconds() bool {
	if o != nil && o.RealmMessageContentDeleteLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetRealmMessageContentDeleteLimitSeconds gets a reference to the given NullableInt32 and assigns it to the RealmMessageContentDeleteLimitSeconds field.
func (o *RegisterQueue200Response) SetRealmMessageContentDeleteLimitSeconds(v int32) {
	o.RealmMessageContentDeleteLimitSeconds.Set(&v)
}

// SetRealmMessageContentDeleteLimitSecondsNil sets the value for RealmMessageContentDeleteLimitSeconds to be an explicit nil
func (o *RegisterQueue200Response) SetRealmMessageContentDeleteLimitSecondsNil() {
	o.RealmMessageContentDeleteLimitSeconds.Set(nil)
}

// UnsetRealmMessageContentDeleteLimitSeconds ensures that no value is present for RealmMessageContentDeleteLimitSeconds, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmMessageContentDeleteLimitSeconds() {
	o.RealmMessageContentDeleteLimitSeconds.Unset()
}

// GetRealmAuthenticationMethods returns the RealmAuthenticationMethods field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmAuthenticationMethods() map[string]RealmAuthenticationMethod {
	if o == nil || IsNil(o.RealmAuthenticationMethods) {
		var ret map[string]RealmAuthenticationMethod
		return ret
	}
	return *o.RealmAuthenticationMethods
}

// GetRealmAuthenticationMethodsOk returns a tuple with the RealmAuthenticationMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmAuthenticationMethodsOk() (*map[string]RealmAuthenticationMethod, bool) {
	if o == nil || IsNil(o.RealmAuthenticationMethods) {
		return nil, false
	}
	return o.RealmAuthenticationMethods, true
}

// HasRealmAuthenticationMethods returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmAuthenticationMethods() bool {
	if o != nil && !IsNil(o.RealmAuthenticationMethods) {
		return true
	}

	return false
}

// SetRealmAuthenticationMethods gets a reference to the given map[string]RealmAuthenticationMethod and assigns it to the RealmAuthenticationMethods field.
func (o *RegisterQueue200Response) SetRealmAuthenticationMethods(v map[string]RealmAuthenticationMethod) {
	o.RealmAuthenticationMethods = &v
}

// GetRealmAllowMessageEditing returns the RealmAllowMessageEditing field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmAllowMessageEditing() bool {
	if o == nil || IsNil(o.RealmAllowMessageEditing) {
		var ret bool
		return ret
	}
	return *o.RealmAllowMessageEditing
}

// GetRealmAllowMessageEditingOk returns a tuple with the RealmAllowMessageEditing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmAllowMessageEditingOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmAllowMessageEditing) {
		return nil, false
	}
	return o.RealmAllowMessageEditing, true
}

// HasRealmAllowMessageEditing returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmAllowMessageEditing() bool {
	if o != nil && !IsNil(o.RealmAllowMessageEditing) {
		return true
	}

	return false
}

// SetRealmAllowMessageEditing gets a reference to the given bool and assigns it to the RealmAllowMessageEditing field.
func (o *RegisterQueue200Response) SetRealmAllowMessageEditing(v bool) {
	o.RealmAllowMessageEditing = &v
}

// GetRealmMessageContentEditLimitSeconds returns the RealmMessageContentEditLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmMessageContentEditLimitSeconds() int32 {
	if o == nil || IsNil(o.RealmMessageContentEditLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmMessageContentEditLimitSeconds.Get()
}

// GetRealmMessageContentEditLimitSecondsOk returns a tuple with the RealmMessageContentEditLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmMessageContentEditLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmMessageContentEditLimitSeconds.Get(), o.RealmMessageContentEditLimitSeconds.IsSet()
}

// HasRealmMessageContentEditLimitSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMessageContentEditLimitSeconds() bool {
	if o != nil && o.RealmMessageContentEditLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetRealmMessageContentEditLimitSeconds gets a reference to the given NullableInt32 and assigns it to the RealmMessageContentEditLimitSeconds field.
func (o *RegisterQueue200Response) SetRealmMessageContentEditLimitSeconds(v int32) {
	o.RealmMessageContentEditLimitSeconds.Set(&v)
}

// SetRealmMessageContentEditLimitSecondsNil sets the value for RealmMessageContentEditLimitSeconds to be an explicit nil
func (o *RegisterQueue200Response) SetRealmMessageContentEditLimitSecondsNil() {
	o.RealmMessageContentEditLimitSeconds.Set(nil)
}

// UnsetRealmMessageContentEditLimitSeconds ensures that no value is present for RealmMessageContentEditLimitSeconds, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmMessageContentEditLimitSeconds() {
	o.RealmMessageContentEditLimitSeconds.Unset()
}

// GetRealmMoveMessagesWithinStreamLimitSeconds returns the RealmMoveMessagesWithinStreamLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmMoveMessagesWithinStreamLimitSeconds() int32 {
	if o == nil || IsNil(o.RealmMoveMessagesWithinStreamLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmMoveMessagesWithinStreamLimitSeconds.Get()
}

// GetRealmMoveMessagesWithinStreamLimitSecondsOk returns a tuple with the RealmMoveMessagesWithinStreamLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmMoveMessagesWithinStreamLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmMoveMessagesWithinStreamLimitSeconds.Get(), o.RealmMoveMessagesWithinStreamLimitSeconds.IsSet()
}

// HasRealmMoveMessagesWithinStreamLimitSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMoveMessagesWithinStreamLimitSeconds() bool {
	if o != nil && o.RealmMoveMessagesWithinStreamLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetRealmMoveMessagesWithinStreamLimitSeconds gets a reference to the given NullableInt32 and assigns it to the RealmMoveMessagesWithinStreamLimitSeconds field.
func (o *RegisterQueue200Response) SetRealmMoveMessagesWithinStreamLimitSeconds(v int32) {
	o.RealmMoveMessagesWithinStreamLimitSeconds.Set(&v)
}

// SetRealmMoveMessagesWithinStreamLimitSecondsNil sets the value for RealmMoveMessagesWithinStreamLimitSeconds to be an explicit nil
func (o *RegisterQueue200Response) SetRealmMoveMessagesWithinStreamLimitSecondsNil() {
	o.RealmMoveMessagesWithinStreamLimitSeconds.Set(nil)
}

// UnsetRealmMoveMessagesWithinStreamLimitSeconds ensures that no value is present for RealmMoveMessagesWithinStreamLimitSeconds, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmMoveMessagesWithinStreamLimitSeconds() {
	o.RealmMoveMessagesWithinStreamLimitSeconds.Unset()
}

// GetRealmMoveMessagesBetweenStreamsLimitSeconds returns the RealmMoveMessagesBetweenStreamsLimitSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmMoveMessagesBetweenStreamsLimitSeconds() int32 {
	if o == nil || IsNil(o.RealmMoveMessagesBetweenStreamsLimitSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmMoveMessagesBetweenStreamsLimitSeconds.Get()
}

// GetRealmMoveMessagesBetweenStreamsLimitSecondsOk returns a tuple with the RealmMoveMessagesBetweenStreamsLimitSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmMoveMessagesBetweenStreamsLimitSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmMoveMessagesBetweenStreamsLimitSeconds.Get(), o.RealmMoveMessagesBetweenStreamsLimitSeconds.IsSet()
}

// HasRealmMoveMessagesBetweenStreamsLimitSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmMoveMessagesBetweenStreamsLimitSeconds() bool {
	if o != nil && o.RealmMoveMessagesBetweenStreamsLimitSeconds.IsSet() {
		return true
	}

	return false
}

// SetRealmMoveMessagesBetweenStreamsLimitSeconds gets a reference to the given NullableInt32 and assigns it to the RealmMoveMessagesBetweenStreamsLimitSeconds field.
func (o *RegisterQueue200Response) SetRealmMoveMessagesBetweenStreamsLimitSeconds(v int32) {
	o.RealmMoveMessagesBetweenStreamsLimitSeconds.Set(&v)
}

// SetRealmMoveMessagesBetweenStreamsLimitSecondsNil sets the value for RealmMoveMessagesBetweenStreamsLimitSeconds to be an explicit nil
func (o *RegisterQueue200Response) SetRealmMoveMessagesBetweenStreamsLimitSecondsNil() {
	o.RealmMoveMessagesBetweenStreamsLimitSeconds.Set(nil)
}

// UnsetRealmMoveMessagesBetweenStreamsLimitSeconds ensures that no value is present for RealmMoveMessagesBetweenStreamsLimitSeconds, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmMoveMessagesBetweenStreamsLimitSeconds() {
	o.RealmMoveMessagesBetweenStreamsLimitSeconds.Unset()
}

// GetRealmEnableReadReceipts returns the RealmEnableReadReceipts field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEnableReadReceipts() bool {
	if o == nil || IsNil(o.RealmEnableReadReceipts) {
		var ret bool
		return ret
	}
	return *o.RealmEnableReadReceipts
}

// GetRealmEnableReadReceiptsOk returns a tuple with the RealmEnableReadReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEnableReadReceiptsOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEnableReadReceipts) {
		return nil, false
	}
	return o.RealmEnableReadReceipts, true
}

// HasRealmEnableReadReceipts returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEnableReadReceipts() bool {
	if o != nil && !IsNil(o.RealmEnableReadReceipts) {
		return true
	}

	return false
}

// SetRealmEnableReadReceipts gets a reference to the given bool and assigns it to the RealmEnableReadReceipts field.
func (o *RegisterQueue200Response) SetRealmEnableReadReceipts(v bool) {
	o.RealmEnableReadReceipts = &v
}

// GetRealmIconUrl returns the RealmIconUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmIconUrl() string {
	if o == nil || IsNil(o.RealmIconUrl) {
		var ret string
		return ret
	}
	return *o.RealmIconUrl
}

// GetRealmIconUrlOk returns a tuple with the RealmIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealmIconUrl) {
		return nil, false
	}
	return o.RealmIconUrl, true
}

// HasRealmIconUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmIconUrl() bool {
	if o != nil && !IsNil(o.RealmIconUrl) {
		return true
	}

	return false
}

// SetRealmIconUrl gets a reference to the given string and assigns it to the RealmIconUrl field.
func (o *RegisterQueue200Response) SetRealmIconUrl(v string) {
	o.RealmIconUrl = &v
}

// GetRealmIconSource returns the RealmIconSource field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmIconSource() string {
	if o == nil || IsNil(o.RealmIconSource) {
		var ret string
		return ret
	}
	return *o.RealmIconSource
}

// GetRealmIconSourceOk returns a tuple with the RealmIconSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmIconSourceOk() (*string, bool) {
	if o == nil || IsNil(o.RealmIconSource) {
		return nil, false
	}
	return o.RealmIconSource, true
}

// HasRealmIconSource returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmIconSource() bool {
	if o != nil && !IsNil(o.RealmIconSource) {
		return true
	}

	return false
}

// SetRealmIconSource gets a reference to the given string and assigns it to the RealmIconSource field.
func (o *RegisterQueue200Response) SetRealmIconSource(v string) {
	o.RealmIconSource = &v
}

// GetMaxIconFileSizeMib returns the MaxIconFileSizeMib field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxIconFileSizeMib() int32 {
	if o == nil || IsNil(o.MaxIconFileSizeMib) {
		var ret int32
		return ret
	}
	return *o.MaxIconFileSizeMib
}

// GetMaxIconFileSizeMibOk returns a tuple with the MaxIconFileSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxIconFileSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxIconFileSizeMib) {
		return nil, false
	}
	return o.MaxIconFileSizeMib, true
}

// HasMaxIconFileSizeMib returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxIconFileSizeMib() bool {
	if o != nil && !IsNil(o.MaxIconFileSizeMib) {
		return true
	}

	return false
}

// SetMaxIconFileSizeMib gets a reference to the given int32 and assigns it to the MaxIconFileSizeMib field.
func (o *RegisterQueue200Response) SetMaxIconFileSizeMib(v int32) {
	o.MaxIconFileSizeMib = &v
}

// GetRealmLogoUrl returns the RealmLogoUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmLogoUrl() string {
	if o == nil || IsNil(o.RealmLogoUrl) {
		var ret string
		return ret
	}
	return *o.RealmLogoUrl
}

// GetRealmLogoUrlOk returns a tuple with the RealmLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealmLogoUrl) {
		return nil, false
	}
	return o.RealmLogoUrl, true
}

// HasRealmLogoUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmLogoUrl() bool {
	if o != nil && !IsNil(o.RealmLogoUrl) {
		return true
	}

	return false
}

// SetRealmLogoUrl gets a reference to the given string and assigns it to the RealmLogoUrl field.
func (o *RegisterQueue200Response) SetRealmLogoUrl(v string) {
	o.RealmLogoUrl = &v
}

// GetRealmLogoSource returns the RealmLogoSource field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmLogoSource() string {
	if o == nil || IsNil(o.RealmLogoSource) {
		var ret string
		return ret
	}
	return *o.RealmLogoSource
}

// GetRealmLogoSourceOk returns a tuple with the RealmLogoSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmLogoSourceOk() (*string, bool) {
	if o == nil || IsNil(o.RealmLogoSource) {
		return nil, false
	}
	return o.RealmLogoSource, true
}

// HasRealmLogoSource returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmLogoSource() bool {
	if o != nil && !IsNil(o.RealmLogoSource) {
		return true
	}

	return false
}

// SetRealmLogoSource gets a reference to the given string and assigns it to the RealmLogoSource field.
func (o *RegisterQueue200Response) SetRealmLogoSource(v string) {
	o.RealmLogoSource = &v
}

// GetRealmNightLogoUrl returns the RealmNightLogoUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmNightLogoUrl() string {
	if o == nil || IsNil(o.RealmNightLogoUrl) {
		var ret string
		return ret
	}
	return *o.RealmNightLogoUrl
}

// GetRealmNightLogoUrlOk returns a tuple with the RealmNightLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNightLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealmNightLogoUrl) {
		return nil, false
	}
	return o.RealmNightLogoUrl, true
}

// HasRealmNightLogoUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNightLogoUrl() bool {
	if o != nil && !IsNil(o.RealmNightLogoUrl) {
		return true
	}

	return false
}

// SetRealmNightLogoUrl gets a reference to the given string and assigns it to the RealmNightLogoUrl field.
func (o *RegisterQueue200Response) SetRealmNightLogoUrl(v string) {
	o.RealmNightLogoUrl = &v
}

// GetRealmNightLogoSource returns the RealmNightLogoSource field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmNightLogoSource() string {
	if o == nil || IsNil(o.RealmNightLogoSource) {
		var ret string
		return ret
	}
	return *o.RealmNightLogoSource
}

// GetRealmNightLogoSourceOk returns a tuple with the RealmNightLogoSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNightLogoSourceOk() (*string, bool) {
	if o == nil || IsNil(o.RealmNightLogoSource) {
		return nil, false
	}
	return o.RealmNightLogoSource, true
}

// HasRealmNightLogoSource returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNightLogoSource() bool {
	if o != nil && !IsNil(o.RealmNightLogoSource) {
		return true
	}

	return false
}

// SetRealmNightLogoSource gets a reference to the given string and assigns it to the RealmNightLogoSource field.
func (o *RegisterQueue200Response) SetRealmNightLogoSource(v string) {
	o.RealmNightLogoSource = &v
}

// GetMaxLogoFileSizeMib returns the MaxLogoFileSizeMib field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxLogoFileSizeMib() int32 {
	if o == nil || IsNil(o.MaxLogoFileSizeMib) {
		var ret int32
		return ret
	}
	return *o.MaxLogoFileSizeMib
}

// GetMaxLogoFileSizeMibOk returns a tuple with the MaxLogoFileSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxLogoFileSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLogoFileSizeMib) {
		return nil, false
	}
	return o.MaxLogoFileSizeMib, true
}

// HasMaxLogoFileSizeMib returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxLogoFileSizeMib() bool {
	if o != nil && !IsNil(o.MaxLogoFileSizeMib) {
		return true
	}

	return false
}

// SetMaxLogoFileSizeMib gets a reference to the given int32 and assigns it to the MaxLogoFileSizeMib field.
func (o *RegisterQueue200Response) SetMaxLogoFileSizeMib(v int32) {
	o.MaxLogoFileSizeMib = &v
}

// GetRealmBotDomain returns the RealmBotDomain field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmBotDomain() string {
	if o == nil || IsNil(o.RealmBotDomain) {
		var ret string
		return ret
	}
	return *o.RealmBotDomain
}

// GetRealmBotDomainOk returns a tuple with the RealmBotDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmBotDomainOk() (*string, bool) {
	if o == nil || IsNil(o.RealmBotDomain) {
		return nil, false
	}
	return o.RealmBotDomain, true
}

// HasRealmBotDomain returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmBotDomain() bool {
	if o != nil && !IsNil(o.RealmBotDomain) {
		return true
	}

	return false
}

// SetRealmBotDomain gets a reference to the given string and assigns it to the RealmBotDomain field.
func (o *RegisterQueue200Response) SetRealmBotDomain(v string) {
	o.RealmBotDomain = &v
}

// GetRealmUri returns the RealmUri field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetRealmUri() string {
	if o == nil || IsNil(o.RealmUri) {
		var ret string
		return ret
	}
	return *o.RealmUri
}

// GetRealmUriOk returns a tuple with the RealmUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetRealmUriOk() (*string, bool) {
	if o == nil || IsNil(o.RealmUri) {
		return nil, false
	}
	return o.RealmUri, true
}

// HasRealmUri returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUri() bool {
	if o != nil && !IsNil(o.RealmUri) {
		return true
	}

	return false
}

// SetRealmUri gets a reference to the given string and assigns it to the RealmUri field.
// Deprecated
func (o *RegisterQueue200Response) SetRealmUri(v string) {
	o.RealmUri = &v
}

// GetRealmUrl returns the RealmUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmUrl() string {
	if o == nil || IsNil(o.RealmUrl) {
		var ret string
		return ret
	}
	return *o.RealmUrl
}

// GetRealmUrlOk returns a tuple with the RealmUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealmUrl) {
		return nil, false
	}
	return o.RealmUrl, true
}

// HasRealmUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUrl() bool {
	if o != nil && !IsNil(o.RealmUrl) {
		return true
	}

	return false
}

// SetRealmUrl gets a reference to the given string and assigns it to the RealmUrl field.
func (o *RegisterQueue200Response) SetRealmUrl(v string) {
	o.RealmUrl = &v
}

// GetRealmAvailableVideoChatProviders returns the RealmAvailableVideoChatProviders field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmAvailableVideoChatProviders() map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue {
	if o == nil || IsNil(o.RealmAvailableVideoChatProviders) {
		var ret map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue
		return ret
	}
	return *o.RealmAvailableVideoChatProviders
}

// GetRealmAvailableVideoChatProvidersOk returns a tuple with the RealmAvailableVideoChatProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmAvailableVideoChatProvidersOk() (*map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue, bool) {
	if o == nil || IsNil(o.RealmAvailableVideoChatProviders) {
		return nil, false
	}
	return o.RealmAvailableVideoChatProviders, true
}

// HasRealmAvailableVideoChatProviders returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmAvailableVideoChatProviders() bool {
	if o != nil && !IsNil(o.RealmAvailableVideoChatProviders) {
		return true
	}

	return false
}

// SetRealmAvailableVideoChatProviders gets a reference to the given map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue and assigns it to the RealmAvailableVideoChatProviders field.
func (o *RegisterQueue200Response) SetRealmAvailableVideoChatProviders(v map[string]RegisterQueue200ResponseAllOfRealmAvailableVideoChatProvidersValue) {
	o.RealmAvailableVideoChatProviders = &v
}

// GetRealmPresenceDisabled returns the RealmPresenceDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmPresenceDisabled() bool {
	if o == nil || IsNil(o.RealmPresenceDisabled) {
		var ret bool
		return ret
	}
	return *o.RealmPresenceDisabled
}

// GetRealmPresenceDisabledOk returns a tuple with the RealmPresenceDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmPresenceDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmPresenceDisabled) {
		return nil, false
	}
	return o.RealmPresenceDisabled, true
}

// HasRealmPresenceDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPresenceDisabled() bool {
	if o != nil && !IsNil(o.RealmPresenceDisabled) {
		return true
	}

	return false
}

// SetRealmPresenceDisabled gets a reference to the given bool and assigns it to the RealmPresenceDisabled field.
func (o *RegisterQueue200Response) SetRealmPresenceDisabled(v bool) {
	o.RealmPresenceDisabled = &v
}

// GetSettingsSendDigestEmails returns the SettingsSendDigestEmails field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetSettingsSendDigestEmails() bool {
	if o == nil || IsNil(o.SettingsSendDigestEmails) {
		var ret bool
		return ret
	}
	return *o.SettingsSendDigestEmails
}

// GetSettingsSendDigestEmailsOk returns a tuple with the SettingsSendDigestEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetSettingsSendDigestEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SettingsSendDigestEmails) {
		return nil, false
	}
	return o.SettingsSendDigestEmails, true
}

// HasSettingsSendDigestEmails returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasSettingsSendDigestEmails() bool {
	if o != nil && !IsNil(o.SettingsSendDigestEmails) {
		return true
	}

	return false
}

// SetSettingsSendDigestEmails gets a reference to the given bool and assigns it to the SettingsSendDigestEmails field.
func (o *RegisterQueue200Response) SetSettingsSendDigestEmails(v bool) {
	o.SettingsSendDigestEmails = &v
}

// GetRealmIsZephyrMirrorRealm returns the RealmIsZephyrMirrorRealm field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmIsZephyrMirrorRealm() bool {
	if o == nil || IsNil(o.RealmIsZephyrMirrorRealm) {
		var ret bool
		return ret
	}
	return *o.RealmIsZephyrMirrorRealm
}

// GetRealmIsZephyrMirrorRealmOk returns a tuple with the RealmIsZephyrMirrorRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmIsZephyrMirrorRealmOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmIsZephyrMirrorRealm) {
		return nil, false
	}
	return o.RealmIsZephyrMirrorRealm, true
}

// HasRealmIsZephyrMirrorRealm returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmIsZephyrMirrorRealm() bool {
	if o != nil && !IsNil(o.RealmIsZephyrMirrorRealm) {
		return true
	}

	return false
}

// SetRealmIsZephyrMirrorRealm gets a reference to the given bool and assigns it to the RealmIsZephyrMirrorRealm field.
func (o *RegisterQueue200Response) SetRealmIsZephyrMirrorRealm(v bool) {
	o.RealmIsZephyrMirrorRealm = &v
}

// GetRealmEmailAuthEnabled returns the RealmEmailAuthEnabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmailAuthEnabled() bool {
	if o == nil || IsNil(o.RealmEmailAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmEmailAuthEnabled
}

// GetRealmEmailAuthEnabledOk returns a tuple with the RealmEmailAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmailAuthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEmailAuthEnabled) {
		return nil, false
	}
	return o.RealmEmailAuthEnabled, true
}

// HasRealmEmailAuthEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmailAuthEnabled() bool {
	if o != nil && !IsNil(o.RealmEmailAuthEnabled) {
		return true
	}

	return false
}

// SetRealmEmailAuthEnabled gets a reference to the given bool and assigns it to the RealmEmailAuthEnabled field.
func (o *RegisterQueue200Response) SetRealmEmailAuthEnabled(v bool) {
	o.RealmEmailAuthEnabled = &v
}

// GetRealmPasswordAuthEnabled returns the RealmPasswordAuthEnabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmPasswordAuthEnabled() bool {
	if o == nil || IsNil(o.RealmPasswordAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmPasswordAuthEnabled
}

// GetRealmPasswordAuthEnabledOk returns a tuple with the RealmPasswordAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmPasswordAuthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmPasswordAuthEnabled) {
		return nil, false
	}
	return o.RealmPasswordAuthEnabled, true
}

// HasRealmPasswordAuthEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPasswordAuthEnabled() bool {
	if o != nil && !IsNil(o.RealmPasswordAuthEnabled) {
		return true
	}

	return false
}

// SetRealmPasswordAuthEnabled gets a reference to the given bool and assigns it to the RealmPasswordAuthEnabled field.
func (o *RegisterQueue200Response) SetRealmPasswordAuthEnabled(v bool) {
	o.RealmPasswordAuthEnabled = &v
}

// GetRealmPushNotificationsEnabled returns the RealmPushNotificationsEnabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmPushNotificationsEnabled() bool {
	if o == nil || IsNil(o.RealmPushNotificationsEnabled) {
		var ret bool
		return ret
	}
	return *o.RealmPushNotificationsEnabled
}

// GetRealmPushNotificationsEnabledOk returns a tuple with the RealmPushNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmPushNotificationsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmPushNotificationsEnabled) {
		return nil, false
	}
	return o.RealmPushNotificationsEnabled, true
}

// HasRealmPushNotificationsEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPushNotificationsEnabled() bool {
	if o != nil && !IsNil(o.RealmPushNotificationsEnabled) {
		return true
	}

	return false
}

// SetRealmPushNotificationsEnabled gets a reference to the given bool and assigns it to the RealmPushNotificationsEnabled field.
func (o *RegisterQueue200Response) SetRealmPushNotificationsEnabled(v bool) {
	o.RealmPushNotificationsEnabled = &v
}

// GetRealmPushNotificationsEnabledEndTimestamp returns the RealmPushNotificationsEnabledEndTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmPushNotificationsEnabledEndTimestamp() int32 {
	if o == nil || IsNil(o.RealmPushNotificationsEnabledEndTimestamp.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmPushNotificationsEnabledEndTimestamp.Get()
}

// GetRealmPushNotificationsEnabledEndTimestampOk returns a tuple with the RealmPushNotificationsEnabledEndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmPushNotificationsEnabledEndTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmPushNotificationsEnabledEndTimestamp.Get(), o.RealmPushNotificationsEnabledEndTimestamp.IsSet()
}

// HasRealmPushNotificationsEnabledEndTimestamp returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPushNotificationsEnabledEndTimestamp() bool {
	if o != nil && o.RealmPushNotificationsEnabledEndTimestamp.IsSet() {
		return true
	}

	return false
}

// SetRealmPushNotificationsEnabledEndTimestamp gets a reference to the given NullableInt32 and assigns it to the RealmPushNotificationsEnabledEndTimestamp field.
func (o *RegisterQueue200Response) SetRealmPushNotificationsEnabledEndTimestamp(v int32) {
	o.RealmPushNotificationsEnabledEndTimestamp.Set(&v)
}

// SetRealmPushNotificationsEnabledEndTimestampNil sets the value for RealmPushNotificationsEnabledEndTimestamp to be an explicit nil
func (o *RegisterQueue200Response) SetRealmPushNotificationsEnabledEndTimestampNil() {
	o.RealmPushNotificationsEnabledEndTimestamp.Set(nil)
}

// UnsetRealmPushNotificationsEnabledEndTimestamp ensures that no value is present for RealmPushNotificationsEnabledEndTimestamp, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmPushNotificationsEnabledEndTimestamp() {
	o.RealmPushNotificationsEnabledEndTimestamp.Unset()
}

// GetRealmUploadQuotaMib returns the RealmUploadQuotaMib field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetRealmUploadQuotaMib() int32 {
	if o == nil || IsNil(o.RealmUploadQuotaMib.Get()) {
		var ret int32
		return ret
	}
	return *o.RealmUploadQuotaMib.Get()
}

// GetRealmUploadQuotaMibOk returns a tuple with the RealmUploadQuotaMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetRealmUploadQuotaMibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmUploadQuotaMib.Get(), o.RealmUploadQuotaMib.IsSet()
}

// HasRealmUploadQuotaMib returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUploadQuotaMib() bool {
	if o != nil && o.RealmUploadQuotaMib.IsSet() {
		return true
	}

	return false
}

// SetRealmUploadQuotaMib gets a reference to the given NullableInt32 and assigns it to the RealmUploadQuotaMib field.
func (o *RegisterQueue200Response) SetRealmUploadQuotaMib(v int32) {
	o.RealmUploadQuotaMib.Set(&v)
}

// SetRealmUploadQuotaMibNil sets the value for RealmUploadQuotaMib to be an explicit nil
func (o *RegisterQueue200Response) SetRealmUploadQuotaMibNil() {
	o.RealmUploadQuotaMib.Set(nil)
}

// UnsetRealmUploadQuotaMib ensures that no value is present for RealmUploadQuotaMib, not even an explicit nil
func (o *RegisterQueue200Response) UnsetRealmUploadQuotaMib() {
	o.RealmUploadQuotaMib.Unset()
}

// GetRealmOrgType returns the RealmOrgType field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmOrgType() int32 {
	if o == nil || IsNil(o.RealmOrgType) {
		var ret int32
		return ret
	}
	return *o.RealmOrgType
}

// GetRealmOrgTypeOk returns a tuple with the RealmOrgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmOrgTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmOrgType) {
		return nil, false
	}
	return o.RealmOrgType, true
}

// HasRealmOrgType returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmOrgType() bool {
	if o != nil && !IsNil(o.RealmOrgType) {
		return true
	}

	return false
}

// SetRealmOrgType gets a reference to the given int32 and assigns it to the RealmOrgType field.
func (o *RegisterQueue200Response) SetRealmOrgType(v int32) {
	o.RealmOrgType = &v
}

// GetRealmPlanType returns the RealmPlanType field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmPlanType() int32 {
	if o == nil || IsNil(o.RealmPlanType) {
		var ret int32
		return ret
	}
	return *o.RealmPlanType
}

// GetRealmPlanTypeOk returns a tuple with the RealmPlanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmPlanTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmPlanType) {
		return nil, false
	}
	return o.RealmPlanType, true
}

// HasRealmPlanType returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmPlanType() bool {
	if o != nil && !IsNil(o.RealmPlanType) {
		return true
	}

	return false
}

// SetRealmPlanType gets a reference to the given int32 and assigns it to the RealmPlanType field.
func (o *RegisterQueue200Response) SetRealmPlanType(v int32) {
	o.RealmPlanType = &v
}

// GetRealmEnableGuestUserDmWarning returns the RealmEnableGuestUserDmWarning field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEnableGuestUserDmWarning() bool {
	if o == nil || IsNil(o.RealmEnableGuestUserDmWarning) {
		var ret bool
		return ret
	}
	return *o.RealmEnableGuestUserDmWarning
}

// GetRealmEnableGuestUserDmWarningOk returns a tuple with the RealmEnableGuestUserDmWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEnableGuestUserDmWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEnableGuestUserDmWarning) {
		return nil, false
	}
	return o.RealmEnableGuestUserDmWarning, true
}

// HasRealmEnableGuestUserDmWarning returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEnableGuestUserDmWarning() bool {
	if o != nil && !IsNil(o.RealmEnableGuestUserDmWarning) {
		return true
	}

	return false
}

// SetRealmEnableGuestUserDmWarning gets a reference to the given bool and assigns it to the RealmEnableGuestUserDmWarning field.
func (o *RegisterQueue200Response) SetRealmEnableGuestUserDmWarning(v bool) {
	o.RealmEnableGuestUserDmWarning = &v
}

// GetRealmEnableGuestUserIndicator returns the RealmEnableGuestUserIndicator field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEnableGuestUserIndicator() bool {
	if o == nil || IsNil(o.RealmEnableGuestUserIndicator) {
		var ret bool
		return ret
	}
	return *o.RealmEnableGuestUserIndicator
}

// GetRealmEnableGuestUserIndicatorOk returns a tuple with the RealmEnableGuestUserIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEnableGuestUserIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.RealmEnableGuestUserIndicator) {
		return nil, false
	}
	return o.RealmEnableGuestUserIndicator, true
}

// HasRealmEnableGuestUserIndicator returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEnableGuestUserIndicator() bool {
	if o != nil && !IsNil(o.RealmEnableGuestUserIndicator) {
		return true
	}

	return false
}

// SetRealmEnableGuestUserIndicator gets a reference to the given bool and assigns it to the RealmEnableGuestUserIndicator field.
func (o *RegisterQueue200Response) SetRealmEnableGuestUserIndicator(v bool) {
	o.RealmEnableGuestUserIndicator = &v
}

// GetRealmCanAccessAllUsersGroup returns the RealmCanAccessAllUsersGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanAccessAllUsersGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanAccessAllUsersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanAccessAllUsersGroup
}

// GetRealmCanAccessAllUsersGroupOk returns a tuple with the RealmCanAccessAllUsersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanAccessAllUsersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanAccessAllUsersGroup) {
		return nil, false
	}
	return o.RealmCanAccessAllUsersGroup, true
}

// HasRealmCanAccessAllUsersGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanAccessAllUsersGroup() bool {
	if o != nil && !IsNil(o.RealmCanAccessAllUsersGroup) {
		return true
	}

	return false
}

// SetRealmCanAccessAllUsersGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanAccessAllUsersGroup field.
func (o *RegisterQueue200Response) SetRealmCanAccessAllUsersGroup(v GroupSettingValue) {
	o.RealmCanAccessAllUsersGroup = &v
}

// GetRealmCanSummarizeTopicsGroup returns the RealmCanSummarizeTopicsGroup field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmCanSummarizeTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.RealmCanSummarizeTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.RealmCanSummarizeTopicsGroup
}

// GetRealmCanSummarizeTopicsGroupOk returns a tuple with the RealmCanSummarizeTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmCanSummarizeTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.RealmCanSummarizeTopicsGroup) {
		return nil, false
	}
	return o.RealmCanSummarizeTopicsGroup, true
}

// HasRealmCanSummarizeTopicsGroup returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmCanSummarizeTopicsGroup() bool {
	if o != nil && !IsNil(o.RealmCanSummarizeTopicsGroup) {
		return true
	}

	return false
}

// SetRealmCanSummarizeTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the RealmCanSummarizeTopicsGroup field.
func (o *RegisterQueue200Response) SetRealmCanSummarizeTopicsGroup(v GroupSettingValue) {
	o.RealmCanSummarizeTopicsGroup = &v
}

// GetZulipPlanIsNotLimited returns the ZulipPlanIsNotLimited field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetZulipPlanIsNotLimited() bool {
	if o == nil || IsNil(o.ZulipPlanIsNotLimited) {
		var ret bool
		return ret
	}
	return *o.ZulipPlanIsNotLimited
}

// GetZulipPlanIsNotLimitedOk returns a tuple with the ZulipPlanIsNotLimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetZulipPlanIsNotLimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.ZulipPlanIsNotLimited) {
		return nil, false
	}
	return o.ZulipPlanIsNotLimited, true
}

// HasZulipPlanIsNotLimited returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasZulipPlanIsNotLimited() bool {
	if o != nil && !IsNil(o.ZulipPlanIsNotLimited) {
		return true
	}

	return false
}

// SetZulipPlanIsNotLimited gets a reference to the given bool and assigns it to the ZulipPlanIsNotLimited field.
func (o *RegisterQueue200Response) SetZulipPlanIsNotLimited(v bool) {
	o.ZulipPlanIsNotLimited = &v
}

// GetUpgradeTextForWideOrganizationLogo returns the UpgradeTextForWideOrganizationLogo field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUpgradeTextForWideOrganizationLogo() string {
	if o == nil || IsNil(o.UpgradeTextForWideOrganizationLogo) {
		var ret string
		return ret
	}
	return *o.UpgradeTextForWideOrganizationLogo
}

// GetUpgradeTextForWideOrganizationLogoOk returns a tuple with the UpgradeTextForWideOrganizationLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUpgradeTextForWideOrganizationLogoOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeTextForWideOrganizationLogo) {
		return nil, false
	}
	return o.UpgradeTextForWideOrganizationLogo, true
}

// HasUpgradeTextForWideOrganizationLogo returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUpgradeTextForWideOrganizationLogo() bool {
	if o != nil && !IsNil(o.UpgradeTextForWideOrganizationLogo) {
		return true
	}

	return false
}

// SetUpgradeTextForWideOrganizationLogo gets a reference to the given string and assigns it to the UpgradeTextForWideOrganizationLogo field.
func (o *RegisterQueue200Response) SetUpgradeTextForWideOrganizationLogo(v string) {
	o.UpgradeTextForWideOrganizationLogo = &v
}

// GetRealmDefaultExternalAccounts returns the RealmDefaultExternalAccounts field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmDefaultExternalAccounts() map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue {
	if o == nil || IsNil(o.RealmDefaultExternalAccounts) {
		var ret map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue
		return ret
	}
	return *o.RealmDefaultExternalAccounts
}

// GetRealmDefaultExternalAccountsOk returns a tuple with the RealmDefaultExternalAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmDefaultExternalAccountsOk() (*map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue, bool) {
	if o == nil || IsNil(o.RealmDefaultExternalAccounts) {
		return nil, false
	}
	return o.RealmDefaultExternalAccounts, true
}

// HasRealmDefaultExternalAccounts returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmDefaultExternalAccounts() bool {
	if o != nil && !IsNil(o.RealmDefaultExternalAccounts) {
		return true
	}

	return false
}

// SetRealmDefaultExternalAccounts gets a reference to the given map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue and assigns it to the RealmDefaultExternalAccounts field.
func (o *RegisterQueue200Response) SetRealmDefaultExternalAccounts(v map[string]RegisterQueue200ResponseAllOfRealmDefaultExternalAccountsValue) {
	o.RealmDefaultExternalAccounts = &v
}

// GetJitsiServerUrl returns the JitsiServerUrl field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetJitsiServerUrl() string {
	if o == nil || IsNil(o.JitsiServerUrl) {
		var ret string
		return ret
	}
	return *o.JitsiServerUrl
}

// GetJitsiServerUrlOk returns a tuple with the JitsiServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetJitsiServerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.JitsiServerUrl) {
		return nil, false
	}
	return o.JitsiServerUrl, true
}

// HasJitsiServerUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasJitsiServerUrl() bool {
	if o != nil && !IsNil(o.JitsiServerUrl) {
		return true
	}

	return false
}

// SetJitsiServerUrl gets a reference to the given string and assigns it to the JitsiServerUrl field.
// Deprecated
func (o *RegisterQueue200Response) SetJitsiServerUrl(v string) {
	o.JitsiServerUrl = &v
}

// GetDevelopmentEnvironment returns the DevelopmentEnvironment field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetDevelopmentEnvironment() bool {
	if o == nil || IsNil(o.DevelopmentEnvironment) {
		var ret bool
		return ret
	}
	return *o.DevelopmentEnvironment
}

// GetDevelopmentEnvironmentOk returns a tuple with the DevelopmentEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetDevelopmentEnvironmentOk() (*bool, bool) {
	if o == nil || IsNil(o.DevelopmentEnvironment) {
		return nil, false
	}
	return o.DevelopmentEnvironment, true
}

// HasDevelopmentEnvironment returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDevelopmentEnvironment() bool {
	if o != nil && !IsNil(o.DevelopmentEnvironment) {
		return true
	}

	return false
}

// SetDevelopmentEnvironment gets a reference to the given bool and assigns it to the DevelopmentEnvironment field.
func (o *RegisterQueue200Response) SetDevelopmentEnvironment(v bool) {
	o.DevelopmentEnvironment = &v
}

// GetServerGeneration returns the ServerGeneration field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerGeneration() int32 {
	if o == nil || IsNil(o.ServerGeneration) {
		var ret int32
		return ret
	}
	return *o.ServerGeneration
}

// GetServerGenerationOk returns a tuple with the ServerGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerGenerationOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerGeneration) {
		return nil, false
	}
	return o.ServerGeneration, true
}

// HasServerGeneration returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerGeneration() bool {
	if o != nil && !IsNil(o.ServerGeneration) {
		return true
	}

	return false
}

// SetServerGeneration gets a reference to the given int32 and assigns it to the ServerGeneration field.
func (o *RegisterQueue200Response) SetServerGeneration(v int32) {
	o.ServerGeneration = &v
}

// GetPasswordMinLength returns the PasswordMinLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPasswordMinLength() int32 {
	if o == nil || IsNil(o.PasswordMinLength) {
		var ret int32
		return ret
	}
	return *o.PasswordMinLength
}

// GetPasswordMinLengthOk returns a tuple with the PasswordMinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPasswordMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordMinLength) {
		return nil, false
	}
	return o.PasswordMinLength, true
}

// HasPasswordMinLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPasswordMinLength() bool {
	if o != nil && !IsNil(o.PasswordMinLength) {
		return true
	}

	return false
}

// SetPasswordMinLength gets a reference to the given int32 and assigns it to the PasswordMinLength field.
func (o *RegisterQueue200Response) SetPasswordMinLength(v int32) {
	o.PasswordMinLength = &v
}

// GetPasswordMaxLength returns the PasswordMaxLength field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPasswordMaxLength() int32 {
	if o == nil || IsNil(o.PasswordMaxLength) {
		var ret int32
		return ret
	}
	return *o.PasswordMaxLength
}

// GetPasswordMaxLengthOk returns a tuple with the PasswordMaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPasswordMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordMaxLength) {
		return nil, false
	}
	return o.PasswordMaxLength, true
}

// HasPasswordMaxLength returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPasswordMaxLength() bool {
	if o != nil && !IsNil(o.PasswordMaxLength) {
		return true
	}

	return false
}

// SetPasswordMaxLength gets a reference to the given int32 and assigns it to the PasswordMaxLength field.
func (o *RegisterQueue200Response) SetPasswordMaxLength(v int32) {
	o.PasswordMaxLength = &v
}

// GetPasswordMinGuesses returns the PasswordMinGuesses field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetPasswordMinGuesses() int32 {
	if o == nil || IsNil(o.PasswordMinGuesses) {
		var ret int32
		return ret
	}
	return *o.PasswordMinGuesses
}

// GetPasswordMinGuessesOk returns a tuple with the PasswordMinGuesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetPasswordMinGuessesOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordMinGuesses) {
		return nil, false
	}
	return o.PasswordMinGuesses, true
}

// HasPasswordMinGuesses returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasPasswordMinGuesses() bool {
	if o != nil && !IsNil(o.PasswordMinGuesses) {
		return true
	}

	return false
}

// SetPasswordMinGuesses gets a reference to the given int32 and assigns it to the PasswordMinGuesses field.
func (o *RegisterQueue200Response) SetPasswordMinGuesses(v int32) {
	o.PasswordMinGuesses = &v
}

// GetGiphyRatingOptions returns the GiphyRatingOptions field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetGiphyRatingOptions() map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue {
	if o == nil || IsNil(o.GiphyRatingOptions) {
		var ret map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue
		return ret
	}
	return *o.GiphyRatingOptions
}

// GetGiphyRatingOptionsOk returns a tuple with the GiphyRatingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetGiphyRatingOptionsOk() (*map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue, bool) {
	if o == nil || IsNil(o.GiphyRatingOptions) {
		return nil, false
	}
	return o.GiphyRatingOptions, true
}

// HasGiphyRatingOptions returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasGiphyRatingOptions() bool {
	if o != nil && !IsNil(o.GiphyRatingOptions) {
		return true
	}

	return false
}

// SetGiphyRatingOptions gets a reference to the given map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue and assigns it to the GiphyRatingOptions field.
func (o *RegisterQueue200Response) SetGiphyRatingOptions(v map[string]RegisterQueue200ResponseAllOfGiphyRatingOptionsValue) {
	o.GiphyRatingOptions = &v
}

// GetMaxFileUploadSizeMib returns the MaxFileUploadSizeMib field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxFileUploadSizeMib() int32 {
	if o == nil || IsNil(o.MaxFileUploadSizeMib) {
		var ret int32
		return ret
	}
	return *o.MaxFileUploadSizeMib
}

// GetMaxFileUploadSizeMibOk returns a tuple with the MaxFileUploadSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxFileUploadSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxFileUploadSizeMib) {
		return nil, false
	}
	return o.MaxFileUploadSizeMib, true
}

// HasMaxFileUploadSizeMib returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxFileUploadSizeMib() bool {
	if o != nil && !IsNil(o.MaxFileUploadSizeMib) {
		return true
	}

	return false
}

// SetMaxFileUploadSizeMib gets a reference to the given int32 and assigns it to the MaxFileUploadSizeMib field.
func (o *RegisterQueue200Response) SetMaxFileUploadSizeMib(v int32) {
	o.MaxFileUploadSizeMib = &v
}

// GetMaxAvatarFileSizeMib returns the MaxAvatarFileSizeMib field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxAvatarFileSizeMib() int32 {
	if o == nil || IsNil(o.MaxAvatarFileSizeMib) {
		var ret int32
		return ret
	}
	return *o.MaxAvatarFileSizeMib
}

// GetMaxAvatarFileSizeMibOk returns a tuple with the MaxAvatarFileSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxAvatarFileSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAvatarFileSizeMib) {
		return nil, false
	}
	return o.MaxAvatarFileSizeMib, true
}

// HasMaxAvatarFileSizeMib returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxAvatarFileSizeMib() bool {
	if o != nil && !IsNil(o.MaxAvatarFileSizeMib) {
		return true
	}

	return false
}

// SetMaxAvatarFileSizeMib gets a reference to the given int32 and assigns it to the MaxAvatarFileSizeMib field.
func (o *RegisterQueue200Response) SetMaxAvatarFileSizeMib(v int32) {
	o.MaxAvatarFileSizeMib = &v
}

// GetServerInlineImagePreview returns the ServerInlineImagePreview field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerInlineImagePreview() bool {
	if o == nil || IsNil(o.ServerInlineImagePreview) {
		var ret bool
		return ret
	}
	return *o.ServerInlineImagePreview
}

// GetServerInlineImagePreviewOk returns a tuple with the ServerInlineImagePreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerInlineImagePreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerInlineImagePreview) {
		return nil, false
	}
	return o.ServerInlineImagePreview, true
}

// HasServerInlineImagePreview returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerInlineImagePreview() bool {
	if o != nil && !IsNil(o.ServerInlineImagePreview) {
		return true
	}

	return false
}

// SetServerInlineImagePreview gets a reference to the given bool and assigns it to the ServerInlineImagePreview field.
func (o *RegisterQueue200Response) SetServerInlineImagePreview(v bool) {
	o.ServerInlineImagePreview = &v
}

// GetServerInlineUrlEmbedPreview returns the ServerInlineUrlEmbedPreview field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerInlineUrlEmbedPreview() bool {
	if o == nil || IsNil(o.ServerInlineUrlEmbedPreview) {
		var ret bool
		return ret
	}
	return *o.ServerInlineUrlEmbedPreview
}

// GetServerInlineUrlEmbedPreviewOk returns a tuple with the ServerInlineUrlEmbedPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerInlineUrlEmbedPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerInlineUrlEmbedPreview) {
		return nil, false
	}
	return o.ServerInlineUrlEmbedPreview, true
}

// HasServerInlineUrlEmbedPreview returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerInlineUrlEmbedPreview() bool {
	if o != nil && !IsNil(o.ServerInlineUrlEmbedPreview) {
		return true
	}

	return false
}

// SetServerInlineUrlEmbedPreview gets a reference to the given bool and assigns it to the ServerInlineUrlEmbedPreview field.
func (o *RegisterQueue200Response) SetServerInlineUrlEmbedPreview(v bool) {
	o.ServerInlineUrlEmbedPreview = &v
}

// GetServerThumbnailFormats returns the ServerThumbnailFormats field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerThumbnailFormats() []RegisterQueue200ResponseAllOfServerThumbnailFormatsInner {
	if o == nil || IsNil(o.ServerThumbnailFormats) {
		var ret []RegisterQueue200ResponseAllOfServerThumbnailFormatsInner
		return ret
	}
	return o.ServerThumbnailFormats
}

// GetServerThumbnailFormatsOk returns a tuple with the ServerThumbnailFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerThumbnailFormatsOk() ([]RegisterQueue200ResponseAllOfServerThumbnailFormatsInner, bool) {
	if o == nil || IsNil(o.ServerThumbnailFormats) {
		return nil, false
	}
	return o.ServerThumbnailFormats, true
}

// HasServerThumbnailFormats returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerThumbnailFormats() bool {
	if o != nil && !IsNil(o.ServerThumbnailFormats) {
		return true
	}

	return false
}

// SetServerThumbnailFormats gets a reference to the given []RegisterQueue200ResponseAllOfServerThumbnailFormatsInner and assigns it to the ServerThumbnailFormats field.
func (o *RegisterQueue200Response) SetServerThumbnailFormats(v []RegisterQueue200ResponseAllOfServerThumbnailFormatsInner) {
	o.ServerThumbnailFormats = v
}

// GetServerAvatarChangesDisabled returns the ServerAvatarChangesDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerAvatarChangesDisabled() bool {
	if o == nil || IsNil(o.ServerAvatarChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.ServerAvatarChangesDisabled
}

// GetServerAvatarChangesDisabledOk returns a tuple with the ServerAvatarChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerAvatarChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerAvatarChangesDisabled) {
		return nil, false
	}
	return o.ServerAvatarChangesDisabled, true
}

// HasServerAvatarChangesDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerAvatarChangesDisabled() bool {
	if o != nil && !IsNil(o.ServerAvatarChangesDisabled) {
		return true
	}

	return false
}

// SetServerAvatarChangesDisabled gets a reference to the given bool and assigns it to the ServerAvatarChangesDisabled field.
func (o *RegisterQueue200Response) SetServerAvatarChangesDisabled(v bool) {
	o.ServerAvatarChangesDisabled = &v
}

// GetServerNameChangesDisabled returns the ServerNameChangesDisabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerNameChangesDisabled() bool {
	if o == nil || IsNil(o.ServerNameChangesDisabled) {
		var ret bool
		return ret
	}
	return *o.ServerNameChangesDisabled
}

// GetServerNameChangesDisabledOk returns a tuple with the ServerNameChangesDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerNameChangesDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerNameChangesDisabled) {
		return nil, false
	}
	return o.ServerNameChangesDisabled, true
}

// HasServerNameChangesDisabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerNameChangesDisabled() bool {
	if o != nil && !IsNil(o.ServerNameChangesDisabled) {
		return true
	}

	return false
}

// SetServerNameChangesDisabled gets a reference to the given bool and assigns it to the ServerNameChangesDisabled field.
func (o *RegisterQueue200Response) SetServerNameChangesDisabled(v bool) {
	o.ServerNameChangesDisabled = &v
}

// GetServerNeedsUpgrade returns the ServerNeedsUpgrade field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerNeedsUpgrade() bool {
	if o == nil || IsNil(o.ServerNeedsUpgrade) {
		var ret bool
		return ret
	}
	return *o.ServerNeedsUpgrade
}

// GetServerNeedsUpgradeOk returns a tuple with the ServerNeedsUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerNeedsUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerNeedsUpgrade) {
		return nil, false
	}
	return o.ServerNeedsUpgrade, true
}

// HasServerNeedsUpgrade returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerNeedsUpgrade() bool {
	if o != nil && !IsNil(o.ServerNeedsUpgrade) {
		return true
	}

	return false
}

// SetServerNeedsUpgrade gets a reference to the given bool and assigns it to the ServerNeedsUpgrade field.
func (o *RegisterQueue200Response) SetServerNeedsUpgrade(v bool) {
	o.ServerNeedsUpgrade = &v
}

// GetServerWebPublicStreamsEnabled returns the ServerWebPublicStreamsEnabled field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerWebPublicStreamsEnabled() bool {
	if o == nil || IsNil(o.ServerWebPublicStreamsEnabled) {
		var ret bool
		return ret
	}
	return *o.ServerWebPublicStreamsEnabled
}

// GetServerWebPublicStreamsEnabledOk returns a tuple with the ServerWebPublicStreamsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerWebPublicStreamsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerWebPublicStreamsEnabled) {
		return nil, false
	}
	return o.ServerWebPublicStreamsEnabled, true
}

// HasServerWebPublicStreamsEnabled returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerWebPublicStreamsEnabled() bool {
	if o != nil && !IsNil(o.ServerWebPublicStreamsEnabled) {
		return true
	}

	return false
}

// SetServerWebPublicStreamsEnabled gets a reference to the given bool and assigns it to the ServerWebPublicStreamsEnabled field.
func (o *RegisterQueue200Response) SetServerWebPublicStreamsEnabled(v bool) {
	o.ServerWebPublicStreamsEnabled = &v
}

// GetServerEmojiDataUrl returns the ServerEmojiDataUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerEmojiDataUrl() string {
	if o == nil || IsNil(o.ServerEmojiDataUrl) {
		var ret string
		return ret
	}
	return *o.ServerEmojiDataUrl
}

// GetServerEmojiDataUrlOk returns a tuple with the ServerEmojiDataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerEmojiDataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerEmojiDataUrl) {
		return nil, false
	}
	return o.ServerEmojiDataUrl, true
}

// HasServerEmojiDataUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerEmojiDataUrl() bool {
	if o != nil && !IsNil(o.ServerEmojiDataUrl) {
		return true
	}

	return false
}

// SetServerEmojiDataUrl gets a reference to the given string and assigns it to the ServerEmojiDataUrl field.
func (o *RegisterQueue200Response) SetServerEmojiDataUrl(v string) {
	o.ServerEmojiDataUrl = &v
}

// GetServerJitsiServerUrl returns the ServerJitsiServerUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterQueue200Response) GetServerJitsiServerUrl() string {
	if o == nil || IsNil(o.ServerJitsiServerUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ServerJitsiServerUrl.Get()
}

// GetServerJitsiServerUrlOk returns a tuple with the ServerJitsiServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterQueue200Response) GetServerJitsiServerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerJitsiServerUrl.Get(), o.ServerJitsiServerUrl.IsSet()
}

// HasServerJitsiServerUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerJitsiServerUrl() bool {
	if o != nil && o.ServerJitsiServerUrl.IsSet() {
		return true
	}

	return false
}

// SetServerJitsiServerUrl gets a reference to the given NullableString and assigns it to the ServerJitsiServerUrl field.
func (o *RegisterQueue200Response) SetServerJitsiServerUrl(v string) {
	o.ServerJitsiServerUrl.Set(&v)
}

// SetServerJitsiServerUrlNil sets the value for ServerJitsiServerUrl to be an explicit nil
func (o *RegisterQueue200Response) SetServerJitsiServerUrlNil() {
	o.ServerJitsiServerUrl.Set(nil)
}

// UnsetServerJitsiServerUrl ensures that no value is present for ServerJitsiServerUrl, not even an explicit nil
func (o *RegisterQueue200Response) UnsetServerJitsiServerUrl() {
	o.ServerJitsiServerUrl.Unset()
}

// GetServerCanSummarizeTopics returns the ServerCanSummarizeTopics field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerCanSummarizeTopics() bool {
	if o == nil || IsNil(o.ServerCanSummarizeTopics) {
		var ret bool
		return ret
	}
	return *o.ServerCanSummarizeTopics
}

// GetServerCanSummarizeTopicsOk returns a tuple with the ServerCanSummarizeTopics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerCanSummarizeTopicsOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerCanSummarizeTopics) {
		return nil, false
	}
	return o.ServerCanSummarizeTopics, true
}

// HasServerCanSummarizeTopics returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerCanSummarizeTopics() bool {
	if o != nil && !IsNil(o.ServerCanSummarizeTopics) {
		return true
	}

	return false
}

// SetServerCanSummarizeTopics gets a reference to the given bool and assigns it to the ServerCanSummarizeTopics field.
func (o *RegisterQueue200Response) SetServerCanSummarizeTopics(v bool) {
	o.ServerCanSummarizeTopics = &v
}

// GetEventQueueLongpollTimeoutSeconds returns the EventQueueLongpollTimeoutSeconds field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetEventQueueLongpollTimeoutSeconds() int32 {
	if o == nil || IsNil(o.EventQueueLongpollTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.EventQueueLongpollTimeoutSeconds
}

// GetEventQueueLongpollTimeoutSecondsOk returns a tuple with the EventQueueLongpollTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetEventQueueLongpollTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.EventQueueLongpollTimeoutSeconds) {
		return nil, false
	}
	return o.EventQueueLongpollTimeoutSeconds, true
}

// HasEventQueueLongpollTimeoutSeconds returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEventQueueLongpollTimeoutSeconds() bool {
	if o != nil && !IsNil(o.EventQueueLongpollTimeoutSeconds) {
		return true
	}

	return false
}

// SetEventQueueLongpollTimeoutSeconds gets a reference to the given int32 and assigns it to the EventQueueLongpollTimeoutSeconds field.
func (o *RegisterQueue200Response) SetEventQueueLongpollTimeoutSeconds(v int32) {
	o.EventQueueLongpollTimeoutSeconds = &v
}

// GetRealmBilling returns the RealmBilling field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmBilling() RegisterQueue200ResponseAllOfRealmBilling {
	if o == nil || IsNil(o.RealmBilling) {
		var ret RegisterQueue200ResponseAllOfRealmBilling
		return ret
	}
	return *o.RealmBilling
}

// GetRealmBillingOk returns a tuple with the RealmBilling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmBillingOk() (*RegisterQueue200ResponseAllOfRealmBilling, bool) {
	if o == nil || IsNil(o.RealmBilling) {
		return nil, false
	}
	return o.RealmBilling, true
}

// HasRealmBilling returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmBilling() bool {
	if o != nil && !IsNil(o.RealmBilling) {
		return true
	}

	return false
}

// SetRealmBilling gets a reference to the given RegisterQueue200ResponseAllOfRealmBilling and assigns it to the RealmBilling field.
func (o *RegisterQueue200Response) SetRealmBilling(v RegisterQueue200ResponseAllOfRealmBilling) {
	o.RealmBilling = &v
}

// GetRealmModerationRequestChannelId returns the RealmModerationRequestChannelId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmModerationRequestChannelId() int32 {
	if o == nil || IsNil(o.RealmModerationRequestChannelId) {
		var ret int32
		return ret
	}
	return *o.RealmModerationRequestChannelId
}

// GetRealmModerationRequestChannelIdOk returns a tuple with the RealmModerationRequestChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmModerationRequestChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmModerationRequestChannelId) {
		return nil, false
	}
	return o.RealmModerationRequestChannelId, true
}

// HasRealmModerationRequestChannelId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmModerationRequestChannelId() bool {
	if o != nil && !IsNil(o.RealmModerationRequestChannelId) {
		return true
	}

	return false
}

// SetRealmModerationRequestChannelId gets a reference to the given int32 and assigns it to the RealmModerationRequestChannelId field.
func (o *RegisterQueue200Response) SetRealmModerationRequestChannelId(v int32) {
	o.RealmModerationRequestChannelId = &v
}

// GetRealmNewStreamAnnouncementsStreamId returns the RealmNewStreamAnnouncementsStreamId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmNewStreamAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.RealmNewStreamAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.RealmNewStreamAnnouncementsStreamId
}

// GetRealmNewStreamAnnouncementsStreamIdOk returns a tuple with the RealmNewStreamAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNewStreamAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmNewStreamAnnouncementsStreamId) {
		return nil, false
	}
	return o.RealmNewStreamAnnouncementsStreamId, true
}

// HasRealmNewStreamAnnouncementsStreamId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNewStreamAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.RealmNewStreamAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetRealmNewStreamAnnouncementsStreamId gets a reference to the given int32 and assigns it to the RealmNewStreamAnnouncementsStreamId field.
func (o *RegisterQueue200Response) SetRealmNewStreamAnnouncementsStreamId(v int32) {
	o.RealmNewStreamAnnouncementsStreamId = &v
}

// GetRealmSignupAnnouncementsStreamId returns the RealmSignupAnnouncementsStreamId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmSignupAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.RealmSignupAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.RealmSignupAnnouncementsStreamId
}

// GetRealmSignupAnnouncementsStreamIdOk returns a tuple with the RealmSignupAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmSignupAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmSignupAnnouncementsStreamId) {
		return nil, false
	}
	return o.RealmSignupAnnouncementsStreamId, true
}

// HasRealmSignupAnnouncementsStreamId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmSignupAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.RealmSignupAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetRealmSignupAnnouncementsStreamId gets a reference to the given int32 and assigns it to the RealmSignupAnnouncementsStreamId field.
func (o *RegisterQueue200Response) SetRealmSignupAnnouncementsStreamId(v int32) {
	o.RealmSignupAnnouncementsStreamId = &v
}

// GetRealmZulipUpdateAnnouncementsStreamId returns the RealmZulipUpdateAnnouncementsStreamId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmZulipUpdateAnnouncementsStreamId() int32 {
	if o == nil || IsNil(o.RealmZulipUpdateAnnouncementsStreamId) {
		var ret int32
		return ret
	}
	return *o.RealmZulipUpdateAnnouncementsStreamId
}

// GetRealmZulipUpdateAnnouncementsStreamIdOk returns a tuple with the RealmZulipUpdateAnnouncementsStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmZulipUpdateAnnouncementsStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmZulipUpdateAnnouncementsStreamId) {
		return nil, false
	}
	return o.RealmZulipUpdateAnnouncementsStreamId, true
}

// HasRealmZulipUpdateAnnouncementsStreamId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmZulipUpdateAnnouncementsStreamId() bool {
	if o != nil && !IsNil(o.RealmZulipUpdateAnnouncementsStreamId) {
		return true
	}

	return false
}

// SetRealmZulipUpdateAnnouncementsStreamId gets a reference to the given int32 and assigns it to the RealmZulipUpdateAnnouncementsStreamId field.
func (o *RegisterQueue200Response) SetRealmZulipUpdateAnnouncementsStreamId(v int32) {
	o.RealmZulipUpdateAnnouncementsStreamId = &v
}

// GetRealmEmptyTopicDisplayName returns the RealmEmptyTopicDisplayName field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmEmptyTopicDisplayName() string {
	if o == nil || IsNil(o.RealmEmptyTopicDisplayName) {
		var ret string
		return ret
	}
	return *o.RealmEmptyTopicDisplayName
}

// GetRealmEmptyTopicDisplayNameOk returns a tuple with the RealmEmptyTopicDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmEmptyTopicDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.RealmEmptyTopicDisplayName) {
		return nil, false
	}
	return o.RealmEmptyTopicDisplayName, true
}

// HasRealmEmptyTopicDisplayName returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmEmptyTopicDisplayName() bool {
	if o != nil && !IsNil(o.RealmEmptyTopicDisplayName) {
		return true
	}

	return false
}

// SetRealmEmptyTopicDisplayName gets a reference to the given string and assigns it to the RealmEmptyTopicDisplayName field.
func (o *RegisterQueue200Response) SetRealmEmptyTopicDisplayName(v string) {
	o.RealmEmptyTopicDisplayName = &v
}

// GetRealmUserSettingsDefaults returns the RealmUserSettingsDefaults field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmUserSettingsDefaults() RegisterQueue200ResponseAllOfRealmUserSettingsDefaults {
	if o == nil || IsNil(o.RealmUserSettingsDefaults) {
		var ret RegisterQueue200ResponseAllOfRealmUserSettingsDefaults
		return ret
	}
	return *o.RealmUserSettingsDefaults
}

// GetRealmUserSettingsDefaultsOk returns a tuple with the RealmUserSettingsDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmUserSettingsDefaultsOk() (*RegisterQueue200ResponseAllOfRealmUserSettingsDefaults, bool) {
	if o == nil || IsNil(o.RealmUserSettingsDefaults) {
		return nil, false
	}
	return o.RealmUserSettingsDefaults, true
}

// HasRealmUserSettingsDefaults returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUserSettingsDefaults() bool {
	if o != nil && !IsNil(o.RealmUserSettingsDefaults) {
		return true
	}

	return false
}

// SetRealmUserSettingsDefaults gets a reference to the given RegisterQueue200ResponseAllOfRealmUserSettingsDefaults and assigns it to the RealmUserSettingsDefaults field.
func (o *RegisterQueue200Response) SetRealmUserSettingsDefaults(v RegisterQueue200ResponseAllOfRealmUserSettingsDefaults) {
	o.RealmUserSettingsDefaults = &v
}

// GetRealmUsers returns the RealmUsers field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmUsers() []User {
	if o == nil || IsNil(o.RealmUsers) {
		var ret []User
		return ret
	}
	return o.RealmUsers
}

// GetRealmUsersOk returns a tuple with the RealmUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmUsersOk() ([]User, bool) {
	if o == nil || IsNil(o.RealmUsers) {
		return nil, false
	}
	return o.RealmUsers, true
}

// HasRealmUsers returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmUsers() bool {
	if o != nil && !IsNil(o.RealmUsers) {
		return true
	}

	return false
}

// SetRealmUsers gets a reference to the given []User and assigns it to the RealmUsers field.
func (o *RegisterQueue200Response) SetRealmUsers(v []User) {
	o.RealmUsers = v
}

// GetRealmNonActiveUsers returns the RealmNonActiveUsers field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetRealmNonActiveUsers() []User {
	if o == nil || IsNil(o.RealmNonActiveUsers) {
		var ret []User
		return ret
	}
	return o.RealmNonActiveUsers
}

// GetRealmNonActiveUsersOk returns a tuple with the RealmNonActiveUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetRealmNonActiveUsersOk() ([]User, bool) {
	if o == nil || IsNil(o.RealmNonActiveUsers) {
		return nil, false
	}
	return o.RealmNonActiveUsers, true
}

// HasRealmNonActiveUsers returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasRealmNonActiveUsers() bool {
	if o != nil && !IsNil(o.RealmNonActiveUsers) {
		return true
	}

	return false
}

// SetRealmNonActiveUsers gets a reference to the given []User and assigns it to the RealmNonActiveUsers field.
func (o *RegisterQueue200Response) SetRealmNonActiveUsers(v []User) {
	o.RealmNonActiveUsers = v
}

// GetAvatarSource returns the AvatarSource field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetAvatarSource() string {
	if o == nil || IsNil(o.AvatarSource) {
		var ret string
		return ret
	}
	return *o.AvatarSource
}

// GetAvatarSourceOk returns a tuple with the AvatarSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetAvatarSourceOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarSource) {
		return nil, false
	}
	return o.AvatarSource, true
}

// HasAvatarSource returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasAvatarSource() bool {
	if o != nil && !IsNil(o.AvatarSource) {
		return true
	}

	return false
}

// SetAvatarSource gets a reference to the given string and assigns it to the AvatarSource field.
func (o *RegisterQueue200Response) SetAvatarSource(v string) {
	o.AvatarSource = &v
}

// GetAvatarUrlMedium returns the AvatarUrlMedium field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetAvatarUrlMedium() string {
	if o == nil || IsNil(o.AvatarUrlMedium) {
		var ret string
		return ret
	}
	return *o.AvatarUrlMedium
}

// GetAvatarUrlMediumOk returns a tuple with the AvatarUrlMedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetAvatarUrlMediumOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrlMedium) {
		return nil, false
	}
	return o.AvatarUrlMedium, true
}

// HasAvatarUrlMedium returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasAvatarUrlMedium() bool {
	if o != nil && !IsNil(o.AvatarUrlMedium) {
		return true
	}

	return false
}

// SetAvatarUrlMedium gets a reference to the given string and assigns it to the AvatarUrlMedium field.
func (o *RegisterQueue200Response) SetAvatarUrlMedium(v string) {
	o.AvatarUrlMedium = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *RegisterQueue200Response) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetCanCreateStreams returns the CanCreateStreams field value if set, zero value otherwise.
// Deprecated
func (o *RegisterQueue200Response) GetCanCreateStreams() bool {
	if o == nil || IsNil(o.CanCreateStreams) {
		var ret bool
		return ret
	}
	return *o.CanCreateStreams
}

// GetCanCreateStreamsOk returns a tuple with the CanCreateStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RegisterQueue200Response) GetCanCreateStreamsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreateStreams) {
		return nil, false
	}
	return o.CanCreateStreams, true
}

// HasCanCreateStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanCreateStreams() bool {
	if o != nil && !IsNil(o.CanCreateStreams) {
		return true
	}

	return false
}

// SetCanCreateStreams gets a reference to the given bool and assigns it to the CanCreateStreams field.
// Deprecated
func (o *RegisterQueue200Response) SetCanCreateStreams(v bool) {
	o.CanCreateStreams = &v
}

// GetCanCreatePublicStreams returns the CanCreatePublicStreams field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCanCreatePublicStreams() bool {
	if o == nil || IsNil(o.CanCreatePublicStreams) {
		var ret bool
		return ret
	}
	return *o.CanCreatePublicStreams
}

// GetCanCreatePublicStreamsOk returns a tuple with the CanCreatePublicStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCanCreatePublicStreamsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreatePublicStreams) {
		return nil, false
	}
	return o.CanCreatePublicStreams, true
}

// HasCanCreatePublicStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanCreatePublicStreams() bool {
	if o != nil && !IsNil(o.CanCreatePublicStreams) {
		return true
	}

	return false
}

// SetCanCreatePublicStreams gets a reference to the given bool and assigns it to the CanCreatePublicStreams field.
func (o *RegisterQueue200Response) SetCanCreatePublicStreams(v bool) {
	o.CanCreatePublicStreams = &v
}

// GetCanCreatePrivateStreams returns the CanCreatePrivateStreams field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCanCreatePrivateStreams() bool {
	if o == nil || IsNil(o.CanCreatePrivateStreams) {
		var ret bool
		return ret
	}
	return *o.CanCreatePrivateStreams
}

// GetCanCreatePrivateStreamsOk returns a tuple with the CanCreatePrivateStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCanCreatePrivateStreamsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreatePrivateStreams) {
		return nil, false
	}
	return o.CanCreatePrivateStreams, true
}

// HasCanCreatePrivateStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanCreatePrivateStreams() bool {
	if o != nil && !IsNil(o.CanCreatePrivateStreams) {
		return true
	}

	return false
}

// SetCanCreatePrivateStreams gets a reference to the given bool and assigns it to the CanCreatePrivateStreams field.
func (o *RegisterQueue200Response) SetCanCreatePrivateStreams(v bool) {
	o.CanCreatePrivateStreams = &v
}

// GetCanCreateWebPublicStreams returns the CanCreateWebPublicStreams field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCanCreateWebPublicStreams() bool {
	if o == nil || IsNil(o.CanCreateWebPublicStreams) {
		var ret bool
		return ret
	}
	return *o.CanCreateWebPublicStreams
}

// GetCanCreateWebPublicStreamsOk returns a tuple with the CanCreateWebPublicStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCanCreateWebPublicStreamsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreateWebPublicStreams) {
		return nil, false
	}
	return o.CanCreateWebPublicStreams, true
}

// HasCanCreateWebPublicStreams returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanCreateWebPublicStreams() bool {
	if o != nil && !IsNil(o.CanCreateWebPublicStreams) {
		return true
	}

	return false
}

// SetCanCreateWebPublicStreams gets a reference to the given bool and assigns it to the CanCreateWebPublicStreams field.
func (o *RegisterQueue200Response) SetCanCreateWebPublicStreams(v bool) {
	o.CanCreateWebPublicStreams = &v
}

// GetCanSubscribeOtherUsers returns the CanSubscribeOtherUsers field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCanSubscribeOtherUsers() bool {
	if o == nil || IsNil(o.CanSubscribeOtherUsers) {
		var ret bool
		return ret
	}
	return *o.CanSubscribeOtherUsers
}

// GetCanSubscribeOtherUsersOk returns a tuple with the CanSubscribeOtherUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCanSubscribeOtherUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.CanSubscribeOtherUsers) {
		return nil, false
	}
	return o.CanSubscribeOtherUsers, true
}

// HasCanSubscribeOtherUsers returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanSubscribeOtherUsers() bool {
	if o != nil && !IsNil(o.CanSubscribeOtherUsers) {
		return true
	}

	return false
}

// SetCanSubscribeOtherUsers gets a reference to the given bool and assigns it to the CanSubscribeOtherUsers field.
func (o *RegisterQueue200Response) SetCanSubscribeOtherUsers(v bool) {
	o.CanSubscribeOtherUsers = &v
}

// GetCanInviteOthersToRealm returns the CanInviteOthersToRealm field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCanInviteOthersToRealm() bool {
	if o == nil || IsNil(o.CanInviteOthersToRealm) {
		var ret bool
		return ret
	}
	return *o.CanInviteOthersToRealm
}

// GetCanInviteOthersToRealmOk returns a tuple with the CanInviteOthersToRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCanInviteOthersToRealmOk() (*bool, bool) {
	if o == nil || IsNil(o.CanInviteOthersToRealm) {
		return nil, false
	}
	return o.CanInviteOthersToRealm, true
}

// HasCanInviteOthersToRealm returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCanInviteOthersToRealm() bool {
	if o != nil && !IsNil(o.CanInviteOthersToRealm) {
		return true
	}

	return false
}

// SetCanInviteOthersToRealm gets a reference to the given bool and assigns it to the CanInviteOthersToRealm field.
func (o *RegisterQueue200Response) SetCanInviteOthersToRealm(v bool) {
	o.CanInviteOthersToRealm = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *RegisterQueue200Response) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetIsOwner() bool {
	if o == nil || IsNil(o.IsOwner) {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetIsOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOwner) {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasIsOwner() bool {
	if o != nil && !IsNil(o.IsOwner) {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *RegisterQueue200Response) SetIsOwner(v bool) {
	o.IsOwner = &v
}

// GetIsModerator returns the IsModerator field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetIsModerator() bool {
	if o == nil || IsNil(o.IsModerator) {
		var ret bool
		return ret
	}
	return *o.IsModerator
}

// GetIsModeratorOk returns a tuple with the IsModerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetIsModeratorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsModerator) {
		return nil, false
	}
	return o.IsModerator, true
}

// HasIsModerator returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasIsModerator() bool {
	if o != nil && !IsNil(o.IsModerator) {
		return true
	}

	return false
}

// SetIsModerator gets a reference to the given bool and assigns it to the IsModerator field.
func (o *RegisterQueue200Response) SetIsModerator(v bool) {
	o.IsModerator = &v
}

// GetIsGuest returns the IsGuest field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetIsGuest() bool {
	if o == nil || IsNil(o.IsGuest) {
		var ret bool
		return ret
	}
	return *o.IsGuest
}

// GetIsGuestOk returns a tuple with the IsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetIsGuestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGuest) {
		return nil, false
	}
	return o.IsGuest, true
}

// HasIsGuest returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasIsGuest() bool {
	if o != nil && !IsNil(o.IsGuest) {
		return true
	}

	return false
}

// SetIsGuest gets a reference to the given bool and assigns it to the IsGuest field.
func (o *RegisterQueue200Response) SetIsGuest(v bool) {
	o.IsGuest = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *RegisterQueue200Response) SetUserId(v int32) {
	o.UserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RegisterQueue200Response) SetEmail(v string) {
	o.Email = &v
}

// GetDeliveryEmail returns the DeliveryEmail field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetDeliveryEmail() string {
	if o == nil || IsNil(o.DeliveryEmail) {
		var ret string
		return ret
	}
	return *o.DeliveryEmail
}

// GetDeliveryEmailOk returns a tuple with the DeliveryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetDeliveryEmailOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryEmail) {
		return nil, false
	}
	return o.DeliveryEmail, true
}

// HasDeliveryEmail returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasDeliveryEmail() bool {
	if o != nil && !IsNil(o.DeliveryEmail) {
		return true
	}

	return false
}

// SetDeliveryEmail gets a reference to the given string and assigns it to the DeliveryEmail field.
func (o *RegisterQueue200Response) SetDeliveryEmail(v string) {
	o.DeliveryEmail = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *RegisterQueue200Response) SetFullName(v string) {
	o.FullName = &v
}

// GetCrossRealmBots returns the CrossRealmBots field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetCrossRealmBots() []RegisterQueue200ResponseAllOfCrossRealmBotsInner {
	if o == nil || IsNil(o.CrossRealmBots) {
		var ret []RegisterQueue200ResponseAllOfCrossRealmBotsInner
		return ret
	}
	return o.CrossRealmBots
}

// GetCrossRealmBotsOk returns a tuple with the CrossRealmBots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetCrossRealmBotsOk() ([]RegisterQueue200ResponseAllOfCrossRealmBotsInner, bool) {
	if o == nil || IsNil(o.CrossRealmBots) {
		return nil, false
	}
	return o.CrossRealmBots, true
}

// HasCrossRealmBots returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasCrossRealmBots() bool {
	if o != nil && !IsNil(o.CrossRealmBots) {
		return true
	}

	return false
}

// SetCrossRealmBots gets a reference to the given []RegisterQueue200ResponseAllOfCrossRealmBotsInner and assigns it to the CrossRealmBots field.
func (o *RegisterQueue200Response) SetCrossRealmBots(v []RegisterQueue200ResponseAllOfCrossRealmBotsInner) {
	o.CrossRealmBots = v
}

// GetServerSupportedPermissionSettings returns the ServerSupportedPermissionSettings field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetServerSupportedPermissionSettings() RegisterQueue200ResponseAllOfServerSupportedPermissionSettings {
	if o == nil || IsNil(o.ServerSupportedPermissionSettings) {
		var ret RegisterQueue200ResponseAllOfServerSupportedPermissionSettings
		return ret
	}
	return *o.ServerSupportedPermissionSettings
}

// GetServerSupportedPermissionSettingsOk returns a tuple with the ServerSupportedPermissionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetServerSupportedPermissionSettingsOk() (*RegisterQueue200ResponseAllOfServerSupportedPermissionSettings, bool) {
	if o == nil || IsNil(o.ServerSupportedPermissionSettings) {
		return nil, false
	}
	return o.ServerSupportedPermissionSettings, true
}

// HasServerSupportedPermissionSettings returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasServerSupportedPermissionSettings() bool {
	if o != nil && !IsNil(o.ServerSupportedPermissionSettings) {
		return true
	}

	return false
}

// SetServerSupportedPermissionSettings gets a reference to the given RegisterQueue200ResponseAllOfServerSupportedPermissionSettings and assigns it to the ServerSupportedPermissionSettings field.
func (o *RegisterQueue200Response) SetServerSupportedPermissionSettings(v RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) {
	o.ServerSupportedPermissionSettings = &v
}

// GetMaxBulkNewSubscriptionMessages returns the MaxBulkNewSubscriptionMessages field value if set, zero value otherwise.
func (o *RegisterQueue200Response) GetMaxBulkNewSubscriptionMessages() float32 {
	if o == nil || IsNil(o.MaxBulkNewSubscriptionMessages) {
		var ret float32
		return ret
	}
	return *o.MaxBulkNewSubscriptionMessages
}

// GetMaxBulkNewSubscriptionMessagesOk returns a tuple with the MaxBulkNewSubscriptionMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200Response) GetMaxBulkNewSubscriptionMessagesOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxBulkNewSubscriptionMessages) {
		return nil, false
	}
	return o.MaxBulkNewSubscriptionMessages, true
}

// HasMaxBulkNewSubscriptionMessages returns a boolean if a field has been set.
func (o *RegisterQueue200Response) HasMaxBulkNewSubscriptionMessages() bool {
	if o != nil && !IsNil(o.MaxBulkNewSubscriptionMessages) {
		return true
	}

	return false
}

// SetMaxBulkNewSubscriptionMessages gets a reference to the given float32 and assigns it to the MaxBulkNewSubscriptionMessages field.
func (o *RegisterQueue200Response) SetMaxBulkNewSubscriptionMessages(v float32) {
	o.MaxBulkNewSubscriptionMessages = &v
}

func (o RegisterQueue200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterQueue200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	if o.QueueId.IsSet() {
		toSerialize["queue_id"] = o.QueueId.Get()
	}
	if !IsNil(o.LastEventId) {
		toSerialize["last_event_id"] = o.LastEventId
	}
	if !IsNil(o.ZulipFeatureLevel) {
		toSerialize["zulip_feature_level"] = o.ZulipFeatureLevel
	}
	if !IsNil(o.ZulipVersion) {
		toSerialize["zulip_version"] = o.ZulipVersion
	}
	if !IsNil(o.ZulipMergeBase) {
		toSerialize["zulip_merge_base"] = o.ZulipMergeBase
	}
	if !IsNil(o.AlertWords) {
		toSerialize["alert_words"] = o.AlertWords
	}
	if !IsNil(o.CustomProfileFields) {
		toSerialize["custom_profile_fields"] = o.CustomProfileFields
	}
	if !IsNil(o.CustomProfileFieldTypes) {
		toSerialize["custom_profile_field_types"] = o.CustomProfileFieldTypes
	}
	if !IsNil(o.RealmDateCreated) {
		toSerialize["realm_date_created"] = o.RealmDateCreated
	}
	if !IsNil(o.DemoOrganizationScheduledDeletionDate) {
		toSerialize["demo_organization_scheduled_deletion_date"] = o.DemoOrganizationScheduledDeletionDate
	}
	if !IsNil(o.Drafts) {
		toSerialize["drafts"] = o.Drafts
	}
	if !IsNil(o.OnboardingSteps) {
		toSerialize["onboarding_steps"] = o.OnboardingSteps
	}
	if o.NavigationTourVideoUrl.IsSet() {
		toSerialize["navigation_tour_video_url"] = o.NavigationTourVideoUrl.Get()
	}
	if !IsNil(o.MaxMessageId) {
		toSerialize["max_message_id"] = o.MaxMessageId
	}
	if !IsNil(o.MaxReminderNoteLength) {
		toSerialize["max_reminder_note_length"] = o.MaxReminderNoteLength
	}
	if !IsNil(o.MaxStreamNameLength) {
		toSerialize["max_stream_name_length"] = o.MaxStreamNameLength
	}
	if !IsNil(o.MaxStreamDescriptionLength) {
		toSerialize["max_stream_description_length"] = o.MaxStreamDescriptionLength
	}
	if !IsNil(o.MaxChannelFolderNameLength) {
		toSerialize["max_channel_folder_name_length"] = o.MaxChannelFolderNameLength
	}
	if !IsNil(o.MaxChannelFolderDescriptionLength) {
		toSerialize["max_channel_folder_description_length"] = o.MaxChannelFolderDescriptionLength
	}
	if !IsNil(o.MaxTopicLength) {
		toSerialize["max_topic_length"] = o.MaxTopicLength
	}
	if !IsNil(o.MaxMessageLength) {
		toSerialize["max_message_length"] = o.MaxMessageLength
	}
	if o.ServerMinDeactivatedRealmDeletionDays.IsSet() {
		toSerialize["server_min_deactivated_realm_deletion_days"] = o.ServerMinDeactivatedRealmDeletionDays.Get()
	}
	if o.ServerMaxDeactivatedRealmDeletionDays.IsSet() {
		toSerialize["server_max_deactivated_realm_deletion_days"] = o.ServerMaxDeactivatedRealmDeletionDays.Get()
	}
	if !IsNil(o.ServerPresencePingIntervalSeconds) {
		toSerialize["server_presence_ping_interval_seconds"] = o.ServerPresencePingIntervalSeconds
	}
	if !IsNil(o.ServerPresenceOfflineThresholdSeconds) {
		toSerialize["server_presence_offline_threshold_seconds"] = o.ServerPresenceOfflineThresholdSeconds
	}
	if !IsNil(o.ServerTypingStartedExpiryPeriodMilliseconds) {
		toSerialize["server_typing_started_expiry_period_milliseconds"] = o.ServerTypingStartedExpiryPeriodMilliseconds
	}
	if !IsNil(o.ServerTypingStoppedWaitPeriodMilliseconds) {
		toSerialize["server_typing_stopped_wait_period_milliseconds"] = o.ServerTypingStoppedWaitPeriodMilliseconds
	}
	if !IsNil(o.ServerTypingStartedWaitPeriodMilliseconds) {
		toSerialize["server_typing_started_wait_period_milliseconds"] = o.ServerTypingStartedWaitPeriodMilliseconds
	}
	if !IsNil(o.ScheduledMessages) {
		toSerialize["scheduled_messages"] = o.ScheduledMessages
	}
	if !IsNil(o.Reminders) {
		toSerialize["reminders"] = o.Reminders
	}
	if !IsNil(o.MutedTopics) {
		toSerialize["muted_topics"] = o.MutedTopics
	}
	if !IsNil(o.MutedUsers) {
		toSerialize["muted_users"] = o.MutedUsers
	}
	if !IsNil(o.Presences) {
		toSerialize["presences"] = o.Presences
	}
	if !IsNil(o.PresenceLastUpdateId) {
		toSerialize["presence_last_update_id"] = o.PresenceLastUpdateId
	}
	if !IsNil(o.ServerTimestamp) {
		toSerialize["server_timestamp"] = o.ServerTimestamp
	}
	if !IsNil(o.RealmDomains) {
		toSerialize["realm_domains"] = o.RealmDomains
	}
	if !IsNil(o.RealmEmoji) {
		toSerialize["realm_emoji"] = o.RealmEmoji
	}
	if !IsNil(o.RealmLinkifiers) {
		toSerialize["realm_linkifiers"] = o.RealmLinkifiers
	}
	if !IsNil(o.RealmFilters) {
		toSerialize["realm_filters"] = o.RealmFilters
	}
	if !IsNil(o.RealmPlaygrounds) {
		toSerialize["realm_playgrounds"] = o.RealmPlaygrounds
	}
	if !IsNil(o.RealmUserGroups) {
		toSerialize["realm_user_groups"] = o.RealmUserGroups
	}
	if !IsNil(o.RealmBots) {
		toSerialize["realm_bots"] = o.RealmBots
	}
	if !IsNil(o.RealmEmbeddedBots) {
		toSerialize["realm_embedded_bots"] = o.RealmEmbeddedBots
	}
	if !IsNil(o.RealmIncomingWebhookBots) {
		toSerialize["realm_incoming_webhook_bots"] = o.RealmIncomingWebhookBots
	}
	if !IsNil(o.RecentPrivateConversations) {
		toSerialize["recent_private_conversations"] = o.RecentPrivateConversations
	}
	if !IsNil(o.NavigationViews) {
		toSerialize["navigation_views"] = o.NavigationViews
	}
	if !IsNil(o.SavedSnippets) {
		toSerialize["saved_snippets"] = o.SavedSnippets
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.Unsubscribed) {
		toSerialize["unsubscribed"] = o.Unsubscribed
	}
	if !IsNil(o.NeverSubscribed) {
		toSerialize["never_subscribed"] = o.NeverSubscribed
	}
	if !IsNil(o.ChannelFolders) {
		toSerialize["channel_folders"] = o.ChannelFolders
	}
	if !IsNil(o.UnreadMsgs) {
		toSerialize["unread_msgs"] = o.UnreadMsgs
	}
	if !IsNil(o.StarredMessages) {
		toSerialize["starred_messages"] = o.StarredMessages
	}
	if !IsNil(o.Streams) {
		toSerialize["streams"] = o.Streams
	}
	if !IsNil(o.RealmDefaultStreams) {
		toSerialize["realm_default_streams"] = o.RealmDefaultStreams
	}
	if !IsNil(o.RealmDefaultStreamGroups) {
		toSerialize["realm_default_stream_groups"] = o.RealmDefaultStreamGroups
	}
	if !IsNil(o.StopWords) {
		toSerialize["stop_words"] = o.StopWords
	}
	if !IsNil(o.UserStatus) {
		toSerialize["user_status"] = o.UserStatus
	}
	if !IsNil(o.UserSettings) {
		toSerialize["user_settings"] = o.UserSettings
	}
	if !IsNil(o.UserTopics) {
		toSerialize["user_topics"] = o.UserTopics
	}
	if !IsNil(o.HasZoomToken) {
		toSerialize["has_zoom_token"] = o.HasZoomToken
	}
	if !IsNil(o.GiphyApiKey) {
		toSerialize["giphy_api_key"] = o.GiphyApiKey
	}
	if !IsNil(o.PushDevices) {
		toSerialize["push_devices"] = o.PushDevices
	}
	if !IsNil(o.EnableDesktopNotifications) {
		toSerialize["enable_desktop_notifications"] = o.EnableDesktopNotifications
	}
	if !IsNil(o.EnableDigestEmails) {
		toSerialize["enable_digest_emails"] = o.EnableDigestEmails
	}
	if !IsNil(o.EnableLoginEmails) {
		toSerialize["enable_login_emails"] = o.EnableLoginEmails
	}
	if !IsNil(o.EnableMarketingEmails) {
		toSerialize["enable_marketing_emails"] = o.EnableMarketingEmails
	}
	if !IsNil(o.EmailNotificationsBatchingPeriodSeconds) {
		toSerialize["email_notifications_batching_period_seconds"] = o.EmailNotificationsBatchingPeriodSeconds
	}
	if !IsNil(o.EnableOfflineEmailNotifications) {
		toSerialize["enable_offline_email_notifications"] = o.EnableOfflineEmailNotifications
	}
	if !IsNil(o.EnableOfflinePushNotifications) {
		toSerialize["enable_offline_push_notifications"] = o.EnableOfflinePushNotifications
	}
	if !IsNil(o.EnableOnlinePushNotifications) {
		toSerialize["enable_online_push_notifications"] = o.EnableOnlinePushNotifications
	}
	if !IsNil(o.EnableSounds) {
		toSerialize["enable_sounds"] = o.EnableSounds
	}
	if !IsNil(o.EnableStreamDesktopNotifications) {
		toSerialize["enable_stream_desktop_notifications"] = o.EnableStreamDesktopNotifications
	}
	if !IsNil(o.EnableStreamEmailNotifications) {
		toSerialize["enable_stream_email_notifications"] = o.EnableStreamEmailNotifications
	}
	if !IsNil(o.EnableStreamPushNotifications) {
		toSerialize["enable_stream_push_notifications"] = o.EnableStreamPushNotifications
	}
	if !IsNil(o.EnableStreamAudibleNotifications) {
		toSerialize["enable_stream_audible_notifications"] = o.EnableStreamAudibleNotifications
	}
	if !IsNil(o.WildcardMentionsNotify) {
		toSerialize["wildcard_mentions_notify"] = o.WildcardMentionsNotify
	}
	if !IsNil(o.MessageContentInEmailNotifications) {
		toSerialize["message_content_in_email_notifications"] = o.MessageContentInEmailNotifications
	}
	if !IsNil(o.NotificationSound) {
		toSerialize["notification_sound"] = o.NotificationSound
	}
	if !IsNil(o.PmContentInDesktopNotifications) {
		toSerialize["pm_content_in_desktop_notifications"] = o.PmContentInDesktopNotifications
	}
	if !IsNil(o.DesktopIconCountDisplay) {
		toSerialize["desktop_icon_count_display"] = o.DesktopIconCountDisplay
	}
	if !IsNil(o.RealmNameInEmailNotificationsPolicy) {
		toSerialize["realm_name_in_email_notifications_policy"] = o.RealmNameInEmailNotificationsPolicy
	}
	if !IsNil(o.PresenceEnabled) {
		toSerialize["presence_enabled"] = o.PresenceEnabled
	}
	if !IsNil(o.AvailableNotificationSounds) {
		toSerialize["available_notification_sounds"] = o.AvailableNotificationSounds
	}
	if !IsNil(o.ColorScheme) {
		toSerialize["color_scheme"] = o.ColorScheme
	}
	if !IsNil(o.DefaultLanguage) {
		toSerialize["default_language"] = o.DefaultLanguage
	}
	if !IsNil(o.DemoteInactiveStreams) {
		toSerialize["demote_inactive_streams"] = o.DemoteInactiveStreams
	}
	if !IsNil(o.Emojiset) {
		toSerialize["emojiset"] = o.Emojiset
	}
	if !IsNil(o.EnableDraftsSynchronization) {
		toSerialize["enable_drafts_synchronization"] = o.EnableDraftsSynchronization
	}
	if !IsNil(o.FluidLayoutWidth) {
		toSerialize["fluid_layout_width"] = o.FluidLayoutWidth
	}
	if !IsNil(o.WebHomeView) {
		toSerialize["web_home_view"] = o.WebHomeView
	}
	if !IsNil(o.HighContrastMode) {
		toSerialize["high_contrast_mode"] = o.HighContrastMode
	}
	if !IsNil(o.LeftSideUserlist) {
		toSerialize["left_side_userlist"] = o.LeftSideUserlist
	}
	if !IsNil(o.StarredMessageCounts) {
		toSerialize["starred_message_counts"] = o.StarredMessageCounts
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.TranslateEmoticons) {
		toSerialize["translate_emoticons"] = o.TranslateEmoticons
	}
	if !IsNil(o.TwentyFourHourTime) {
		toSerialize["twenty_four_hour_time"] = o.TwentyFourHourTime
	}
	if !IsNil(o.ReceivesTypingNotifications) {
		toSerialize["receives_typing_notifications"] = o.ReceivesTypingNotifications
	}
	if !IsNil(o.EnterSends) {
		toSerialize["enter_sends"] = o.EnterSends
	}
	if !IsNil(o.EmojisetChoices) {
		toSerialize["emojiset_choices"] = o.EmojisetChoices
	}
	if !IsNil(o.RealmMessageEditHistoryVisibilityPolicy) {
		toSerialize["realm_message_edit_history_visibility_policy"] = o.RealmMessageEditHistoryVisibilityPolicy
	}
	if !IsNil(o.RealmAllowEditHistory) {
		toSerialize["realm_allow_edit_history"] = o.RealmAllowEditHistory
	}
	if !IsNil(o.RealmCanAddCustomEmojiGroup) {
		toSerialize["realm_can_add_custom_emoji_group"] = o.RealmCanAddCustomEmojiGroup
	}
	if !IsNil(o.RealmCanAddSubscribersGroup) {
		toSerialize["realm_can_add_subscribers_group"] = o.RealmCanAddSubscribersGroup
	}
	if !IsNil(o.RealmCanDeleteAnyMessageGroup) {
		toSerialize["realm_can_delete_any_message_group"] = o.RealmCanDeleteAnyMessageGroup
	}
	if !IsNil(o.RealmCanDeleteOwnMessageGroup) {
		toSerialize["realm_can_delete_own_message_group"] = o.RealmCanDeleteOwnMessageGroup
	}
	if !IsNil(o.RealmCanSetDeleteMessagePolicyGroup) {
		toSerialize["realm_can_set_delete_message_policy_group"] = o.RealmCanSetDeleteMessagePolicyGroup
	}
	if !IsNil(o.RealmCanSetTopicsPolicyGroup) {
		toSerialize["realm_can_set_topics_policy_group"] = o.RealmCanSetTopicsPolicyGroup
	}
	if !IsNil(o.RealmCanInviteUsersGroup) {
		toSerialize["realm_can_invite_users_group"] = o.RealmCanInviteUsersGroup
	}
	if !IsNil(o.RealmCanMentionManyUsersGroup) {
		toSerialize["realm_can_mention_many_users_group"] = o.RealmCanMentionManyUsersGroup
	}
	if !IsNil(o.RealmCanMoveMessagesBetweenChannelsGroup) {
		toSerialize["realm_can_move_messages_between_channels_group"] = o.RealmCanMoveMessagesBetweenChannelsGroup
	}
	if !IsNil(o.RealmCanMoveMessagesBetweenTopicsGroup) {
		toSerialize["realm_can_move_messages_between_topics_group"] = o.RealmCanMoveMessagesBetweenTopicsGroup
	}
	if !IsNil(o.RealmCanCreateGroups) {
		toSerialize["realm_can_create_groups"] = o.RealmCanCreateGroups
	}
	if !IsNil(o.RealmCanCreateBotsGroup) {
		toSerialize["realm_can_create_bots_group"] = o.RealmCanCreateBotsGroup
	}
	if !IsNil(o.RealmCanCreateWriteOnlyBotsGroup) {
		toSerialize["realm_can_create_write_only_bots_group"] = o.RealmCanCreateWriteOnlyBotsGroup
	}
	if !IsNil(o.RealmCanManageAllGroups) {
		toSerialize["realm_can_manage_all_groups"] = o.RealmCanManageAllGroups
	}
	if !IsNil(o.RealmCanManageBillingGroup) {
		toSerialize["realm_can_manage_billing_group"] = o.RealmCanManageBillingGroup
	}
	if !IsNil(o.RealmCanCreatePublicChannelGroup) {
		toSerialize["realm_can_create_public_channel_group"] = o.RealmCanCreatePublicChannelGroup
	}
	if !IsNil(o.RealmCanCreatePrivateChannelGroup) {
		toSerialize["realm_can_create_private_channel_group"] = o.RealmCanCreatePrivateChannelGroup
	}
	if !IsNil(o.RealmCanCreateWebPublicChannelGroup) {
		toSerialize["realm_can_create_web_public_channel_group"] = o.RealmCanCreateWebPublicChannelGroup
	}
	if !IsNil(o.RealmCanResolveTopicsGroup) {
		toSerialize["realm_can_resolve_topics_group"] = o.RealmCanResolveTopicsGroup
	}
	if !IsNil(o.RealmCreatePublicStreamPolicy) {
		toSerialize["realm_create_public_stream_policy"] = o.RealmCreatePublicStreamPolicy
	}
	if !IsNil(o.RealmCreatePrivateStreamPolicy) {
		toSerialize["realm_create_private_stream_policy"] = o.RealmCreatePrivateStreamPolicy
	}
	if !IsNil(o.RealmCreateWebPublicStreamPolicy) {
		toSerialize["realm_create_web_public_stream_policy"] = o.RealmCreateWebPublicStreamPolicy
	}
	if !IsNil(o.RealmWildcardMentionPolicy) {
		toSerialize["realm_wildcard_mention_policy"] = o.RealmWildcardMentionPolicy
	}
	if !IsNil(o.RealmDefaultLanguage) {
		toSerialize["realm_default_language"] = o.RealmDefaultLanguage
	}
	if !IsNil(o.RealmWelcomeMessageCustomText) {
		toSerialize["realm_welcome_message_custom_text"] = o.RealmWelcomeMessageCustomText
	}
	if !IsNil(o.RealmDescription) {
		toSerialize["realm_description"] = o.RealmDescription
	}
	if !IsNil(o.RealmDigestEmailsEnabled) {
		toSerialize["realm_digest_emails_enabled"] = o.RealmDigestEmailsEnabled
	}
	if !IsNil(o.RealmDisallowDisposableEmailAddresses) {
		toSerialize["realm_disallow_disposable_email_addresses"] = o.RealmDisallowDisposableEmailAddresses
	}
	if !IsNil(o.RealmEmailChangesDisabled) {
		toSerialize["realm_email_changes_disabled"] = o.RealmEmailChangesDisabled
	}
	if !IsNil(o.RealmInviteRequired) {
		toSerialize["realm_invite_required"] = o.RealmInviteRequired
	}
	if !IsNil(o.RealmCreateMultiuseInviteGroup) {
		toSerialize["realm_create_multiuse_invite_group"] = o.RealmCreateMultiuseInviteGroup
	}
	if !IsNil(o.RealmInlineImagePreview) {
		toSerialize["realm_inline_image_preview"] = o.RealmInlineImagePreview
	}
	if !IsNil(o.RealmInlineUrlEmbedPreview) {
		toSerialize["realm_inline_url_embed_preview"] = o.RealmInlineUrlEmbedPreview
	}
	if !IsNil(o.RealmTopicsPolicy) {
		toSerialize["realm_topics_policy"] = o.RealmTopicsPolicy
	}
	if !IsNil(o.RealmMandatoryTopics) {
		toSerialize["realm_mandatory_topics"] = o.RealmMandatoryTopics
	}
	if !IsNil(o.RealmMessageRetentionDays) {
		toSerialize["realm_message_retention_days"] = o.RealmMessageRetentionDays
	}
	if !IsNil(o.RealmName) {
		toSerialize["realm_name"] = o.RealmName
	}
	if !IsNil(o.RealmRequireE2eePushNotifications) {
		toSerialize["realm_require_e2ee_push_notifications"] = o.RealmRequireE2eePushNotifications
	}
	if !IsNil(o.RealmRequireUniqueNames) {
		toSerialize["realm_require_unique_names"] = o.RealmRequireUniqueNames
	}
	if !IsNil(o.RealmNameChangesDisabled) {
		toSerialize["realm_name_changes_disabled"] = o.RealmNameChangesDisabled
	}
	if !IsNil(o.RealmAvatarChangesDisabled) {
		toSerialize["realm_avatar_changes_disabled"] = o.RealmAvatarChangesDisabled
	}
	if !IsNil(o.RealmEmailsRestrictedToDomains) {
		toSerialize["realm_emails_restricted_to_domains"] = o.RealmEmailsRestrictedToDomains
	}
	if !IsNil(o.RealmSendWelcomeEmails) {
		toSerialize["realm_send_welcome_emails"] = o.RealmSendWelcomeEmails
	}
	if !IsNil(o.RealmMessageContentAllowedInEmailNotifications) {
		toSerialize["realm_message_content_allowed_in_email_notifications"] = o.RealmMessageContentAllowedInEmailNotifications
	}
	if !IsNil(o.RealmEnableSpectatorAccess) {
		toSerialize["realm_enable_spectator_access"] = o.RealmEnableSpectatorAccess
	}
	if !IsNil(o.RealmWantAdvertiseInCommunitiesDirectory) {
		toSerialize["realm_want_advertise_in_communities_directory"] = o.RealmWantAdvertiseInCommunitiesDirectory
	}
	if !IsNil(o.RealmVideoChatProvider) {
		toSerialize["realm_video_chat_provider"] = o.RealmVideoChatProvider
	}
	if o.RealmJitsiServerUrl.IsSet() {
		toSerialize["realm_jitsi_server_url"] = o.RealmJitsiServerUrl.Get()
	}
	if !IsNil(o.RealmGiphyRating) {
		toSerialize["realm_giphy_rating"] = o.RealmGiphyRating
	}
	if !IsNil(o.RealmWaitingPeriodThreshold) {
		toSerialize["realm_waiting_period_threshold"] = o.RealmWaitingPeriodThreshold
	}
	if !IsNil(o.RealmDigestWeekday) {
		toSerialize["realm_digest_weekday"] = o.RealmDigestWeekday
	}
	if !IsNil(o.RealmDirectMessageInitiatorGroup) {
		toSerialize["realm_direct_message_initiator_group"] = o.RealmDirectMessageInitiatorGroup
	}
	if !IsNil(o.RealmDirectMessagePermissionGroup) {
		toSerialize["realm_direct_message_permission_group"] = o.RealmDirectMessagePermissionGroup
	}
	if !IsNil(o.RealmDefaultCodeBlockLanguage) {
		toSerialize["realm_default_code_block_language"] = o.RealmDefaultCodeBlockLanguage
	}
	if o.RealmMessageContentDeleteLimitSeconds.IsSet() {
		toSerialize["realm_message_content_delete_limit_seconds"] = o.RealmMessageContentDeleteLimitSeconds.Get()
	}
	if !IsNil(o.RealmAuthenticationMethods) {
		toSerialize["realm_authentication_methods"] = o.RealmAuthenticationMethods
	}
	if !IsNil(o.RealmAllowMessageEditing) {
		toSerialize["realm_allow_message_editing"] = o.RealmAllowMessageEditing
	}
	if o.RealmMessageContentEditLimitSeconds.IsSet() {
		toSerialize["realm_message_content_edit_limit_seconds"] = o.RealmMessageContentEditLimitSeconds.Get()
	}
	if o.RealmMoveMessagesWithinStreamLimitSeconds.IsSet() {
		toSerialize["realm_move_messages_within_stream_limit_seconds"] = o.RealmMoveMessagesWithinStreamLimitSeconds.Get()
	}
	if o.RealmMoveMessagesBetweenStreamsLimitSeconds.IsSet() {
		toSerialize["realm_move_messages_between_streams_limit_seconds"] = o.RealmMoveMessagesBetweenStreamsLimitSeconds.Get()
	}
	if !IsNil(o.RealmEnableReadReceipts) {
		toSerialize["realm_enable_read_receipts"] = o.RealmEnableReadReceipts
	}
	if !IsNil(o.RealmIconUrl) {
		toSerialize["realm_icon_url"] = o.RealmIconUrl
	}
	if !IsNil(o.RealmIconSource) {
		toSerialize["realm_icon_source"] = o.RealmIconSource
	}
	if !IsNil(o.MaxIconFileSizeMib) {
		toSerialize["max_icon_file_size_mib"] = o.MaxIconFileSizeMib
	}
	if !IsNil(o.RealmLogoUrl) {
		toSerialize["realm_logo_url"] = o.RealmLogoUrl
	}
	if !IsNil(o.RealmLogoSource) {
		toSerialize["realm_logo_source"] = o.RealmLogoSource
	}
	if !IsNil(o.RealmNightLogoUrl) {
		toSerialize["realm_night_logo_url"] = o.RealmNightLogoUrl
	}
	if !IsNil(o.RealmNightLogoSource) {
		toSerialize["realm_night_logo_source"] = o.RealmNightLogoSource
	}
	if !IsNil(o.MaxLogoFileSizeMib) {
		toSerialize["max_logo_file_size_mib"] = o.MaxLogoFileSizeMib
	}
	if !IsNil(o.RealmBotDomain) {
		toSerialize["realm_bot_domain"] = o.RealmBotDomain
	}
	if !IsNil(o.RealmUri) {
		toSerialize["realm_uri"] = o.RealmUri
	}
	if !IsNil(o.RealmUrl) {
		toSerialize["realm_url"] = o.RealmUrl
	}
	if !IsNil(o.RealmAvailableVideoChatProviders) {
		toSerialize["realm_available_video_chat_providers"] = o.RealmAvailableVideoChatProviders
	}
	if !IsNil(o.RealmPresenceDisabled) {
		toSerialize["realm_presence_disabled"] = o.RealmPresenceDisabled
	}
	if !IsNil(o.SettingsSendDigestEmails) {
		toSerialize["settings_send_digest_emails"] = o.SettingsSendDigestEmails
	}
	if !IsNil(o.RealmIsZephyrMirrorRealm) {
		toSerialize["realm_is_zephyr_mirror_realm"] = o.RealmIsZephyrMirrorRealm
	}
	if !IsNil(o.RealmEmailAuthEnabled) {
		toSerialize["realm_email_auth_enabled"] = o.RealmEmailAuthEnabled
	}
	if !IsNil(o.RealmPasswordAuthEnabled) {
		toSerialize["realm_password_auth_enabled"] = o.RealmPasswordAuthEnabled
	}
	if !IsNil(o.RealmPushNotificationsEnabled) {
		toSerialize["realm_push_notifications_enabled"] = o.RealmPushNotificationsEnabled
	}
	if o.RealmPushNotificationsEnabledEndTimestamp.IsSet() {
		toSerialize["realm_push_notifications_enabled_end_timestamp"] = o.RealmPushNotificationsEnabledEndTimestamp.Get()
	}
	if o.RealmUploadQuotaMib.IsSet() {
		toSerialize["realm_upload_quota_mib"] = o.RealmUploadQuotaMib.Get()
	}
	if !IsNil(o.RealmOrgType) {
		toSerialize["realm_org_type"] = o.RealmOrgType
	}
	if !IsNil(o.RealmPlanType) {
		toSerialize["realm_plan_type"] = o.RealmPlanType
	}
	if !IsNil(o.RealmEnableGuestUserDmWarning) {
		toSerialize["realm_enable_guest_user_dm_warning"] = o.RealmEnableGuestUserDmWarning
	}
	if !IsNil(o.RealmEnableGuestUserIndicator) {
		toSerialize["realm_enable_guest_user_indicator"] = o.RealmEnableGuestUserIndicator
	}
	if !IsNil(o.RealmCanAccessAllUsersGroup) {
		toSerialize["realm_can_access_all_users_group"] = o.RealmCanAccessAllUsersGroup
	}
	if !IsNil(o.RealmCanSummarizeTopicsGroup) {
		toSerialize["realm_can_summarize_topics_group"] = o.RealmCanSummarizeTopicsGroup
	}
	if !IsNil(o.ZulipPlanIsNotLimited) {
		toSerialize["zulip_plan_is_not_limited"] = o.ZulipPlanIsNotLimited
	}
	if !IsNil(o.UpgradeTextForWideOrganizationLogo) {
		toSerialize["upgrade_text_for_wide_organization_logo"] = o.UpgradeTextForWideOrganizationLogo
	}
	if !IsNil(o.RealmDefaultExternalAccounts) {
		toSerialize["realm_default_external_accounts"] = o.RealmDefaultExternalAccounts
	}
	if !IsNil(o.JitsiServerUrl) {
		toSerialize["jitsi_server_url"] = o.JitsiServerUrl
	}
	if !IsNil(o.DevelopmentEnvironment) {
		toSerialize["development_environment"] = o.DevelopmentEnvironment
	}
	if !IsNil(o.ServerGeneration) {
		toSerialize["server_generation"] = o.ServerGeneration
	}
	if !IsNil(o.PasswordMinLength) {
		toSerialize["password_min_length"] = o.PasswordMinLength
	}
	if !IsNil(o.PasswordMaxLength) {
		toSerialize["password_max_length"] = o.PasswordMaxLength
	}
	if !IsNil(o.PasswordMinGuesses) {
		toSerialize["password_min_guesses"] = o.PasswordMinGuesses
	}
	if !IsNil(o.GiphyRatingOptions) {
		toSerialize["giphy_rating_options"] = o.GiphyRatingOptions
	}
	if !IsNil(o.MaxFileUploadSizeMib) {
		toSerialize["max_file_upload_size_mib"] = o.MaxFileUploadSizeMib
	}
	if !IsNil(o.MaxAvatarFileSizeMib) {
		toSerialize["max_avatar_file_size_mib"] = o.MaxAvatarFileSizeMib
	}
	if !IsNil(o.ServerInlineImagePreview) {
		toSerialize["server_inline_image_preview"] = o.ServerInlineImagePreview
	}
	if !IsNil(o.ServerInlineUrlEmbedPreview) {
		toSerialize["server_inline_url_embed_preview"] = o.ServerInlineUrlEmbedPreview
	}
	if !IsNil(o.ServerThumbnailFormats) {
		toSerialize["server_thumbnail_formats"] = o.ServerThumbnailFormats
	}
	if !IsNil(o.ServerAvatarChangesDisabled) {
		toSerialize["server_avatar_changes_disabled"] = o.ServerAvatarChangesDisabled
	}
	if !IsNil(o.ServerNameChangesDisabled) {
		toSerialize["server_name_changes_disabled"] = o.ServerNameChangesDisabled
	}
	if !IsNil(o.ServerNeedsUpgrade) {
		toSerialize["server_needs_upgrade"] = o.ServerNeedsUpgrade
	}
	if !IsNil(o.ServerWebPublicStreamsEnabled) {
		toSerialize["server_web_public_streams_enabled"] = o.ServerWebPublicStreamsEnabled
	}
	if !IsNil(o.ServerEmojiDataUrl) {
		toSerialize["server_emoji_data_url"] = o.ServerEmojiDataUrl
	}
	if o.ServerJitsiServerUrl.IsSet() {
		toSerialize["server_jitsi_server_url"] = o.ServerJitsiServerUrl.Get()
	}
	if !IsNil(o.ServerCanSummarizeTopics) {
		toSerialize["server_can_summarize_topics"] = o.ServerCanSummarizeTopics
	}
	if !IsNil(o.EventQueueLongpollTimeoutSeconds) {
		toSerialize["event_queue_longpoll_timeout_seconds"] = o.EventQueueLongpollTimeoutSeconds
	}
	if !IsNil(o.RealmBilling) {
		toSerialize["realm_billing"] = o.RealmBilling
	}
	if !IsNil(o.RealmModerationRequestChannelId) {
		toSerialize["realm_moderation_request_channel_id"] = o.RealmModerationRequestChannelId
	}
	if !IsNil(o.RealmNewStreamAnnouncementsStreamId) {
		toSerialize["realm_new_stream_announcements_stream_id"] = o.RealmNewStreamAnnouncementsStreamId
	}
	if !IsNil(o.RealmSignupAnnouncementsStreamId) {
		toSerialize["realm_signup_announcements_stream_id"] = o.RealmSignupAnnouncementsStreamId
	}
	if !IsNil(o.RealmZulipUpdateAnnouncementsStreamId) {
		toSerialize["realm_zulip_update_announcements_stream_id"] = o.RealmZulipUpdateAnnouncementsStreamId
	}
	if !IsNil(o.RealmEmptyTopicDisplayName) {
		toSerialize["realm_empty_topic_display_name"] = o.RealmEmptyTopicDisplayName
	}
	if !IsNil(o.RealmUserSettingsDefaults) {
		toSerialize["realm_user_settings_defaults"] = o.RealmUserSettingsDefaults
	}
	if !IsNil(o.RealmUsers) {
		toSerialize["realm_users"] = o.RealmUsers
	}
	if !IsNil(o.RealmNonActiveUsers) {
		toSerialize["realm_non_active_users"] = o.RealmNonActiveUsers
	}
	if !IsNil(o.AvatarSource) {
		toSerialize["avatar_source"] = o.AvatarSource
	}
	if !IsNil(o.AvatarUrlMedium) {
		toSerialize["avatar_url_medium"] = o.AvatarUrlMedium
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.CanCreateStreams) {
		toSerialize["can_create_streams"] = o.CanCreateStreams
	}
	if !IsNil(o.CanCreatePublicStreams) {
		toSerialize["can_create_public_streams"] = o.CanCreatePublicStreams
	}
	if !IsNil(o.CanCreatePrivateStreams) {
		toSerialize["can_create_private_streams"] = o.CanCreatePrivateStreams
	}
	if !IsNil(o.CanCreateWebPublicStreams) {
		toSerialize["can_create_web_public_streams"] = o.CanCreateWebPublicStreams
	}
	if !IsNil(o.CanSubscribeOtherUsers) {
		toSerialize["can_subscribe_other_users"] = o.CanSubscribeOtherUsers
	}
	if !IsNil(o.CanInviteOthersToRealm) {
		toSerialize["can_invite_others_to_realm"] = o.CanInviteOthersToRealm
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if !IsNil(o.IsOwner) {
		toSerialize["is_owner"] = o.IsOwner
	}
	if !IsNil(o.IsModerator) {
		toSerialize["is_moderator"] = o.IsModerator
	}
	if !IsNil(o.IsGuest) {
		toSerialize["is_guest"] = o.IsGuest
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.DeliveryEmail) {
		toSerialize["delivery_email"] = o.DeliveryEmail
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.CrossRealmBots) {
		toSerialize["cross_realm_bots"] = o.CrossRealmBots
	}
	if !IsNil(o.ServerSupportedPermissionSettings) {
		toSerialize["server_supported_permission_settings"] = o.ServerSupportedPermissionSettings
	}
	if !IsNil(o.MaxBulkNewSubscriptionMessages) {
		toSerialize["max_bulk_new_subscription_messages"] = o.MaxBulkNewSubscriptionMessages
	}
	return toSerialize, nil
}

func (o *RegisterQueue200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterQueue200Response := _RegisterQueue200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterQueue200Response)

	if err != nil {
		return err
	}

	*o = RegisterQueue200Response(varRegisterQueue200Response)

	return err
}

type NullableRegisterQueue200Response struct {
	value *RegisterQueue200Response
	isSet bool
}

func (v NullableRegisterQueue200Response) Get() *RegisterQueue200Response {
	return v.value
}

func (v *NullableRegisterQueue200Response) Set(val *RegisterQueue200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterQueue200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterQueue200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterQueue200Response(val *RegisterQueue200Response) *NullableRegisterQueue200Response {
	return &NullableRegisterQueue200Response{value: val, isSet: true}
}

func (v NullableRegisterQueue200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterQueue200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
