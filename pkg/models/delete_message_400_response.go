/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeleteMessage400Response - struct for DeleteMessage400Response
type DeleteMessage400Response struct {
	CodedError *CodedError
	InvalidMessageError *InvalidMessageError
}

// CodedErrorAsDeleteMessage400Response is a convenience function that returns CodedError wrapped in DeleteMessage400Response
func CodedErrorAsDeleteMessage400Response(v *CodedError) DeleteMessage400Response {
	return DeleteMessage400Response{
		CodedError: v,
	}
}

// InvalidMessageErrorAsDeleteMessage400Response is a convenience function that returns InvalidMessageError wrapped in DeleteMessage400Response
func InvalidMessageErrorAsDeleteMessage400Response(v *InvalidMessageError) DeleteMessage400Response {
	return DeleteMessage400Response{
		InvalidMessageError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeleteMessage400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CodedError
	err = newStrictDecoder(data).Decode(&dst.CodedError)
	if err == nil {
		jsonCodedError, _ := json.Marshal(dst.CodedError)
		if string(jsonCodedError) == "{}" { // empty struct
			dst.CodedError = nil
		} else {
			if err = validator.Validate(dst.CodedError); err != nil {
				dst.CodedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.CodedError = nil
	}

	// try to unmarshal data into InvalidMessageError
	err = newStrictDecoder(data).Decode(&dst.InvalidMessageError)
	if err == nil {
		jsonInvalidMessageError, _ := json.Marshal(dst.InvalidMessageError)
		if string(jsonInvalidMessageError) == "{}" { // empty struct
			dst.InvalidMessageError = nil
		} else {
			if err = validator.Validate(dst.InvalidMessageError); err != nil {
				dst.InvalidMessageError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidMessageError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CodedError = nil
		dst.InvalidMessageError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeleteMessage400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeleteMessage400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeleteMessage400Response) MarshalJSON() ([]byte, error) {
	if src.CodedError != nil {
		return json.Marshal(&src.CodedError)
	}

	if src.InvalidMessageError != nil {
		return json.Marshal(&src.InvalidMessageError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeleteMessage400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CodedError != nil {
		return obj.CodedError
	}

	if obj.InvalidMessageError != nil {
		return obj.InvalidMessageError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeleteMessage400Response) GetActualInstanceValue() (interface{}) {
	if obj.CodedError != nil {
		return *obj.CodedError
	}

	if obj.InvalidMessageError != nil {
		return *obj.InvalidMessageError
	}

	// all schemas are nil
	return nil
}

type NullableDeleteMessage400Response struct {
	value *DeleteMessage400Response
	isSet bool
}

func (v NullableDeleteMessage400Response) Get() *DeleteMessage400Response {
	return v.value
}

func (v *NullableDeleteMessage400Response) Set(val *DeleteMessage400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteMessage400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteMessage400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteMessage400Response(val *DeleteMessage400Response) *NullableDeleteMessage400Response {
	return &NullableDeleteMessage400Response{value: val, isSet: true}
}

func (v NullableDeleteMessage400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteMessage400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


