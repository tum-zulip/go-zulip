/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the NeverSubscribed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeverSubscribed{}

// NeverSubscribed struct for NeverSubscribed
type NeverSubscribed struct {
	// The unique ID of the channel.
	StreamId *int32 `json:"stream_id,omitempty"`
	// The name of the channel.
	Name *string `json:"name,omitempty"`
	// A boolean indicating whether the channel is [archived](zulip.com/help/archive-a-channel.  **Changes**: New in Zulip 10.0 (feature level 315). Previously, this endpoint never returned archived channels.
	IsArchived *bool `json:"is_archived,omitempty"`
	// The short description of the channel in [Zulip-flavored Markdown](zulip.com/help/format-your-message-using-markdown format, intended to be used to prepopulate UI for editing a channel's description.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	Description *string `json:"description,omitempty"`
	// The UNIX timestamp for when the channel was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
	DateCreated *int32      `json:"date_created,omitempty"`
	CreatorId   interface{} `json:"creator_id,omitempty"`
	// Specifies whether the channel is private or not. Only people who have been invited can access a private channel.
	InviteOnly *bool `json:"invite_only,omitempty"`
	// The short description of the channel rendered as HTML, intended to be used when displaying the channel description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly. And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
	RenderedDescription *string `json:"rendered_description,omitempty"`
	// Whether the channel has been configured to allow unauthenticated access to its message history from the web.  **Changes**: New in Zulip 2.1.0.
	IsWebPublic *bool `json:"is_web_public,omitempty"`
	// A deprecated representation of a superset of the users who have permission to post messages to the channel available for backwards-compatibility. Clients should use `can_send_message_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 1 = Any user can post. - 2 = Only administrators can post. - 3 = Only [full members][calc-full-member] can post. - 4 = Only moderators can post.  **Changes**: Deprecated in Zulip 10.0 (feature level 333) and replaced by `can_send_message_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  New in Zulip 3.0 (feature level 1), replacing the previous `is_announcement_only` boolean.  [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	// Deprecated
	StreamPostPolicy     *int32      `json:"stream_post_policy,omitempty"`
	MessageRetentionDays interface{} `json:"message_retention_days,omitempty"`
	// Whether the history of the channel is public to its subscribers.  Currently always true for public channels (i.e. `\"invite_only\": false` implies `\"history_public_to_subscribers\": true`), but clients should not make that assumption, as we may change that behavior in the future.
	HistoryPublicToSubscribers *bool         `json:"history_public_to_subscribers,omitempty"`
	TopicsPolicy               *TopicsPolicy `json:"topics_policy,omitempty"`
	FirstMessageId             interface{}   `json:"first_message_id,omitempty"`
	FolderId                   interface{}   `json:"folder_id,omitempty"`
	// Whether the channel has recent message activity. Clients should use this to implement [hide inactive channels](zulip.com/help/manage-inactive-channels if `demote_inactive_streams` is enabled.  **Changes**: New in Zulip 10.0 (feature level 323). Previously, clients implemented the demote_inactive_streams from local message history, resulting in a choppy loading experience.
	IsRecentlyActive *bool `json:"is_recently_active,omitempty"`
	// Whether the given channel is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1). Clients should use `stream_post_policy` instead.
	// Deprecated
	IsAnnouncementOnly                *bool              `json:"is_announcement_only,omitempty"`
	CanAddSubscribersGroup            *GroupSettingValue `json:"can_add_subscribers_group,omitempty"`
	CanRemoveSubscribersGroup         *GroupSettingValue `json:"can_remove_subscribers_group,omitempty"`
	CanAdministerChannelGroup         *GroupSettingValue `json:"can_administer_channel_group,omitempty"`
	CanDeleteAnyMessageGroup          *GroupSettingValue `json:"can_delete_any_message_group,omitempty"`
	CanDeleteOwnMessageGroup          *GroupSettingValue `json:"can_delete_own_message_group,omitempty"`
	CanMoveMessagesOutOfChannelGroup  *GroupSettingValue `json:"can_move_messages_out_of_channel_group,omitempty"`
	CanMoveMessagesWithinChannelGroup *GroupSettingValue `json:"can_move_messages_within_channel_group,omitempty"`
	CanSendMessageGroup               *GroupSettingValue `json:"can_send_message_group,omitempty"`
	CanSubscribeGroup                 *GroupSettingValue `json:"can_subscribe_group,omitempty"`
	CanResolveTopicsGroup             *GroupSettingValue `json:"can_resolve_topics_group,omitempty"`
	// The total number of non-deactivated users (including bots) who are subscribed to the channel. Clients are responsible for updating this value using `peer_add` and `peer_remove` events.  The server's internals cannot guarantee this value is correctly synced with `peer_add` and `peer_remove` events for the channel. As a result, if a (rare) race occurs between a change in the channel's subscribers and fetching this value, it is possible for a client that is correctly following the events protocol to end up with a permanently off-by-one error in the channel's subscriber count.  Clients are recommended to fetch full subscriber data for a channel in contexts where it is important to avoid this risk. The official web application, for example, uses this field primarily while waiting to fetch a given channel's full subscriber list from the server.  **Changes**: New in Zulip 11.0 (feature level 394).
	SubscriberCount *float32 `json:"subscriber_count,omitempty"`
	// The average number of messages sent to the channel per week, as estimated based on recent weeks, rounded to the nearest integer.  If `null`, the channel was recently created and there is insufficient data to estimate the average traffic.
	StreamWeeklyTraffic NullableInt32 `json:"stream_weekly_traffic,omitempty"`
	// A list of user IDs of users who are subscribed to the channel. Included only if `include_subscribers` is `true`.  If a user is not allowed to know the subscribers for a channel, we will send an empty array. API authors should use other data to determine whether users like guest users are forbidden to know the subscribers.
	Subscribers []int32 `json:"subscribers,omitempty"`
	// If [`include_subscribers=\"partial\"`](zulip.com/api/get-subscriptions#parameter-include_subscribers was requested, the server may, at its discretion, send a `partial_subscribers` list rather than a `subscribers` list for channels with a large number of subscribers.  The `partial_subscribers` list contains an arbitrary subset of the channel's subscribers that is guaranteed to include all bot user subscribers as well as all users who have been active in the last 14 days, but otherwise can be chosen arbitrarily by the server.  If a user is not allowed to know the subscribers for a channel, we will send an empty array. API authors should use other data to determine whether users like guest users are forbidden to know the subscribers.  **Changes**: New in Zulip 11.0 (feature level 412).
	PartialSubscribers []int32 `json:"partial_subscribers,omitempty"`
}

// NewNeverSubscribed instantiates a new NeverSubscribed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeverSubscribed() *NeverSubscribed {
	this := NeverSubscribed{}
	return &this
}

// NewNeverSubscribedWithDefaults instantiates a new NeverSubscribed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeverSubscribedWithDefaults() *NeverSubscribed {
	this := NeverSubscribed{}
	return &this
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *NeverSubscribed) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *NeverSubscribed) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *NeverSubscribed) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NeverSubscribed) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NeverSubscribed) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NeverSubscribed) SetName(v string) {
	o.Name = &v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *NeverSubscribed) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *NeverSubscribed) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *NeverSubscribed) SetIsArchived(v bool) {
	o.IsArchived = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NeverSubscribed) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NeverSubscribed) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NeverSubscribed) SetDescription(v string) {
	o.Description = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *NeverSubscribed) GetDateCreated() int32 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int32
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetDateCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *NeverSubscribed) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int32 and assigns it to the DateCreated field.
func (o *NeverSubscribed) SetDateCreated(v int32) {
	o.DateCreated = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NeverSubscribed) GetCreatorId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NeverSubscribed) GetCreatorIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return &o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given interface{} and assigns it to the CreatorId field.
func (o *NeverSubscribed) SetCreatorId(v interface{}) {
	o.CreatorId = v
}

// GetInviteOnly returns the InviteOnly field value if set, zero value otherwise.
func (o *NeverSubscribed) GetInviteOnly() bool {
	if o == nil || IsNil(o.InviteOnly) {
		var ret bool
		return ret
	}
	return *o.InviteOnly
}

// GetInviteOnlyOk returns a tuple with the InviteOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetInviteOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.InviteOnly) {
		return nil, false
	}
	return o.InviteOnly, true
}

// HasInviteOnly returns a boolean if a field has been set.
func (o *NeverSubscribed) HasInviteOnly() bool {
	if o != nil && !IsNil(o.InviteOnly) {
		return true
	}

	return false
}

// SetInviteOnly gets a reference to the given bool and assigns it to the InviteOnly field.
func (o *NeverSubscribed) SetInviteOnly(v bool) {
	o.InviteOnly = &v
}

// GetRenderedDescription returns the RenderedDescription field value if set, zero value otherwise.
func (o *NeverSubscribed) GetRenderedDescription() string {
	if o == nil || IsNil(o.RenderedDescription) {
		var ret string
		return ret
	}
	return *o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetRenderedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RenderedDescription) {
		return nil, false
	}
	return o.RenderedDescription, true
}

// HasRenderedDescription returns a boolean if a field has been set.
func (o *NeverSubscribed) HasRenderedDescription() bool {
	if o != nil && !IsNil(o.RenderedDescription) {
		return true
	}

	return false
}

// SetRenderedDescription gets a reference to the given string and assigns it to the RenderedDescription field.
func (o *NeverSubscribed) SetRenderedDescription(v string) {
	o.RenderedDescription = &v
}

// GetIsWebPublic returns the IsWebPublic field value if set, zero value otherwise.
func (o *NeverSubscribed) GetIsWebPublic() bool {
	if o == nil || IsNil(o.IsWebPublic) {
		var ret bool
		return ret
	}
	return *o.IsWebPublic
}

// GetIsWebPublicOk returns a tuple with the IsWebPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetIsWebPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWebPublic) {
		return nil, false
	}
	return o.IsWebPublic, true
}

// HasIsWebPublic returns a boolean if a field has been set.
func (o *NeverSubscribed) HasIsWebPublic() bool {
	if o != nil && !IsNil(o.IsWebPublic) {
		return true
	}

	return false
}

// SetIsWebPublic gets a reference to the given bool and assigns it to the IsWebPublic field.
func (o *NeverSubscribed) SetIsWebPublic(v bool) {
	o.IsWebPublic = &v
}

// GetStreamPostPolicy returns the StreamPostPolicy field value if set, zero value otherwise.
// Deprecated
func (o *NeverSubscribed) GetStreamPostPolicy() int32 {
	if o == nil || IsNil(o.StreamPostPolicy) {
		var ret int32
		return ret
	}
	return *o.StreamPostPolicy
}

// GetStreamPostPolicyOk returns a tuple with the StreamPostPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NeverSubscribed) GetStreamPostPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamPostPolicy) {
		return nil, false
	}
	return o.StreamPostPolicy, true
}

// HasStreamPostPolicy returns a boolean if a field has been set.
func (o *NeverSubscribed) HasStreamPostPolicy() bool {
	if o != nil && !IsNil(o.StreamPostPolicy) {
		return true
	}

	return false
}

// SetStreamPostPolicy gets a reference to the given int32 and assigns it to the StreamPostPolicy field.
// Deprecated
func (o *NeverSubscribed) SetStreamPostPolicy(v int32) {
	o.StreamPostPolicy = &v
}

// GetMessageRetentionDays returns the MessageRetentionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NeverSubscribed) GetMessageRetentionDays() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MessageRetentionDays
}

// GetMessageRetentionDaysOk returns a tuple with the MessageRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NeverSubscribed) GetMessageRetentionDaysOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MessageRetentionDays) {
		return nil, false
	}
	return &o.MessageRetentionDays, true
}

// HasMessageRetentionDays returns a boolean if a field has been set.
func (o *NeverSubscribed) HasMessageRetentionDays() bool {
	if o != nil && !IsNil(o.MessageRetentionDays) {
		return true
	}

	return false
}

// SetMessageRetentionDays gets a reference to the given interface{} and assigns it to the MessageRetentionDays field.
func (o *NeverSubscribed) SetMessageRetentionDays(v interface{}) {
	o.MessageRetentionDays = v
}

// GetHistoryPublicToSubscribers returns the HistoryPublicToSubscribers field value if set, zero value otherwise.
func (o *NeverSubscribed) GetHistoryPublicToSubscribers() bool {
	if o == nil || IsNil(o.HistoryPublicToSubscribers) {
		var ret bool
		return ret
	}
	return *o.HistoryPublicToSubscribers
}

// GetHistoryPublicToSubscribersOk returns a tuple with the HistoryPublicToSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetHistoryPublicToSubscribersOk() (*bool, bool) {
	if o == nil || IsNil(o.HistoryPublicToSubscribers) {
		return nil, false
	}
	return o.HistoryPublicToSubscribers, true
}

// HasHistoryPublicToSubscribers returns a boolean if a field has been set.
func (o *NeverSubscribed) HasHistoryPublicToSubscribers() bool {
	if o != nil && !IsNil(o.HistoryPublicToSubscribers) {
		return true
	}

	return false
}

// SetHistoryPublicToSubscribers gets a reference to the given bool and assigns it to the HistoryPublicToSubscribers field.
func (o *NeverSubscribed) SetHistoryPublicToSubscribers(v bool) {
	o.HistoryPublicToSubscribers = &v
}

// GetTopicsPolicy returns the TopicsPolicy field value if set, zero value otherwise.
func (o *NeverSubscribed) GetTopicsPolicy() TopicsPolicy {
	if o == nil || IsNil(o.TopicsPolicy) {
		var ret TopicsPolicy
		return ret
	}
	return *o.TopicsPolicy
}

// GetTopicsPolicyOk returns a tuple with the TopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetTopicsPolicyOk() (*TopicsPolicy, bool) {
	if o == nil || IsNil(o.TopicsPolicy) {
		return nil, false
	}
	return o.TopicsPolicy, true
}

// HasTopicsPolicy returns a boolean if a field has been set.
func (o *NeverSubscribed) HasTopicsPolicy() bool {
	if o != nil && !IsNil(o.TopicsPolicy) {
		return true
	}

	return false
}

// SetTopicsPolicy gets a reference to the given TopicsPolicy and assigns it to the TopicsPolicy field.
func (o *NeverSubscribed) SetTopicsPolicy(v TopicsPolicy) {
	o.TopicsPolicy = &v
}

// GetFirstMessageId returns the FirstMessageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NeverSubscribed) GetFirstMessageId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FirstMessageId
}

// GetFirstMessageIdOk returns a tuple with the FirstMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NeverSubscribed) GetFirstMessageIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FirstMessageId) {
		return nil, false
	}
	return &o.FirstMessageId, true
}

// HasFirstMessageId returns a boolean if a field has been set.
func (o *NeverSubscribed) HasFirstMessageId() bool {
	if o != nil && !IsNil(o.FirstMessageId) {
		return true
	}

	return false
}

// SetFirstMessageId gets a reference to the given interface{} and assigns it to the FirstMessageId field.
func (o *NeverSubscribed) SetFirstMessageId(v interface{}) {
	o.FirstMessageId = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NeverSubscribed) GetFolderId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NeverSubscribed) GetFolderIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return &o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *NeverSubscribed) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given interface{} and assigns it to the FolderId field.
func (o *NeverSubscribed) SetFolderId(v interface{}) {
	o.FolderId = v
}

// GetIsRecentlyActive returns the IsRecentlyActive field value if set, zero value otherwise.
func (o *NeverSubscribed) GetIsRecentlyActive() bool {
	if o == nil || IsNil(o.IsRecentlyActive) {
		var ret bool
		return ret
	}
	return *o.IsRecentlyActive
}

// GetIsRecentlyActiveOk returns a tuple with the IsRecentlyActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetIsRecentlyActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRecentlyActive) {
		return nil, false
	}
	return o.IsRecentlyActive, true
}

// HasIsRecentlyActive returns a boolean if a field has been set.
func (o *NeverSubscribed) HasIsRecentlyActive() bool {
	if o != nil && !IsNil(o.IsRecentlyActive) {
		return true
	}

	return false
}

// SetIsRecentlyActive gets a reference to the given bool and assigns it to the IsRecentlyActive field.
func (o *NeverSubscribed) SetIsRecentlyActive(v bool) {
	o.IsRecentlyActive = &v
}

// GetIsAnnouncementOnly returns the IsAnnouncementOnly field value if set, zero value otherwise.
// Deprecated
func (o *NeverSubscribed) GetIsAnnouncementOnly() bool {
	if o == nil || IsNil(o.IsAnnouncementOnly) {
		var ret bool
		return ret
	}
	return *o.IsAnnouncementOnly
}

// GetIsAnnouncementOnlyOk returns a tuple with the IsAnnouncementOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *NeverSubscribed) GetIsAnnouncementOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnnouncementOnly) {
		return nil, false
	}
	return o.IsAnnouncementOnly, true
}

// HasIsAnnouncementOnly returns a boolean if a field has been set.
func (o *NeverSubscribed) HasIsAnnouncementOnly() bool {
	if o != nil && !IsNil(o.IsAnnouncementOnly) {
		return true
	}

	return false
}

// SetIsAnnouncementOnly gets a reference to the given bool and assigns it to the IsAnnouncementOnly field.
// Deprecated
func (o *NeverSubscribed) SetIsAnnouncementOnly(v bool) {
	o.IsAnnouncementOnly = &v
}

// GetCanAddSubscribersGroup returns the CanAddSubscribersGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanAddSubscribersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddSubscribersGroup
}

// GetCanAddSubscribersGroupOk returns a tuple with the CanAddSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanAddSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		return nil, false
	}
	return o.CanAddSubscribersGroup, true
}

// HasCanAddSubscribersGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanAddSubscribersGroup() bool {
	if o != nil && !IsNil(o.CanAddSubscribersGroup) {
		return true
	}

	return false
}

// SetCanAddSubscribersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddSubscribersGroup field.
func (o *NeverSubscribed) SetCanAddSubscribersGroup(v GroupSettingValue) {
	o.CanAddSubscribersGroup = &v
}

// GetCanRemoveSubscribersGroup returns the CanRemoveSubscribersGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanRemoveSubscribersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanRemoveSubscribersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanRemoveSubscribersGroup
}

// GetCanRemoveSubscribersGroupOk returns a tuple with the CanRemoveSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanRemoveSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanRemoveSubscribersGroup) {
		return nil, false
	}
	return o.CanRemoveSubscribersGroup, true
}

// HasCanRemoveSubscribersGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanRemoveSubscribersGroup() bool {
	if o != nil && !IsNil(o.CanRemoveSubscribersGroup) {
		return true
	}

	return false
}

// SetCanRemoveSubscribersGroup gets a reference to the given GroupSettingValue and assigns it to the CanRemoveSubscribersGroup field.
func (o *NeverSubscribed) SetCanRemoveSubscribersGroup(v GroupSettingValue) {
	o.CanRemoveSubscribersGroup = &v
}

// GetCanAdministerChannelGroup returns the CanAdministerChannelGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanAdministerChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAdministerChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAdministerChannelGroup
}

// GetCanAdministerChannelGroupOk returns a tuple with the CanAdministerChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanAdministerChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAdministerChannelGroup) {
		return nil, false
	}
	return o.CanAdministerChannelGroup, true
}

// HasCanAdministerChannelGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanAdministerChannelGroup() bool {
	if o != nil && !IsNil(o.CanAdministerChannelGroup) {
		return true
	}

	return false
}

// SetCanAdministerChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanAdministerChannelGroup field.
func (o *NeverSubscribed) SetCanAdministerChannelGroup(v GroupSettingValue) {
	o.CanAdministerChannelGroup = &v
}

// GetCanDeleteAnyMessageGroup returns the CanDeleteAnyMessageGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanDeleteAnyMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteAnyMessageGroup
}

// GetCanDeleteAnyMessageGroupOk returns a tuple with the CanDeleteAnyMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanDeleteAnyMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		return nil, false
	}
	return o.CanDeleteAnyMessageGroup, true
}

// HasCanDeleteAnyMessageGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanDeleteAnyMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteAnyMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteAnyMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteAnyMessageGroup field.
func (o *NeverSubscribed) SetCanDeleteAnyMessageGroup(v GroupSettingValue) {
	o.CanDeleteAnyMessageGroup = &v
}

// GetCanDeleteOwnMessageGroup returns the CanDeleteOwnMessageGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanDeleteOwnMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteOwnMessageGroup
}

// GetCanDeleteOwnMessageGroupOk returns a tuple with the CanDeleteOwnMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanDeleteOwnMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		return nil, false
	}
	return o.CanDeleteOwnMessageGroup, true
}

// HasCanDeleteOwnMessageGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanDeleteOwnMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteOwnMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteOwnMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteOwnMessageGroup field.
func (o *NeverSubscribed) SetCanDeleteOwnMessageGroup(v GroupSettingValue) {
	o.CanDeleteOwnMessageGroup = &v
}

// GetCanMoveMessagesOutOfChannelGroup returns the CanMoveMessagesOutOfChannelGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanMoveMessagesOutOfChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesOutOfChannelGroup
}

// GetCanMoveMessagesOutOfChannelGroupOk returns a tuple with the CanMoveMessagesOutOfChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanMoveMessagesOutOfChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return nil, false
	}
	return o.CanMoveMessagesOutOfChannelGroup, true
}

// HasCanMoveMessagesOutOfChannelGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanMoveMessagesOutOfChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesOutOfChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesOutOfChannelGroup field.
func (o *NeverSubscribed) SetCanMoveMessagesOutOfChannelGroup(v GroupSettingValue) {
	o.CanMoveMessagesOutOfChannelGroup = &v
}

// GetCanMoveMessagesWithinChannelGroup returns the CanMoveMessagesWithinChannelGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanMoveMessagesWithinChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesWithinChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesWithinChannelGroup
}

// GetCanMoveMessagesWithinChannelGroupOk returns a tuple with the CanMoveMessagesWithinChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanMoveMessagesWithinChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return nil, false
	}
	return o.CanMoveMessagesWithinChannelGroup, true
}

// HasCanMoveMessagesWithinChannelGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanMoveMessagesWithinChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesWithinChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesWithinChannelGroup field.
func (o *NeverSubscribed) SetCanMoveMessagesWithinChannelGroup(v GroupSettingValue) {
	o.CanMoveMessagesWithinChannelGroup = &v
}

// GetCanSendMessageGroup returns the CanSendMessageGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanSendMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSendMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSendMessageGroup
}

// GetCanSendMessageGroupOk returns a tuple with the CanSendMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanSendMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSendMessageGroup) {
		return nil, false
	}
	return o.CanSendMessageGroup, true
}

// HasCanSendMessageGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanSendMessageGroup() bool {
	if o != nil && !IsNil(o.CanSendMessageGroup) {
		return true
	}

	return false
}

// SetCanSendMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanSendMessageGroup field.
func (o *NeverSubscribed) SetCanSendMessageGroup(v GroupSettingValue) {
	o.CanSendMessageGroup = &v
}

// GetCanSubscribeGroup returns the CanSubscribeGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanSubscribeGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSubscribeGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSubscribeGroup
}

// GetCanSubscribeGroupOk returns a tuple with the CanSubscribeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanSubscribeGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSubscribeGroup) {
		return nil, false
	}
	return o.CanSubscribeGroup, true
}

// HasCanSubscribeGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanSubscribeGroup() bool {
	if o != nil && !IsNil(o.CanSubscribeGroup) {
		return true
	}

	return false
}

// SetCanSubscribeGroup gets a reference to the given GroupSettingValue and assigns it to the CanSubscribeGroup field.
func (o *NeverSubscribed) SetCanSubscribeGroup(v GroupSettingValue) {
	o.CanSubscribeGroup = &v
}

// GetCanResolveTopicsGroup returns the CanResolveTopicsGroup field value if set, zero value otherwise.
func (o *NeverSubscribed) GetCanResolveTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanResolveTopicsGroup
}

// GetCanResolveTopicsGroupOk returns a tuple with the CanResolveTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetCanResolveTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		return nil, false
	}
	return o.CanResolveTopicsGroup, true
}

// HasCanResolveTopicsGroup returns a boolean if a field has been set.
func (o *NeverSubscribed) HasCanResolveTopicsGroup() bool {
	if o != nil && !IsNil(o.CanResolveTopicsGroup) {
		return true
	}

	return false
}

// SetCanResolveTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the CanResolveTopicsGroup field.
func (o *NeverSubscribed) SetCanResolveTopicsGroup(v GroupSettingValue) {
	o.CanResolveTopicsGroup = &v
}

// GetSubscriberCount returns the SubscriberCount field value if set, zero value otherwise.
func (o *NeverSubscribed) GetSubscriberCount() float32 {
	if o == nil || IsNil(o.SubscriberCount) {
		var ret float32
		return ret
	}
	return *o.SubscriberCount
}

// GetSubscriberCountOk returns a tuple with the SubscriberCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetSubscriberCountOk() (*float32, bool) {
	if o == nil || IsNil(o.SubscriberCount) {
		return nil, false
	}
	return o.SubscriberCount, true
}

// HasSubscriberCount returns a boolean if a field has been set.
func (o *NeverSubscribed) HasSubscriberCount() bool {
	if o != nil && !IsNil(o.SubscriberCount) {
		return true
	}

	return false
}

// SetSubscriberCount gets a reference to the given float32 and assigns it to the SubscriberCount field.
func (o *NeverSubscribed) SetSubscriberCount(v float32) {
	o.SubscriberCount = &v
}

// GetStreamWeeklyTraffic returns the StreamWeeklyTraffic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NeverSubscribed) GetStreamWeeklyTraffic() int32 {
	if o == nil || IsNil(o.StreamWeeklyTraffic.Get()) {
		var ret int32
		return ret
	}
	return *o.StreamWeeklyTraffic.Get()
}

// GetStreamWeeklyTrafficOk returns a tuple with the StreamWeeklyTraffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NeverSubscribed) GetStreamWeeklyTrafficOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamWeeklyTraffic.Get(), o.StreamWeeklyTraffic.IsSet()
}

// HasStreamWeeklyTraffic returns a boolean if a field has been set.
func (o *NeverSubscribed) HasStreamWeeklyTraffic() bool {
	if o != nil && o.StreamWeeklyTraffic.IsSet() {
		return true
	}

	return false
}

// SetStreamWeeklyTraffic gets a reference to the given NullableInt32 and assigns it to the StreamWeeklyTraffic field.
func (o *NeverSubscribed) SetStreamWeeklyTraffic(v int32) {
	o.StreamWeeklyTraffic.Set(&v)
}

// SetStreamWeeklyTrafficNil sets the value for StreamWeeklyTraffic to be an explicit nil
func (o *NeverSubscribed) SetStreamWeeklyTrafficNil() {
	o.StreamWeeklyTraffic.Set(nil)
}

// UnsetStreamWeeklyTraffic ensures that no value is present for StreamWeeklyTraffic, not even an explicit nil
func (o *NeverSubscribed) UnsetStreamWeeklyTraffic() {
	o.StreamWeeklyTraffic.Unset()
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *NeverSubscribed) GetSubscribers() []int32 {
	if o == nil || IsNil(o.Subscribers) {
		var ret []int32
		return ret
	}
	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetSubscribersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Subscribers) {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *NeverSubscribed) HasSubscribers() bool {
	if o != nil && !IsNil(o.Subscribers) {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given []int32 and assigns it to the Subscribers field.
func (o *NeverSubscribed) SetSubscribers(v []int32) {
	o.Subscribers = v
}

// GetPartialSubscribers returns the PartialSubscribers field value if set, zero value otherwise.
func (o *NeverSubscribed) GetPartialSubscribers() []int32 {
	if o == nil || IsNil(o.PartialSubscribers) {
		var ret []int32
		return ret
	}
	return o.PartialSubscribers
}

// GetPartialSubscribersOk returns a tuple with the PartialSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeverSubscribed) GetPartialSubscribersOk() ([]int32, bool) {
	if o == nil || IsNil(o.PartialSubscribers) {
		return nil, false
	}
	return o.PartialSubscribers, true
}

// HasPartialSubscribers returns a boolean if a field has been set.
func (o *NeverSubscribed) HasPartialSubscribers() bool {
	if o != nil && !IsNil(o.PartialSubscribers) {
		return true
	}

	return false
}

// SetPartialSubscribers gets a reference to the given []int32 and assigns it to the PartialSubscribers field.
func (o *NeverSubscribed) SetPartialSubscribers(v []int32) {
	o.PartialSubscribers = v
}

func (o NeverSubscribed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeverSubscribed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsArchived) {
		toSerialize["is_archived"] = o.IsArchived
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if o.CreatorId != nil {
		toSerialize["creator_id"] = o.CreatorId
	}
	if !IsNil(o.InviteOnly) {
		toSerialize["invite_only"] = o.InviteOnly
	}
	if !IsNil(o.RenderedDescription) {
		toSerialize["rendered_description"] = o.RenderedDescription
	}
	if !IsNil(o.IsWebPublic) {
		toSerialize["is_web_public"] = o.IsWebPublic
	}
	if !IsNil(o.StreamPostPolicy) {
		toSerialize["stream_post_policy"] = o.StreamPostPolicy
	}
	if o.MessageRetentionDays != nil {
		toSerialize["message_retention_days"] = o.MessageRetentionDays
	}
	if !IsNil(o.HistoryPublicToSubscribers) {
		toSerialize["history_public_to_subscribers"] = o.HistoryPublicToSubscribers
	}
	if !IsNil(o.TopicsPolicy) {
		toSerialize["topics_policy"] = o.TopicsPolicy
	}
	if o.FirstMessageId != nil {
		toSerialize["first_message_id"] = o.FirstMessageId
	}
	if o.FolderId != nil {
		toSerialize["folder_id"] = o.FolderId
	}
	if !IsNil(o.IsRecentlyActive) {
		toSerialize["is_recently_active"] = o.IsRecentlyActive
	}
	if !IsNil(o.IsAnnouncementOnly) {
		toSerialize["is_announcement_only"] = o.IsAnnouncementOnly
	}
	if !IsNil(o.CanAddSubscribersGroup) {
		toSerialize["can_add_subscribers_group"] = o.CanAddSubscribersGroup
	}
	if !IsNil(o.CanRemoveSubscribersGroup) {
		toSerialize["can_remove_subscribers_group"] = o.CanRemoveSubscribersGroup
	}
	if !IsNil(o.CanAdministerChannelGroup) {
		toSerialize["can_administer_channel_group"] = o.CanAdministerChannelGroup
	}
	if !IsNil(o.CanDeleteAnyMessageGroup) {
		toSerialize["can_delete_any_message_group"] = o.CanDeleteAnyMessageGroup
	}
	if !IsNil(o.CanDeleteOwnMessageGroup) {
		toSerialize["can_delete_own_message_group"] = o.CanDeleteOwnMessageGroup
	}
	if !IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		toSerialize["can_move_messages_out_of_channel_group"] = o.CanMoveMessagesOutOfChannelGroup
	}
	if !IsNil(o.CanMoveMessagesWithinChannelGroup) {
		toSerialize["can_move_messages_within_channel_group"] = o.CanMoveMessagesWithinChannelGroup
	}
	if !IsNil(o.CanSendMessageGroup) {
		toSerialize["can_send_message_group"] = o.CanSendMessageGroup
	}
	if !IsNil(o.CanSubscribeGroup) {
		toSerialize["can_subscribe_group"] = o.CanSubscribeGroup
	}
	if !IsNil(o.CanResolveTopicsGroup) {
		toSerialize["can_resolve_topics_group"] = o.CanResolveTopicsGroup
	}
	if !IsNil(o.SubscriberCount) {
		toSerialize["subscriber_count"] = o.SubscriberCount
	}
	if o.StreamWeeklyTraffic.IsSet() {
		toSerialize["stream_weekly_traffic"] = o.StreamWeeklyTraffic.Get()
	}
	if !IsNil(o.Subscribers) {
		toSerialize["subscribers"] = o.Subscribers
	}
	if !IsNil(o.PartialSubscribers) {
		toSerialize["partial_subscribers"] = o.PartialSubscribers
	}
	return toSerialize, nil
}

type NullableNeverSubscribed struct {
	value *NeverSubscribed
	isSet bool
}

func (v NullableNeverSubscribed) Get() *NeverSubscribed {
	return v.value
}

func (v *NullableNeverSubscribed) Set(val *NeverSubscribed) {
	v.value = val
	v.isSet = true
}

func (v NullableNeverSubscribed) IsSet() bool {
	return v.isSet
}

func (v *NullableNeverSubscribed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeverSubscribed(val *NeverSubscribed) *NullableNeverSubscribed {
	return &NullableNeverSubscribed{value: val, isSet: true}
}

func (v NullableNeverSubscribed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeverSubscribed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
