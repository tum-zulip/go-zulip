/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the HeartbeatEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeartbeatEvent{}

// HeartbeatEvent Heartbeat events are sent by the server to avoid longpolling connections being affected by networks that kill idle HTTP connections.  Clients do not need to do anything to process these events, beyond the common `last_event_id` accounting.
type HeartbeatEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewUserSettingsUpdateEvent4 instantiates a new HeartbeatEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsUpdateEvent4() *HeartbeatEvent {
	this := HeartbeatEvent{}
	return &this
}

// NewUserSettingsUpdateEvent4WithDefaults instantiates a new HeartbeatEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsUpdateEvent4WithDefaults() *HeartbeatEvent {
	this := HeartbeatEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HeartbeatEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeartbeatEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HeartbeatEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HeartbeatEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HeartbeatEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeartbeatEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HeartbeatEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HeartbeatEvent) SetType(v string) {
	o.Type = &v
}

func (o HeartbeatEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeartbeatEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUserSettingsUpdateEvent4 struct {
	value *HeartbeatEvent
	isSet bool
}

func (v NullableUserSettingsUpdateEvent4) Get() *HeartbeatEvent {
	return v.value
}

func (v *NullableUserSettingsUpdateEvent4) Set(val *HeartbeatEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsUpdateEvent4) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsUpdateEvent4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsUpdateEvent4(val *HeartbeatEvent) *NullableUserSettingsUpdateEvent4 {
	return &NullableUserSettingsUpdateEvent4{value: val, isSet: true}
}

func (v NullableUserSettingsUpdateEvent4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsUpdateEvent4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
