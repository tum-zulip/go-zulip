/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf32 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf32{}

// GetEvents200ResponseAllOfEventsInnerOneOf32 Event sent to a user's clients when the user mutes/unmutes a topic, or otherwise modifies their personal per-topic configuration.  **Changes**: New in Zulip 6.0 (feature level 134). Previously, clients were notified about changes in muted topic configuration via the `muted_topics` event type. 
type GetEvents200ResponseAllOfEventsInnerOneOf32 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// The ID of the channel to which the topic belongs. 
	StreamId *int32 `json:"stream_id,omitempty"`
	// The name of the topic.  For clients that don't support the `empty_topic_name` [client capability][client-capabilities], if the actual topic name is empty string, this field's value will instead be the value of `realm_empty_topic_display_name` found in the [`POST /register`](/api/register-queue) response.  **Changes**: Before 10.0 (feature level 334), `empty_topic_name` client capability didn't exist and empty string as the topic name for channel messages wasn't allowed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities 
	TopicName *string `json:"topic_name,omitempty"`
	// An integer UNIX timestamp representing when the user-topic relationship was last changed. 
	LastUpdated *int32 `json:"last_updated,omitempty"`
	// An integer indicating the user's visibility preferences for the topic, such as whether the topic is muted.  - 0 = None. Used to indicate that the user no   longer has a special visibility policy for this topic. - 1 = Muted. Used to record [muted topics](/help/mute-a-topic). - 2 = Unmuted. Used to record unmuted topics. - 3 = Followed. Used to record [followed topics](/help/follow-a-topic).  **Changes**: In Zulip 7.0 (feature level 219), added followed as a visibility policy option.  In Zulip 7.0 (feature level 170), added unmuted as a visibility policy option. 
	VisibilityPolicy *int32 `json:"visibility_policy,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf32 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf32 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf32() *GetEvents200ResponseAllOfEventsInnerOneOf32 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf32{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf32WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf32 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf32WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf32 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf32{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetType(v string) {
	o.Type = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetTopicName returns the TopicName field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetTopicName() string {
	if o == nil || IsNil(o.TopicName) {
		var ret string
		return ret
	}
	return *o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetTopicNameOk() (*string, bool) {
	if o == nil || IsNil(o.TopicName) {
		return nil, false
	}
	return o.TopicName, true
}

// HasTopicName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasTopicName() bool {
	if o != nil && !IsNil(o.TopicName) {
		return true
	}

	return false
}

// SetTopicName gets a reference to the given string and assigns it to the TopicName field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetTopicName(v string) {
	o.TopicName = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetLastUpdated() int32 {
	if o == nil || IsNil(o.LastUpdated) {
		var ret int32
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetLastUpdatedOk() (*int32, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given int32 and assigns it to the LastUpdated field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetLastUpdated(v int32) {
	o.LastUpdated = &v
}

// GetVisibilityPolicy returns the VisibilityPolicy field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetVisibilityPolicy() int32 {
	if o == nil || IsNil(o.VisibilityPolicy) {
		var ret int32
		return ret
	}
	return *o.VisibilityPolicy
}

// GetVisibilityPolicyOk returns a tuple with the VisibilityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) GetVisibilityPolicyOk() (*int32, bool) {
	if o == nil || IsNil(o.VisibilityPolicy) {
		return nil, false
	}
	return o.VisibilityPolicy, true
}

// HasVisibilityPolicy returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) HasVisibilityPolicy() bool {
	if o != nil && !IsNil(o.VisibilityPolicy) {
		return true
	}

	return false
}

// SetVisibilityPolicy gets a reference to the given int32 and assigns it to the VisibilityPolicy field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf32) SetVisibilityPolicy(v int32) {
	o.VisibilityPolicy = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf32) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf32) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.TopicName) {
		toSerialize["topic_name"] = o.TopicName
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.VisibilityPolicy) {
		toSerialize["visibility_policy"] = o.VisibilityPolicy
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf32 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf32
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf32) Get() *GetEvents200ResponseAllOfEventsInnerOneOf32 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf32) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf32) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf32) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf32) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf32(val *GetEvents200ResponseAllOfEventsInnerOneOf32) *NullableGetEvents200ResponseAllOfEventsInnerOneOf32 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf32{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf32) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf32) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


