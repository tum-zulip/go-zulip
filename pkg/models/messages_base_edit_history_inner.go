/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MessagesBaseEditHistoryInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagesBaseEditHistoryInner{}

// MessagesBaseEditHistoryInner struct for MessagesBaseEditHistoryInner
type MessagesBaseEditHistoryInner struct {
	// Only present if message's content was edited.  The content of the message immediately prior to this edit event.
	PrevContent *string `json:"prev_content,omitempty"`
	// Only present if message's content was edited.  The rendered HTML representation of `prev_content`.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	PrevRenderedContent *string `json:"prev_rendered_content,omitempty"`
	// Only present if message's channel was edited.  The channel ID of the message immediately prior to this edit event.  **Changes**: New in Zulip 3.0 (feature level 1).
	PrevStream *int32 `json:"prev_stream,omitempty"`
	// Only present if message's topic was edited.  The topic of the message immediately prior to this edit event.  **Changes**: New in Zulip 5.0 (feature level 118). Previously, this field was called `prev_subject`; clients are recommended to rename `prev_subject` to `prev_topic` if present for compatibility with older Zulip servers.
	PrevTopic *string `json:"prev_topic,omitempty"`
	// Only present if message's channel was edited.  The ID of the channel containing the message immediately after this edit event.  **Changes**: New in Zulip 5.0 (feature level 118).
	Stream *int32 `json:"stream,omitempty"`
	// The UNIX timestamp for the edit.
	// TODO: check if this timestamp follows the same format as other timestamps
	Timestamp int32 `json:"timestamp"`
	// Only present if message's topic was edited.  The topic of the message immediately after this edit event.  **Changes**: New in Zulip 5.0 (feature level 118).
	Topic *string `json:"topic,omitempty"`
	// The ID of the user that made the edit.  Will be `null` only for edit history events predating March 2017.  Clients can display edit history events where this is `null` as modified by either the sender (for content edits) or an unknown user (for topic edits).
	UserId NullableInt32 `json:"user_id"`
}

type _MessagesBaseEditHistoryInner MessagesBaseEditHistoryInner

// NewMessagesBaseEditHistoryInner instantiates a new MessagesBaseEditHistoryInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagesBaseEditHistoryInner(timestamp int32, userId NullableInt32) *MessagesBaseEditHistoryInner {
	this := MessagesBaseEditHistoryInner{}
	this.Timestamp = timestamp
	this.UserId = userId
	return &this
}

// NewMessagesBaseEditHistoryInnerWithDefaults instantiates a new MessagesBaseEditHistoryInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagesBaseEditHistoryInnerWithDefaults() *MessagesBaseEditHistoryInner {
	this := MessagesBaseEditHistoryInner{}
	return &this
}

// GetPrevContent returns the PrevContent field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetPrevContent() string {
	if o == nil || IsNil(o.PrevContent) {
		var ret string
		return ret
	}
	return *o.PrevContent
}

// GetPrevContentOk returns a tuple with the PrevContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetPrevContentOk() (*string, bool) {
	if o == nil || IsNil(o.PrevContent) {
		return nil, false
	}
	return o.PrevContent, true
}

// HasPrevContent returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasPrevContent() bool {
	if o != nil && !IsNil(o.PrevContent) {
		return true
	}

	return false
}

// SetPrevContent gets a reference to the given string and assigns it to the PrevContent field.
func (o *MessagesBaseEditHistoryInner) SetPrevContent(v string) {
	o.PrevContent = &v
}

// GetPrevRenderedContent returns the PrevRenderedContent field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetPrevRenderedContent() string {
	if o == nil || IsNil(o.PrevRenderedContent) {
		var ret string
		return ret
	}
	return *o.PrevRenderedContent
}

// GetPrevRenderedContentOk returns a tuple with the PrevRenderedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetPrevRenderedContentOk() (*string, bool) {
	if o == nil || IsNil(o.PrevRenderedContent) {
		return nil, false
	}
	return o.PrevRenderedContent, true
}

// HasPrevRenderedContent returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasPrevRenderedContent() bool {
	if o != nil && !IsNil(o.PrevRenderedContent) {
		return true
	}

	return false
}

// SetPrevRenderedContent gets a reference to the given string and assigns it to the PrevRenderedContent field.
func (o *MessagesBaseEditHistoryInner) SetPrevRenderedContent(v string) {
	o.PrevRenderedContent = &v
}

// GetPrevStream returns the PrevStream field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetPrevStream() int32 {
	if o == nil || IsNil(o.PrevStream) {
		var ret int32
		return ret
	}
	return *o.PrevStream
}

// GetPrevStreamOk returns a tuple with the PrevStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetPrevStreamOk() (*int32, bool) {
	if o == nil || IsNil(o.PrevStream) {
		return nil, false
	}
	return o.PrevStream, true
}

// HasPrevStream returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasPrevStream() bool {
	if o != nil && !IsNil(o.PrevStream) {
		return true
	}

	return false
}

// SetPrevStream gets a reference to the given int32 and assigns it to the PrevStream field.
func (o *MessagesBaseEditHistoryInner) SetPrevStream(v int32) {
	o.PrevStream = &v
}

// GetPrevTopic returns the PrevTopic field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetPrevTopic() string {
	if o == nil || IsNil(o.PrevTopic) {
		var ret string
		return ret
	}
	return *o.PrevTopic
}

// GetPrevTopicOk returns a tuple with the PrevTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetPrevTopicOk() (*string, bool) {
	if o == nil || IsNil(o.PrevTopic) {
		return nil, false
	}
	return o.PrevTopic, true
}

// HasPrevTopic returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasPrevTopic() bool {
	if o != nil && !IsNil(o.PrevTopic) {
		return true
	}

	return false
}

// SetPrevTopic gets a reference to the given string and assigns it to the PrevTopic field.
func (o *MessagesBaseEditHistoryInner) SetPrevTopic(v string) {
	o.PrevTopic = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetStream() int32 {
	if o == nil || IsNil(o.Stream) {
		var ret int32
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetStreamOk() (*int32, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given int32 and assigns it to the Stream field.
func (o *MessagesBaseEditHistoryInner) SetStream(v int32) {
	o.Stream = &v
}

// GetTimestamp returns the Timestamp field value
func (o *MessagesBaseEditHistoryInner) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MessagesBaseEditHistoryInner) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *MessagesBaseEditHistoryInner) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesBaseEditHistoryInner) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *MessagesBaseEditHistoryInner) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *MessagesBaseEditHistoryInner) SetTopic(v string) {
	o.Topic = &v
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *MessagesBaseEditHistoryInner) GetUserId() int32 {
	if o == nil || o.UserId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessagesBaseEditHistoryInner) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *MessagesBaseEditHistoryInner) SetUserId(v int32) {
	o.UserId.Set(&v)
}

func (o MessagesBaseEditHistoryInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagesBaseEditHistoryInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrevContent) {
		toSerialize["prev_content"] = o.PrevContent
	}
	if !IsNil(o.PrevRenderedContent) {
		toSerialize["prev_rendered_content"] = o.PrevRenderedContent
	}
	if !IsNil(o.PrevStream) {
		toSerialize["prev_stream"] = o.PrevStream
	}
	if !IsNil(o.PrevTopic) {
		toSerialize["prev_topic"] = o.PrevTopic
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	toSerialize["user_id"] = o.UserId.Get()
	return toSerialize, nil
}

func (o *MessagesBaseEditHistoryInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessagesBaseEditHistoryInner := _MessagesBaseEditHistoryInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessagesBaseEditHistoryInner)

	if err != nil {
		return err
	}

	*o = MessagesBaseEditHistoryInner(varMessagesBaseEditHistoryInner)

	return err
}

type NullableMessagesBaseEditHistoryInner struct {
	value *MessagesBaseEditHistoryInner
	isSet bool
}

func (v NullableMessagesBaseEditHistoryInner) Get() *MessagesBaseEditHistoryInner {
	return v.value
}

func (v *NullableMessagesBaseEditHistoryInner) Set(val *MessagesBaseEditHistoryInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagesBaseEditHistoryInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagesBaseEditHistoryInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagesBaseEditHistoryInner(val *MessagesBaseEditHistoryInner) *NullableMessagesBaseEditHistoryInner {
	return &NullableMessagesBaseEditHistoryInner{value: val, isSet: true}
}

func (v NullableMessagesBaseEditHistoryInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagesBaseEditHistoryInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
