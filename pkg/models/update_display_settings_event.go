/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UpdateDisplaySettingsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDisplaySettingsEvent{}

// UpdateDisplaySettingsEvent Event sent to clients that have requested the `update_display_settings` event type and did not include `user_settings_object` in their `client_capabilities` when registering the event queue.  **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients connecting to newer servers should declare the `user_settings_object` client capability and process the `user_settings` event type instead.
type UpdateDisplaySettingsEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// The Zulip API email of the user.
	User *string `json:"user,omitempty"`
	// Name of the changed display setting.
	SettingName *string                            `json:"setting_name,omitempty"`
	Setting     *UpdateDisplaySettingsEventSetting `json:"setting,omitempty"`
	// Present only if the setting to be changed is `default_language`. Contains the name of the new default language in English.
	LanguageName *string `json:"language_name,omitempty"`
}

// NewUpdateDisplaySettingsEvent instantiates a new UpdateDisplaySettingsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDisplaySettingsEvent() *UpdateDisplaySettingsEvent {
	this := UpdateDisplaySettingsEvent{}
	return &this
}

// NewUpdateDisplaySettingsEventWithDefaults instantiates a new UpdateDisplaySettingsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDisplaySettingsEventWithDefaults() *UpdateDisplaySettingsEvent {
	this := UpdateDisplaySettingsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UpdateDisplaySettingsEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateDisplaySettingsEvent) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *UpdateDisplaySettingsEvent) SetUser(v string) {
	o.User = &v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetSettingName() string {
	if o == nil || IsNil(o.SettingName) {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetSettingNameOk() (*string, bool) {
	if o == nil || IsNil(o.SettingName) {
		return nil, false
	}
	return o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasSettingName() bool {
	if o != nil && !IsNil(o.SettingName) {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *UpdateDisplaySettingsEvent) SetSettingName(v string) {
	o.SettingName = &v
}

// GetSetting returns the Setting field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetSetting() UpdateDisplaySettingsEventSetting {
	if o == nil || IsNil(o.Setting) {
		var ret UpdateDisplaySettingsEventSetting
		return ret
	}
	return *o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetSettingOk() (*UpdateDisplaySettingsEventSetting, bool) {
	if o == nil || IsNil(o.Setting) {
		return nil, false
	}
	return o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasSetting() bool {
	if o != nil && !IsNil(o.Setting) {
		return true
	}

	return false
}

// SetSetting gets a reference to the given UpdateDisplaySettingsEventSetting and assigns it to the Setting field.
func (o *UpdateDisplaySettingsEvent) SetSetting(v UpdateDisplaySettingsEventSetting) {
	o.Setting = &v
}

// GetLanguageName returns the LanguageName field value if set, zero value otherwise.
func (o *UpdateDisplaySettingsEvent) GetLanguageName() string {
	if o == nil || IsNil(o.LanguageName) {
		var ret string
		return ret
	}
	return *o.LanguageName
}

// GetLanguageNameOk returns a tuple with the LanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDisplaySettingsEvent) GetLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageName) {
		return nil, false
	}
	return o.LanguageName, true
}

// HasLanguageName returns a boolean if a field has been set.
func (o *UpdateDisplaySettingsEvent) HasLanguageName() bool {
	if o != nil && !IsNil(o.LanguageName) {
		return true
	}

	return false
}

// SetLanguageName gets a reference to the given string and assigns it to the LanguageName field.
func (o *UpdateDisplaySettingsEvent) SetLanguageName(v string) {
	o.LanguageName = &v
}

func (o UpdateDisplaySettingsEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDisplaySettingsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.SettingName) {
		toSerialize["setting_name"] = o.SettingName
	}
	if !IsNil(o.Setting) {
		toSerialize["setting"] = o.Setting
	}
	if !IsNil(o.LanguageName) {
		toSerialize["language_name"] = o.LanguageName
	}
	return toSerialize, nil
}

type NullableUpdateDisplaySettingsEvent struct {
	value *UpdateDisplaySettingsEvent
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent) Get() *UpdateDisplaySettingsEvent {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent) Set(val *UpdateDisplaySettingsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent(val *UpdateDisplaySettingsEvent) *NullableUpdateDisplaySettingsEvent {
	return &NullableUpdateDisplaySettingsEvent{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
