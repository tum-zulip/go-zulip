/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RestErrorHandling400Response - struct for RestErrorHandling400Response
type RestErrorHandling400Response struct {
	IncompatibleParametersError *IncompatibleParametersError
	InvalidApiKeyError *InvalidApiKeyError
	MissingArgumentError *MissingArgumentError
	UserNotAuthorizedError *UserNotAuthorizedError
}

// IncompatibleParametersErrorAsRestErrorHandling400Response is a convenience function that returns IncompatibleParametersError wrapped in RestErrorHandling400Response
func IncompatibleParametersErrorAsRestErrorHandling400Response(v *IncompatibleParametersError) RestErrorHandling400Response {
	return RestErrorHandling400Response{
		IncompatibleParametersError: v,
	}
}

// InvalidApiKeyErrorAsRestErrorHandling400Response is a convenience function that returns InvalidApiKeyError wrapped in RestErrorHandling400Response
func InvalidApiKeyErrorAsRestErrorHandling400Response(v *InvalidApiKeyError) RestErrorHandling400Response {
	return RestErrorHandling400Response{
		InvalidApiKeyError: v,
	}
}

// MissingArgumentErrorAsRestErrorHandling400Response is a convenience function that returns MissingArgumentError wrapped in RestErrorHandling400Response
func MissingArgumentErrorAsRestErrorHandling400Response(v *MissingArgumentError) RestErrorHandling400Response {
	return RestErrorHandling400Response{
		MissingArgumentError: v,
	}
}

// UserNotAuthorizedErrorAsRestErrorHandling400Response is a convenience function that returns UserNotAuthorizedError wrapped in RestErrorHandling400Response
func UserNotAuthorizedErrorAsRestErrorHandling400Response(v *UserNotAuthorizedError) RestErrorHandling400Response {
	return RestErrorHandling400Response{
		UserNotAuthorizedError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RestErrorHandling400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncompatibleParametersError
	err = newStrictDecoder(data).Decode(&dst.IncompatibleParametersError)
	if err == nil {
		jsonIncompatibleParametersError, _ := json.Marshal(dst.IncompatibleParametersError)
		if string(jsonIncompatibleParametersError) == "{}" { // empty struct
			dst.IncompatibleParametersError = nil
		} else {
			if err = validator.Validate(dst.IncompatibleParametersError); err != nil {
				dst.IncompatibleParametersError = nil
			} else {
				match++
			}
		}
	} else {
		dst.IncompatibleParametersError = nil
	}

	// try to unmarshal data into InvalidApiKeyError
	err = newStrictDecoder(data).Decode(&dst.InvalidApiKeyError)
	if err == nil {
		jsonInvalidApiKeyError, _ := json.Marshal(dst.InvalidApiKeyError)
		if string(jsonInvalidApiKeyError) == "{}" { // empty struct
			dst.InvalidApiKeyError = nil
		} else {
			if err = validator.Validate(dst.InvalidApiKeyError); err != nil {
				dst.InvalidApiKeyError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidApiKeyError = nil
	}

	// try to unmarshal data into MissingArgumentError
	err = newStrictDecoder(data).Decode(&dst.MissingArgumentError)
	if err == nil {
		jsonMissingArgumentError, _ := json.Marshal(dst.MissingArgumentError)
		if string(jsonMissingArgumentError) == "{}" { // empty struct
			dst.MissingArgumentError = nil
		} else {
			if err = validator.Validate(dst.MissingArgumentError); err != nil {
				dst.MissingArgumentError = nil
			} else {
				match++
			}
		}
	} else {
		dst.MissingArgumentError = nil
	}

	// try to unmarshal data into UserNotAuthorizedError
	err = newStrictDecoder(data).Decode(&dst.UserNotAuthorizedError)
	if err == nil {
		jsonUserNotAuthorizedError, _ := json.Marshal(dst.UserNotAuthorizedError)
		if string(jsonUserNotAuthorizedError) == "{}" { // empty struct
			dst.UserNotAuthorizedError = nil
		} else {
			if err = validator.Validate(dst.UserNotAuthorizedError); err != nil {
				dst.UserNotAuthorizedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserNotAuthorizedError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncompatibleParametersError = nil
		dst.InvalidApiKeyError = nil
		dst.MissingArgumentError = nil
		dst.UserNotAuthorizedError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RestErrorHandling400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RestErrorHandling400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RestErrorHandling400Response) MarshalJSON() ([]byte, error) {
	if src.IncompatibleParametersError != nil {
		return json.Marshal(&src.IncompatibleParametersError)
	}

	if src.InvalidApiKeyError != nil {
		return json.Marshal(&src.InvalidApiKeyError)
	}

	if src.MissingArgumentError != nil {
		return json.Marshal(&src.MissingArgumentError)
	}

	if src.UserNotAuthorizedError != nil {
		return json.Marshal(&src.UserNotAuthorizedError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RestErrorHandling400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IncompatibleParametersError != nil {
		return obj.IncompatibleParametersError
	}

	if obj.InvalidApiKeyError != nil {
		return obj.InvalidApiKeyError
	}

	if obj.MissingArgumentError != nil {
		return obj.MissingArgumentError
	}

	if obj.UserNotAuthorizedError != nil {
		return obj.UserNotAuthorizedError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RestErrorHandling400Response) GetActualInstanceValue() (interface{}) {
	if obj.IncompatibleParametersError != nil {
		return *obj.IncompatibleParametersError
	}

	if obj.InvalidApiKeyError != nil {
		return *obj.InvalidApiKeyError
	}

	if obj.MissingArgumentError != nil {
		return *obj.MissingArgumentError
	}

	if obj.UserNotAuthorizedError != nil {
		return *obj.UserNotAuthorizedError
	}

	// all schemas are nil
	return nil
}

type NullableRestErrorHandling400Response struct {
	value *RestErrorHandling400Response
	isSet bool
}

func (v NullableRestErrorHandling400Response) Get() *RestErrorHandling400Response {
	return v.value
}

func (v *NullableRestErrorHandling400Response) Set(val *RestErrorHandling400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRestErrorHandling400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRestErrorHandling400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestErrorHandling400Response(val *RestErrorHandling400Response) *NullableRestErrorHandling400Response {
	return &NullableRestErrorHandling400Response{value: val, isSet: true}
}

func (v NullableRestErrorHandling400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestErrorHandling400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


