/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf44 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf44{}

// GetEvents200ResponseAllOfEventsInnerOneOf44 Event sent to all users in a Zulip organization when a property of a user group is changed.  For group deactivation, this event is only sent if `include_deactivated_groups` client capability is set to `true`.  This event is also sent when deactivating or reactivating a user for settings set to anonymous user groups which the user is direct member of. When deactivating the user, event is only sent to users who cannot access the deactivated user.  **Changes**: Starting with Zulip 10.0 (feature level 303), this event can also be sent when deactivating or reactivating a user.  Prior to Zulip 10.0 (feature level 294), this event was sent to all clients when a user group was deactivated. 
type GetEvents200ResponseAllOfEventsInnerOneOf44 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// The ID of the user group whose details have changed. 
	GroupId *int32 `json:"group_id,omitempty"`
	Data *GetEvents200ResponseAllOfEventsInnerOneOf44Data `json:"data,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf44 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf44 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf44() *GetEvents200ResponseAllOfEventsInnerOneOf44 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf44{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf44WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf44 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf44WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf44 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf44{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) SetOp(v string) {
	o.Op = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetData() GetEvents200ResponseAllOfEventsInnerOneOf44Data {
	if o == nil || IsNil(o.Data) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf44Data
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) GetDataOk() (*GetEvents200ResponseAllOfEventsInnerOneOf44Data, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf44Data and assigns it to the Data field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf44) SetData(v GetEvents200ResponseAllOfEventsInnerOneOf44Data) {
	o.Data = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf44) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf44) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf44 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf44
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44) Get() *GetEvents200ResponseAllOfEventsInnerOneOf44 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf44) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf44(val *GetEvents200ResponseAllOfEventsInnerOneOf44) *NullableGetEvents200ResponseAllOfEventsInnerOneOf44 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf44{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf44) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf44) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


