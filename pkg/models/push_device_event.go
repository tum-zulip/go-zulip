/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the PushDeviceEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PushDeviceEvent{}

// PushDeviceEvent Event sent to a user's clients when the metadata in the `push_devices` dictionary for the user changes.  Helps clients to live-update the `push_devices` dictionary returned in [`POST /register`](zulip.com/api/register-queue response.  **Changes**: New in Zulip 11.0 (feature level 406).
type PushDeviceEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// The push account ID for this client registration.  See [`POST /mobile_push/register`](zulip.com/api/register-push-device for details on push account IDs.
	PushAccountId *string `json:"push_account_id,omitempty"`
	// The updated registration status. Will be `\"active\"`, `\"failed\"`, or `\"pending\"`.
	Status *string `json:"status,omitempty"`
	// If the status is `\"failed\"`, a [Zulip API error code](zulip.com/api/rest-error-handling indicating the type of failure that occurred.  The following error codes have recommended client behavior:  - `\"INVALID_BOUNCER_PUBLIC_KEY\"` - Inform the user to update app. - `\"REQUEST_EXPIRED` - Retry with a fresh payload.   If the status is \"failed\", an error code explaining the failure.
	ErrorCode NullableString `json:"error_code,omitempty"`
}

// NewUpdateGlobalNotificationsEvent4 instantiates a new PushDeviceEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGlobalNotificationsEvent4() *PushDeviceEvent {
	this := PushDeviceEvent{}
	return &this
}

// NewUpdateGlobalNotificationsEvent4WithDefaults instantiates a new PushDeviceEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGlobalNotificationsEvent4WithDefaults() *PushDeviceEvent {
	this := PushDeviceEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PushDeviceEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDeviceEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PushDeviceEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PushDeviceEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PushDeviceEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDeviceEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PushDeviceEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PushDeviceEvent) SetType(v string) {
	o.Type = &v
}

// GetPushAccountId returns the PushAccountId field value if set, zero value otherwise.
func (o *PushDeviceEvent) GetPushAccountId() string {
	if o == nil || IsNil(o.PushAccountId) {
		var ret string
		return ret
	}
	return *o.PushAccountId
}

// GetPushAccountIdOk returns a tuple with the PushAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDeviceEvent) GetPushAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.PushAccountId) {
		return nil, false
	}
	return o.PushAccountId, true
}

// HasPushAccountId returns a boolean if a field has been set.
func (o *PushDeviceEvent) HasPushAccountId() bool {
	if o != nil && !IsNil(o.PushAccountId) {
		return true
	}

	return false
}

// SetPushAccountId gets a reference to the given string and assigns it to the PushAccountId field.
func (o *PushDeviceEvent) SetPushAccountId(v string) {
	o.PushAccountId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PushDeviceEvent) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDeviceEvent) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PushDeviceEvent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PushDeviceEvent) SetStatus(v string) {
	o.Status = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PushDeviceEvent) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PushDeviceEvent) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *PushDeviceEvent) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *PushDeviceEvent) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}

// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *PushDeviceEvent) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *PushDeviceEvent) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

func (o PushDeviceEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PushDeviceEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PushAccountId) {
		toSerialize["push_account_id"] = o.PushAccountId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ErrorCode.IsSet() {
		toSerialize["error_code"] = o.ErrorCode.Get()
	}
	return toSerialize, nil
}

type NullableUpdateGlobalNotificationsEvent4 struct {
	value *PushDeviceEvent
	isSet bool
}

func (v NullableUpdateGlobalNotificationsEvent4) Get() *PushDeviceEvent {
	return v.value
}

func (v *NullableUpdateGlobalNotificationsEvent4) Set(val *PushDeviceEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGlobalNotificationsEvent4) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGlobalNotificationsEvent4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGlobalNotificationsEvent4(val *PushDeviceEvent) *NullableUpdateGlobalNotificationsEvent4 {
	return &NullableUpdateGlobalNotificationsEvent4{value: val, isSet: true}
}

func (v NullableUpdateGlobalNotificationsEvent4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGlobalNotificationsEvent4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
