/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RegisterQueue200ResponseAllOfUnreadMsgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterQueue200ResponseAllOfUnreadMsgs{}

// RegisterQueue200ResponseAllOfUnreadMsgs Present if `message` and `update_message_flags` are both present in `event_types`.  A set of data structures describing the conversations containing the 50000 most recent unread messages the user has received. This will usually contain every unread message the user has received, but clients should support users with even more unread messages (and not hardcode the number 50000). 
type RegisterQueue200ResponseAllOfUnreadMsgs struct {
	// The total number of unread messages to display. This includes one-on-one and group direct messages, as well as channel messages that are not [muted](/help/mute-a-topic).  **Changes**: Before Zulip 8.0 (feature level 213), the unmute and follow topic features were not handled correctly in calculating this field. 
	Count *int32 `json:"count,omitempty"`
	// An array of objects where each object contains details of unread one-on-one direct messages with a specific user.  Note that it is possible for a message that the current user sent to the specified user to be marked as unread and thus appear here. 
	Pms []RegisterQueue200ResponseAllOfUnreadMsgsPmsInner `json:"pms,omitempty"`
	// An array of dictionaries where each dictionary contains details of all unread messages of a single subscribed channel. This includes muted channels and muted topics, even though those messages are excluded from `count`.  **Changes**: Prior to Zulip 5.0 (feature level 90), these objects included a `sender_ids` property, which listed the set of IDs of users who had sent the unread messages. 
	Streams []RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner `json:"streams,omitempty"`
	// An array of objects where each object contains details of unread group direct messages with a specific group of users. 
	Huddles []RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner `json:"huddles,omitempty"`
	// Array containing the IDs of all unread messages in which the user was mentioned directly, and unread [non-muted](/help/mute-a-topic) messages in which the user was mentioned through a wildcard.  **Changes**: Before Zulip 8.0 (feature level 213), the unmute and follow topic features were not handled correctly in calculating this field. 
	Mentions []int32 `json:"mentions,omitempty"`
	// Whether this data set was truncated because the user has too many unread messages. When truncation occurs, only the most recent `MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered when forming this response. When `true`, we recommend that clients display a warning, as they are likely to produce erroneous results until reloaded with the user having fewer than `MAX_UNREAD_MESSAGES` unread messages.  **Changes**: New in Zulip 4.0 (feature level 44). 
	OldUnreadsMissing *bool `json:"old_unreads_missing,omitempty"`
}

// NewRegisterQueue200ResponseAllOfUnreadMsgs instantiates a new RegisterQueue200ResponseAllOfUnreadMsgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterQueue200ResponseAllOfUnreadMsgs() *RegisterQueue200ResponseAllOfUnreadMsgs {
	this := RegisterQueue200ResponseAllOfUnreadMsgs{}
	return &this
}

// NewRegisterQueue200ResponseAllOfUnreadMsgsWithDefaults instantiates a new RegisterQueue200ResponseAllOfUnreadMsgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterQueue200ResponseAllOfUnreadMsgsWithDefaults() *RegisterQueue200ResponseAllOfUnreadMsgs {
	this := RegisterQueue200ResponseAllOfUnreadMsgs{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetCount(v int32) {
	o.Count = &v
}

// GetPms returns the Pms field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetPms() []RegisterQueue200ResponseAllOfUnreadMsgsPmsInner {
	if o == nil || IsNil(o.Pms) {
		var ret []RegisterQueue200ResponseAllOfUnreadMsgsPmsInner
		return ret
	}
	return o.Pms
}

// GetPmsOk returns a tuple with the Pms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetPmsOk() ([]RegisterQueue200ResponseAllOfUnreadMsgsPmsInner, bool) {
	if o == nil || IsNil(o.Pms) {
		return nil, false
	}
	return o.Pms, true
}

// HasPms returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasPms() bool {
	if o != nil && !IsNil(o.Pms) {
		return true
	}

	return false
}

// SetPms gets a reference to the given []RegisterQueue200ResponseAllOfUnreadMsgsPmsInner and assigns it to the Pms field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetPms(v []RegisterQueue200ResponseAllOfUnreadMsgsPmsInner) {
	o.Pms = v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetStreams() []RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner {
	if o == nil || IsNil(o.Streams) {
		var ret []RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner
		return ret
	}
	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetStreamsOk() ([]RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner and assigns it to the Streams field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetStreams(v []RegisterQueue200ResponseAllOfUnreadMsgsStreamsInner) {
	o.Streams = v
}

// GetHuddles returns the Huddles field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetHuddles() []RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner {
	if o == nil || IsNil(o.Huddles) {
		var ret []RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner
		return ret
	}
	return o.Huddles
}

// GetHuddlesOk returns a tuple with the Huddles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetHuddlesOk() ([]RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner, bool) {
	if o == nil || IsNil(o.Huddles) {
		return nil, false
	}
	return o.Huddles, true
}

// HasHuddles returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasHuddles() bool {
	if o != nil && !IsNil(o.Huddles) {
		return true
	}

	return false
}

// SetHuddles gets a reference to the given []RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner and assigns it to the Huddles field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetHuddles(v []RegisterQueue200ResponseAllOfUnreadMsgsHuddlesInner) {
	o.Huddles = v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetMentions() []int32 {
	if o == nil || IsNil(o.Mentions) {
		var ret []int32
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetMentionsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []int32 and assigns it to the Mentions field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetMentions(v []int32) {
	o.Mentions = v
}

// GetOldUnreadsMissing returns the OldUnreadsMissing field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetOldUnreadsMissing() bool {
	if o == nil || IsNil(o.OldUnreadsMissing) {
		var ret bool
		return ret
	}
	return *o.OldUnreadsMissing
}

// GetOldUnreadsMissingOk returns a tuple with the OldUnreadsMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) GetOldUnreadsMissingOk() (*bool, bool) {
	if o == nil || IsNil(o.OldUnreadsMissing) {
		return nil, false
	}
	return o.OldUnreadsMissing, true
}

// HasOldUnreadsMissing returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) HasOldUnreadsMissing() bool {
	if o != nil && !IsNil(o.OldUnreadsMissing) {
		return true
	}

	return false
}

// SetOldUnreadsMissing gets a reference to the given bool and assigns it to the OldUnreadsMissing field.
func (o *RegisterQueue200ResponseAllOfUnreadMsgs) SetOldUnreadsMissing(v bool) {
	o.OldUnreadsMissing = &v
}

func (o RegisterQueue200ResponseAllOfUnreadMsgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterQueue200ResponseAllOfUnreadMsgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Pms) {
		toSerialize["pms"] = o.Pms
	}
	if !IsNil(o.Streams) {
		toSerialize["streams"] = o.Streams
	}
	if !IsNil(o.Huddles) {
		toSerialize["huddles"] = o.Huddles
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.OldUnreadsMissing) {
		toSerialize["old_unreads_missing"] = o.OldUnreadsMissing
	}
	return toSerialize, nil
}

type NullableRegisterQueue200ResponseAllOfUnreadMsgs struct {
	value *RegisterQueue200ResponseAllOfUnreadMsgs
	isSet bool
}

func (v NullableRegisterQueue200ResponseAllOfUnreadMsgs) Get() *RegisterQueue200ResponseAllOfUnreadMsgs {
	return v.value
}

func (v *NullableRegisterQueue200ResponseAllOfUnreadMsgs) Set(val *RegisterQueue200ResponseAllOfUnreadMsgs) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterQueue200ResponseAllOfUnreadMsgs) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterQueue200ResponseAllOfUnreadMsgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterQueue200ResponseAllOfUnreadMsgs(val *RegisterQueue200ResponseAllOfUnreadMsgs) *NullableRegisterQueue200ResponseAllOfUnreadMsgs {
	return &NullableRegisterQueue200ResponseAllOfUnreadMsgs{value: val, isSet: true}
}

func (v NullableRegisterQueue200ResponseAllOfUnreadMsgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterQueue200ResponseAllOfUnreadMsgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


