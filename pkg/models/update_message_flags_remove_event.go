/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UpdateMessageFlagsRemoveEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMessageFlagsRemoveEvent{}

// UpdateMessageFlagsRemoveEvent Event sent to a user when [message flags][message-flags] are removed from messages.  See the description for the [`update_message_flags` op: `add`](/api/get-events#update_message_flags-add) event for more details about these events.  [message-flags]: /api/update-message-flags#available-flags
type UpdateMessageFlagsRemoveEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// Old name for the `op` field in this event type.  **Deprecated** in Zulip 4.0 (feature level 32), and replaced by the `op` field.
	// Deprecated
	Operation *string `json:"operation,omitempty"`
	// The [flag][message-flags] to be removed.
	Flag *string `json:"flag,omitempty"`
	// Array containing the IDs of the messages from which the flag was removed.
	Messages []int32 `json:"messages,omitempty"`
	// Will be `false` for all specified flags.  **Deprecated** and will be removed in a future release.
	// Deprecated
	All *bool `json:"all,omitempty"`
	// Only present if the specified `flag` is `\"read\"`.  A set of data structures describing the messages that are being marked as unread with additional details to allow clients to update the `unread_msgs` data structure for these messages (which may not be otherwise known to the client).  **Changes**: New in Zulip 5.0 (feature level 121). Previously, marking already read messages as unread was not supported by the Zulip API.
	MessageDetails *map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue `json:"message_details,omitempty"`
}

// NewUpdateMessageFlagsRemoveEvent instantiates a new UpdateMessageFlagsRemoveEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMessageFlagsRemoveEvent() *UpdateMessageFlagsRemoveEvent {
	this := UpdateMessageFlagsRemoveEvent{}
	return &this
}

// NewUpdateMessageFlagsRemoveEventWithDefaults instantiates a new UpdateMessageFlagsRemoveEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMessageFlagsRemoveEventWithDefaults() *UpdateMessageFlagsRemoveEvent {
	this := UpdateMessageFlagsRemoveEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UpdateMessageFlagsRemoveEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateMessageFlagsRemoveEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *UpdateMessageFlagsRemoveEvent) SetOp(v string) {
	o.Op = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) GetOperation() string {
	if o == nil || IsNil(o.Operation) {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) GetOperationOk() (*string, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) SetOperation(v string) {
	o.Operation = &v
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetFlag() string {
	if o == nil || IsNil(o.Flag) {
		var ret string
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetFlagOk() (*string, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given string and assigns it to the Flag field.
func (o *UpdateMessageFlagsRemoveEvent) SetFlag(v string) {
	o.Flag = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetMessages() []int32 {
	if o == nil || IsNil(o.Messages) {
		var ret []int32
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetMessagesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []int32 and assigns it to the Messages field.
func (o *UpdateMessageFlagsRemoveEvent) SetMessages(v []int32) {
	o.Messages = v
}

// GetAll returns the All field value if set, zero value otherwise.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
// Deprecated
func (o *UpdateMessageFlagsRemoveEvent) SetAll(v bool) {
	o.All = &v
}

// GetMessageDetails returns the MessageDetails field value if set, zero value otherwise.
func (o *UpdateMessageFlagsRemoveEvent) GetMessageDetails() map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue {
	if o == nil || IsNil(o.MessageDetails) {
		var ret map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue
		return ret
	}
	return *o.MessageDetails
}

// GetMessageDetailsOk returns a tuple with the MessageDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsRemoveEvent) GetMessageDetailsOk() (*map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue, bool) {
	if o == nil || IsNil(o.MessageDetails) {
		return nil, false
	}
	return o.MessageDetails, true
}

// HasMessageDetails returns a boolean if a field has been set.
func (o *UpdateMessageFlagsRemoveEvent) HasMessageDetails() bool {
	if o != nil && !IsNil(o.MessageDetails) {
		return true
	}

	return false
}

// SetMessageDetails gets a reference to the given map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue and assigns it to the MessageDetails field.
func (o *UpdateMessageFlagsRemoveEvent) SetMessageDetails(v map[string]UpdateMessageFlagsRemoveEventMessageDetailsValue) {
	o.MessageDetails = &v
}

func (o UpdateMessageFlagsRemoveEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMessageFlagsRemoveEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Flag) {
		toSerialize["flag"] = o.Flag
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.MessageDetails) {
		toSerialize["message_details"] = o.MessageDetails
	}
	return toSerialize, nil
}

type NullableUpdateMessageFlagsRemoveEvent struct {
	value *UpdateMessageFlagsRemoveEvent
	isSet bool
}

func (v NullableUpdateMessageFlagsRemoveEvent) Get() *UpdateMessageFlagsRemoveEvent {
	return v.value
}

func (v *NullableUpdateMessageFlagsRemoveEvent) Set(val *UpdateMessageFlagsRemoveEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMessageFlagsRemoveEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMessageFlagsRemoveEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMessageFlagsRemoveEvent(val *UpdateMessageFlagsRemoveEvent) *NullableUpdateMessageFlagsRemoveEvent {
	return &NullableUpdateMessageFlagsRemoveEvent{value: val, isSet: true}
}

func (v NullableUpdateMessageFlagsRemoveEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMessageFlagsRemoveEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
