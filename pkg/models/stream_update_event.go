/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the StreamUpdateEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamUpdateEvent{}

// StreamUpdateEvent Event sent to all users who can see that a channel exists when a property of that channel changes. See [GET /streams](zulip.com/api/get-streams#response response for details on the various properties of a channel.  This event is also sent when archiving or unarchiving a channel to all the users who can see that channel exists but only to the clients that declared the `archived_channels` [client capability][client-capabilities].  **Changes**: Prior to Zulip 11.0 (feature level 378), this event was never sent when archiving or unarchiving a channel.  Before Zulip 9.0 (feature level 256), this event was never sent when the `first_message_id` property of a channel was updated because the oldest message that had been sent to it changed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities
type StreamUpdateEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The ID of the channel whose details have changed.
	StreamId *int32 `json:"stream_id,omitempty"`
	// The name of the channel whose details have changed.
	Name *string `json:"name,omitempty"`
	// The property of the channel which has changed. See [GET /streams](zulip.com/api/get-streams#response response for details on the various properties of a channel.  Clients should handle an \"unknown\" property received here without crashing, since that can happen when connecting to a server running a newer version of Zulip with new features.
	Property *string                           `json:"property,omitempty"`
	Value    *UpdateDisplaySettingsEvent8Value `json:"value,omitempty"`
	// Note: Only present if the changed property was `description`.  The short description of the channel rendered as HTML, intended to be used when displaying the channel description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly. And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	RenderedDescription *string `json:"rendered_description,omitempty"`
	// Note: Only present if the changed property was `invite_only`.  Whether the history of the channel is public to its subscribers.  Currently always true for public channels (i.e. `\"invite_only\": false` implies `\"history_public_to_subscribers\": true`), but clients should not make that assumption, as we may change that behavior in the future.
	HistoryPublicToSubscribers *bool `json:"history_public_to_subscribers,omitempty"`
	// Note: Only present if the changed property was `invite_only`.  Whether the channel's history is now readable by web-public spectators.  **Changes**: New in Zulip 5.0 (feature level 71).
	IsWebPublic *bool `json:"is_web_public,omitempty"`
}

// NewUpdateDisplaySettingsEvent8 instantiates a new StreamUpdateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDisplaySettingsEvent8() *StreamUpdateEvent {
	this := StreamUpdateEvent{}
	return &this
}

// NewUpdateDisplaySettingsEvent8WithDefaults instantiates a new StreamUpdateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDisplaySettingsEvent8WithDefaults() *StreamUpdateEvent {
	this := StreamUpdateEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *StreamUpdateEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StreamUpdateEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *StreamUpdateEvent) SetOp(v string) {
	o.Op = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *StreamUpdateEvent) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StreamUpdateEvent) SetName(v string) {
	o.Name = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *StreamUpdateEvent) SetProperty(v string) {
	o.Property = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetValue() UpdateDisplaySettingsEvent8Value {
	if o == nil || IsNil(o.Value) {
		var ret UpdateDisplaySettingsEvent8Value
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetValueOk() (*UpdateDisplaySettingsEvent8Value, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given UpdateDisplaySettingsEvent8Value and assigns it to the Value field.
func (o *StreamUpdateEvent) SetValue(v UpdateDisplaySettingsEvent8Value) {
	o.Value = &v
}

// GetRenderedDescription returns the RenderedDescription field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetRenderedDescription() string {
	if o == nil || IsNil(o.RenderedDescription) {
		var ret string
		return ret
	}
	return *o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetRenderedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RenderedDescription) {
		return nil, false
	}
	return o.RenderedDescription, true
}

// HasRenderedDescription returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasRenderedDescription() bool {
	if o != nil && !IsNil(o.RenderedDescription) {
		return true
	}

	return false
}

// SetRenderedDescription gets a reference to the given string and assigns it to the RenderedDescription field.
func (o *StreamUpdateEvent) SetRenderedDescription(v string) {
	o.RenderedDescription = &v
}

// GetHistoryPublicToSubscribers returns the HistoryPublicToSubscribers field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetHistoryPublicToSubscribers() bool {
	if o == nil || IsNil(o.HistoryPublicToSubscribers) {
		var ret bool
		return ret
	}
	return *o.HistoryPublicToSubscribers
}

// GetHistoryPublicToSubscribersOk returns a tuple with the HistoryPublicToSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetHistoryPublicToSubscribersOk() (*bool, bool) {
	if o == nil || IsNil(o.HistoryPublicToSubscribers) {
		return nil, false
	}
	return o.HistoryPublicToSubscribers, true
}

// HasHistoryPublicToSubscribers returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasHistoryPublicToSubscribers() bool {
	if o != nil && !IsNil(o.HistoryPublicToSubscribers) {
		return true
	}

	return false
}

// SetHistoryPublicToSubscribers gets a reference to the given bool and assigns it to the HistoryPublicToSubscribers field.
func (o *StreamUpdateEvent) SetHistoryPublicToSubscribers(v bool) {
	o.HistoryPublicToSubscribers = &v
}

// GetIsWebPublic returns the IsWebPublic field value if set, zero value otherwise.
func (o *StreamUpdateEvent) GetIsWebPublic() bool {
	if o == nil || IsNil(o.IsWebPublic) {
		var ret bool
		return ret
	}
	return *o.IsWebPublic
}

// GetIsWebPublicOk returns a tuple with the IsWebPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateEvent) GetIsWebPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWebPublic) {
		return nil, false
	}
	return o.IsWebPublic, true
}

// HasIsWebPublic returns a boolean if a field has been set.
func (o *StreamUpdateEvent) HasIsWebPublic() bool {
	if o != nil && !IsNil(o.IsWebPublic) {
		return true
	}

	return false
}

// SetIsWebPublic gets a reference to the given bool and assigns it to the IsWebPublic field.
func (o *StreamUpdateEvent) SetIsWebPublic(v bool) {
	o.IsWebPublic = &v
}

func (o StreamUpdateEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamUpdateEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.RenderedDescription) {
		toSerialize["rendered_description"] = o.RenderedDescription
	}
	if !IsNil(o.HistoryPublicToSubscribers) {
		toSerialize["history_public_to_subscribers"] = o.HistoryPublicToSubscribers
	}
	if !IsNil(o.IsWebPublic) {
		toSerialize["is_web_public"] = o.IsWebPublic
	}
	return toSerialize, nil
}

type NullableUpdateDisplaySettingsEvent8 struct {
	value *StreamUpdateEvent
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent8) Get() *StreamUpdateEvent {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent8) Set(val *StreamUpdateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent8) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent8(val *StreamUpdateEvent) *NullableUpdateDisplaySettingsEvent8 {
	return &NullableUpdateDisplaySettingsEvent8{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
