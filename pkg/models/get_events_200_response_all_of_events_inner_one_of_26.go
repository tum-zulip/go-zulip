/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf26 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf26{}

// GetEvents200ResponseAllOfEventsInnerOneOf26 Event sent to all users who can access the modified user when the status of a user changes.  **Changes**: Prior to Zulip 8.0 (feature level 228), this event was sent to all users in the organization.
type GetEvents200ResponseAllOfEventsInnerOneOf26 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Whether the user has marked themself \"away\" with this status.  **Changes**: Deprecated in Zulip 6.0 (feature level 148); starting with that feature level, `away` is a legacy way to access the user's `presence_enabled` setting, with `away = !presence_enabled`. To be removed in a future release.
	// Deprecated
	Away *bool `json:"away,omitempty"`
	// The text content of the status message.  This will be `\"\"` for users who set a status without selecting or writing a message.
	StatusText *string `json:"status_text,omitempty"`
	// The [emoji name](/api/update-status#parameter-emoji_name) for the emoji the user selected for their new status.  This will be `\"\"` for users who set a status without selecting an emoji.  **Changes**: New in Zulip 5.0 (feature level 86).
	EmojiName *string `json:"emoji_name,omitempty"`
	// The [emoji code](/api/update-status#parameter-emoji_code) for the emoji the user selected for their new status.  This will be `\"\"` for users who set a status without selecting an emoji.  **Changes**: New in Zulip 5.0 (feature level 86).
	EmojiCode *string `json:"emoji_code,omitempty"`
	// The [emoji type](/api/update-status#parameter-reaction_type) for the emoji the user selected for their new status.  This will be `\"\"` for users who set a status without selecting an emoji.  **Changes**: New in Zulip 5.0 (feature level 86).
	ReactionType *string `json:"reaction_type,omitempty"`
	// The ID of the user whose status changed.
	UserId *int32 `json:"user_id,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf26 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf26 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf26() *GetEvents200ResponseAllOfEventsInnerOneOf26 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf26{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf26WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf26 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf26WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf26 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf26{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetType(v string) {
	o.Type = &v
}

// GetAway returns the Away field value if set, zero value otherwise.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetAway() bool {
	if o == nil || IsNil(o.Away) {
		var ret bool
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetAwayOk() (*bool, bool) {
	if o == nil || IsNil(o.Away) {
		return nil, false
	}
	return o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasAway() bool {
	if o != nil && !IsNil(o.Away) {
		return true
	}

	return false
}

// SetAway gets a reference to the given bool and assigns it to the Away field.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetAway(v bool) {
	o.Away = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetStatusText(v string) {
	o.StatusText = &v
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName) {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetEmojiNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetEmojiCode() string {
	if o == nil || IsNil(o.EmojiCode) {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetEmojiCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetReactionType(v string) {
	o.ReactionType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf26) SetUserId(v int32) {
	o.UserId = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf26) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf26) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Away) {
		toSerialize["away"] = o.Away
	}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}
	if !IsNil(o.EmojiName) {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if !IsNil(o.EmojiCode) {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf26 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf26
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf26) Get() *GetEvents200ResponseAllOfEventsInnerOneOf26 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf26) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf26) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf26) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf26) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf26(val *GetEvents200ResponseAllOfEventsInnerOneOf26) *NullableGetEvents200ResponseAllOfEventsInnerOneOf26 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf26{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf26) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf26) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
