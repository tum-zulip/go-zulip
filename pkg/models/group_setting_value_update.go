/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GroupSettingValueUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupSettingValueUpdate{}

// GroupSettingValueUpdate struct for GroupSettingValueUpdate
type GroupSettingValueUpdate struct {
	New GroupSettingValue  `json:"new"`
	Old *GroupSettingValue `json:"old,omitempty"`
}

type _GroupSettingValueUpdate GroupSettingValueUpdate

// NewGroupSettingValueUpdate instantiates a new GroupSettingValueUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupSettingValueUpdate(new GroupSettingValue) *GroupSettingValueUpdate {
	this := GroupSettingValueUpdate{}
	this.New = new
	return &this
}

// NewGroupSettingValueUpdateWithDefaults instantiates a new GroupSettingValueUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupSettingValueUpdateWithDefaults() *GroupSettingValueUpdate {
	this := GroupSettingValueUpdate{}
	return &this
}

// GetNew returns the New field value
func (o *GroupSettingValueUpdate) GetNew() GroupSettingValue {
	if o == nil {
		var ret GroupSettingValue
		return ret
	}

	return o.New
}

// GetNewOk returns a tuple with the New field value
// and a boolean to check if the value has been set.
func (o *GroupSettingValueUpdate) GetNewOk() (*GroupSettingValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.New, true
}

// SetNew sets field value
func (o *GroupSettingValueUpdate) SetNew(v GroupSettingValue) {
	o.New = v
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *GroupSettingValueUpdate) GetOld() GroupSettingValue {
	if o == nil || IsNil(o.Old) {
		var ret GroupSettingValue
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupSettingValueUpdate) GetOldOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.Old) {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *GroupSettingValueUpdate) HasOld() bool {
	if o != nil && !IsNil(o.Old) {
		return true
	}

	return false
}

// SetOld gets a reference to the given GroupSettingValue and assigns it to the Old field.
func (o *GroupSettingValueUpdate) SetOld(v GroupSettingValue) {
	o.Old = &v
}

func (o GroupSettingValueUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupSettingValueUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new"] = o.New
	if !IsNil(o.Old) {
		toSerialize["old"] = o.Old
	}
	return toSerialize, nil
}

func (o *GroupSettingValueUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupSettingValueUpdate := _GroupSettingValueUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupSettingValueUpdate)

	if err != nil {
		return err
	}

	*o = GroupSettingValueUpdate(varGroupSettingValueUpdate)

	return err
}

type NullableGroupSettingValueUpdate struct {
	value *GroupSettingValueUpdate
	isSet bool
}

func (v NullableGroupSettingValueUpdate) Get() *GroupSettingValueUpdate {
	return v.value
}

func (v *NullableGroupSettingValueUpdate) Set(val *GroupSettingValueUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupSettingValueUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupSettingValueUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupSettingValueUpdate(val *GroupSettingValueUpdate) *NullableGroupSettingValueUpdate {
	return &NullableGroupSettingValueUpdate{value: val, isSet: true}
}

func (v NullableGroupSettingValueUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupSettingValueUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
