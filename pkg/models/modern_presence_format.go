/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ModernPresenceFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModernPresenceFormat{}

// ModernPresenceFormat `{user_id}`: Presence data (modern format) for the user with the specified ID.
type ModernPresenceFormat struct {
	// The UNIX timestamp of the last time a client connected to Zulip reported that the user was actually present (e.g. via focusing a browser window or interacting with a computer running the desktop app).  Clients should display users with a current `active_timestamp` as fully present.
	ActiveTimestamp *int32 `json:"active_timestamp,omitempty"`
	// The UNIX timestamp of the last time the user had a client connected to Zulip, including idle clients where the user hasn't interacted with the system recently.  The Zulip server has no way of distinguishing whether an idle web app user is at their computer, but hasn't interacted with the Zulip tab recently, or simply left their desktop computer on when they left.  Thus, clients should display users with a current `idle_timestamp` but no current `active_timestamp` as potentially present.
	IdleTimestamp *int32 `json:"idle_timestamp,omitempty"`
}

// NewModernPresenceFormat instantiates a new ModernPresenceFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModernPresenceFormat() *ModernPresenceFormat {
	this := ModernPresenceFormat{}
	return &this
}

// NewModernPresenceFormatWithDefaults instantiates a new ModernPresenceFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModernPresenceFormatWithDefaults() *ModernPresenceFormat {
	this := ModernPresenceFormat{}
	return &this
}

// GetActiveTimestamp returns the ActiveTimestamp field value if set, zero value otherwise.
func (o *ModernPresenceFormat) GetActiveTimestamp() int32 {
	if o == nil || IsNil(o.ActiveTimestamp) {
		var ret int32
		return ret
	}
	return *o.ActiveTimestamp
}

// GetActiveTimestampOk returns a tuple with the ActiveTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModernPresenceFormat) GetActiveTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.ActiveTimestamp) {
		return nil, false
	}
	return o.ActiveTimestamp, true
}

// HasActiveTimestamp returns a boolean if a field has been set.
func (o *ModernPresenceFormat) HasActiveTimestamp() bool {
	if o != nil && !IsNil(o.ActiveTimestamp) {
		return true
	}

	return false
}

// SetActiveTimestamp gets a reference to the given int32 and assigns it to the ActiveTimestamp field.
func (o *ModernPresenceFormat) SetActiveTimestamp(v int32) {
	o.ActiveTimestamp = &v
}

// GetIdleTimestamp returns the IdleTimestamp field value if set, zero value otherwise.
func (o *ModernPresenceFormat) GetIdleTimestamp() int32 {
	if o == nil || IsNil(o.IdleTimestamp) {
		var ret int32
		return ret
	}
	return *o.IdleTimestamp
}

// GetIdleTimestampOk returns a tuple with the IdleTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModernPresenceFormat) GetIdleTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.IdleTimestamp) {
		return nil, false
	}
	return o.IdleTimestamp, true
}

// HasIdleTimestamp returns a boolean if a field has been set.
func (o *ModernPresenceFormat) HasIdleTimestamp() bool {
	if o != nil && !IsNil(o.IdleTimestamp) {
		return true
	}

	return false
}

// SetIdleTimestamp gets a reference to the given int32 and assigns it to the IdleTimestamp field.
func (o *ModernPresenceFormat) SetIdleTimestamp(v int32) {
	o.IdleTimestamp = &v
}

func (o ModernPresenceFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModernPresenceFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveTimestamp) {
		toSerialize["active_timestamp"] = o.ActiveTimestamp
	}
	if !IsNil(o.IdleTimestamp) {
		toSerialize["idle_timestamp"] = o.IdleTimestamp
	}
	return toSerialize, nil
}

type NullableModernPresenceFormat struct {
	value *ModernPresenceFormat
	isSet bool
}

func (v NullableModernPresenceFormat) Get() *ModernPresenceFormat {
	return v.value
}

func (v *NullableModernPresenceFormat) Set(val *ModernPresenceFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableModernPresenceFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableModernPresenceFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModernPresenceFormat(val *ModernPresenceFormat) *NullableModernPresenceFormat {
	return &NullableModernPresenceFormat{value: val, isSet: true}
}

func (v NullableModernPresenceFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModernPresenceFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
