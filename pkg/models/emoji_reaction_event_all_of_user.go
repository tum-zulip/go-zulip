/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the EmojiReactionEventAllOfUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmojiReactionEventAllOfUser{}

// EmojiReactionEventAllOfUser Dictionary with data on the user who added the reaction, including the user ID as the `user_id` field.  **Changes**: This field was re-added in Zulip 10.0 (feature level 339) after having been removed in Zulip 10.0 (feature level 328). It remains deprecated; it was re-added because the React Native mobile app was still using it.  **Deprecated** and to be removed in a future release once core clients have migrated to use the adjacent `user_id` field, which was introduced in Zulip 3.0 (feature level 2). Clients supporting older Zulip server versions should use the user ID mentioned in the description above as they would the `user_id` field.
type EmojiReactionEventAllOfUser struct {
	// ID of the user.
	UserId *int32 `json:"user_id,omitempty"`
	// Zulip API email of the user.
	Email *string `json:"email,omitempty"`
	// Full name of the user.
	FullName *string `json:"full_name,omitempty"`
	// Whether the user is a mirror dummy.
	IsMirrorDummy *bool `json:"is_mirror_dummy,omitempty"`
}

// NewEmojiReactionEventAllOfUser instantiates a new EmojiReactionEventAllOfUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReactionEventAllOfUser() *EmojiReactionEventAllOfUser {
	this := EmojiReactionEventAllOfUser{}
	return &this
}

// NewEmojiReactionEventAllOfUserWithDefaults instantiates a new EmojiReactionEventAllOfUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionEventAllOfUserWithDefaults() *EmojiReactionEventAllOfUser {
	this := EmojiReactionEventAllOfUser{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmojiReactionEventAllOfUser) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEventAllOfUser) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmojiReactionEventAllOfUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *EmojiReactionEventAllOfUser) SetUserId(v int32) {
	o.UserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmojiReactionEventAllOfUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEventAllOfUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmojiReactionEventAllOfUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmojiReactionEventAllOfUser) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *EmojiReactionEventAllOfUser) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEventAllOfUser) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *EmojiReactionEventAllOfUser) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *EmojiReactionEventAllOfUser) SetFullName(v string) {
	o.FullName = &v
}

// GetIsMirrorDummy returns the IsMirrorDummy field value if set, zero value otherwise.
func (o *EmojiReactionEventAllOfUser) GetIsMirrorDummy() bool {
	if o == nil || IsNil(o.IsMirrorDummy) {
		var ret bool
		return ret
	}
	return *o.IsMirrorDummy
}

// GetIsMirrorDummyOk returns a tuple with the IsMirrorDummy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEventAllOfUser) GetIsMirrorDummyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMirrorDummy) {
		return nil, false
	}
	return o.IsMirrorDummy, true
}

// HasIsMirrorDummy returns a boolean if a field has been set.
func (o *EmojiReactionEventAllOfUser) HasIsMirrorDummy() bool {
	if o != nil && !IsNil(o.IsMirrorDummy) {
		return true
	}

	return false
}

// SetIsMirrorDummy gets a reference to the given bool and assigns it to the IsMirrorDummy field.
func (o *EmojiReactionEventAllOfUser) SetIsMirrorDummy(v bool) {
	o.IsMirrorDummy = &v
}

func (o EmojiReactionEventAllOfUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmojiReactionEventAllOfUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.IsMirrorDummy) {
		toSerialize["is_mirror_dummy"] = o.IsMirrorDummy
	}
	return toSerialize, nil
}

type NullableEmojiReactionEventAllOfUser struct {
	value *EmojiReactionEventAllOfUser
	isSet bool
}

func (v NullableEmojiReactionEventAllOfUser) Get() *EmojiReactionEventAllOfUser {
	return v.value
}

func (v *NullableEmojiReactionEventAllOfUser) Set(val *EmojiReactionEventAllOfUser) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReactionEventAllOfUser) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReactionEventAllOfUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReactionEventAllOfUser(val *EmojiReactionEventAllOfUser) *NullableEmojiReactionEventAllOfUser {
	return &NullableEmojiReactionEventAllOfUser{value: val, isSet: true}
}

func (v NullableEmojiReactionEventAllOfUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReactionEventAllOfUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
