/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadFile200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFile200Response{}

// UploadFile200Response struct for UploadFile200Response
type UploadFile200Response struct {
	Result interface{} `json:"result"`
	Msg interface{} `json:"msg"`
	IgnoredParametersUnsupported interface{} `json:"ignored_parameters_unsupported,omitempty"`
	// The URL of the uploaded file. Alias of `url`.  **Changes**: Deprecated in Zulip 9.0 (feature level 272). The term \"URI\" is deprecated in [web standards](https://url.spec.whatwg.org/#goals). 
	// Deprecated
	Uri *string `json:"uri,omitempty"`
	// The URL of the uploaded file.  **Changes**: New in Zulip 9.0 (feature level 272). Previously, this property was only available under the legacy `uri` name. 
	Url *string `json:"url,omitempty"`
	// The filename that Zulip stored the upload as. This usually differs from the basename of the URL when HTML escaping is required to generate a valid URL.  Clients generating a Markdown link to a newly uploaded file should do so by combining the `url` and `filename` fields in the response as follows: `[{filename}]({url})`, with care taken to clean `filename` of `[` and `]` characters that might break Markdown rendering.  **Changes**: New in Zulip 10.0 (feature level 285). 
	Filename *string `json:"filename,omitempty"`
}

type _UploadFile200Response UploadFile200Response

// NewUploadFile200Response instantiates a new UploadFile200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFile200Response(result interface{}, msg interface{}) *UploadFile200Response {
	this := UploadFile200Response{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewUploadFile200ResponseWithDefaults instantiates a new UploadFile200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFile200ResponseWithDefaults() *UploadFile200Response {
	this := UploadFile200Response{}
	return &this
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UploadFile200Response) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFile200Response) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *UploadFile200Response) SetResult(v interface{}) {
	o.Result = v
}

// GetMsg returns the Msg field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UploadFile200Response) GetMsg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFile200Response) GetMsgOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *UploadFile200Response) SetMsg(v interface{}) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadFile200Response) GetIgnoredParametersUnsupported() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadFile200Response) GetIgnoredParametersUnsupportedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return &o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *UploadFile200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given interface{} and assigns it to the IgnoredParametersUnsupported field.
func (o *UploadFile200Response) SetIgnoredParametersUnsupported(v interface{}) {
	o.IgnoredParametersUnsupported = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
// Deprecated
func (o *UploadFile200Response) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UploadFile200Response) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *UploadFile200Response) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
// Deprecated
func (o *UploadFile200Response) SetUri(v string) {
	o.Uri = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UploadFile200Response) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFile200Response) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UploadFile200Response) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UploadFile200Response) SetUrl(v string) {
	o.Url = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *UploadFile200Response) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFile200Response) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *UploadFile200Response) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *UploadFile200Response) SetFilename(v string) {
	o.Filename = &v
}

func (o UploadFile200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFile200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.IgnoredParametersUnsupported != nil {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	return toSerialize, nil
}

func (o *UploadFile200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadFile200Response := _UploadFile200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadFile200Response)

	if err != nil {
		return err
	}

	*o = UploadFile200Response(varUploadFile200Response)

	return err
}

type NullableUploadFile200Response struct {
	value *UploadFile200Response
	isSet bool
}

func (v NullableUploadFile200Response) Get() *UploadFile200Response {
	return v.value
}

func (v *NullableUploadFile200Response) Set(val *UploadFile200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFile200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFile200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFile200Response(val *UploadFile200Response) *NullableUploadFile200Response {
	return &NullableUploadFile200Response{value: val, isSet: true}
}

func (v NullableUploadFile200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFile200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


