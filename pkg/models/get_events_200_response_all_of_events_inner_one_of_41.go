/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf41 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf41{}

// GetEvents200ResponseAllOfEventsInnerOneOf41 Event sent to a user when [message flags][message-flags] are added to messages.  This can reflect a direct user action, or can be the indirect consequence of another action. Whatever the cause, if there's a change in the set of message flags that the user has for a message, then an `update_message_flags` event will be sent with the change. Note that this applies when the user already had access to the message, and continues to have access to it. When a message newly appears or disappears, a [`message`][message-event] or [`delete_message`][message-delete] event is sent instead.  Some examples of actions that trigger an `update_message_flags` event:  - The `\"starred\"` flag is added when the user chooses to [star a   message](/help/star-a-message). - The `\"read\"` flag is added when the user marks messages as read by   scrolling through them, or uses [Mark all messages as read][all-read]   on a conversation. - The `\"read\"` flag is added when the user [mutes](/help/mute-a-user) a   message's sender. - The `\"read\"` flag is added after the user unsubscribes from a channel,   or messages are moved to a not-subscribed channel, provided the user   can still access the messages at all. Note a   [`delete_message`][message-delete] event is sent in the case where the   user can no longer access the messages.  In some cases, a change in message flags that's caused by another change may happen a short while after the original change, rather than simultaneously. For example, when messages that were unread are moved to a channel where the user is not subscribed, the resulting change in message flags (and the corresponding `update_message_flags` event with flag `\"read\"`) may happen later than the message move itself. The delay in that example is typically at most a few hundred milliseconds and can in rare cases be minutes or longer.  [message-flags]: /api/update-message-flags#available-flags [message-event]: /api/get-events#message [message-delete]: /api/get-events#delete_message [all-read]: /help/marking-messages-as-read#mark-messages-in-multiple-topics-and-channels-as-read 
type GetEvents200ResponseAllOfEventsInnerOneOf41 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// Old name for the `op` field in this event type.  **Deprecated** in Zulip 4.0 (feature level 32), and replaced by the `op` field. 
	// Deprecated
	Operation *string `json:"operation,omitempty"`
	// The [flag][message-flags] that was added. 
	Flag *string `json:"flag,omitempty"`
	// Array containing the IDs of all messages to which the flag was added. 
	Messages []int32 `json:"messages,omitempty"`
	// Whether the specified flag was added to all messages. This field is only relevant for the `\"read\"` flag, and will be `false` for all other flags.  When `true` for the `\"read\"` flag, then the `messages` array will be empty. 
	All *bool `json:"all,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf41 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf41 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf41() *GetEvents200ResponseAllOfEventsInnerOneOf41 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf41{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf41WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf41 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf41WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf41 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf41{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetOp(v string) {
	o.Op = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetOperation() string {
	if o == nil || IsNil(o.Operation) {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetOperationOk() (*string, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
// Deprecated
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetOperation(v string) {
	o.Operation = &v
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetFlag() string {
	if o == nil || IsNil(o.Flag) {
		var ret string
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetFlagOk() (*string, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given string and assigns it to the Flag field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetFlag(v string) {
	o.Flag = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetMessages() []int32 {
	if o == nil || IsNil(o.Messages) {
		var ret []int32
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetMessagesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []int32 and assigns it to the Messages field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetMessages(v []int32) {
	o.Messages = v
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf41) SetAll(v bool) {
	o.All = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf41) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf41) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Flag) {
		toSerialize["flag"] = o.Flag
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf41 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf41
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf41) Get() *GetEvents200ResponseAllOfEventsInnerOneOf41 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf41) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf41) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf41) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf41) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf41(val *GetEvents200ResponseAllOfEventsInnerOneOf41) *NullableGetEvents200ResponseAllOfEventsInnerOneOf41 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf41{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf41) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf41) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


