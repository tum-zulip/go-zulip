/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetCustomEmoji200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCustomEmoji200Response{}

// GetCustomEmoji200Response struct for GetCustomEmoji200Response
type GetCustomEmoji200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](zulip.com/api/rest-error-handling#ignored-parameters documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// An object that contains `emoji` objects, each identified with their emoji ID as the key.
	Emoji *map[string]RealmEmoji `json:"emoji,omitempty"`
}

type _GetCustomEmoji200Response GetCustomEmoji200Response

// NewGetCustomEmoji200Response instantiates a new GetCustomEmoji200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCustomEmoji200Response(result string, msg string) *GetCustomEmoji200Response {
	this := GetCustomEmoji200Response{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewGetCustomEmoji200ResponseWithDefaults instantiates a new GetCustomEmoji200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCustomEmoji200ResponseWithDefaults() *GetCustomEmoji200Response {
	this := GetCustomEmoji200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *GetCustomEmoji200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *GetCustomEmoji200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *GetCustomEmoji200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *GetCustomEmoji200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *GetCustomEmoji200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *GetCustomEmoji200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *GetCustomEmoji200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCustomEmoji200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *GetCustomEmoji200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *GetCustomEmoji200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *GetCustomEmoji200Response) GetEmoji() map[string]RealmEmoji {
	if o == nil || IsNil(o.Emoji) {
		var ret map[string]RealmEmoji
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCustomEmoji200Response) GetEmojiOk() (*map[string]RealmEmoji, bool) {
	if o == nil || IsNil(o.Emoji) {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *GetCustomEmoji200Response) HasEmoji() bool {
	if o != nil && !IsNil(o.Emoji) {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given map[string]RealmEmoji and assigns it to the Emoji field.
func (o *GetCustomEmoji200Response) SetEmoji(v map[string]RealmEmoji) {
	o.Emoji = &v
}

func (o GetCustomEmoji200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCustomEmoji200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	if !IsNil(o.Emoji) {
		toSerialize["emoji"] = o.Emoji
	}
	return toSerialize, nil
}

func (o *GetCustomEmoji200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCustomEmoji200Response := _GetCustomEmoji200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCustomEmoji200Response)

	if err != nil {
		return err
	}

	*o = GetCustomEmoji200Response(varGetCustomEmoji200Response)

	return err
}

type NullableGetCustomEmoji200Response struct {
	value *GetCustomEmoji200Response
	isSet bool
}

func (v NullableGetCustomEmoji200Response) Get() *GetCustomEmoji200Response {
	return v.value
}

func (v *NullableGetCustomEmoji200Response) Set(val *GetCustomEmoji200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCustomEmoji200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCustomEmoji200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCustomEmoji200Response(val *GetCustomEmoji200Response) *NullableGetCustomEmoji200Response {
	return &NullableGetCustomEmoji200Response{value: val, isSet: true}
}

func (v NullableGetCustomEmoji200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCustomEmoji200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
