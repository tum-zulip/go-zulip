/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserGroupAddEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupAddEvent{}

// UserGroupAddEvent Event sent to users in an organization when a [user group](/help/user-groups) is created.
type UserGroupAddEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id    *int32     `json:"id,omitempty"`
	Type  *string    `json:"type,omitempty"`
	Op    *string    `json:"op,omitempty"`
	Group *UserGroup `json:"group,omitempty"`
}

// NewUserGroupAddEvent instantiates a new UserGroupAddEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupAddEvent() *UserGroupAddEvent {
	this := UserGroupAddEvent{}
	return &this
}

// NewUserGroupAddEventWithDefaults instantiates a new UserGroupAddEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupAddEventWithDefaults() *UserGroupAddEvent {
	this := UserGroupAddEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserGroupAddEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserGroupAddEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserGroupAddEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserGroupAddEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserGroupAddEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserGroupAddEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *UserGroupAddEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *UserGroupAddEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *UserGroupAddEvent) SetOp(v string) {
	o.Op = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *UserGroupAddEvent) GetGroup() UserGroup {
	if o == nil || IsNil(o.Group) {
		var ret UserGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddEvent) GetGroupOk() (*UserGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *UserGroupAddEvent) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given UserGroup and assigns it to the Group field.
func (o *UserGroupAddEvent) SetGroup(v UserGroup) {
	o.Group = &v
}

func (o UserGroupAddEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupAddEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableUserGroupAddEvent struct {
	value *UserGroupAddEvent
	isSet bool
}

func (v NullableUserGroupAddEvent) Get() *UserGroupAddEvent {
	return v.value
}

func (v *NullableUserGroupAddEvent) Set(val *UserGroupAddEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupAddEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupAddEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupAddEvent(val *UserGroupAddEvent) *NullableUserGroupAddEvent {
	return &NullableUserGroupAddEvent{value: val, isSet: true}
}

func (v NullableUserGroupAddEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupAddEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
