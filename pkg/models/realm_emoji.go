/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmEmoji type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmEmoji{}

// RealmEmoji `{emoji_id}`: Object containing details about the emoji with the specified ID. It has the following properties:
type RealmEmoji struct {
	// The ID for this emoji, same as the object's key.
	Id *string `json:"id,omitempty"`
	// The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name :`).
	Name *string `json:"name,omitempty"`
	// The path relative to the organization's URL where the emoji's image can be found.
	SourceUrl *string `json:"source_url,omitempty"`
	// Only non-null when the emoji's image is animated.  The path relative to the organization's URL where a still (not animated) version of the emoji can be found. (This is currently always the first frame of the animation).  This is useful for clients to display the emoji in contexts where continuously animating it would be a bad user experience (E.g. because it would be distracting).  **Changes**: New in Zulip 5.0 (added as optional field in feature level 97 and then made mandatory, but nullable, in feature level 113).
	StillUrl NullableString `json:"still_url,omitempty"`
	// Whether the emoji has been deactivated or not.
	Deactivated *bool `json:"deactivated,omitempty"`
	// The user ID of the user who uploaded the custom emoji. Will be `null` if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7). Previously was accessible via an `author` object with an `id` field.
	AuthorId NullableInt32 `json:"author_id,omitempty"`
}

// NewRealmEmoji instantiates a new RealmEmoji object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmEmoji() *RealmEmoji {
	this := RealmEmoji{}
	return &this
}

// NewRealmEmojiWithDefaults instantiates a new RealmEmoji object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmEmojiWithDefaults() *RealmEmoji {
	this := RealmEmoji{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmEmoji) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmoji) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmEmoji) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RealmEmoji) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealmEmoji) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmoji) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealmEmoji) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealmEmoji) SetName(v string) {
	o.Name = &v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *RealmEmoji) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl) {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmoji) GetSourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUrl) {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *RealmEmoji) HasSourceUrl() bool {
	if o != nil && !IsNil(o.SourceUrl) {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *RealmEmoji) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetStillUrl returns the StillUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RealmEmoji) GetStillUrl() string {
	if o == nil || IsNil(o.StillUrl.Get()) {
		var ret string
		return ret
	}
	return *o.StillUrl.Get()
}

// GetStillUrlOk returns a tuple with the StillUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RealmEmoji) GetStillUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StillUrl.Get(), o.StillUrl.IsSet()
}

// HasStillUrl returns a boolean if a field has been set.
func (o *RealmEmoji) HasStillUrl() bool {
	if o != nil && o.StillUrl.IsSet() {
		return true
	}

	return false
}

// SetStillUrl gets a reference to the given NullableString and assigns it to the StillUrl field.
func (o *RealmEmoji) SetStillUrl(v string) {
	o.StillUrl.Set(&v)
}

// SetStillUrlNil sets the value for StillUrl to be an explicit nil
func (o *RealmEmoji) SetStillUrlNil() {
	o.StillUrl.Set(nil)
}

// UnsetStillUrl ensures that no value is present for StillUrl, not even an explicit nil
func (o *RealmEmoji) UnsetStillUrl() {
	o.StillUrl.Unset()
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *RealmEmoji) GetDeactivated() bool {
	if o == nil || IsNil(o.Deactivated) {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmEmoji) GetDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deactivated) {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *RealmEmoji) HasDeactivated() bool {
	if o != nil && !IsNil(o.Deactivated) {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *RealmEmoji) SetDeactivated(v bool) {
	o.Deactivated = &v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RealmEmoji) GetAuthorId() int32 {
	if o == nil || IsNil(o.AuthorId.Get()) {
		var ret int32
		return ret
	}
	return *o.AuthorId.Get()
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RealmEmoji) GetAuthorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorId.Get(), o.AuthorId.IsSet()
}

// HasAuthorId returns a boolean if a field has been set.
func (o *RealmEmoji) HasAuthorId() bool {
	if o != nil && o.AuthorId.IsSet() {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given NullableInt32 and assigns it to the AuthorId field.
func (o *RealmEmoji) SetAuthorId(v int32) {
	o.AuthorId.Set(&v)
}

// SetAuthorIdNil sets the value for AuthorId to be an explicit nil
func (o *RealmEmoji) SetAuthorIdNil() {
	o.AuthorId.Set(nil)
}

// UnsetAuthorId ensures that no value is present for AuthorId, not even an explicit nil
func (o *RealmEmoji) UnsetAuthorId() {
	o.AuthorId.Unset()
}

func (o RealmEmoji) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmEmoji) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SourceUrl) {
		toSerialize["source_url"] = o.SourceUrl
	}
	if o.StillUrl.IsSet() {
		toSerialize["still_url"] = o.StillUrl.Get()
	}
	if !IsNil(o.Deactivated) {
		toSerialize["deactivated"] = o.Deactivated
	}
	if o.AuthorId.IsSet() {
		toSerialize["author_id"] = o.AuthorId.Get()
	}
	return toSerialize, nil
}

type NullableRealmEmoji struct {
	value *RealmEmoji
	isSet bool
}

func (v NullableRealmEmoji) Get() *RealmEmoji {
	return v.value
}

func (v *NullableRealmEmoji) Set(val *RealmEmoji) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmEmoji) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmEmoji) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmEmoji(val *RealmEmoji) *NullableRealmEmoji {
	return &NullableRealmEmoji{value: val, isSet: true}
}

func (v NullableRealmEmoji) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmEmoji) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
