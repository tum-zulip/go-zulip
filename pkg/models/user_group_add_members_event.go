/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserGroupAddMembersEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupAddMembersEvent{}

// UserGroupAddMembersEvent Event sent to all users when users have been added to a user group.  This event is also sent when reactivating a user for all the user groups the reactivated user was a member of before being deactivated.  **Changes**: Starting with Zulip 10.0 (feature level 303), this event can also be sent when reactivating a user.
type UserGroupAddMembersEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The ID of the user group with new members.
	GroupId *int32 `json:"group_id,omitempty"`
	// Array containing the IDs of the users who have been added to the user group.
	UserIds []int32 `json:"user_ids,omitempty"`
}

// NewRealmUserUpdateEvent5 instantiates a new UserGroupAddMembersEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmUserUpdateEvent5() *UserGroupAddMembersEvent {
	this := UserGroupAddMembersEvent{}
	return &this
}

// NewRealmUserUpdateEvent5WithDefaults instantiates a new UserGroupAddMembersEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmUserUpdateEvent5WithDefaults() *UserGroupAddMembersEvent {
	this := UserGroupAddMembersEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserGroupAddMembersEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddMembersEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserGroupAddMembersEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserGroupAddMembersEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserGroupAddMembersEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddMembersEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserGroupAddMembersEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserGroupAddMembersEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *UserGroupAddMembersEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddMembersEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *UserGroupAddMembersEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *UserGroupAddMembersEvent) SetOp(v string) {
	o.Op = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *UserGroupAddMembersEvent) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddMembersEvent) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *UserGroupAddMembersEvent) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *UserGroupAddMembersEvent) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *UserGroupAddMembersEvent) GetUserIds() []int32 {
	if o == nil || IsNil(o.UserIds) {
		var ret []int32
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupAddMembersEvent) GetUserIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *UserGroupAddMembersEvent) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []int32 and assigns it to the UserIds field.
func (o *UserGroupAddMembersEvent) SetUserIds(v []int32) {
	o.UserIds = v
}

func (o UserGroupAddMembersEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupAddMembersEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableRealmUserUpdateEvent5 struct {
	value *UserGroupAddMembersEvent
	isSet bool
}

func (v NullableRealmUserUpdateEvent5) Get() *UserGroupAddMembersEvent {
	return v.value
}

func (v *NullableRealmUserUpdateEvent5) Set(val *UserGroupAddMembersEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEvent5) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEvent5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEvent5(val *UserGroupAddMembersEvent) *NullableRealmUserUpdateEvent5 {
	return &NullableRealmUserUpdateEvent5{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEvent5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEvent5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
