/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// UpdateFlagsNarrowClause - struct for UpdateFlagsNarrowClause
type UpdateFlagsNarrowClause struct {
	UpdateFlagsNarrowFilter *UpdateFlagsNarrowFilter
	ArrayOfString           *[]string
}

// UpdateFlagsNarrowClauseFromFilter is a convenience function that returns UpdateFlagsNarrowFilter wrapped in UpdateFlagsNarrowClause
func UpdateFlagsNarrowClauseFromFilter(v *UpdateFlagsNarrowFilter) UpdateFlagsNarrowClause {
	return UpdateFlagsNarrowClause{
		UpdateFlagsNarrowFilter: v,
	}
}

// []stringAsUpdateMessageFlagsForNarrowRequestNarrowInner is a convenience function that returns []string wrapped in UpdateFlagsNarrowClause
func UpdateFlagsNarrowClauseFromStrings(v *[]string) UpdateFlagsNarrowClause {
	return UpdateFlagsNarrowClause{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateFlagsNarrowClause) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateFlagsNarrowFilter
	err = newStrictDecoder(data).Decode(&dst.UpdateFlagsNarrowFilter)
	if err == nil {
		jsonUpdateMessageFlagsForNarrowRequestNarrowInnerOneOf, _ := json.Marshal(dst.UpdateFlagsNarrowFilter)
		if string(jsonUpdateMessageFlagsForNarrowRequestNarrowInnerOneOf) == "{}" { // empty struct
			dst.UpdateFlagsNarrowFilter = nil
		} else {
			if err = validator.Validate(dst.UpdateFlagsNarrowFilter); err != nil {
				dst.UpdateFlagsNarrowFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateFlagsNarrowFilter = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateFlagsNarrowFilter = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateFlagsNarrowClause)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateFlagsNarrowClause)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateFlagsNarrowClause) MarshalJSON() ([]byte, error) {
	if src.UpdateFlagsNarrowFilter != nil {
		return json.Marshal(&src.UpdateFlagsNarrowFilter)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateFlagsNarrowClause) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateFlagsNarrowFilter != nil {
		return obj.UpdateFlagsNarrowFilter
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateFlagsNarrowClause) GetActualInstanceValue() interface{} {
	if obj.UpdateFlagsNarrowFilter != nil {
		return *obj.UpdateFlagsNarrowFilter
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableUpdateFlagsNarrowClause struct {
	value *UpdateFlagsNarrowClause
	isSet bool
}

func (v NullableUpdateFlagsNarrowClause) Get() *UpdateFlagsNarrowClause {
	return v.value
}

func (v *NullableUpdateFlagsNarrowClause) Set(val *UpdateFlagsNarrowClause) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFlagsNarrowClause) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFlagsNarrowClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFlagsNarrowClause(val *UpdateFlagsNarrowClause) *NullableUpdateFlagsNarrowClause {
	return &NullableUpdateFlagsNarrowClause{value: val, isSet: true}
}

func (v NullableUpdateFlagsNarrowClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFlagsNarrowClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
