/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InvalidApiKeyError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidApiKeyError{}

// InvalidApiKeyError ### Invalid API key  A typical failed JSON response for when the API key is invalid.
type InvalidApiKeyError struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// A string that identifies the error.
	Code string `json:"code"`
}

type _InvalidApiKeyError InvalidApiKeyError

// NewInvalidApiKeyError instantiates a new InvalidApiKeyError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidApiKeyError(result string, msg string, code string) *InvalidApiKeyError {
	this := InvalidApiKeyError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewInvalidApiKeyErrorWithDefaults instantiates a new InvalidApiKeyError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidApiKeyErrorWithDefaults() *InvalidApiKeyError {
	this := InvalidApiKeyError{}
	return &this
}

// GetResult returns the Result field value
func (o *InvalidApiKeyError) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *InvalidApiKeyError) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *InvalidApiKeyError) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *InvalidApiKeyError) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *InvalidApiKeyError) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *InvalidApiKeyError) SetMsg(v string) {
	o.Msg = v
}

// GetCode returns the Code field value
func (o *InvalidApiKeyError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *InvalidApiKeyError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *InvalidApiKeyError) SetCode(v string) {
	o.Code = v
}

func (o InvalidApiKeyError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidApiKeyError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *InvalidApiKeyError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvalidApiKeyError := _InvalidApiKeyError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvalidApiKeyError)

	if err != nil {
		return err
	}

	*o = InvalidApiKeyError(varInvalidApiKeyError)

	return err
}

type NullableInvalidApiKeyError struct {
	value *InvalidApiKeyError
	isSet bool
}

func (v NullableInvalidApiKeyError) Get() *InvalidApiKeyError {
	return v.value
}

func (v *NullableInvalidApiKeyError) Set(val *InvalidApiKeyError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidApiKeyError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidApiKeyError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidApiKeyError(val *InvalidApiKeyError) *NullableInvalidApiKeyError {
	return &NullableInvalidApiKeyError{value: val, isSet: true}
}

func (v NullableInvalidApiKeyError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidApiKeyError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
