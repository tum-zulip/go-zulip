/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the OnboardingStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnboardingStep{}

// OnboardingStep Dictionary containing details of a single onboarding step. 
type OnboardingStep struct {
	// The type of the onboarding step. Valid value is `\"one_time_notice\"`.  **Changes**: Removed type `\"hotspot\"` in Zulip 9.0 (feature level 259).  New in Zulip 8.0 (feature level 233). 
	Type *string `json:"type,omitempty"`
	// The name of the onboarding step. 
	Name *string `json:"name,omitempty"`
}

// NewOnboardingStep instantiates a new OnboardingStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnboardingStep() *OnboardingStep {
	this := OnboardingStep{}
	return &this
}

// NewOnboardingStepWithDefaults instantiates a new OnboardingStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnboardingStepWithDefaults() *OnboardingStep {
	this := OnboardingStep{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OnboardingStep) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingStep) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OnboardingStep) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OnboardingStep) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OnboardingStep) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingStep) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OnboardingStep) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OnboardingStep) SetName(v string) {
	o.Name = &v
}

func (o OnboardingStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnboardingStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableOnboardingStep struct {
	value *OnboardingStep
	isSet bool
}

func (v NullableOnboardingStep) Get() *OnboardingStep {
	return v.value
}

func (v *NullableOnboardingStep) Set(val *OnboardingStep) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingStep) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingStep(val *OnboardingStep) *NullableOnboardingStep {
	return &NullableOnboardingStep{value: val, isSet: true}
}

func (v NullableOnboardingStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


