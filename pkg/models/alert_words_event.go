/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the AlertWordsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertWordsEvent{}

// AlertWordsEvent Event sent to a user's clients when that user's set of configured [alert words](zulip.com/help/dm-mention-alert-notifications#alert-words have changed.
type AlertWordsEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// An array of strings, where each string is an alert word (or phrase) configured by the user.
	AlertWords []string `json:"alert_words,omitempty"`
}

// NewAlertWordsEvent instantiates a new AlertWordsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertWordsEvent() *AlertWordsEvent {
	this := AlertWordsEvent{}
	return &this
}

// NewAlertWordsEventWithDefaults instantiates a new AlertWordsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWordsEventWithDefaults() *AlertWordsEvent {
	this := AlertWordsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertWordsEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertWordsEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertWordsEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AlertWordsEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertWordsEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertWordsEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertWordsEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertWordsEvent) SetType(v string) {
	o.Type = &v
}

// GetAlertWords returns the AlertWords field value if set, zero value otherwise.
func (o *AlertWordsEvent) GetAlertWords() []string {
	if o == nil || IsNil(o.AlertWords) {
		var ret []string
		return ret
	}
	return o.AlertWords
}

// GetAlertWordsOk returns a tuple with the AlertWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertWordsEvent) GetAlertWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlertWords) {
		return nil, false
	}
	return o.AlertWords, true
}

// HasAlertWords returns a boolean if a field has been set.
func (o *AlertWordsEvent) HasAlertWords() bool {
	if o != nil && !IsNil(o.AlertWords) {
		return true
	}

	return false
}

// SetAlertWords gets a reference to the given []string and assigns it to the AlertWords field.
func (o *AlertWordsEvent) SetAlertWords(v []string) {
	o.AlertWords = v
}

func (o AlertWordsEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertWordsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AlertWords) {
		toSerialize["alert_words"] = o.AlertWords
	}
	return toSerialize, nil
}

type NullableAlertWordsEvent struct {
	value *AlertWordsEvent
	isSet bool
}

func (v NullableAlertWordsEvent) Get() *AlertWordsEvent {
	return v.value
}

func (v *NullableAlertWordsEvent) Set(val *AlertWordsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertWordsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertWordsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertWordsEvent(val *AlertWordsEvent) *NullableAlertWordsEvent {
	return &NullableAlertWordsEvent{value: val, isSet: true}
}

func (v NullableAlertWordsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertWordsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
