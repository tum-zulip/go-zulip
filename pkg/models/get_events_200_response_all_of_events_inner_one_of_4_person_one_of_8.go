/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8{}

// GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 When a user is deactivated or reactivated. Only users who can access the modified user under the organization's `can_access_all_users_group` policy will receive this event.  Clients receiving a deactivation event should remove the user from all user groups in their data structures, because deactivated users cannot be members of groups.  **Changes**: Prior to Zulip 10.0 (feature level 303), reactivation events were sent to users who could not access the reactivated user due to a `can_access_all_users_group` policy. Also, previously, Clients were not required to update group membership records during user deactivation.  New in Zulip 8.0 (feature level 222). Previously the server sent a `realm_user` event with `op` field set to `remove` when deactivating a user and a `realm_user` event with `op` field set to `add` when reactivating a user. 
type GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 struct {
	// The ID of the user affected by this change. 
	UserId *int32 `json:"user_id,omitempty"`
	// A boolean describing whether the user account has been deactivated. 
	IsActive *bool `json:"is_active,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8() *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) SetUserId(v int32) {
	o.UserId = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) Get() *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8(val *GetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) *NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf4PersonOneOf8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


