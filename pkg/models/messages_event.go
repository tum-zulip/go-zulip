/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MessagesEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagesEvent{}

// MessagesEvent struct for MessagesEvent
type MessagesEvent struct {
	AvatarUrl interface{} `json:"avatar_url,omitempty"`
	// A Zulip \"client\" string, describing what Zulip client sent the message.
	Client *string `json:"client,omitempty"`
	// The content/body of the message. When `apply_markdown` is set, it will be in HTML format.  See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
	Content *string `json:"content,omitempty"`
	// The HTTP `content_type` for the message content. This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  See the help center article on [message formatting](/help/format-your-message-using-markdown) for details on Zulip-flavored Markdown.
	ContentType      *string                       `json:"content_type,omitempty"`
	DisplayRecipient *MessagesBaseDisplayRecipient `json:"display_recipient,omitempty"`
	// An array of objects, with each object documenting the changes in a previous edit made to the message, ordered chronologically from most recent to least recent edit.  Not present if the message has never been edited or moved, or if [viewing message edit history][edit-history-access] is not allowed in the organization.  Every object will contain `user_id` and `timestamp`.  The other fields are optional, and will be present or not depending on whether the channel, topic, and/or message content were modified in the edit event. For example, if only the topic was edited, only `prev_topic` and `topic` will be present in addition to `user_id` and `timestamp`.  [edit-history-access]: /help/restrict-message-edit-history-access  **Changes**: In Zulip 10.0 (feature level 284), removed the `prev_rendered_content_version` field as it is an internal server implementation detail not used by any client.
	EditHistory []MessagesBaseEditHistoryInner `json:"edit_history,omitempty"`
	// The unique message ID. Messages should always be displayed sorted by ID.
	Id *int32 `json:"id,omitempty"`
	// Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages
	IsMeMessage *bool `json:"is_me_message,omitempty"`
	// The UNIX timestamp for when the message's content was last edited, in UTC seconds.  Not present if the message's content has never been edited.  Clients should use this field, rather than parsing the `edit_history` array, to display an indicator that the message has been edited.  **Changes**: Prior to Zulip 10.0 (feature level 365), this was the time when the message was last edited or moved.
	LastEditTimestamp *int32 `json:"last_edit_timestamp,omitempty"`
	// The UNIX timestamp for when the message was last moved to a different channel or topic, in UTC seconds.  Not present if the message has never been moved, or if the only topic moves for the message are [resolving or unresolving](/help/resolve-a-topic) the message's topic.  Clients should use this field, rather than parsing the `edit_history` array, to display an indicator that the message has been moved.  **Changes**: New in Zulip 10.0 (feature level 365). Previously, parsing the `edit_history` array was required in order to correctly display moved message indicators.
	LastMovedTimestamp *int32 `json:"last_moved_timestamp,omitempty"`
	// Data on any reactions to the message.
	Reactions []EmojiReaction `json:"reactions,omitempty"`
	// A unique ID for the set of users receiving the message (either a channel or group of users). Useful primarily for hashing.  **Changes**: Before Zulip 10.0 (feature level 327), `recipient_id` was the same across all incoming 1:1 direct messages. Now, each incoming message uniquely shares a `recipient_id` with outgoing messages in the same conversation.
	RecipientId *int32 `json:"recipient_id,omitempty"`
	// The Zulip API email address of the message's sender.
	SenderEmail *string `json:"sender_email,omitempty"`
	// The full name of the message's sender.
	SenderFullName *string `json:"sender_full_name,omitempty"`
	// The user ID of the message's sender.
	SenderId *int32 `json:"sender_id,omitempty"`
	// A string identifier for the realm the sender is in. Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.
	SenderRealmStr *string `json:"sender_realm_str,omitempty"`
	// Only present for channel messages; the ID of the channel.
	StreamId *int32 `json:"stream_id,omitempty"`
	// The `topic` of the message. Currently always `\"\"` for direct messages, though this could change if Zulip adds support for topics in direct message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  For clients that don't support the `empty_topic_name` [client capability][client-capabilities], the empty string value is replaced with the value of `realm_empty_topic_display_name` found in the [POST /register](/api/register-queue) response, for channel messages.  **Changes**: Before Zulip 10.0 (feature level 334), `empty_topic_name` client capability didn't exist and empty string as the topic name for channel messages wasn't allowed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities
	Subject *string `json:"subject,omitempty"`
	// Data used for certain experimental Zulip integrations.
	Submessages []MessagesBaseSubmessagesInner `json:"submessages,omitempty"`
	// The UNIX timestamp for when the message was sent, in UTC seconds.
	Timestamp *int32 `json:"timestamp,omitempty"`
	// Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1). Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.
	TopicLinks []UserSettingsUpdateEvent6TopicLinksInner `json:"topic_links,omitempty"`
	// The type of the message: `\"stream\"` or `\"private\"`.
	Type *string `json:"type,omitempty"`
}

// NewMessagesEvent instantiates a new MessagesEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagesEvent() *MessagesEvent {
	this := MessagesEvent{}
	return &this
}

// NewMessagesEventWithDefaults instantiates a new MessagesEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagesEventWithDefaults() *MessagesEvent {
	this := MessagesEvent{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessagesEvent) GetAvatarUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessagesEvent) GetAvatarUrlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *MessagesEvent) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given interface{} and assigns it to the AvatarUrl field.
func (o *MessagesEvent) SetAvatarUrl(v interface{}) {
	o.AvatarUrl = v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *MessagesEvent) GetClient() string {
	if o == nil || IsNil(o.Client) {
		var ret string
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetClientOk() (*string, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *MessagesEvent) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given string and assigns it to the Client field.
func (o *MessagesEvent) SetClient(v string) {
	o.Client = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *MessagesEvent) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *MessagesEvent) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *MessagesEvent) SetContent(v string) {
	o.Content = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *MessagesEvent) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *MessagesEvent) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *MessagesEvent) SetContentType(v string) {
	o.ContentType = &v
}

// GetDisplayRecipient returns the DisplayRecipient field value if set, zero value otherwise.
func (o *MessagesEvent) GetDisplayRecipient() MessagesBaseDisplayRecipient {
	if o == nil || IsNil(o.DisplayRecipient) {
		var ret MessagesBaseDisplayRecipient
		return ret
	}
	return *o.DisplayRecipient
}

// GetDisplayRecipientOk returns a tuple with the DisplayRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetDisplayRecipientOk() (*MessagesBaseDisplayRecipient, bool) {
	if o == nil || IsNil(o.DisplayRecipient) {
		return nil, false
	}
	return o.DisplayRecipient, true
}

// HasDisplayRecipient returns a boolean if a field has been set.
func (o *MessagesEvent) HasDisplayRecipient() bool {
	if o != nil && !IsNil(o.DisplayRecipient) {
		return true
	}

	return false
}

// SetDisplayRecipient gets a reference to the given MessagesBaseDisplayRecipient and assigns it to the DisplayRecipient field.
func (o *MessagesEvent) SetDisplayRecipient(v MessagesBaseDisplayRecipient) {
	o.DisplayRecipient = &v
}

// GetEditHistory returns the EditHistory field value if set, zero value otherwise.
func (o *MessagesEvent) GetEditHistory() []MessagesBaseEditHistoryInner {
	if o == nil || IsNil(o.EditHistory) {
		var ret []MessagesBaseEditHistoryInner
		return ret
	}
	return o.EditHistory
}

// GetEditHistoryOk returns a tuple with the EditHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetEditHistoryOk() ([]MessagesBaseEditHistoryInner, bool) {
	if o == nil || IsNil(o.EditHistory) {
		return nil, false
	}
	return o.EditHistory, true
}

// HasEditHistory returns a boolean if a field has been set.
func (o *MessagesEvent) HasEditHistory() bool {
	if o != nil && !IsNil(o.EditHistory) {
		return true
	}

	return false
}

// SetEditHistory gets a reference to the given []MessagesBaseEditHistoryInner and assigns it to the EditHistory field.
func (o *MessagesEvent) SetEditHistory(v []MessagesBaseEditHistoryInner) {
	o.EditHistory = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MessagesEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MessagesEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MessagesEvent) SetId(v int32) {
	o.Id = &v
}

// GetIsMeMessage returns the IsMeMessage field value if set, zero value otherwise.
func (o *MessagesEvent) GetIsMeMessage() bool {
	if o == nil || IsNil(o.IsMeMessage) {
		var ret bool
		return ret
	}
	return *o.IsMeMessage
}

// GetIsMeMessageOk returns a tuple with the IsMeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetIsMeMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMeMessage) {
		return nil, false
	}
	return o.IsMeMessage, true
}

// HasIsMeMessage returns a boolean if a field has been set.
func (o *MessagesEvent) HasIsMeMessage() bool {
	if o != nil && !IsNil(o.IsMeMessage) {
		return true
	}

	return false
}

// SetIsMeMessage gets a reference to the given bool and assigns it to the IsMeMessage field.
func (o *MessagesEvent) SetIsMeMessage(v bool) {
	o.IsMeMessage = &v
}

// GetLastEditTimestamp returns the LastEditTimestamp field value if set, zero value otherwise.
func (o *MessagesEvent) GetLastEditTimestamp() int32 {
	if o == nil || IsNil(o.LastEditTimestamp) {
		var ret int32
		return ret
	}
	return *o.LastEditTimestamp
}

// GetLastEditTimestampOk returns a tuple with the LastEditTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetLastEditTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.LastEditTimestamp) {
		return nil, false
	}
	return o.LastEditTimestamp, true
}

// HasLastEditTimestamp returns a boolean if a field has been set.
func (o *MessagesEvent) HasLastEditTimestamp() bool {
	if o != nil && !IsNil(o.LastEditTimestamp) {
		return true
	}

	return false
}

// SetLastEditTimestamp gets a reference to the given int32 and assigns it to the LastEditTimestamp field.
func (o *MessagesEvent) SetLastEditTimestamp(v int32) {
	o.LastEditTimestamp = &v
}

// GetLastMovedTimestamp returns the LastMovedTimestamp field value if set, zero value otherwise.
func (o *MessagesEvent) GetLastMovedTimestamp() int32 {
	if o == nil || IsNil(o.LastMovedTimestamp) {
		var ret int32
		return ret
	}
	return *o.LastMovedTimestamp
}

// GetLastMovedTimestampOk returns a tuple with the LastMovedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetLastMovedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.LastMovedTimestamp) {
		return nil, false
	}
	return o.LastMovedTimestamp, true
}

// HasLastMovedTimestamp returns a boolean if a field has been set.
func (o *MessagesEvent) HasLastMovedTimestamp() bool {
	if o != nil && !IsNil(o.LastMovedTimestamp) {
		return true
	}

	return false
}

// SetLastMovedTimestamp gets a reference to the given int32 and assigns it to the LastMovedTimestamp field.
func (o *MessagesEvent) SetLastMovedTimestamp(v int32) {
	o.LastMovedTimestamp = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *MessagesEvent) GetReactions() []EmojiReaction {
	if o == nil || IsNil(o.Reactions) {
		var ret []EmojiReaction
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetReactionsOk() ([]EmojiReaction, bool) {
	if o == nil || IsNil(o.Reactions) {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *MessagesEvent) HasReactions() bool {
	if o != nil && !IsNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []EmojiReaction and assigns it to the Reactions field.
func (o *MessagesEvent) SetReactions(v []EmojiReaction) {
	o.Reactions = v
}

// GetRecipientId returns the RecipientId field value if set, zero value otherwise.
func (o *MessagesEvent) GetRecipientId() int32 {
	if o == nil || IsNil(o.RecipientId) {
		var ret int32
		return ret
	}
	return *o.RecipientId
}

// GetRecipientIdOk returns a tuple with the RecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetRecipientIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecipientId) {
		return nil, false
	}
	return o.RecipientId, true
}

// HasRecipientId returns a boolean if a field has been set.
func (o *MessagesEvent) HasRecipientId() bool {
	if o != nil && !IsNil(o.RecipientId) {
		return true
	}

	return false
}

// SetRecipientId gets a reference to the given int32 and assigns it to the RecipientId field.
func (o *MessagesEvent) SetRecipientId(v int32) {
	o.RecipientId = &v
}

// GetSenderEmail returns the SenderEmail field value if set, zero value otherwise.
func (o *MessagesEvent) GetSenderEmail() string {
	if o == nil || IsNil(o.SenderEmail) {
		var ret string
		return ret
	}
	return *o.SenderEmail
}

// GetSenderEmailOk returns a tuple with the SenderEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSenderEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SenderEmail) {
		return nil, false
	}
	return o.SenderEmail, true
}

// HasSenderEmail returns a boolean if a field has been set.
func (o *MessagesEvent) HasSenderEmail() bool {
	if o != nil && !IsNil(o.SenderEmail) {
		return true
	}

	return false
}

// SetSenderEmail gets a reference to the given string and assigns it to the SenderEmail field.
func (o *MessagesEvent) SetSenderEmail(v string) {
	o.SenderEmail = &v
}

// GetSenderFullName returns the SenderFullName field value if set, zero value otherwise.
func (o *MessagesEvent) GetSenderFullName() string {
	if o == nil || IsNil(o.SenderFullName) {
		var ret string
		return ret
	}
	return *o.SenderFullName
}

// GetSenderFullNameOk returns a tuple with the SenderFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSenderFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.SenderFullName) {
		return nil, false
	}
	return o.SenderFullName, true
}

// HasSenderFullName returns a boolean if a field has been set.
func (o *MessagesEvent) HasSenderFullName() bool {
	if o != nil && !IsNil(o.SenderFullName) {
		return true
	}

	return false
}

// SetSenderFullName gets a reference to the given string and assigns it to the SenderFullName field.
func (o *MessagesEvent) SetSenderFullName(v string) {
	o.SenderFullName = &v
}

// GetSenderId returns the SenderId field value if set, zero value otherwise.
func (o *MessagesEvent) GetSenderId() int32 {
	if o == nil || IsNil(o.SenderId) {
		var ret int32
		return ret
	}
	return *o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSenderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SenderId) {
		return nil, false
	}
	return o.SenderId, true
}

// HasSenderId returns a boolean if a field has been set.
func (o *MessagesEvent) HasSenderId() bool {
	if o != nil && !IsNil(o.SenderId) {
		return true
	}

	return false
}

// SetSenderId gets a reference to the given int32 and assigns it to the SenderId field.
func (o *MessagesEvent) SetSenderId(v int32) {
	o.SenderId = &v
}

// GetSenderRealmStr returns the SenderRealmStr field value if set, zero value otherwise.
func (o *MessagesEvent) GetSenderRealmStr() string {
	if o == nil || IsNil(o.SenderRealmStr) {
		var ret string
		return ret
	}
	return *o.SenderRealmStr
}

// GetSenderRealmStrOk returns a tuple with the SenderRealmStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSenderRealmStrOk() (*string, bool) {
	if o == nil || IsNil(o.SenderRealmStr) {
		return nil, false
	}
	return o.SenderRealmStr, true
}

// HasSenderRealmStr returns a boolean if a field has been set.
func (o *MessagesEvent) HasSenderRealmStr() bool {
	if o != nil && !IsNil(o.SenderRealmStr) {
		return true
	}

	return false
}

// SetSenderRealmStr gets a reference to the given string and assigns it to the SenderRealmStr field.
func (o *MessagesEvent) SetSenderRealmStr(v string) {
	o.SenderRealmStr = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *MessagesEvent) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *MessagesEvent) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *MessagesEvent) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MessagesEvent) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MessagesEvent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *MessagesEvent) SetSubject(v string) {
	o.Subject = &v
}

// GetSubmessages returns the Submessages field value if set, zero value otherwise.
func (o *MessagesEvent) GetSubmessages() []MessagesBaseSubmessagesInner {
	if o == nil || IsNil(o.Submessages) {
		var ret []MessagesBaseSubmessagesInner
		return ret
	}
	return o.Submessages
}

// GetSubmessagesOk returns a tuple with the Submessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetSubmessagesOk() ([]MessagesBaseSubmessagesInner, bool) {
	if o == nil || IsNil(o.Submessages) {
		return nil, false
	}
	return o.Submessages, true
}

// HasSubmessages returns a boolean if a field has been set.
func (o *MessagesEvent) HasSubmessages() bool {
	if o != nil && !IsNil(o.Submessages) {
		return true
	}

	return false
}

// SetSubmessages gets a reference to the given []MessagesBaseSubmessagesInner and assigns it to the Submessages field.
func (o *MessagesEvent) SetSubmessages(v []MessagesBaseSubmessagesInner) {
	o.Submessages = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MessagesEvent) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MessagesEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *MessagesEvent) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetTopicLinks returns the TopicLinks field value if set, zero value otherwise.
func (o *MessagesEvent) GetTopicLinks() []UserSettingsUpdateEvent6TopicLinksInner {
	if o == nil || IsNil(o.TopicLinks) {
		var ret []UserSettingsUpdateEvent6TopicLinksInner
		return ret
	}
	return o.TopicLinks
}

// GetTopicLinksOk returns a tuple with the TopicLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetTopicLinksOk() ([]UserSettingsUpdateEvent6TopicLinksInner, bool) {
	if o == nil || IsNil(o.TopicLinks) {
		return nil, false
	}
	return o.TopicLinks, true
}

// HasTopicLinks returns a boolean if a field has been set.
func (o *MessagesEvent) HasTopicLinks() bool {
	if o != nil && !IsNil(o.TopicLinks) {
		return true
	}

	return false
}

// SetTopicLinks gets a reference to the given []UserSettingsUpdateEvent6TopicLinksInner and assigns it to the TopicLinks field.
func (o *MessagesEvent) SetTopicLinks(v []UserSettingsUpdateEvent6TopicLinksInner) {
	o.TopicLinks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MessagesEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MessagesEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MessagesEvent) SetType(v string) {
	o.Type = &v
}

func (o MessagesEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagesEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.DisplayRecipient) {
		toSerialize["display_recipient"] = o.DisplayRecipient
	}
	if !IsNil(o.EditHistory) {
		toSerialize["edit_history"] = o.EditHistory
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsMeMessage) {
		toSerialize["is_me_message"] = o.IsMeMessage
	}
	if !IsNil(o.LastEditTimestamp) {
		toSerialize["last_edit_timestamp"] = o.LastEditTimestamp
	}
	if !IsNil(o.LastMovedTimestamp) {
		toSerialize["last_moved_timestamp"] = o.LastMovedTimestamp
	}
	if !IsNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !IsNil(o.RecipientId) {
		toSerialize["recipient_id"] = o.RecipientId
	}
	if !IsNil(o.SenderEmail) {
		toSerialize["sender_email"] = o.SenderEmail
	}
	if !IsNil(o.SenderFullName) {
		toSerialize["sender_full_name"] = o.SenderFullName
	}
	if !IsNil(o.SenderId) {
		toSerialize["sender_id"] = o.SenderId
	}
	if !IsNil(o.SenderRealmStr) {
		toSerialize["sender_realm_str"] = o.SenderRealmStr
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Submessages) {
		toSerialize["submessages"] = o.Submessages
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TopicLinks) {
		toSerialize["topic_links"] = o.TopicLinks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMessagesEvent struct {
	value *MessagesEvent
	isSet bool
}

func (v NullableMessagesEvent) Get() *MessagesEvent {
	return v.value
}

func (v *NullableMessagesEvent) Set(val *MessagesEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagesEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagesEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagesEvent(val *MessagesEvent) *NullableMessagesEvent {
	return &NullableMessagesEvent{value: val, isSet: true}
}

func (v NullableMessagesEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagesEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
