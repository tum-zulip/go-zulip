/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// TestNotify400Response - struct for TestNotify400Response
type TestNotify400Response struct {
	InvalidPushDeviceTokenError       *InvalidPushDeviceTokenError
	InvalidRemotePushDeviceTokenError *InvalidRemotePushDeviceTokenError
}

// InvalidPushDeviceTokenErrorAsTestNotify400Response is a convenience function that returns InvalidPushDeviceTokenError wrapped in TestNotify400Response
func InvalidPushDeviceTokenErrorAsTestNotify400Response(v *InvalidPushDeviceTokenError) TestNotify400Response {
	return TestNotify400Response{
		InvalidPushDeviceTokenError: v,
	}
}

// InvalidRemotePushDeviceTokenErrorAsTestNotify400Response is a convenience function that returns InvalidRemotePushDeviceTokenError wrapped in TestNotify400Response
func InvalidRemotePushDeviceTokenErrorAsTestNotify400Response(v *InvalidRemotePushDeviceTokenError) TestNotify400Response {
	return TestNotify400Response{
		InvalidRemotePushDeviceTokenError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestNotify400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvalidPushDeviceTokenError
	err = newStrictDecoder(data).Decode(&dst.InvalidPushDeviceTokenError)
	if err == nil {
		jsonInvalidPushDeviceTokenError, _ := json.Marshal(dst.InvalidPushDeviceTokenError)
		if string(jsonInvalidPushDeviceTokenError) == "{}" { // empty struct
			dst.InvalidPushDeviceTokenError = nil
		} else {
			if err = validator.Validate(dst.InvalidPushDeviceTokenError); err != nil {
				dst.InvalidPushDeviceTokenError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidPushDeviceTokenError = nil
	}

	// try to unmarshal data into InvalidRemotePushDeviceTokenError
	err = newStrictDecoder(data).Decode(&dst.InvalidRemotePushDeviceTokenError)
	if err == nil {
		jsonInvalidRemotePushDeviceTokenError, _ := json.Marshal(dst.InvalidRemotePushDeviceTokenError)
		if string(jsonInvalidRemotePushDeviceTokenError) == "{}" { // empty struct
			dst.InvalidRemotePushDeviceTokenError = nil
		} else {
			if err = validator.Validate(dst.InvalidRemotePushDeviceTokenError); err != nil {
				dst.InvalidRemotePushDeviceTokenError = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidRemotePushDeviceTokenError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvalidPushDeviceTokenError = nil
		dst.InvalidRemotePushDeviceTokenError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestNotify400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestNotify400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestNotify400Response) MarshalJSON() ([]byte, error) {
	if src.InvalidPushDeviceTokenError != nil {
		return json.Marshal(&src.InvalidPushDeviceTokenError)
	}

	if src.InvalidRemotePushDeviceTokenError != nil {
		return json.Marshal(&src.InvalidRemotePushDeviceTokenError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestNotify400Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.InvalidPushDeviceTokenError != nil {
		return obj.InvalidPushDeviceTokenError
	}

	if obj.InvalidRemotePushDeviceTokenError != nil {
		return obj.InvalidRemotePushDeviceTokenError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TestNotify400Response) GetActualInstanceValue() interface{} {
	if obj.InvalidPushDeviceTokenError != nil {
		return *obj.InvalidPushDeviceTokenError
	}

	if obj.InvalidRemotePushDeviceTokenError != nil {
		return *obj.InvalidRemotePushDeviceTokenError
	}

	// all schemas are nil
	return nil
}

type NullableTestNotify400Response struct {
	value *TestNotify400Response
	isSet bool
}

func (v NullableTestNotify400Response) Get() *TestNotify400Response {
	return v.value
}

func (v *NullableTestNotify400Response) Set(val *TestNotify400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTestNotify400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTestNotify400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestNotify400Response(val *TestNotify400Response) *NullableTestNotify400Response {
	return &NullableTestNotify400Response{value: val, isSet: true}
}

func (v NullableTestNotify400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestNotify400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
