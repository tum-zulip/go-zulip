/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the EmojiReactionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmojiReactionEvent{}

// EmojiReactionEvent struct for EmojiReactionEvent
type EmojiReactionEvent struct {
	// Name of the emoji.
	EmojiName *string `json:"emoji_name,omitempty"`
	// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.
	EmojiCode *string `json:"emoji_code,omitempty"`
	// A string indicating the type of emoji. Each emoji `reaction_type` has an independent namespace for values of `emoji_code`.  Must be one of the following values:  - `unicode_emoji` : In this namespace, `emoji_code` will be a   dash-separated hex encoding of the sequence of Unicode codepoints   that define this emoji in the Unicode specification.  - `realm_emoji` : In this namespace, `emoji_code` will be the ID of   the uploaded [custom emoji](zulip.com/help/custom-emoji.  - `zulip_extra_emoji` : These are special emoji included with Zulip.   In this namespace, `emoji_code` will be the name of the emoji (e.g.   \"zulip\").
	ReactionType *string `json:"reaction_type,omitempty"`
	// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future.
	UserId *int32 `json:"user_id,omitempty"`
	// Deprecated
	User *EmojiReactionEventAllOfUser `json:"user,omitempty"`
}

// NewEmojiReactionEvent instantiates a new EmojiReactionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReactionEvent() *EmojiReactionEvent {
	this := EmojiReactionEvent{}
	return &this
}

// NewEmojiReactionEventWithDefaults instantiates a new EmojiReactionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionEventWithDefaults() *EmojiReactionEvent {
	this := EmojiReactionEvent{}
	return &this
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *EmojiReactionEvent) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName) {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEvent) GetEmojiNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *EmojiReactionEvent) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *EmojiReactionEvent) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *EmojiReactionEvent) GetEmojiCode() string {
	if o == nil || IsNil(o.EmojiCode) {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEvent) GetEmojiCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *EmojiReactionEvent) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *EmojiReactionEvent) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *EmojiReactionEvent) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEvent) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *EmojiReactionEvent) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *EmojiReactionEvent) SetReactionType(v string) {
	o.ReactionType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmojiReactionEvent) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionEvent) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmojiReactionEvent) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *EmojiReactionEvent) SetUserId(v int32) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
// Deprecated
func (o *EmojiReactionEvent) GetUser() EmojiReactionEventAllOfUser {
	if o == nil || IsNil(o.User) {
		var ret EmojiReactionEventAllOfUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EmojiReactionEvent) GetUserOk() (*EmojiReactionEventAllOfUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EmojiReactionEvent) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given EmojiReactionEventAllOfUser and assigns it to the User field.
// Deprecated
func (o *EmojiReactionEvent) SetUser(v EmojiReactionEventAllOfUser) {
	o.User = &v
}

func (o EmojiReactionEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmojiReactionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmojiName) {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if !IsNil(o.EmojiCode) {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableEmojiReactionEvent struct {
	value *EmojiReactionEvent
	isSet bool
}

func (v NullableEmojiReactionEvent) Get() *EmojiReactionEvent {
	return v.value
}

func (v *NullableEmojiReactionEvent) Set(val *EmojiReactionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReactionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReactionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReactionEvent(val *EmojiReactionEvent) *NullableEmojiReactionEvent {
	return &NullableEmojiReactionEvent{value: val, isSet: true}
}

func (v NullableEmojiReactionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReactionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
