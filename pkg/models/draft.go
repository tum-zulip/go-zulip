/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Draft type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Draft{}

// Draft A dictionary for representing a message draft.
type Draft struct {
	// The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited.
	Id *int32 `json:"id,omitempty"`
	// The type of the draft. Either unaddressed (empty string), `\"stream\"`, or `\"private\"` (for one-on-one and group direct messages).
	Type string `json:"type"`
	// An array of the tentative target audience IDs. For channel messages, this should contain exactly 1 ID, the ID of the target channel. For direct messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array.
	To []int32 `json:"to"`
	// For channel message drafts, the tentative topic name. For direct or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes.
	Topic string `json:"topic"`
	// The body of the draft. Should not contain null bytes.
	Content string `json:"content"`
	// A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server.
	Timestamp *Timestamp `json:"timestamp,omitempty"`
}

type _Draft Draft

// NewDraft instantiates a new Draft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDraft(type_ string, to []int32, topic string, content string) *Draft {
	this := Draft{}
	this.Type = type_
	this.To = to
	this.Topic = topic
	this.Content = content
	return &this
}

// NewDraftWithDefaults instantiates a new Draft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDraftWithDefaults() *Draft {
	this := Draft{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Draft) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Draft) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Draft) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Draft) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *Draft) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Draft) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Draft) SetType(v string) {
	o.Type = v
}

// GetTo returns the To field value
func (o *Draft) GetTo() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Draft) GetToOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *Draft) SetTo(v []int32) {
	o.To = v
}

// GetTopic returns the Topic field value
func (o *Draft) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *Draft) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *Draft) SetTopic(v string) {
	o.Topic = v
}

// GetContent returns the Content field value
func (o *Draft) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Draft) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Draft) SetContent(v string) {
	o.Content = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Draft) GetTimestamp() Timestamp {
	if o == nil || IsNil(o.Timestamp) {
		var ret Timestamp
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Draft) GetTimestampOk() (*Timestamp, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Draft) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given Timestamp and assigns it to the Timestamp field.
func (o *Draft) SetTimestamp(v Timestamp) {
	o.Timestamp = &v
}

func (o Draft) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Draft) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["to"] = o.To
	toSerialize["topic"] = o.Topic
	toSerialize["content"] = o.Content
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *Draft) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"to",
		"topic",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDraft := _Draft{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDraft)

	if err != nil {
		return err
	}

	*o = Draft(varDraft)

	return err
}

type NullableDraft struct {
	value *Draft
	isSet bool
}

func (v NullableDraft) Get() *Draft {
	return v.value
}

func (v *NullableDraft) Set(val *Draft) {
	v.value = val
	v.isSet = true
}

func (v NullableDraft) IsSet() bool {
	return v.isSet
}

func (v *NullableDraft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDraft(val *Draft) *NullableDraft {
	return &NullableDraft{value: val, isSet: true}
}

func (v NullableDraft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDraft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
