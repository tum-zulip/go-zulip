/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the StreamDeleteEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamDeleteEvent{}

// StreamDeleteEvent Event sent when a user loses access to a channel they previously [could access](/help/channel-permissions) because they are unsubscribed from a private channel or their [role](/help/user-roles) has changed.  This event is also sent when a channel is archived but only to clients that did not declare the `archived_channels` [client capability][client-capabilities].  **Changes**: Prior to Zulip 11.0 (feature level 378), this event was sent to all the users who could see the channel when it was archived.  Prior to Zulip 8.0 (feature level 205), this event was not sent when a user lost access to a channel due to their role changing.  [client-capabilities]: /api/register-queue#parameter-client_capabilities
type StreamDeleteEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// Array of objects, each containing ID of the channel that was deleted.  **Changes**: **Deprecated** in Zulip 10.0 (feature level 343) and will be removed in a future release. Previously, these objects additionally contained all the standard fields for a channel object.
	// Deprecated
	Streams []UpdateDisplaySettingsEvent7StreamsInner `json:"streams,omitempty"`
	// Array containing the IDs of the channels that were deleted.  **Changes**: New in Zulip 10.0 (feature level 343). Previously, these IDs were available only via the legacy `streams` array.
	StreamIds []int32 `json:"stream_ids,omitempty"`
}

// NewUpdateDisplaySettingsEvent7 instantiates a new StreamDeleteEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDisplaySettingsEvent7() *StreamDeleteEvent {
	this := StreamDeleteEvent{}
	return &this
}

// NewUpdateDisplaySettingsEvent7WithDefaults instantiates a new StreamDeleteEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDisplaySettingsEvent7WithDefaults() *StreamDeleteEvent {
	this := StreamDeleteEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StreamDeleteEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamDeleteEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StreamDeleteEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *StreamDeleteEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreamDeleteEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamDeleteEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreamDeleteEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StreamDeleteEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *StreamDeleteEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamDeleteEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *StreamDeleteEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *StreamDeleteEvent) SetOp(v string) {
	o.Op = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
// Deprecated
func (o *StreamDeleteEvent) GetStreams() []UpdateDisplaySettingsEvent7StreamsInner {
	if o == nil || IsNil(o.Streams) {
		var ret []UpdateDisplaySettingsEvent7StreamsInner
		return ret
	}
	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StreamDeleteEvent) GetStreamsOk() ([]UpdateDisplaySettingsEvent7StreamsInner, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *StreamDeleteEvent) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []UpdateDisplaySettingsEvent7StreamsInner and assigns it to the Streams field.
// Deprecated
func (o *StreamDeleteEvent) SetStreams(v []UpdateDisplaySettingsEvent7StreamsInner) {
	o.Streams = v
}

// GetStreamIds returns the StreamIds field value if set, zero value otherwise.
func (o *StreamDeleteEvent) GetStreamIds() []int32 {
	if o == nil || IsNil(o.StreamIds) {
		var ret []int32
		return ret
	}
	return o.StreamIds
}

// GetStreamIdsOk returns a tuple with the StreamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamDeleteEvent) GetStreamIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.StreamIds) {
		return nil, false
	}
	return o.StreamIds, true
}

// HasStreamIds returns a boolean if a field has been set.
func (o *StreamDeleteEvent) HasStreamIds() bool {
	if o != nil && !IsNil(o.StreamIds) {
		return true
	}

	return false
}

// SetStreamIds gets a reference to the given []int32 and assigns it to the StreamIds field.
func (o *StreamDeleteEvent) SetStreamIds(v []int32) {
	o.StreamIds = v
}

func (o StreamDeleteEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamDeleteEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Streams) {
		toSerialize["streams"] = o.Streams
	}
	if !IsNil(o.StreamIds) {
		toSerialize["stream_ids"] = o.StreamIds
	}
	return toSerialize, nil
}

type NullableUpdateDisplaySettingsEvent7 struct {
	value *StreamDeleteEvent
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent7) Get() *StreamDeleteEvent {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent7) Set(val *StreamDeleteEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent7) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent7(val *StreamDeleteEvent) *NullableUpdateDisplaySettingsEvent7 {
	return &NullableUpdateDisplaySettingsEvent7{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
