/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmUserUpdateEvent4Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmUserUpdateEvent4Data{}

// RealmUserUpdateEvent4Data Dictionary containing the changed details of the user group.
type RealmUserUpdateEvent4Data struct {
	// The new name of the user group. Only present if the group's name changed.
	Name *string `json:"name,omitempty"`
	// The new description of the group. Only present if the description changed.
	Description           *string            `json:"description,omitempty"`
	CanAddMembersGroup    *GroupSettingValue `json:"can_add_members_group,omitempty"`
	CanJoinGroup          *GroupSettingValue `json:"can_join_group,omitempty"`
	CanLeaveGroup         *GroupSettingValue `json:"can_leave_group,omitempty"`
	CanManageGroup        *GroupSettingValue `json:"can_manage_group,omitempty"`
	CanMentionGroup       *GroupSettingValue `json:"can_mention_group,omitempty"`
	CanRemoveMembersGroup *GroupSettingValue `json:"can_remove_members_group,omitempty"`
	// Whether the user group is deactivated. Deactivated groups cannot be used as a subgroup of another group or used for any other purpose.  **Changes**: New in Zulip 10.0 (feature level 290).
	Deactivated *bool `json:"deactivated,omitempty"`
}

// NewRealmUserUpdateEvent4Data instantiates a new RealmUserUpdateEvent4Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmUserUpdateEvent4Data() *RealmUserUpdateEvent4Data {
	this := RealmUserUpdateEvent4Data{}
	return &this
}

// NewRealmUserUpdateEvent4DataWithDefaults instantiates a new RealmUserUpdateEvent4Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmUserUpdateEvent4DataWithDefaults() *RealmUserUpdateEvent4Data {
	this := RealmUserUpdateEvent4Data{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealmUserUpdateEvent4Data) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RealmUserUpdateEvent4Data) SetDescription(v string) {
	o.Description = &v
}

// GetCanAddMembersGroup returns the CanAddMembersGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanAddMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddMembersGroup
}

// GetCanAddMembersGroupOk returns a tuple with the CanAddMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanAddMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddMembersGroup) {
		return nil, false
	}
	return o.CanAddMembersGroup, true
}

// HasCanAddMembersGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanAddMembersGroup() bool {
	if o != nil && !IsNil(o.CanAddMembersGroup) {
		return true
	}

	return false
}

// SetCanAddMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddMembersGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanAddMembersGroup(v GroupSettingValue) {
	o.CanAddMembersGroup = &v
}

// GetCanJoinGroup returns the CanJoinGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanJoinGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanJoinGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanJoinGroup
}

// GetCanJoinGroupOk returns a tuple with the CanJoinGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanJoinGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanJoinGroup) {
		return nil, false
	}
	return o.CanJoinGroup, true
}

// HasCanJoinGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanJoinGroup() bool {
	if o != nil && !IsNil(o.CanJoinGroup) {
		return true
	}

	return false
}

// SetCanJoinGroup gets a reference to the given GroupSettingValue and assigns it to the CanJoinGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanJoinGroup(v GroupSettingValue) {
	o.CanJoinGroup = &v
}

// GetCanLeaveGroup returns the CanLeaveGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanLeaveGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanLeaveGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanLeaveGroup
}

// GetCanLeaveGroupOk returns a tuple with the CanLeaveGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanLeaveGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanLeaveGroup) {
		return nil, false
	}
	return o.CanLeaveGroup, true
}

// HasCanLeaveGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanLeaveGroup() bool {
	if o != nil && !IsNil(o.CanLeaveGroup) {
		return true
	}

	return false
}

// SetCanLeaveGroup gets a reference to the given GroupSettingValue and assigns it to the CanLeaveGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanLeaveGroup(v GroupSettingValue) {
	o.CanLeaveGroup = &v
}

// GetCanManageGroup returns the CanManageGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanManageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanManageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanManageGroup
}

// GetCanManageGroupOk returns a tuple with the CanManageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanManageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanManageGroup) {
		return nil, false
	}
	return o.CanManageGroup, true
}

// HasCanManageGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanManageGroup() bool {
	if o != nil && !IsNil(o.CanManageGroup) {
		return true
	}

	return false
}

// SetCanManageGroup gets a reference to the given GroupSettingValue and assigns it to the CanManageGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanManageGroup(v GroupSettingValue) {
	o.CanManageGroup = &v
}

// GetCanMentionGroup returns the CanMentionGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanMentionGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMentionGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMentionGroup
}

// GetCanMentionGroupOk returns a tuple with the CanMentionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanMentionGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMentionGroup) {
		return nil, false
	}
	return o.CanMentionGroup, true
}

// HasCanMentionGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanMentionGroup() bool {
	if o != nil && !IsNil(o.CanMentionGroup) {
		return true
	}

	return false
}

// SetCanMentionGroup gets a reference to the given GroupSettingValue and assigns it to the CanMentionGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanMentionGroup(v GroupSettingValue) {
	o.CanMentionGroup = &v
}

// GetCanRemoveMembersGroup returns the CanRemoveMembersGroup field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetCanRemoveMembersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanRemoveMembersGroup
}

// GetCanRemoveMembersGroupOk returns a tuple with the CanRemoveMembersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetCanRemoveMembersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanRemoveMembersGroup) {
		return nil, false
	}
	return o.CanRemoveMembersGroup, true
}

// HasCanRemoveMembersGroup returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasCanRemoveMembersGroup() bool {
	if o != nil && !IsNil(o.CanRemoveMembersGroup) {
		return true
	}

	return false
}

// SetCanRemoveMembersGroup gets a reference to the given GroupSettingValue and assigns it to the CanRemoveMembersGroup field.
func (o *RealmUserUpdateEvent4Data) SetCanRemoveMembersGroup(v GroupSettingValue) {
	o.CanRemoveMembersGroup = &v
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *RealmUserUpdateEvent4Data) GetDeactivated() bool {
	if o == nil || IsNil(o.Deactivated) {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserUpdateEvent4Data) GetDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deactivated) {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *RealmUserUpdateEvent4Data) HasDeactivated() bool {
	if o != nil && !IsNil(o.Deactivated) {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *RealmUserUpdateEvent4Data) SetDeactivated(v bool) {
	o.Deactivated = &v
}

func (o RealmUserUpdateEvent4Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmUserUpdateEvent4Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CanAddMembersGroup) {
		toSerialize["can_add_members_group"] = o.CanAddMembersGroup
	}
	if !IsNil(o.CanJoinGroup) {
		toSerialize["can_join_group"] = o.CanJoinGroup
	}
	if !IsNil(o.CanLeaveGroup) {
		toSerialize["can_leave_group"] = o.CanLeaveGroup
	}
	if !IsNil(o.CanManageGroup) {
		toSerialize["can_manage_group"] = o.CanManageGroup
	}
	if !IsNil(o.CanMentionGroup) {
		toSerialize["can_mention_group"] = o.CanMentionGroup
	}
	if !IsNil(o.CanRemoveMembersGroup) {
		toSerialize["can_remove_members_group"] = o.CanRemoveMembersGroup
	}
	if !IsNil(o.Deactivated) {
		toSerialize["deactivated"] = o.Deactivated
	}
	return toSerialize, nil
}

type NullableRealmUserUpdateEvent4Data struct {
	value *RealmUserUpdateEvent4Data
	isSet bool
}

func (v NullableRealmUserUpdateEvent4Data) Get() *RealmUserUpdateEvent4Data {
	return v.value
}

func (v *NullableRealmUserUpdateEvent4Data) Set(val *RealmUserUpdateEvent4Data) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmUserUpdateEvent4Data) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmUserUpdateEvent4Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmUserUpdateEvent4Data(val *RealmUserUpdateEvent4Data) *NullableRealmUserUpdateEvent4Data {
	return &NullableRealmUserUpdateEvent4Data{value: val, isSet: true}
}

func (v NullableRealmUserUpdateEvent4Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmUserUpdateEvent4Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
