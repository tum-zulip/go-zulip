/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduledMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledMessage{}

// ScheduledMessage struct for ScheduledMessage
type ScheduledMessage struct {
	ScheduledMessageId interface{} `json:"scheduled_message_id"`
	Type interface{} `json:"type"`
	To interface{} `json:"to"`
	Topic interface{} `json:"topic,omitempty"`
	Content interface{} `json:"content"`
	RenderedContent interface{} `json:"rendered_content"`
	ScheduledDeliveryTimestamp interface{} `json:"scheduled_delivery_timestamp"`
	Failed interface{} `json:"failed"`
}

type _ScheduledMessage ScheduledMessage

// NewScheduledMessage instantiates a new ScheduledMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledMessage(scheduledMessageId interface{}, type_ interface{}, to interface{}, content interface{}, renderedContent interface{}, scheduledDeliveryTimestamp interface{}, failed interface{}) *ScheduledMessage {
	this := ScheduledMessage{}
	this.ScheduledMessageId = scheduledMessageId
	this.Type = type_
	this.To = to
	this.Content = content
	this.RenderedContent = renderedContent
	this.ScheduledDeliveryTimestamp = scheduledDeliveryTimestamp
	this.Failed = failed
	return &this
}

// NewScheduledMessageWithDefaults instantiates a new ScheduledMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledMessageWithDefaults() *ScheduledMessage {
	this := ScheduledMessage{}
	return &this
}

// GetScheduledMessageId returns the ScheduledMessageId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetScheduledMessageId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ScheduledMessageId
}

// GetScheduledMessageIdOk returns a tuple with the ScheduledMessageId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetScheduledMessageIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ScheduledMessageId) {
		return nil, false
	}
	return &o.ScheduledMessageId, true
}

// SetScheduledMessageId sets field value
func (o *ScheduledMessage) SetScheduledMessageId(v interface{}) {
	o.ScheduledMessageId = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScheduledMessage) SetType(v interface{}) {
	o.Type = v
}

// GetTo returns the To field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetTo() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetToOk() (*interface{}, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *ScheduledMessage) SetTo(v interface{}) {
	o.To = v
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduledMessage) GetTopic() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetTopicOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return &o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ScheduledMessage) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given interface{} and assigns it to the Topic field.
func (o *ScheduledMessage) SetTopic(v interface{}) {
	o.Topic = v
}

// GetContent returns the Content field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ScheduledMessage) SetContent(v interface{}) {
	o.Content = v
}

// GetRenderedContent returns the RenderedContent field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetRenderedContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RenderedContent
}

// GetRenderedContentOk returns a tuple with the RenderedContent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetRenderedContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RenderedContent) {
		return nil, false
	}
	return &o.RenderedContent, true
}

// SetRenderedContent sets field value
func (o *ScheduledMessage) SetRenderedContent(v interface{}) {
	o.RenderedContent = v
}

// GetScheduledDeliveryTimestamp returns the ScheduledDeliveryTimestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetScheduledDeliveryTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ScheduledDeliveryTimestamp
}

// GetScheduledDeliveryTimestampOk returns a tuple with the ScheduledDeliveryTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetScheduledDeliveryTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ScheduledDeliveryTimestamp) {
		return nil, false
	}
	return &o.ScheduledDeliveryTimestamp, true
}

// SetScheduledDeliveryTimestamp sets field value
func (o *ScheduledMessage) SetScheduledDeliveryTimestamp(v interface{}) {
	o.ScheduledDeliveryTimestamp = v
}

// GetFailed returns the Failed field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ScheduledMessage) GetFailed() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduledMessage) GetFailedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *ScheduledMessage) SetFailed(v interface{}) {
	o.Failed = v
}

func (o ScheduledMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduledMessageId != nil {
		toSerialize["scheduled_message_id"] = o.ScheduledMessageId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.RenderedContent != nil {
		toSerialize["rendered_content"] = o.RenderedContent
	}
	if o.ScheduledDeliveryTimestamp != nil {
		toSerialize["scheduled_delivery_timestamp"] = o.ScheduledDeliveryTimestamp
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	return toSerialize, nil
}

func (o *ScheduledMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scheduled_message_id",
		"type",
		"to",
		"content",
		"rendered_content",
		"scheduled_delivery_timestamp",
		"failed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduledMessage := _ScheduledMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduledMessage)

	if err != nil {
		return err
	}

	*o = ScheduledMessage(varScheduledMessage)

	return err
}

type NullableScheduledMessage struct {
	value *ScheduledMessage
	isSet bool
}

func (v NullableScheduledMessage) Get() *ScheduledMessage {
	return v.value
}

func (v *NullableScheduledMessage) Set(val *ScheduledMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledMessage(val *ScheduledMessage) *NullableScheduledMessage {
	return &NullableScheduledMessage{value: val, isSet: true}
}

func (v NullableScheduledMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


