/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf38 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf38{}

// GetEvents200ResponseAllOfEventsInnerOneOf38 Event sent when a user stops typing a message.  Sent to all clients for users who would receive the message that was previously being typed, with the additional rule that typing notifications for channel messages are only sent to clients that included `stream_typing_notifications` in their [client capabilities][client-capabilities] when registering the event queue.  See [POST /typing](/api/set-typing-status) endpoint for more details.  **Changes**: Typing notifications for channel messages are new in Zulip 4.0 (feature level 58).  [client-capabilities]: /api/register-queue#parameter-client_capabilities 
type GetEvents200ResponseAllOfEventsInnerOneOf38 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// Type of message being composed. Must be `\"stream\"` or `\"direct\"`.  **Changes**: In Zulip 8.0 (feature level 215), replaced the value `\"private\"` with `\"direct\"`.  New in Zulip 4.0 (feature level 58). Previously all typing notifications were implicitly direct messages. 
	MessageType *string `json:"message_type,omitempty"`
	Sender *GetEvents200ResponseAllOfEventsInnerOneOf38Sender `json:"sender,omitempty"`
	// Only present if `message_type` is `\"direct\"`.  Array of dictionaries describing the set of users who would be recipients of the message that was previously being typed. Each dictionary contains details about one of the recipients. The sending user is guaranteed to appear among the recipients. 
	Recipients []GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner `json:"recipients,omitempty"`
	// Only present if `message_type` is `\"stream\"`.  The unique ID of the channel to which message is being typed.  **Changes**: New in Zulip 4.0 (feature level 58). Previously, typing notifications were only for direct messages. 
	StreamId *int32 `json:"stream_id,omitempty"`
	// Only present if `message_type` is `\"stream\"`.  Topic within the channel where the message is being typed.  **Changes**: New in Zulip 4.0 (feature level 58). Previously, typing notifications were only for direct messages. 
	Topic *string `json:"topic,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf38 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf38 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf38() *GetEvents200ResponseAllOfEventsInnerOneOf38 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf38{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf38WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf38 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf38WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf38 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf38{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetOp(v string) {
	o.Op = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetMessageType(v string) {
	o.MessageType = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetSender() GetEvents200ResponseAllOfEventsInnerOneOf38Sender {
	if o == nil || IsNil(o.Sender) {
		var ret GetEvents200ResponseAllOfEventsInnerOneOf38Sender
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetSenderOk() (*GetEvents200ResponseAllOfEventsInnerOneOf38Sender, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given GetEvents200ResponseAllOfEventsInnerOneOf38Sender and assigns it to the Sender field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetSender(v GetEvents200ResponseAllOfEventsInnerOneOf38Sender) {
	o.Sender = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetRecipients() []GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner {
	if o == nil || IsNil(o.Recipients) {
		var ret []GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetRecipientsOk() ([]GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner and assigns it to the Recipients field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetRecipients(v []GetEvents200ResponseAllOfEventsInnerOneOf38RecipientsInner) {
	o.Recipients = v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf38) SetTopic(v string) {
	o.Topic = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf38) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf38) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf38 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf38
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf38) Get() *GetEvents200ResponseAllOfEventsInnerOneOf38 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf38) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf38) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf38) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf38) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf38(val *GetEvents200ResponseAllOfEventsInnerOneOf38) *NullableGetEvents200ResponseAllOfEventsInnerOneOf38 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf38{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf38) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf38) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


