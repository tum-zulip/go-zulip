/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf33 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf33{}

// GetEvents200ResponseAllOfEventsInnerOneOf33 Event sent to a user's clients when that user's set of configured [muted users](/api/mute-user) have changed.  **Changes**: New in Zulip 4.0 (feature level 48).
type GetEvents200ResponseAllOfEventsInnerOneOf33 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// A list of dictionaries where each dictionary describes a muted user.
	MutedUsers []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner `json:"muted_users,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf33 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf33 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf33() *GetEvents200ResponseAllOfEventsInnerOneOf33 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf33{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf33WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf33 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf33WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf33 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf33{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) SetType(v string) {
	o.Type = &v
}

// GetMutedUsers returns the MutedUsers field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetMutedUsers() []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner {
	if o == nil || IsNil(o.MutedUsers) {
		var ret []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner
		return ret
	}
	return o.MutedUsers
}

// GetMutedUsersOk returns a tuple with the MutedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) GetMutedUsersOk() ([]GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner, bool) {
	if o == nil || IsNil(o.MutedUsers) {
		return nil, false
	}
	return o.MutedUsers, true
}

// HasMutedUsers returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) HasMutedUsers() bool {
	if o != nil && !IsNil(o.MutedUsers) {
		return true
	}

	return false
}

// SetMutedUsers gets a reference to the given []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner and assigns it to the MutedUsers field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf33) SetMutedUsers(v []GetEvents200ResponseAllOfEventsInnerOneOf33MutedUsersInner) {
	o.MutedUsers = v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf33) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf33) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MutedUsers) {
		toSerialize["muted_users"] = o.MutedUsers
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf33 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf33
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf33) Get() *GetEvents200ResponseAllOfEventsInnerOneOf33 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf33) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf33) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf33) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf33) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf33(val *GetEvents200ResponseAllOfEventsInnerOneOf33) *NullableGetEvents200ResponseAllOfEventsInnerOneOf33 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf33{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf33) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf33) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
