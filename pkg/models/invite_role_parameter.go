/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// InviteRoleParameter The [organization-level role](zulip.com/api/roles-and-permissions of the user that is created when the invitation is accepted. Possible values are:  - 100 = Organization owner - 200 = Organization administrator - 300 = Organization moderator - 400 = Member - 600 = Guest  Users can only create invitation links for [roles with equal or stricter restrictions](zulip.com/api/roles-and-permissions#permission-levels as their own. For example, a moderator cannot invite someone to be an owner or administrator, but they can invite them to be a moderator or member.  **Changes**: In Zulip 4.0 (feature level 61), added support for inviting users as moderators.
type InviteRoleParameter int32

// List of InviteRoleParameter
const (
	INVITEROLEPARAMETER__100 InviteRoleParameter = 100
	INVITEROLEPARAMETER__200 InviteRoleParameter = 200
	INVITEROLEPARAMETER__300 InviteRoleParameter = 300
	INVITEROLEPARAMETER__400 InviteRoleParameter = 400
	INVITEROLEPARAMETER__600 InviteRoleParameter = 600
)

// All allowed values of InviteRoleParameter enum
var AllowedInviteRoleParameterEnumValues = []InviteRoleParameter{
	100,
	200,
	300,
	400,
	600,
}

func (v *InviteRoleParameter) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InviteRoleParameter(value)
	for _, existing := range AllowedInviteRoleParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InviteRoleParameter", value)
}

// NewInviteRoleParameterFromValue returns a pointer to a valid InviteRoleParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInviteRoleParameterFromValue(v int32) (*InviteRoleParameter, error) {
	ev := InviteRoleParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InviteRoleParameter: valid values are %v", v, AllowedInviteRoleParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InviteRoleParameter) IsValid() bool {
	for _, existing := range AllowedInviteRoleParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InviteRoleParameter value
func (v InviteRoleParameter) Ptr() *InviteRoleParameter {
	return &v
}

type NullableInviteRoleParameter struct {
	value *InviteRoleParameter
	isSet bool
}

func (v NullableInviteRoleParameter) Get() *InviteRoleParameter {
	return v.value
}

func (v *NullableInviteRoleParameter) Set(val *InviteRoleParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteRoleParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteRoleParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteRoleParameter(val *InviteRoleParameter) *NullableInviteRoleParameter {
	return &NullableInviteRoleParameter{value: val, isSet: true}
}

func (v NullableInviteRoleParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteRoleParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
