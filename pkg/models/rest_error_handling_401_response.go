/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RestErrorHandling401Response - struct for RestErrorHandling401Response
type RestErrorHandling401Response struct {
	RealmDeactivatedError *RealmDeactivatedError
	UserDeactivatedError *UserDeactivatedError
}

// RealmDeactivatedErrorAsRestErrorHandling401Response is a convenience function that returns RealmDeactivatedError wrapped in RestErrorHandling401Response
func RealmDeactivatedErrorAsRestErrorHandling401Response(v *RealmDeactivatedError) RestErrorHandling401Response {
	return RestErrorHandling401Response{
		RealmDeactivatedError: v,
	}
}

// UserDeactivatedErrorAsRestErrorHandling401Response is a convenience function that returns UserDeactivatedError wrapped in RestErrorHandling401Response
func UserDeactivatedErrorAsRestErrorHandling401Response(v *UserDeactivatedError) RestErrorHandling401Response {
	return RestErrorHandling401Response{
		UserDeactivatedError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RestErrorHandling401Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RealmDeactivatedError
	err = newStrictDecoder(data).Decode(&dst.RealmDeactivatedError)
	if err == nil {
		jsonRealmDeactivatedError, _ := json.Marshal(dst.RealmDeactivatedError)
		if string(jsonRealmDeactivatedError) == "{}" { // empty struct
			dst.RealmDeactivatedError = nil
		} else {
			if err = validator.Validate(dst.RealmDeactivatedError); err != nil {
				dst.RealmDeactivatedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmDeactivatedError = nil
	}

	// try to unmarshal data into UserDeactivatedError
	err = newStrictDecoder(data).Decode(&dst.UserDeactivatedError)
	if err == nil {
		jsonUserDeactivatedError, _ := json.Marshal(dst.UserDeactivatedError)
		if string(jsonUserDeactivatedError) == "{}" { // empty struct
			dst.UserDeactivatedError = nil
		} else {
			if err = validator.Validate(dst.UserDeactivatedError); err != nil {
				dst.UserDeactivatedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserDeactivatedError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RealmDeactivatedError = nil
		dst.UserDeactivatedError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RestErrorHandling401Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RestErrorHandling401Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RestErrorHandling401Response) MarshalJSON() ([]byte, error) {
	if src.RealmDeactivatedError != nil {
		return json.Marshal(&src.RealmDeactivatedError)
	}

	if src.UserDeactivatedError != nil {
		return json.Marshal(&src.UserDeactivatedError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RestErrorHandling401Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RealmDeactivatedError != nil {
		return obj.RealmDeactivatedError
	}

	if obj.UserDeactivatedError != nil {
		return obj.UserDeactivatedError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RestErrorHandling401Response) GetActualInstanceValue() (interface{}) {
	if obj.RealmDeactivatedError != nil {
		return *obj.RealmDeactivatedError
	}

	if obj.UserDeactivatedError != nil {
		return *obj.UserDeactivatedError
	}

	// all schemas are nil
	return nil
}

type NullableRestErrorHandling401Response struct {
	value *RestErrorHandling401Response
	isSet bool
}

func (v NullableRestErrorHandling401Response) Get() *RestErrorHandling401Response {
	return v.value
}

func (v *NullableRestErrorHandling401Response) Set(val *RestErrorHandling401Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRestErrorHandling401Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRestErrorHandling401Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestErrorHandling401Response(val *RestErrorHandling401Response) *NullableRestErrorHandling401Response {
	return &NullableRestErrorHandling401Response{value: val, isSet: true}
}

func (v NullableRestErrorHandling401Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestErrorHandling401Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


