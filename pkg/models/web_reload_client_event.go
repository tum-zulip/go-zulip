/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the WebReloadClientEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebReloadClientEvent{}

// WebReloadClientEvent An event which signals the official Zulip web/desktop app to update, by reloading the page and fetching a new queue; this will generally follow a `restart` event. Clients which do not obtain their code from the server (e.g. mobile and terminal clients, which store their code locally) should ignore this event.  Clients choosing to reload the application must implement a random delay strategy to spread such restarts over 5 or more minutes to avoid creating a synchronized thundering herd effect.  **Changes**: New in Zulip 9.0 (feature level 240).
type WebReloadClientEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Whether the client should fetch a new event queue immediately, rather than using a backoff strategy to avoid thundering herds. A Zulip development server uses this parameter to reload clients immediately.
	Immediate *bool `json:"immediate,omitempty"`
}

// NewSubscriptionRemoveEvent6 instantiates a new WebReloadClientEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRemoveEvent6() *WebReloadClientEvent {
	this := WebReloadClientEvent{}
	return &this
}

// NewSubscriptionRemoveEvent6WithDefaults instantiates a new WebReloadClientEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRemoveEvent6WithDefaults() *WebReloadClientEvent {
	this := WebReloadClientEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WebReloadClientEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebReloadClientEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WebReloadClientEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WebReloadClientEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebReloadClientEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebReloadClientEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebReloadClientEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebReloadClientEvent) SetType(v string) {
	o.Type = &v
}

// GetImmediate returns the Immediate field value if set, zero value otherwise.
func (o *WebReloadClientEvent) GetImmediate() bool {
	if o == nil || IsNil(o.Immediate) {
		var ret bool
		return ret
	}
	return *o.Immediate
}

// GetImmediateOk returns a tuple with the Immediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebReloadClientEvent) GetImmediateOk() (*bool, bool) {
	if o == nil || IsNil(o.Immediate) {
		return nil, false
	}
	return o.Immediate, true
}

// HasImmediate returns a boolean if a field has been set.
func (o *WebReloadClientEvent) HasImmediate() bool {
	if o != nil && !IsNil(o.Immediate) {
		return true
	}

	return false
}

// SetImmediate gets a reference to the given bool and assigns it to the Immediate field.
func (o *WebReloadClientEvent) SetImmediate(v bool) {
	o.Immediate = &v
}

func (o WebReloadClientEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebReloadClientEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Immediate) {
		toSerialize["immediate"] = o.Immediate
	}
	return toSerialize, nil
}

type NullableSubscriptionRemoveEvent6 struct {
	value *WebReloadClientEvent
	isSet bool
}

func (v NullableSubscriptionRemoveEvent6) Get() *WebReloadClientEvent {
	return v.value
}

func (v *NullableSubscriptionRemoveEvent6) Set(val *WebReloadClientEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRemoveEvent6) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRemoveEvent6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRemoveEvent6(val *WebReloadClientEvent) *NullableSubscriptionRemoveEvent6 {
	return &NullableSubscriptionRemoveEvent6{value: val, isSet: true}
}

func (v NullableSubscriptionRemoveEvent6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRemoveEvent6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
