/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SubscriptionPeerAddEvent4Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPeerAddEvent4Data{}

// SubscriptionPeerAddEvent4Data Dictionary containing the changed details of the channel folder.
type SubscriptionPeerAddEvent4Data struct {
	// The new name of the channel folder. Only present if the channel folder's name changed.
	Name *string `json:"name,omitempty"`
	// The new description of the channel folder. Only present if the description changed.  See [Markdown message formatting](/api/message-formatting) for details on Zulip's HTML format.
	Description *string `json:"description,omitempty"`
	// The new rendered description of the channel folder. Only present if the description changed.
	RenderedDescription *string `json:"rendered_description,omitempty"`
	// Whether the channel folder is archived or not. Only present if the channel folder is archived or unarchived.
	IsArchived *bool `json:"is_archived,omitempty"`
}

// NewSubscriptionPeerAddEvent4Data instantiates a new SubscriptionPeerAddEvent4Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPeerAddEvent4Data() *SubscriptionPeerAddEvent4Data {
	this := SubscriptionPeerAddEvent4Data{}
	return &this
}

// NewSubscriptionPeerAddEvent4DataWithDefaults instantiates a new SubscriptionPeerAddEvent4Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPeerAddEvent4DataWithDefaults() *SubscriptionPeerAddEvent4Data {
	this := SubscriptionPeerAddEvent4Data{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent4Data) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent4Data) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent4Data) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubscriptionPeerAddEvent4Data) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent4Data) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent4Data) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent4Data) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubscriptionPeerAddEvent4Data) SetDescription(v string) {
	o.Description = &v
}

// GetRenderedDescription returns the RenderedDescription field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent4Data) GetRenderedDescription() string {
	if o == nil || IsNil(o.RenderedDescription) {
		var ret string
		return ret
	}
	return *o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent4Data) GetRenderedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RenderedDescription) {
		return nil, false
	}
	return o.RenderedDescription, true
}

// HasRenderedDescription returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent4Data) HasRenderedDescription() bool {
	if o != nil && !IsNil(o.RenderedDescription) {
		return true
	}

	return false
}

// SetRenderedDescription gets a reference to the given string and assigns it to the RenderedDescription field.
func (o *SubscriptionPeerAddEvent4Data) SetRenderedDescription(v string) {
	o.RenderedDescription = &v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *SubscriptionPeerAddEvent4Data) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPeerAddEvent4Data) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *SubscriptionPeerAddEvent4Data) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *SubscriptionPeerAddEvent4Data) SetIsArchived(v bool) {
	o.IsArchived = &v
}

func (o SubscriptionPeerAddEvent4Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPeerAddEvent4Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RenderedDescription) {
		toSerialize["rendered_description"] = o.RenderedDescription
	}
	if !IsNil(o.IsArchived) {
		toSerialize["is_archived"] = o.IsArchived
	}
	return toSerialize, nil
}

type NullableSubscriptionPeerAddEvent4Data struct {
	value *SubscriptionPeerAddEvent4Data
	isSet bool
}

func (v NullableSubscriptionPeerAddEvent4Data) Get() *SubscriptionPeerAddEvent4Data {
	return v.value
}

func (v *NullableSubscriptionPeerAddEvent4Data) Set(val *SubscriptionPeerAddEvent4Data) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPeerAddEvent4Data) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPeerAddEvent4Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPeerAddEvent4Data(val *SubscriptionPeerAddEvent4Data) *NullableSubscriptionPeerAddEvent4Data {
	return &NullableSubscriptionPeerAddEvent4Data{value: val, isSet: true}
}

func (v NullableSubscriptionPeerAddEvent4Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPeerAddEvent4Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
