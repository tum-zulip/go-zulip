/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateSubscriptionSettingsRequestSubscriptionDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptionSettingsRequestSubscriptionDataInner{}

// UpdateSubscriptionSettingsRequestSubscriptionDataInner struct for UpdateSubscriptionSettingsRequestSubscriptionDataInner
type UpdateSubscriptionSettingsRequestSubscriptionDataInner struct {
	// The unique ID of a channel.
	StreamId int32 `json:"stream_id"`
	// One of the channel properties described below:  - `\"color\"`: The hex value of the user's display color for the channel.  - `\"is_muted\"`: Whether the channel is [muted](/help/mute-a-channel).<br>   **Changes**: As of Zulip 6.0 (feature level 139), updating either   `\"is_muted\"` or `\"in_home_view\"` generates two [subscription update   events](/api/get-events#subscription-update), one for each property,   that are sent to clients. Prior to this feature level, updating either   property only generated a subscription update event for   `\"in_home_view\"`. <br>   Prior to Zulip 2.1.0, this feature was represented   by the more confusingly named `\"in_home_view\"` (with the   opposite value: `in_home_view=!is_muted`); for   backwards-compatibility, modern Zulip still accepts that property.  - `\"pin_to_top\"`: Whether to pin the channel at the top of the channel list.  - `\"desktop_notifications\"`: Whether to show desktop notifications   for all messages sent to the channel.  - `\"audible_notifications\"`: Whether to play a sound   notification for all messages sent to the channel.  - `\"push_notifications\"`: Whether to trigger a mobile push   notification for all messages sent to the channel.  - `\"email_notifications\"`: Whether to trigger an email   notification for all messages sent to the channel.  - `\"wildcard_mentions_notify\"`: Whether wildcard mentions trigger   notifications as though they were personal mentions in this channel.
	Property string                `json:"property"`
	Value    SubscriptionDataValue `json:"value"`
}

type _UpdateSubscriptionSettingsRequestSubscriptionDataInner UpdateSubscriptionSettingsRequestSubscriptionDataInner

// NewUpdateSubscriptionSettingsRequestSubscriptionDataInner instantiates a new UpdateSubscriptionSettingsRequestSubscriptionDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriptionSettingsRequestSubscriptionDataInner(streamId int32, property string, value SubscriptionDataValue) *UpdateSubscriptionSettingsRequestSubscriptionDataInner {
	this := UpdateSubscriptionSettingsRequestSubscriptionDataInner{}
	this.StreamId = streamId
	this.Property = property
	this.Value = value
	return &this
}

// NewUpdateSubscriptionSettingsRequestSubscriptionDataInnerWithDefaults instantiates a new UpdateSubscriptionSettingsRequestSubscriptionDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptionSettingsRequestSubscriptionDataInnerWithDefaults() *UpdateSubscriptionSettingsRequestSubscriptionDataInner {
	this := UpdateSubscriptionSettingsRequestSubscriptionDataInner{}
	return &this
}

// GetStreamId returns the StreamId field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetStreamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetStreamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) SetStreamId(v int32) {
	o.StreamId = v
}

// GetProperty returns the Property field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) SetProperty(v string) {
	o.Property = v
}

// GetValue returns the Value field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetValue() SubscriptionDataValue {
	if o == nil {
		var ret SubscriptionDataValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) GetValueOk() (*SubscriptionDataValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) SetValue(v SubscriptionDataValue) {
	o.Value = v
}

func (o UpdateSubscriptionSettingsRequestSubscriptionDataInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptionSettingsRequestSubscriptionDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stream_id"] = o.StreamId
	toSerialize["property"] = o.Property
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *UpdateSubscriptionSettingsRequestSubscriptionDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stream_id",
		"property",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubscriptionSettingsRequestSubscriptionDataInner := _UpdateSubscriptionSettingsRequestSubscriptionDataInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSubscriptionSettingsRequestSubscriptionDataInner)

	if err != nil {
		return err
	}

	*o = UpdateSubscriptionSettingsRequestSubscriptionDataInner(varUpdateSubscriptionSettingsRequestSubscriptionDataInner)

	return err
}

type NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner struct {
	value *UpdateSubscriptionSettingsRequestSubscriptionDataInner
	isSet bool
}

func (v NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) Get() *UpdateSubscriptionSettingsRequestSubscriptionDataInner {
	return v.value
}

func (v *NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) Set(val *UpdateSubscriptionSettingsRequestSubscriptionDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptionSettingsRequestSubscriptionDataInner(val *UpdateSubscriptionSettingsRequestSubscriptionDataInner) *NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner {
	return &NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner{value: val, isSet: true}
}

func (v NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptionSettingsRequestSubscriptionDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
