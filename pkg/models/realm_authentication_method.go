/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmAuthenticationMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmAuthenticationMethod{}

// RealmAuthenticationMethod Dictionary describing the properties of an authentication method for the organization - its enabled status and availability for use by the organization.
type RealmAuthenticationMethod struct {
	// Boolean describing whether the authentication method (i.e. its key) is enabled in this organization.
	Enabled *bool `json:"enabled,omitempty"`
	// Boolean describing whether the authentication method is available for use. If false, the organization is not eligible to enable the authentication method.
	Available *bool `json:"available,omitempty"`
	// Reason why the authentication method is unavailable. This field is optional and is only present when 'available' is false.
	UnavailableReason *string `json:"unavailable_reason,omitempty"`
}

// NewRealmAuthenticationMethod instantiates a new RealmAuthenticationMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmAuthenticationMethod() *RealmAuthenticationMethod {
	this := RealmAuthenticationMethod{}
	return &this
}

// NewRealmAuthenticationMethodWithDefaults instantiates a new RealmAuthenticationMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmAuthenticationMethodWithDefaults() *RealmAuthenticationMethod {
	this := RealmAuthenticationMethod{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RealmAuthenticationMethod) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmAuthenticationMethod) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RealmAuthenticationMethod) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RealmAuthenticationMethod) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *RealmAuthenticationMethod) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmAuthenticationMethod) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *RealmAuthenticationMethod) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *RealmAuthenticationMethod) SetAvailable(v bool) {
	o.Available = &v
}

// GetUnavailableReason returns the UnavailableReason field value if set, zero value otherwise.
func (o *RealmAuthenticationMethod) GetUnavailableReason() string {
	if o == nil || IsNil(o.UnavailableReason) {
		var ret string
		return ret
	}
	return *o.UnavailableReason
}

// GetUnavailableReasonOk returns a tuple with the UnavailableReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmAuthenticationMethod) GetUnavailableReasonOk() (*string, bool) {
	if o == nil || IsNil(o.UnavailableReason) {
		return nil, false
	}
	return o.UnavailableReason, true
}

// HasUnavailableReason returns a boolean if a field has been set.
func (o *RealmAuthenticationMethod) HasUnavailableReason() bool {
	if o != nil && !IsNil(o.UnavailableReason) {
		return true
	}

	return false
}

// SetUnavailableReason gets a reference to the given string and assigns it to the UnavailableReason field.
func (o *RealmAuthenticationMethod) SetUnavailableReason(v string) {
	o.UnavailableReason = &v
}

func (o RealmAuthenticationMethod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmAuthenticationMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.UnavailableReason) {
		toSerialize["unavailable_reason"] = o.UnavailableReason
	}
	return toSerialize, nil
}

type NullableRealmAuthenticationMethod struct {
	value *RealmAuthenticationMethod
	isSet bool
}

func (v NullableRealmAuthenticationMethod) Get() *RealmAuthenticationMethod {
	return v.value
}

func (v *NullableRealmAuthenticationMethod) Set(val *RealmAuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmAuthenticationMethod(val *RealmAuthenticationMethod) *NullableRealmAuthenticationMethod {
	return &NullableRealmAuthenticationMethod{value: val, isSet: true}
}

func (v NullableRealmAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
