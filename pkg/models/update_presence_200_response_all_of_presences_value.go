/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// UpdatePresence200ResponseAllOfPresencesValue - Will be one of these two formats (modern or legacy) for user presence data:
type UpdatePresence200ResponseAllOfPresencesValue struct {
	ModernPresenceFormat               *ModernPresenceFormat
	MapmapOfStringLegacyPresenceFormat *map[string]LegacyPresenceFormat
}

// ModernPresenceFormatAsUpdatePresence200ResponseAllOfPresencesValue is a convenience function that returns ModernPresenceFormat wrapped in UpdatePresence200ResponseAllOfPresencesValue
func ModernPresenceFormatAsUpdatePresence200ResponseAllOfPresencesValue(v *ModernPresenceFormat) UpdatePresence200ResponseAllOfPresencesValue {
	return UpdatePresence200ResponseAllOfPresencesValue{
		ModernPresenceFormat: v,
	}
}

// map[string]LegacyPresenceFormatAsUpdatePresence200ResponseAllOfPresencesValue is a convenience function that returns map[string]LegacyPresenceFormat wrapped in UpdatePresence200ResponseAllOfPresencesValue
func MapmapOfStringLegacyPresenceFormatAsUpdatePresence200ResponseAllOfPresencesValue(v *map[string]LegacyPresenceFormat) UpdatePresence200ResponseAllOfPresencesValue {
	return UpdatePresence200ResponseAllOfPresencesValue{
		MapmapOfStringLegacyPresenceFormat: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdatePresence200ResponseAllOfPresencesValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ModernPresenceFormat
	err = newStrictDecoder(data).Decode(&dst.ModernPresenceFormat)
	if err == nil {
		jsonModernPresenceFormat, _ := json.Marshal(dst.ModernPresenceFormat)
		if string(jsonModernPresenceFormat) == "{}" { // empty struct
			dst.ModernPresenceFormat = nil
		} else {
			if err = validator.Validate(dst.ModernPresenceFormat); err != nil {
				dst.ModernPresenceFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.ModernPresenceFormat = nil
	}

	// try to unmarshal data into MapmapOfStringLegacyPresenceFormat
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringLegacyPresenceFormat)
	if err == nil {
		jsonMapmapOfStringLegacyPresenceFormat, _ := json.Marshal(dst.MapmapOfStringLegacyPresenceFormat)
		if string(jsonMapmapOfStringLegacyPresenceFormat) == "{}" { // empty struct
			dst.MapmapOfStringLegacyPresenceFormat = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringLegacyPresenceFormat); err != nil {
				dst.MapmapOfStringLegacyPresenceFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringLegacyPresenceFormat = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ModernPresenceFormat = nil
		dst.MapmapOfStringLegacyPresenceFormat = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdatePresence200ResponseAllOfPresencesValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdatePresence200ResponseAllOfPresencesValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdatePresence200ResponseAllOfPresencesValue) MarshalJSON() ([]byte, error) {
	if src.ModernPresenceFormat != nil {
		return json.Marshal(&src.ModernPresenceFormat)
	}

	if src.MapmapOfStringLegacyPresenceFormat != nil {
		return json.Marshal(&src.MapmapOfStringLegacyPresenceFormat)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdatePresence200ResponseAllOfPresencesValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ModernPresenceFormat != nil {
		return obj.ModernPresenceFormat
	}

	if obj.MapmapOfStringLegacyPresenceFormat != nil {
		return obj.MapmapOfStringLegacyPresenceFormat
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdatePresence200ResponseAllOfPresencesValue) GetActualInstanceValue() interface{} {
	if obj.ModernPresenceFormat != nil {
		return *obj.ModernPresenceFormat
	}

	if obj.MapmapOfStringLegacyPresenceFormat != nil {
		return *obj.MapmapOfStringLegacyPresenceFormat
	}

	// all schemas are nil
	return nil
}

type NullableUpdatePresence200ResponseAllOfPresencesValue struct {
	value *UpdatePresence200ResponseAllOfPresencesValue
	isSet bool
}

func (v NullableUpdatePresence200ResponseAllOfPresencesValue) Get() *UpdatePresence200ResponseAllOfPresencesValue {
	return v.value
}

func (v *NullableUpdatePresence200ResponseAllOfPresencesValue) Set(val *UpdatePresence200ResponseAllOfPresencesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePresence200ResponseAllOfPresencesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePresence200ResponseAllOfPresencesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePresence200ResponseAllOfPresencesValue(val *UpdatePresence200ResponseAllOfPresencesValue) *NullableUpdatePresence200ResponseAllOfPresencesValue {
	return &NullableUpdatePresence200ResponseAllOfPresencesValue{value: val, isSet: true}
}

func (v NullableUpdatePresence200ResponseAllOfPresencesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePresence200ResponseAllOfPresencesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
