/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Bot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bot{}

// Bot struct for Bot
type Bot struct {
	// The user ID of the bot.
	UserId *int32 `json:"user_id,omitempty"`
	// The full name of the bot.
	FullName *string `json:"full_name,omitempty"`
	// The API key of the bot which it uses to make API requests.
	ApiKey                      *string     `json:"api_key,omitempty"`
	DefaultSendingStream        interface{} `json:"default_sending_stream,omitempty"`
	DefaultEventsRegisterStream interface{} `json:"default_events_register_stream,omitempty"`
	// Whether the bot can send messages to all channels by default.
	DefaultAllPublicStreams *bool `json:"default_all_public_streams,omitempty"`
	// The URL of the bot's avatar.
	AvatarUrl *string     `json:"avatar_url,omitempty"`
	OwnerId   interface{} `json:"owner_id,omitempty"`
	// An array containing extra configuration fields only relevant for outgoing webhook bots and embedded bots. This is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change.
	Services []BotData `json:"services,omitempty"`
	// The email of the bot.
	Email *string `json:"email,omitempty"`
	// An integer describing the type of bot:  - `1` for a `Generic` bot. - `2` for an `Incoming webhook` bot. - `3` for an `Outgoing webhook` bot. - `4` for an `Embedded` bot.
	BotType *BotType `json:"bot_type,omitempty"`
	// A boolean describing whether the user account has been deactivated.
	IsActive *bool `json:"is_active,omitempty"`
}

// NewBot instantiates a new Bot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBot() *Bot {
	this := Bot{}
	return &this
}

// NewBotWithDefaults instantiates a new Bot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBotWithDefaults() *Bot {
	this := Bot{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Bot) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Bot) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *Bot) SetUserId(v int32) {
	o.UserId = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *Bot) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *Bot) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *Bot) SetFullName(v string) {
	o.FullName = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *Bot) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *Bot) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *Bot) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetDefaultSendingStream returns the DefaultSendingStream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bot) GetDefaultSendingStream() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DefaultSendingStream
}

// GetDefaultSendingStreamOk returns a tuple with the DefaultSendingStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bot) GetDefaultSendingStreamOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DefaultSendingStream) {
		return nil, false
	}
	return &o.DefaultSendingStream, true
}

// HasDefaultSendingStream returns a boolean if a field has been set.
func (o *Bot) HasDefaultSendingStream() bool {
	if o != nil && !IsNil(o.DefaultSendingStream) {
		return true
	}

	return false
}

// SetDefaultSendingStream gets a reference to the given interface{} and assigns it to the DefaultSendingStream field.
func (o *Bot) SetDefaultSendingStream(v interface{}) {
	o.DefaultSendingStream = v
}

// GetDefaultEventsRegisterStream returns the DefaultEventsRegisterStream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bot) GetDefaultEventsRegisterStream() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DefaultEventsRegisterStream
}

// GetDefaultEventsRegisterStreamOk returns a tuple with the DefaultEventsRegisterStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bot) GetDefaultEventsRegisterStreamOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DefaultEventsRegisterStream) {
		return nil, false
	}
	return &o.DefaultEventsRegisterStream, true
}

// HasDefaultEventsRegisterStream returns a boolean if a field has been set.
func (o *Bot) HasDefaultEventsRegisterStream() bool {
	if o != nil && !IsNil(o.DefaultEventsRegisterStream) {
		return true
	}

	return false
}

// SetDefaultEventsRegisterStream gets a reference to the given interface{} and assigns it to the DefaultEventsRegisterStream field.
func (o *Bot) SetDefaultEventsRegisterStream(v interface{}) {
	o.DefaultEventsRegisterStream = v
}

// GetDefaultAllPublicStreams returns the DefaultAllPublicStreams field value if set, zero value otherwise.
func (o *Bot) GetDefaultAllPublicStreams() bool {
	if o == nil || IsNil(o.DefaultAllPublicStreams) {
		var ret bool
		return ret
	}
	return *o.DefaultAllPublicStreams
}

// GetDefaultAllPublicStreamsOk returns a tuple with the DefaultAllPublicStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetDefaultAllPublicStreamsOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultAllPublicStreams) {
		return nil, false
	}
	return o.DefaultAllPublicStreams, true
}

// HasDefaultAllPublicStreams returns a boolean if a field has been set.
func (o *Bot) HasDefaultAllPublicStreams() bool {
	if o != nil && !IsNil(o.DefaultAllPublicStreams) {
		return true
	}

	return false
}

// SetDefaultAllPublicStreams gets a reference to the given bool and assigns it to the DefaultAllPublicStreams field.
func (o *Bot) SetDefaultAllPublicStreams(v bool) {
	o.DefaultAllPublicStreams = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *Bot) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *Bot) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *Bot) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bot) GetOwnerId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bot) GetOwnerIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return &o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *Bot) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given interface{} and assigns it to the OwnerId field.
func (o *Bot) SetOwnerId(v interface{}) {
	o.OwnerId = v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *Bot) GetServices() []BotData {
	if o == nil || IsNil(o.Services) {
		var ret []BotData
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetServicesOk() ([]BotData, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Bot) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []BotData and assigns it to the Services field.
func (o *Bot) SetServices(v []BotData) {
	o.Services = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Bot) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Bot) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Bot) SetEmail(v string) {
	o.Email = &v
}

// GetBotType returns the BotType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bot) GetBotType() BotType {
	if o == nil || IsNil(o.BotType) {
		var ret BotType
		return ret
	}
	return *o.BotType
}

// GetBotTypeOk returns a tuple with the BotType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bot) GetBotTypeOk() (*BotType, bool) {
	if o == nil {
		return nil, false
	}
	return o.BotType, true
}

// HasBotType returns a boolean if a field has been set.
func (o *Bot) HasBotType() bool {
	if o != nil && !IsNil(o.BotType) {
		return true
	}

	return false
}

// SetBotType gets a reference to the given NullableInt32 and assigns it to the BotType field.
func (o *Bot) SetBotType(v BotType) {
	o.BotType = &v
}

// SetBotTypeNil sets the value for BotType to be an explicit nil
func (o *Bot) SetBotTypeNil() {
	o.BotType = nil
}

// UnsetBotType ensures that no value is present for BotType, not even an explicit nil
func (o *Bot) UnsetBotType() {
	o.BotType = nil
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *Bot) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *Bot) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *Bot) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o Bot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if o.DefaultSendingStream != nil {
		toSerialize["default_sending_stream"] = o.DefaultSendingStream
	}
	if o.DefaultEventsRegisterStream != nil {
		toSerialize["default_events_register_stream"] = o.DefaultEventsRegisterStream
	}
	if !IsNil(o.DefaultAllPublicStreams) {
		toSerialize["default_all_public_streams"] = o.DefaultAllPublicStreams
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.OwnerId != nil {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.BotType) {
		toSerialize["bot_type"] = o.BotType
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	return toSerialize, nil
}

type NullableBot struct {
	value *Bot
	isSet bool
}

func (v NullableBot) Get() *Bot {
	return v.value
}

func (v *NullableBot) Set(val *Bot) {
	v.value = val
	v.isSet = true
}

func (v NullableBot) IsSet() bool {
	return v.isSet
}

func (v *NullableBot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBot(val *Bot) *NullableBot {
	return &NullableBot{value: val, isSet: true}
}

func (v NullableBot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
