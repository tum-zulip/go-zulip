/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// MessagesBaseDisplayRecipient - Data on the recipient of the message; either the name of a channel or a dictionary containing basic data on the users who received the message.
type MessagesBaseDisplayRecipient struct {
	ArrayOfMessagesBaseDisplayRecipientOneOfInner *[]MessagesBaseDisplayRecipientOneOfInner
	String                                        *string
}

// []MessagesBaseDisplayRecipientOneOfInnerAsMessagesBaseDisplayRecipient is a convenience function that returns []MessagesBaseDisplayRecipientOneOfInner wrapped in MessagesBaseDisplayRecipient
func MessagesBaseRecipientFromInnerArray(v *[]MessagesBaseDisplayRecipientOneOfInner) MessagesBaseDisplayRecipient {
	return MessagesBaseDisplayRecipient{
		ArrayOfMessagesBaseDisplayRecipientOneOfInner: v,
	}
}

// stringAsMessagesBaseDisplayRecipient is a convenience function that returns string wrapped in MessagesBaseDisplayRecipient
func StringAsMessagesBaseDisplayRecipient(v *string) MessagesBaseDisplayRecipient {
	return MessagesBaseDisplayRecipient{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessagesBaseDisplayRecipient) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfMessagesBaseDisplayRecipientOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner)
	if err == nil {
		jsonArrayOfMessagesBaseDisplayRecipientOneOfInner, _ := json.Marshal(dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner)
		if string(jsonArrayOfMessagesBaseDisplayRecipientOneOfInner) == "{}" { // empty struct
			dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner); err != nil {
				dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfMessagesBaseDisplayRecipientOneOfInner = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessagesBaseDisplayRecipient)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessagesBaseDisplayRecipient)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessagesBaseDisplayRecipient) MarshalJSON() ([]byte, error) {
	if src.ArrayOfMessagesBaseDisplayRecipientOneOfInner != nil {
		return json.Marshal(&src.ArrayOfMessagesBaseDisplayRecipientOneOfInner)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessagesBaseDisplayRecipient) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfMessagesBaseDisplayRecipientOneOfInner != nil {
		return obj.ArrayOfMessagesBaseDisplayRecipientOneOfInner
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MessagesBaseDisplayRecipient) GetActualInstanceValue() interface{} {
	if obj.ArrayOfMessagesBaseDisplayRecipientOneOfInner != nil {
		return *obj.ArrayOfMessagesBaseDisplayRecipientOneOfInner
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableMessagesBaseDisplayRecipient struct {
	value *MessagesBaseDisplayRecipient
	isSet bool
}

func (v NullableMessagesBaseDisplayRecipient) Get() *MessagesBaseDisplayRecipient {
	return v.value
}

func (v *NullableMessagesBaseDisplayRecipient) Set(val *MessagesBaseDisplayRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagesBaseDisplayRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagesBaseDisplayRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagesBaseDisplayRecipient(val *MessagesBaseDisplayRecipient) *NullableMessagesBaseDisplayRecipient {
	return &NullableMessagesBaseDisplayRecipient{value: val, isSet: true}
}

func (v NullableMessagesBaseDisplayRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagesBaseDisplayRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
