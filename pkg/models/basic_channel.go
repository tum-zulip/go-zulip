/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BasicChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicChannel{}

// BasicChannel struct for BasicChannel
type BasicChannel struct {
	StreamId interface{} `json:"stream_id"`
	Name interface{} `json:"name"`
	IsArchived interface{} `json:"is_archived"`
	Description interface{} `json:"description"`
	DateCreated interface{} `json:"date_created"`
	CreatorId interface{} `json:"creator_id"`
	InviteOnly interface{} `json:"invite_only"`
	RenderedDescription interface{} `json:"rendered_description"`
	IsWebPublic interface{} `json:"is_web_public"`
	StreamPostPolicy interface{} `json:"stream_post_policy"`
	MessageRetentionDays interface{} `json:"message_retention_days"`
	HistoryPublicToSubscribers interface{} `json:"history_public_to_subscribers"`
	TopicsPolicy interface{} `json:"topics_policy,omitempty"`
	FirstMessageId interface{} `json:"first_message_id"`
	FolderId interface{} `json:"folder_id"`
	IsRecentlyActive interface{} `json:"is_recently_active"`
	IsAnnouncementOnly interface{} `json:"is_announcement_only"`
	CanAddSubscribersGroup interface{} `json:"can_add_subscribers_group,omitempty"`
	CanRemoveSubscribersGroup interface{} `json:"can_remove_subscribers_group"`
	CanAdministerChannelGroup interface{} `json:"can_administer_channel_group,omitempty"`
	CanDeleteAnyMessageGroup interface{} `json:"can_delete_any_message_group,omitempty"`
	CanDeleteOwnMessageGroup interface{} `json:"can_delete_own_message_group,omitempty"`
	CanMoveMessagesOutOfChannelGroup interface{} `json:"can_move_messages_out_of_channel_group,omitempty"`
	CanMoveMessagesWithinChannelGroup interface{} `json:"can_move_messages_within_channel_group,omitempty"`
	CanSendMessageGroup interface{} `json:"can_send_message_group,omitempty"`
	CanSubscribeGroup interface{} `json:"can_subscribe_group"`
	CanResolveTopicsGroup interface{} `json:"can_resolve_topics_group,omitempty"`
	SubscriberCount interface{} `json:"subscriber_count"`
	// The average number of messages sent to the channel per week, as estimated based on recent weeks, rounded to the nearest integer.  If `null`, no information is provided on the average traffic. This can be because the channel was recently created and there is insufficient data to make an estimate, or because the server wishes to omit this information for this client, this realm, or this endpoint or type of event.  **Changes**: New in Zulip 8.0 (feature level 199). Previously, this statistic was available only in subscription objects. 
	StreamWeeklyTraffic NullableInt32 `json:"stream_weekly_traffic"`
}

type _BasicChannel BasicChannel

// NewBasicChannel instantiates a new BasicChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicChannel(streamId interface{}, name interface{}, isArchived interface{}, description interface{}, dateCreated interface{}, creatorId interface{}, inviteOnly interface{}, renderedDescription interface{}, isWebPublic interface{}, streamPostPolicy interface{}, messageRetentionDays interface{}, historyPublicToSubscribers interface{}, firstMessageId interface{}, folderId interface{}, isRecentlyActive interface{}, isAnnouncementOnly interface{}, canRemoveSubscribersGroup interface{}, canSubscribeGroup interface{}, subscriberCount interface{}, streamWeeklyTraffic NullableInt32) *BasicChannel {
	this := BasicChannel{}
	this.StreamId = streamId
	this.Name = name
	this.IsArchived = isArchived
	this.Description = description
	this.DateCreated = dateCreated
	this.CreatorId = creatorId
	this.InviteOnly = inviteOnly
	this.RenderedDescription = renderedDescription
	this.IsWebPublic = isWebPublic
	this.StreamPostPolicy = streamPostPolicy
	this.MessageRetentionDays = messageRetentionDays
	this.HistoryPublicToSubscribers = historyPublicToSubscribers
	this.FirstMessageId = firstMessageId
	this.FolderId = folderId
	this.IsRecentlyActive = isRecentlyActive
	this.IsAnnouncementOnly = isAnnouncementOnly
	this.CanRemoveSubscribersGroup = canRemoveSubscribersGroup
	this.CanSubscribeGroup = canSubscribeGroup
	this.SubscriberCount = subscriberCount
	this.StreamWeeklyTraffic = streamWeeklyTraffic
	return &this
}

// NewBasicChannelWithDefaults instantiates a new BasicChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicChannelWithDefaults() *BasicChannel {
	this := BasicChannel{}
	return &this
}

// GetStreamId returns the StreamId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetStreamId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetStreamIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *BasicChannel) SetStreamId(v interface{}) {
	o.StreamId = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BasicChannel) SetName(v interface{}) {
	o.Name = v
}

// GetIsArchived returns the IsArchived field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetIsArchived() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetIsArchivedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *BasicChannel) SetIsArchived(v interface{}) {
	o.IsArchived = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BasicChannel) SetDescription(v interface{}) {
	o.Description = v
}

// GetDateCreated returns the DateCreated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetDateCreated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetDateCreatedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *BasicChannel) SetDateCreated(v interface{}) {
	o.DateCreated = v
}

// GetCreatorId returns the CreatorId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetCreatorId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCreatorIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *BasicChannel) SetCreatorId(v interface{}) {
	o.CreatorId = v
}

// GetInviteOnly returns the InviteOnly field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetInviteOnly() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.InviteOnly
}

// GetInviteOnlyOk returns a tuple with the InviteOnly field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetInviteOnlyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.InviteOnly) {
		return nil, false
	}
	return &o.InviteOnly, true
}

// SetInviteOnly sets field value
func (o *BasicChannel) SetInviteOnly(v interface{}) {
	o.InviteOnly = v
}

// GetRenderedDescription returns the RenderedDescription field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetRenderedDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetRenderedDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RenderedDescription) {
		return nil, false
	}
	return &o.RenderedDescription, true
}

// SetRenderedDescription sets field value
func (o *BasicChannel) SetRenderedDescription(v interface{}) {
	o.RenderedDescription = v
}

// GetIsWebPublic returns the IsWebPublic field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetIsWebPublic() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IsWebPublic
}

// GetIsWebPublicOk returns a tuple with the IsWebPublic field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetIsWebPublicOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsWebPublic) {
		return nil, false
	}
	return &o.IsWebPublic, true
}

// SetIsWebPublic sets field value
func (o *BasicChannel) SetIsWebPublic(v interface{}) {
	o.IsWebPublic = v
}

// GetStreamPostPolicy returns the StreamPostPolicy field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetStreamPostPolicy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.StreamPostPolicy
}

// GetStreamPostPolicyOk returns a tuple with the StreamPostPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetStreamPostPolicyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.StreamPostPolicy) {
		return nil, false
	}
	return &o.StreamPostPolicy, true
}

// SetStreamPostPolicy sets field value
func (o *BasicChannel) SetStreamPostPolicy(v interface{}) {
	o.StreamPostPolicy = v
}

// GetMessageRetentionDays returns the MessageRetentionDays field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetMessageRetentionDays() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MessageRetentionDays
}

// GetMessageRetentionDaysOk returns a tuple with the MessageRetentionDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetMessageRetentionDaysOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MessageRetentionDays) {
		return nil, false
	}
	return &o.MessageRetentionDays, true
}

// SetMessageRetentionDays sets field value
func (o *BasicChannel) SetMessageRetentionDays(v interface{}) {
	o.MessageRetentionDays = v
}

// GetHistoryPublicToSubscribers returns the HistoryPublicToSubscribers field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetHistoryPublicToSubscribers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.HistoryPublicToSubscribers
}

// GetHistoryPublicToSubscribersOk returns a tuple with the HistoryPublicToSubscribers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetHistoryPublicToSubscribersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.HistoryPublicToSubscribers) {
		return nil, false
	}
	return &o.HistoryPublicToSubscribers, true
}

// SetHistoryPublicToSubscribers sets field value
func (o *BasicChannel) SetHistoryPublicToSubscribers(v interface{}) {
	o.HistoryPublicToSubscribers = v
}

// GetTopicsPolicy returns the TopicsPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetTopicsPolicy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TopicsPolicy
}

// GetTopicsPolicyOk returns a tuple with the TopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetTopicsPolicyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TopicsPolicy) {
		return nil, false
	}
	return &o.TopicsPolicy, true
}

// HasTopicsPolicy returns a boolean if a field has been set.
func (o *BasicChannel) HasTopicsPolicy() bool {
	if o != nil && !IsNil(o.TopicsPolicy) {
		return true
	}

	return false
}

// SetTopicsPolicy gets a reference to the given interface{} and assigns it to the TopicsPolicy field.
func (o *BasicChannel) SetTopicsPolicy(v interface{}) {
	o.TopicsPolicy = v
}

// GetFirstMessageId returns the FirstMessageId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetFirstMessageId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FirstMessageId
}

// GetFirstMessageIdOk returns a tuple with the FirstMessageId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetFirstMessageIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FirstMessageId) {
		return nil, false
	}
	return &o.FirstMessageId, true
}

// SetFirstMessageId sets field value
func (o *BasicChannel) SetFirstMessageId(v interface{}) {
	o.FirstMessageId = v
}

// GetFolderId returns the FolderId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetFolderId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetFolderIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return &o.FolderId, true
}

// SetFolderId sets field value
func (o *BasicChannel) SetFolderId(v interface{}) {
	o.FolderId = v
}

// GetIsRecentlyActive returns the IsRecentlyActive field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetIsRecentlyActive() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IsRecentlyActive
}

// GetIsRecentlyActiveOk returns a tuple with the IsRecentlyActive field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetIsRecentlyActiveOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsRecentlyActive) {
		return nil, false
	}
	return &o.IsRecentlyActive, true
}

// SetIsRecentlyActive sets field value
func (o *BasicChannel) SetIsRecentlyActive(v interface{}) {
	o.IsRecentlyActive = v
}

// GetIsAnnouncementOnly returns the IsAnnouncementOnly field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetIsAnnouncementOnly() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IsAnnouncementOnly
}

// GetIsAnnouncementOnlyOk returns a tuple with the IsAnnouncementOnly field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetIsAnnouncementOnlyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsAnnouncementOnly) {
		return nil, false
	}
	return &o.IsAnnouncementOnly, true
}

// SetIsAnnouncementOnly sets field value
func (o *BasicChannel) SetIsAnnouncementOnly(v interface{}) {
	o.IsAnnouncementOnly = v
}

// GetCanAddSubscribersGroup returns the CanAddSubscribersGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanAddSubscribersGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanAddSubscribersGroup
}

// GetCanAddSubscribersGroupOk returns a tuple with the CanAddSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanAddSubscribersGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		return nil, false
	}
	return &o.CanAddSubscribersGroup, true
}

// HasCanAddSubscribersGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanAddSubscribersGroup() bool {
	if o != nil && !IsNil(o.CanAddSubscribersGroup) {
		return true
	}

	return false
}

// SetCanAddSubscribersGroup gets a reference to the given interface{} and assigns it to the CanAddSubscribersGroup field.
func (o *BasicChannel) SetCanAddSubscribersGroup(v interface{}) {
	o.CanAddSubscribersGroup = v
}

// GetCanRemoveSubscribersGroup returns the CanRemoveSubscribersGroup field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetCanRemoveSubscribersGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CanRemoveSubscribersGroup
}

// GetCanRemoveSubscribersGroupOk returns a tuple with the CanRemoveSubscribersGroup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanRemoveSubscribersGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanRemoveSubscribersGroup) {
		return nil, false
	}
	return &o.CanRemoveSubscribersGroup, true
}

// SetCanRemoveSubscribersGroup sets field value
func (o *BasicChannel) SetCanRemoveSubscribersGroup(v interface{}) {
	o.CanRemoveSubscribersGroup = v
}

// GetCanAdministerChannelGroup returns the CanAdministerChannelGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanAdministerChannelGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanAdministerChannelGroup
}

// GetCanAdministerChannelGroupOk returns a tuple with the CanAdministerChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanAdministerChannelGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanAdministerChannelGroup) {
		return nil, false
	}
	return &o.CanAdministerChannelGroup, true
}

// HasCanAdministerChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanAdministerChannelGroup() bool {
	if o != nil && !IsNil(o.CanAdministerChannelGroup) {
		return true
	}

	return false
}

// SetCanAdministerChannelGroup gets a reference to the given interface{} and assigns it to the CanAdministerChannelGroup field.
func (o *BasicChannel) SetCanAdministerChannelGroup(v interface{}) {
	o.CanAdministerChannelGroup = v
}

// GetCanDeleteAnyMessageGroup returns the CanDeleteAnyMessageGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanDeleteAnyMessageGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanDeleteAnyMessageGroup
}

// GetCanDeleteAnyMessageGroupOk returns a tuple with the CanDeleteAnyMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanDeleteAnyMessageGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		return nil, false
	}
	return &o.CanDeleteAnyMessageGroup, true
}

// HasCanDeleteAnyMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanDeleteAnyMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteAnyMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteAnyMessageGroup gets a reference to the given interface{} and assigns it to the CanDeleteAnyMessageGroup field.
func (o *BasicChannel) SetCanDeleteAnyMessageGroup(v interface{}) {
	o.CanDeleteAnyMessageGroup = v
}

// GetCanDeleteOwnMessageGroup returns the CanDeleteOwnMessageGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanDeleteOwnMessageGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanDeleteOwnMessageGroup
}

// GetCanDeleteOwnMessageGroupOk returns a tuple with the CanDeleteOwnMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanDeleteOwnMessageGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		return nil, false
	}
	return &o.CanDeleteOwnMessageGroup, true
}

// HasCanDeleteOwnMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanDeleteOwnMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteOwnMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteOwnMessageGroup gets a reference to the given interface{} and assigns it to the CanDeleteOwnMessageGroup field.
func (o *BasicChannel) SetCanDeleteOwnMessageGroup(v interface{}) {
	o.CanDeleteOwnMessageGroup = v
}

// GetCanMoveMessagesOutOfChannelGroup returns the CanMoveMessagesOutOfChannelGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanMoveMessagesOutOfChannelGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanMoveMessagesOutOfChannelGroup
}

// GetCanMoveMessagesOutOfChannelGroupOk returns a tuple with the CanMoveMessagesOutOfChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanMoveMessagesOutOfChannelGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return nil, false
	}
	return &o.CanMoveMessagesOutOfChannelGroup, true
}

// HasCanMoveMessagesOutOfChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanMoveMessagesOutOfChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesOutOfChannelGroup gets a reference to the given interface{} and assigns it to the CanMoveMessagesOutOfChannelGroup field.
func (o *BasicChannel) SetCanMoveMessagesOutOfChannelGroup(v interface{}) {
	o.CanMoveMessagesOutOfChannelGroup = v
}

// GetCanMoveMessagesWithinChannelGroup returns the CanMoveMessagesWithinChannelGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanMoveMessagesWithinChannelGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanMoveMessagesWithinChannelGroup
}

// GetCanMoveMessagesWithinChannelGroupOk returns a tuple with the CanMoveMessagesWithinChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanMoveMessagesWithinChannelGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return nil, false
	}
	return &o.CanMoveMessagesWithinChannelGroup, true
}

// HasCanMoveMessagesWithinChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanMoveMessagesWithinChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesWithinChannelGroup gets a reference to the given interface{} and assigns it to the CanMoveMessagesWithinChannelGroup field.
func (o *BasicChannel) SetCanMoveMessagesWithinChannelGroup(v interface{}) {
	o.CanMoveMessagesWithinChannelGroup = v
}

// GetCanSendMessageGroup returns the CanSendMessageGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanSendMessageGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanSendMessageGroup
}

// GetCanSendMessageGroupOk returns a tuple with the CanSendMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanSendMessageGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanSendMessageGroup) {
		return nil, false
	}
	return &o.CanSendMessageGroup, true
}

// HasCanSendMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanSendMessageGroup() bool {
	if o != nil && !IsNil(o.CanSendMessageGroup) {
		return true
	}

	return false
}

// SetCanSendMessageGroup gets a reference to the given interface{} and assigns it to the CanSendMessageGroup field.
func (o *BasicChannel) SetCanSendMessageGroup(v interface{}) {
	o.CanSendMessageGroup = v
}

// GetCanSubscribeGroup returns the CanSubscribeGroup field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetCanSubscribeGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CanSubscribeGroup
}

// GetCanSubscribeGroupOk returns a tuple with the CanSubscribeGroup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanSubscribeGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanSubscribeGroup) {
		return nil, false
	}
	return &o.CanSubscribeGroup, true
}

// SetCanSubscribeGroup sets field value
func (o *BasicChannel) SetCanSubscribeGroup(v interface{}) {
	o.CanSubscribeGroup = v
}

// GetCanResolveTopicsGroup returns the CanResolveTopicsGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicChannel) GetCanResolveTopicsGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CanResolveTopicsGroup
}

// GetCanResolveTopicsGroupOk returns a tuple with the CanResolveTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCanResolveTopicsGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		return nil, false
	}
	return &o.CanResolveTopicsGroup, true
}

// HasCanResolveTopicsGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanResolveTopicsGroup() bool {
	if o != nil && !IsNil(o.CanResolveTopicsGroup) {
		return true
	}

	return false
}

// SetCanResolveTopicsGroup gets a reference to the given interface{} and assigns it to the CanResolveTopicsGroup field.
func (o *BasicChannel) SetCanResolveTopicsGroup(v interface{}) {
	o.CanResolveTopicsGroup = v
}

// GetSubscriberCount returns the SubscriberCount field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetSubscriberCount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.SubscriberCount
}

// GetSubscriberCountOk returns a tuple with the SubscriberCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetSubscriberCountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SubscriberCount) {
		return nil, false
	}
	return &o.SubscriberCount, true
}

// SetSubscriberCount sets field value
func (o *BasicChannel) SetSubscriberCount(v interface{}) {
	o.SubscriberCount = v
}

// GetStreamWeeklyTraffic returns the StreamWeeklyTraffic field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *BasicChannel) GetStreamWeeklyTraffic() int32 {
	if o == nil || o.StreamWeeklyTraffic.Get() == nil {
		var ret int32
		return ret
	}

	return *o.StreamWeeklyTraffic.Get()
}

// GetStreamWeeklyTrafficOk returns a tuple with the StreamWeeklyTraffic field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetStreamWeeklyTrafficOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamWeeklyTraffic.Get(), o.StreamWeeklyTraffic.IsSet()
}

// SetStreamWeeklyTraffic sets field value
func (o *BasicChannel) SetStreamWeeklyTraffic(v int32) {
	o.StreamWeeklyTraffic.Set(&v)
}

func (o BasicChannel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StreamId != nil {
		toSerialize["stream_id"] = o.StreamId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.IsArchived != nil {
		toSerialize["is_archived"] = o.IsArchived
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DateCreated != nil {
		toSerialize["date_created"] = o.DateCreated
	}
	if o.CreatorId != nil {
		toSerialize["creator_id"] = o.CreatorId
	}
	if o.InviteOnly != nil {
		toSerialize["invite_only"] = o.InviteOnly
	}
	if o.RenderedDescription != nil {
		toSerialize["rendered_description"] = o.RenderedDescription
	}
	if o.IsWebPublic != nil {
		toSerialize["is_web_public"] = o.IsWebPublic
	}
	if o.StreamPostPolicy != nil {
		toSerialize["stream_post_policy"] = o.StreamPostPolicy
	}
	if o.MessageRetentionDays != nil {
		toSerialize["message_retention_days"] = o.MessageRetentionDays
	}
	if o.HistoryPublicToSubscribers != nil {
		toSerialize["history_public_to_subscribers"] = o.HistoryPublicToSubscribers
	}
	if o.TopicsPolicy != nil {
		toSerialize["topics_policy"] = o.TopicsPolicy
	}
	if o.FirstMessageId != nil {
		toSerialize["first_message_id"] = o.FirstMessageId
	}
	if o.FolderId != nil {
		toSerialize["folder_id"] = o.FolderId
	}
	if o.IsRecentlyActive != nil {
		toSerialize["is_recently_active"] = o.IsRecentlyActive
	}
	if o.IsAnnouncementOnly != nil {
		toSerialize["is_announcement_only"] = o.IsAnnouncementOnly
	}
	if o.CanAddSubscribersGroup != nil {
		toSerialize["can_add_subscribers_group"] = o.CanAddSubscribersGroup
	}
	if o.CanRemoveSubscribersGroup != nil {
		toSerialize["can_remove_subscribers_group"] = o.CanRemoveSubscribersGroup
	}
	if o.CanAdministerChannelGroup != nil {
		toSerialize["can_administer_channel_group"] = o.CanAdministerChannelGroup
	}
	if o.CanDeleteAnyMessageGroup != nil {
		toSerialize["can_delete_any_message_group"] = o.CanDeleteAnyMessageGroup
	}
	if o.CanDeleteOwnMessageGroup != nil {
		toSerialize["can_delete_own_message_group"] = o.CanDeleteOwnMessageGroup
	}
	if o.CanMoveMessagesOutOfChannelGroup != nil {
		toSerialize["can_move_messages_out_of_channel_group"] = o.CanMoveMessagesOutOfChannelGroup
	}
	if o.CanMoveMessagesWithinChannelGroup != nil {
		toSerialize["can_move_messages_within_channel_group"] = o.CanMoveMessagesWithinChannelGroup
	}
	if o.CanSendMessageGroup != nil {
		toSerialize["can_send_message_group"] = o.CanSendMessageGroup
	}
	if o.CanSubscribeGroup != nil {
		toSerialize["can_subscribe_group"] = o.CanSubscribeGroup
	}
	if o.CanResolveTopicsGroup != nil {
		toSerialize["can_resolve_topics_group"] = o.CanResolveTopicsGroup
	}
	if o.SubscriberCount != nil {
		toSerialize["subscriber_count"] = o.SubscriberCount
	}
	toSerialize["stream_weekly_traffic"] = o.StreamWeeklyTraffic.Get()
	return toSerialize, nil
}

func (o *BasicChannel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stream_id",
		"name",
		"is_archived",
		"description",
		"date_created",
		"creator_id",
		"invite_only",
		"rendered_description",
		"is_web_public",
		"stream_post_policy",
		"message_retention_days",
		"history_public_to_subscribers",
		"first_message_id",
		"folder_id",
		"is_recently_active",
		"is_announcement_only",
		"can_remove_subscribers_group",
		"can_subscribe_group",
		"subscriber_count",
		"stream_weekly_traffic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBasicChannel := _BasicChannel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBasicChannel)

	if err != nil {
		return err
	}

	*o = BasicChannel(varBasicChannel)

	return err
}

type NullableBasicChannel struct {
	value *BasicChannel
	isSet bool
}

func (v NullableBasicChannel) Get() *BasicChannel {
	return v.value
}

func (v *NullableBasicChannel) Set(val *BasicChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicChannel(val *BasicChannel) *NullableBasicChannel {
	return &NullableBasicChannel{value: val, isSet: true}
}

func (v NullableBasicChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


