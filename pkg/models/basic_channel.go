/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BasicChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicChannel{}

// BasicChannel struct for BasicChannel
type BasicChannel struct {
	// The unique ID of the channel.
	StreamId int32 `json:"stream_id"`
	// The name of the channel.
	Name string `json:"name"`
	// A boolean indicating whether the channel is [archived](zulip.com/help/archive-a-channel.  **Changes**: New in Zulip 10.0 (feature level 315). Previously, this endpoint never returned archived channels.
	IsArchived bool `json:"is_archived"`
	// The short description of the channel in [Zulip-flavored Markdown](zulip.com/help/format-your-message-using-markdown format, intended to be used to prepopulate UI for editing a channel's description.  See [Markdown message formatting](zulip.com/api/message-formatting for details on Zulip's HTML format.
	Description string `json:"description"`
	// The UNIX timestamp for when the channel was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
	DateCreated int32       `json:"date_created"`
	CreatorId   interface{} `json:"creator_id"`
	// Specifies whether the channel is private or not. Only people who have been invited can access a private channel.
	InviteOnly bool `json:"invite_only"`
	// The short description of the channel rendered as HTML, intended to be used when displaying the channel description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly. And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
	RenderedDescription string `json:"rendered_description"`
	// Whether the channel has been configured to allow unauthenticated access to its message history from the web.  **Changes**: New in Zulip 2.1.0.
	IsWebPublic bool `json:"is_web_public"`
	// A deprecated representation of a superset of the users who have permission to post messages to the channel available for backwards-compatibility. Clients should use `can_send_message_group` instead.  It is an enum with the following possible values, corresponding to roles/system groups:  - 1 = Any user can post. - 2 = Only administrators can post. - 3 = Only [full members][calc-full-member] can post. - 4 = Only moderators can post.  **Changes**: Deprecated in Zulip 10.0 (feature level 333) and replaced by `can_send_message_group`, which supports finer resolution of configurations, resulting in this property being inaccurate following that transition.  New in Zulip 3.0 (feature level 1), replacing the previous `is_announcement_only` boolean.  [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member
	// Deprecated
	StreamPostPolicy     int32       `json:"stream_post_policy"`
	MessageRetentionDays interface{} `json:"message_retention_days"`
	// Whether the history of the channel is public to its subscribers.  Currently always true for public channels (i.e. `\"invite_only\": false` implies `\"history_public_to_subscribers\": true`), but clients should not make that assumption, as we may change that behavior in the future.
	HistoryPublicToSubscribers bool          `json:"history_public_to_subscribers"`
	TopicsPolicy               *TopicsPolicy `json:"topics_policy,omitempty"`
	FirstMessageId             interface{}   `json:"first_message_id"`
	FolderId                   interface{}   `json:"folder_id"`
	// Whether the channel has recent message activity. Clients should use this to implement [hide inactive channels](zulip.com/help/manage-inactive-channels if `demote_inactive_streams` is enabled.  **Changes**: New in Zulip 10.0 (feature level 323). Previously, clients implemented the demote_inactive_streams from local message history, resulting in a choppy loading experience.
	IsRecentlyActive bool `json:"is_recently_active"`
	// Whether the given channel is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1). Clients should use `stream_post_policy` instead.
	// Deprecated
	IsAnnouncementOnly                bool               `json:"is_announcement_only"`
	CanAddSubscribersGroup            *GroupSettingValue `json:"can_add_subscribers_group,omitempty"`
	CanRemoveSubscribersGroup         GroupSettingValue  `json:"can_remove_subscribers_group"`
	CanAdministerChannelGroup         *GroupSettingValue `json:"can_administer_channel_group,omitempty"`
	CanDeleteAnyMessageGroup          *GroupSettingValue `json:"can_delete_any_message_group,omitempty"`
	CanDeleteOwnMessageGroup          *GroupSettingValue `json:"can_delete_own_message_group,omitempty"`
	CanMoveMessagesOutOfChannelGroup  *GroupSettingValue `json:"can_move_messages_out_of_channel_group,omitempty"`
	CanMoveMessagesWithinChannelGroup *GroupSettingValue `json:"can_move_messages_within_channel_group,omitempty"`
	CanSendMessageGroup               *GroupSettingValue `json:"can_send_message_group,omitempty"`
	CanSubscribeGroup                 GroupSettingValue  `json:"can_subscribe_group"`
	CanResolveTopicsGroup             *GroupSettingValue `json:"can_resolve_topics_group,omitempty"`
	// The total number of non-deactivated users (including bots) who are subscribed to the channel. Clients are responsible for updating this value using `peer_add` and `peer_remove` events.  The server's internals cannot guarantee this value is correctly synced with `peer_add` and `peer_remove` events for the channel. As a result, if a (rare) race occurs between a change in the channel's subscribers and fetching this value, it is possible for a client that is correctly following the events protocol to end up with a permanently off-by-one error in the channel's subscriber count.  Clients are recommended to fetch full subscriber data for a channel in contexts where it is important to avoid this risk. The official web application, for example, uses this field primarily while waiting to fetch a given channel's full subscriber list from the server.  **Changes**: New in Zulip 11.0 (feature level 394).
	SubscriberCount float32 `json:"subscriber_count"`
	// The average number of messages sent to the channel per week, as estimated based on recent weeks, rounded to the nearest integer.  If `null`, no information is provided on the average traffic. This can be because the channel was recently created and there is insufficient data to make an estimate, or because the server wishes to omit this information for this client, this realm, or this endpoint or type of event.  **Changes**: New in Zulip 8.0 (feature level 199). Previously, this statistic was available only in subscription objects.
	StreamWeeklyTraffic NullableInt32 `json:"stream_weekly_traffic"`
}

type _BasicChannel BasicChannel

// NewBasicChannel instantiates a new BasicChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicChannel(streamId int32, name string, isArchived bool, description string, dateCreated int32, creatorId interface{}, inviteOnly bool, renderedDescription string, isWebPublic bool, streamPostPolicy int32, messageRetentionDays interface{}, historyPublicToSubscribers bool, firstMessageId interface{}, folderId interface{}, isRecentlyActive bool, isAnnouncementOnly bool, canRemoveSubscribersGroup GroupSettingValue, canSubscribeGroup GroupSettingValue, subscriberCount float32, streamWeeklyTraffic NullableInt32) *BasicChannel {
	this := BasicChannel{}
	this.StreamId = streamId
	this.Name = name
	this.IsArchived = isArchived
	this.Description = description
	this.DateCreated = dateCreated
	this.CreatorId = creatorId
	this.InviteOnly = inviteOnly
	this.RenderedDescription = renderedDescription
	this.IsWebPublic = isWebPublic
	this.StreamPostPolicy = streamPostPolicy
	this.MessageRetentionDays = messageRetentionDays
	this.HistoryPublicToSubscribers = historyPublicToSubscribers
	this.FirstMessageId = firstMessageId
	this.FolderId = folderId
	this.IsRecentlyActive = isRecentlyActive
	this.IsAnnouncementOnly = isAnnouncementOnly
	this.CanRemoveSubscribersGroup = canRemoveSubscribersGroup
	this.CanSubscribeGroup = canSubscribeGroup
	this.SubscriberCount = subscriberCount
	this.StreamWeeklyTraffic = streamWeeklyTraffic
	return &this
}

// NewBasicChannelWithDefaults instantiates a new BasicChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicChannelWithDefaults() *BasicChannel {
	this := BasicChannel{}
	return &this
}

// GetStreamId returns the StreamId field value
func (o *BasicChannel) GetStreamId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetStreamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *BasicChannel) SetStreamId(v int32) {
	o.StreamId = v
}

// GetName returns the Name field value
func (o *BasicChannel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BasicChannel) SetName(v string) {
	o.Name = v
}

// GetIsArchived returns the IsArchived field value
func (o *BasicChannel) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *BasicChannel) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetDescription returns the Description field value
func (o *BasicChannel) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BasicChannel) SetDescription(v string) {
	o.Description = v
}

// GetDateCreated returns the DateCreated field value
func (o *BasicChannel) GetDateCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetDateCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *BasicChannel) SetDateCreated(v int32) {
	o.DateCreated = v
}

// GetCreatorId returns the CreatorId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetCreatorId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetCreatorIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *BasicChannel) SetCreatorId(v interface{}) {
	o.CreatorId = v
}

// GetInviteOnly returns the InviteOnly field value
func (o *BasicChannel) GetInviteOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InviteOnly
}

// GetInviteOnlyOk returns a tuple with the InviteOnly field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetInviteOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InviteOnly, true
}

// SetInviteOnly sets field value
func (o *BasicChannel) SetInviteOnly(v bool) {
	o.InviteOnly = v
}

// GetRenderedDescription returns the RenderedDescription field value
func (o *BasicChannel) GetRenderedDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetRenderedDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenderedDescription, true
}

// SetRenderedDescription sets field value
func (o *BasicChannel) SetRenderedDescription(v string) {
	o.RenderedDescription = v
}

// GetIsWebPublic returns the IsWebPublic field value
func (o *BasicChannel) GetIsWebPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWebPublic
}

// GetIsWebPublicOk returns a tuple with the IsWebPublic field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetIsWebPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWebPublic, true
}

// SetIsWebPublic sets field value
func (o *BasicChannel) SetIsWebPublic(v bool) {
	o.IsWebPublic = v
}

// GetStreamPostPolicy returns the StreamPostPolicy field value
// Deprecated
func (o *BasicChannel) GetStreamPostPolicy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StreamPostPolicy
}

// GetStreamPostPolicyOk returns a tuple with the StreamPostPolicy field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *BasicChannel) GetStreamPostPolicyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamPostPolicy, true
}

// SetStreamPostPolicy sets field value
// Deprecated
func (o *BasicChannel) SetStreamPostPolicy(v int32) {
	o.StreamPostPolicy = v
}

// GetMessageRetentionDays returns the MessageRetentionDays field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetMessageRetentionDays() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MessageRetentionDays
}

// GetMessageRetentionDaysOk returns a tuple with the MessageRetentionDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetMessageRetentionDaysOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MessageRetentionDays) {
		return nil, false
	}
	return &o.MessageRetentionDays, true
}

// SetMessageRetentionDays sets field value
func (o *BasicChannel) SetMessageRetentionDays(v interface{}) {
	o.MessageRetentionDays = v
}

// GetHistoryPublicToSubscribers returns the HistoryPublicToSubscribers field value
func (o *BasicChannel) GetHistoryPublicToSubscribers() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HistoryPublicToSubscribers
}

// GetHistoryPublicToSubscribersOk returns a tuple with the HistoryPublicToSubscribers field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetHistoryPublicToSubscribersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HistoryPublicToSubscribers, true
}

// SetHistoryPublicToSubscribers sets field value
func (o *BasicChannel) SetHistoryPublicToSubscribers(v bool) {
	o.HistoryPublicToSubscribers = v
}

// GetTopicsPolicy returns the TopicsPolicy field value if set, zero value otherwise.
func (o *BasicChannel) GetTopicsPolicy() TopicsPolicy {
	if o == nil || IsNil(o.TopicsPolicy) {
		var ret TopicsPolicy
		return ret
	}
	return *o.TopicsPolicy
}

// GetTopicsPolicyOk returns a tuple with the TopicsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetTopicsPolicyOk() (*TopicsPolicy, bool) {
	if o == nil || IsNil(o.TopicsPolicy) {
		return nil, false
	}
	return o.TopicsPolicy, true
}

// HasTopicsPolicy returns a boolean if a field has been set.
func (o *BasicChannel) HasTopicsPolicy() bool {
	if o != nil && !IsNil(o.TopicsPolicy) {
		return true
	}

	return false
}

// SetTopicsPolicy gets a reference to the given TopicsPolicy and assigns it to the TopicsPolicy field.
func (o *BasicChannel) SetTopicsPolicy(v TopicsPolicy) {
	o.TopicsPolicy = &v
}

// GetFirstMessageId returns the FirstMessageId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetFirstMessageId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FirstMessageId
}

// GetFirstMessageIdOk returns a tuple with the FirstMessageId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetFirstMessageIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FirstMessageId) {
		return nil, false
	}
	return &o.FirstMessageId, true
}

// SetFirstMessageId sets field value
func (o *BasicChannel) SetFirstMessageId(v interface{}) {
	o.FirstMessageId = v
}

// GetFolderId returns the FolderId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BasicChannel) GetFolderId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetFolderIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return &o.FolderId, true
}

// SetFolderId sets field value
func (o *BasicChannel) SetFolderId(v interface{}) {
	o.FolderId = v
}

// GetIsRecentlyActive returns the IsRecentlyActive field value
func (o *BasicChannel) GetIsRecentlyActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRecentlyActive
}

// GetIsRecentlyActiveOk returns a tuple with the IsRecentlyActive field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetIsRecentlyActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRecentlyActive, true
}

// SetIsRecentlyActive sets field value
func (o *BasicChannel) SetIsRecentlyActive(v bool) {
	o.IsRecentlyActive = v
}

// GetIsAnnouncementOnly returns the IsAnnouncementOnly field value
// Deprecated
func (o *BasicChannel) GetIsAnnouncementOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAnnouncementOnly
}

// GetIsAnnouncementOnlyOk returns a tuple with the IsAnnouncementOnly field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *BasicChannel) GetIsAnnouncementOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAnnouncementOnly, true
}

// SetIsAnnouncementOnly sets field value
// Deprecated
func (o *BasicChannel) SetIsAnnouncementOnly(v bool) {
	o.IsAnnouncementOnly = v
}

// GetCanAddSubscribersGroup returns the CanAddSubscribersGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanAddSubscribersGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAddSubscribersGroup
}

// GetCanAddSubscribersGroupOk returns a tuple with the CanAddSubscribersGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanAddSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAddSubscribersGroup) {
		return nil, false
	}
	return o.CanAddSubscribersGroup, true
}

// HasCanAddSubscribersGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanAddSubscribersGroup() bool {
	if o != nil && !IsNil(o.CanAddSubscribersGroup) {
		return true
	}

	return false
}

// SetCanAddSubscribersGroup gets a reference to the given GroupSettingValue and assigns it to the CanAddSubscribersGroup field.
func (o *BasicChannel) SetCanAddSubscribersGroup(v GroupSettingValue) {
	o.CanAddSubscribersGroup = &v
}

// GetCanRemoveSubscribersGroup returns the CanRemoveSubscribersGroup field value
func (o *BasicChannel) GetCanRemoveSubscribersGroup() GroupSettingValue {
	if o == nil {
		var ret GroupSettingValue
		return ret
	}

	return o.CanRemoveSubscribersGroup
}

// GetCanRemoveSubscribersGroupOk returns a tuple with the CanRemoveSubscribersGroup field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanRemoveSubscribersGroupOk() (*GroupSettingValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanRemoveSubscribersGroup, true
}

// SetCanRemoveSubscribersGroup sets field value
func (o *BasicChannel) SetCanRemoveSubscribersGroup(v GroupSettingValue) {
	o.CanRemoveSubscribersGroup = v
}

// GetCanAdministerChannelGroup returns the CanAdministerChannelGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanAdministerChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanAdministerChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanAdministerChannelGroup
}

// GetCanAdministerChannelGroupOk returns a tuple with the CanAdministerChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanAdministerChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanAdministerChannelGroup) {
		return nil, false
	}
	return o.CanAdministerChannelGroup, true
}

// HasCanAdministerChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanAdministerChannelGroup() bool {
	if o != nil && !IsNil(o.CanAdministerChannelGroup) {
		return true
	}

	return false
}

// SetCanAdministerChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanAdministerChannelGroup field.
func (o *BasicChannel) SetCanAdministerChannelGroup(v GroupSettingValue) {
	o.CanAdministerChannelGroup = &v
}

// GetCanDeleteAnyMessageGroup returns the CanDeleteAnyMessageGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanDeleteAnyMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteAnyMessageGroup
}

// GetCanDeleteAnyMessageGroupOk returns a tuple with the CanDeleteAnyMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanDeleteAnyMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteAnyMessageGroup) {
		return nil, false
	}
	return o.CanDeleteAnyMessageGroup, true
}

// HasCanDeleteAnyMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanDeleteAnyMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteAnyMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteAnyMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteAnyMessageGroup field.
func (o *BasicChannel) SetCanDeleteAnyMessageGroup(v GroupSettingValue) {
	o.CanDeleteAnyMessageGroup = &v
}

// GetCanDeleteOwnMessageGroup returns the CanDeleteOwnMessageGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanDeleteOwnMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanDeleteOwnMessageGroup
}

// GetCanDeleteOwnMessageGroupOk returns a tuple with the CanDeleteOwnMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanDeleteOwnMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanDeleteOwnMessageGroup) {
		return nil, false
	}
	return o.CanDeleteOwnMessageGroup, true
}

// HasCanDeleteOwnMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanDeleteOwnMessageGroup() bool {
	if o != nil && !IsNil(o.CanDeleteOwnMessageGroup) {
		return true
	}

	return false
}

// SetCanDeleteOwnMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanDeleteOwnMessageGroup field.
func (o *BasicChannel) SetCanDeleteOwnMessageGroup(v GroupSettingValue) {
	o.CanDeleteOwnMessageGroup = &v
}

// GetCanMoveMessagesOutOfChannelGroup returns the CanMoveMessagesOutOfChannelGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanMoveMessagesOutOfChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesOutOfChannelGroup
}

// GetCanMoveMessagesOutOfChannelGroupOk returns a tuple with the CanMoveMessagesOutOfChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanMoveMessagesOutOfChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return nil, false
	}
	return o.CanMoveMessagesOutOfChannelGroup, true
}

// HasCanMoveMessagesOutOfChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanMoveMessagesOutOfChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesOutOfChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesOutOfChannelGroup field.
func (o *BasicChannel) SetCanMoveMessagesOutOfChannelGroup(v GroupSettingValue) {
	o.CanMoveMessagesOutOfChannelGroup = &v
}

// GetCanMoveMessagesWithinChannelGroup returns the CanMoveMessagesWithinChannelGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanMoveMessagesWithinChannelGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanMoveMessagesWithinChannelGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanMoveMessagesWithinChannelGroup
}

// GetCanMoveMessagesWithinChannelGroupOk returns a tuple with the CanMoveMessagesWithinChannelGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanMoveMessagesWithinChannelGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return nil, false
	}
	return o.CanMoveMessagesWithinChannelGroup, true
}

// HasCanMoveMessagesWithinChannelGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanMoveMessagesWithinChannelGroup() bool {
	if o != nil && !IsNil(o.CanMoveMessagesWithinChannelGroup) {
		return true
	}

	return false
}

// SetCanMoveMessagesWithinChannelGroup gets a reference to the given GroupSettingValue and assigns it to the CanMoveMessagesWithinChannelGroup field.
func (o *BasicChannel) SetCanMoveMessagesWithinChannelGroup(v GroupSettingValue) {
	o.CanMoveMessagesWithinChannelGroup = &v
}

// GetCanSendMessageGroup returns the CanSendMessageGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanSendMessageGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanSendMessageGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanSendMessageGroup
}

// GetCanSendMessageGroupOk returns a tuple with the CanSendMessageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanSendMessageGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanSendMessageGroup) {
		return nil, false
	}
	return o.CanSendMessageGroup, true
}

// HasCanSendMessageGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanSendMessageGroup() bool {
	if o != nil && !IsNil(o.CanSendMessageGroup) {
		return true
	}

	return false
}

// SetCanSendMessageGroup gets a reference to the given GroupSettingValue and assigns it to the CanSendMessageGroup field.
func (o *BasicChannel) SetCanSendMessageGroup(v GroupSettingValue) {
	o.CanSendMessageGroup = &v
}

// GetCanSubscribeGroup returns the CanSubscribeGroup field value
func (o *BasicChannel) GetCanSubscribeGroup() GroupSettingValue {
	if o == nil {
		var ret GroupSettingValue
		return ret
	}

	return o.CanSubscribeGroup
}

// GetCanSubscribeGroupOk returns a tuple with the CanSubscribeGroup field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanSubscribeGroupOk() (*GroupSettingValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanSubscribeGroup, true
}

// SetCanSubscribeGroup sets field value
func (o *BasicChannel) SetCanSubscribeGroup(v GroupSettingValue) {
	o.CanSubscribeGroup = v
}

// GetCanResolveTopicsGroup returns the CanResolveTopicsGroup field value if set, zero value otherwise.
func (o *BasicChannel) GetCanResolveTopicsGroup() GroupSettingValue {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		var ret GroupSettingValue
		return ret
	}
	return *o.CanResolveTopicsGroup
}

// GetCanResolveTopicsGroupOk returns a tuple with the CanResolveTopicsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetCanResolveTopicsGroupOk() (*GroupSettingValue, bool) {
	if o == nil || IsNil(o.CanResolveTopicsGroup) {
		return nil, false
	}
	return o.CanResolveTopicsGroup, true
}

// HasCanResolveTopicsGroup returns a boolean if a field has been set.
func (o *BasicChannel) HasCanResolveTopicsGroup() bool {
	if o != nil && !IsNil(o.CanResolveTopicsGroup) {
		return true
	}

	return false
}

// SetCanResolveTopicsGroup gets a reference to the given GroupSettingValue and assigns it to the CanResolveTopicsGroup field.
func (o *BasicChannel) SetCanResolveTopicsGroup(v GroupSettingValue) {
	o.CanResolveTopicsGroup = &v
}

// GetSubscriberCount returns the SubscriberCount field value
func (o *BasicChannel) GetSubscriberCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubscriberCount
}

// GetSubscriberCountOk returns a tuple with the SubscriberCount field value
// and a boolean to check if the value has been set.
func (o *BasicChannel) GetSubscriberCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriberCount, true
}

// SetSubscriberCount sets field value
func (o *BasicChannel) SetSubscriberCount(v float32) {
	o.SubscriberCount = v
}

// GetStreamWeeklyTraffic returns the StreamWeeklyTraffic field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *BasicChannel) GetStreamWeeklyTraffic() int32 {
	if o == nil || o.StreamWeeklyTraffic.Get() == nil {
		var ret int32
		return ret
	}

	return *o.StreamWeeklyTraffic.Get()
}

// GetStreamWeeklyTrafficOk returns a tuple with the StreamWeeklyTraffic field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicChannel) GetStreamWeeklyTrafficOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamWeeklyTraffic.Get(), o.StreamWeeklyTraffic.IsSet()
}

// SetStreamWeeklyTraffic sets field value
func (o *BasicChannel) SetStreamWeeklyTraffic(v int32) {
	o.StreamWeeklyTraffic.Set(&v)
}

func (o BasicChannel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stream_id"] = o.StreamId
	toSerialize["name"] = o.Name
	toSerialize["is_archived"] = o.IsArchived
	toSerialize["description"] = o.Description
	toSerialize["date_created"] = o.DateCreated
	if o.CreatorId != nil {
		toSerialize["creator_id"] = o.CreatorId
	}
	toSerialize["invite_only"] = o.InviteOnly
	toSerialize["rendered_description"] = o.RenderedDescription
	toSerialize["is_web_public"] = o.IsWebPublic
	toSerialize["stream_post_policy"] = o.StreamPostPolicy
	if o.MessageRetentionDays != nil {
		toSerialize["message_retention_days"] = o.MessageRetentionDays
	}
	toSerialize["history_public_to_subscribers"] = o.HistoryPublicToSubscribers
	if !IsNil(o.TopicsPolicy) {
		toSerialize["topics_policy"] = o.TopicsPolicy
	}
	if o.FirstMessageId != nil {
		toSerialize["first_message_id"] = o.FirstMessageId
	}
	if o.FolderId != nil {
		toSerialize["folder_id"] = o.FolderId
	}
	toSerialize["is_recently_active"] = o.IsRecentlyActive
	toSerialize["is_announcement_only"] = o.IsAnnouncementOnly
	if !IsNil(o.CanAddSubscribersGroup) {
		toSerialize["can_add_subscribers_group"] = o.CanAddSubscribersGroup
	}
	toSerialize["can_remove_subscribers_group"] = o.CanRemoveSubscribersGroup
	if !IsNil(o.CanAdministerChannelGroup) {
		toSerialize["can_administer_channel_group"] = o.CanAdministerChannelGroup
	}
	if !IsNil(o.CanDeleteAnyMessageGroup) {
		toSerialize["can_delete_any_message_group"] = o.CanDeleteAnyMessageGroup
	}
	if !IsNil(o.CanDeleteOwnMessageGroup) {
		toSerialize["can_delete_own_message_group"] = o.CanDeleteOwnMessageGroup
	}
	if !IsNil(o.CanMoveMessagesOutOfChannelGroup) {
		toSerialize["can_move_messages_out_of_channel_group"] = o.CanMoveMessagesOutOfChannelGroup
	}
	if !IsNil(o.CanMoveMessagesWithinChannelGroup) {
		toSerialize["can_move_messages_within_channel_group"] = o.CanMoveMessagesWithinChannelGroup
	}
	if !IsNil(o.CanSendMessageGroup) {
		toSerialize["can_send_message_group"] = o.CanSendMessageGroup
	}
	toSerialize["can_subscribe_group"] = o.CanSubscribeGroup
	if !IsNil(o.CanResolveTopicsGroup) {
		toSerialize["can_resolve_topics_group"] = o.CanResolveTopicsGroup
	}
	toSerialize["subscriber_count"] = o.SubscriberCount
	toSerialize["stream_weekly_traffic"] = o.StreamWeeklyTraffic.Get()
	return toSerialize, nil
}

func (o *BasicChannel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stream_id",
		"name",
		"is_archived",
		"description",
		"date_created",
		"creator_id",
		"invite_only",
		"rendered_description",
		"is_web_public",
		"stream_post_policy",
		"message_retention_days",
		"history_public_to_subscribers",
		"first_message_id",
		"folder_id",
		"is_recently_active",
		"is_announcement_only",
		"can_remove_subscribers_group",
		"can_subscribe_group",
		"subscriber_count",
		"stream_weekly_traffic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBasicChannel := _BasicChannel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBasicChannel)

	if err != nil {
		return err
	}

	*o = BasicChannel(varBasicChannel)

	return err
}

type NullableBasicChannel struct {
	value *BasicChannel
	isSet bool
}

func (v NullableBasicChannel) Get() *BasicChannel {
	return v.value
}

func (v *NullableBasicChannel) Set(val *BasicChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicChannel(val *BasicChannel) *NullableBasicChannel {
	return &NullableBasicChannel{value: val, isSet: true}
}

func (v NullableBasicChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
