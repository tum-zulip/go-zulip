/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf9 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf9{}

// GetEvents200ResponseAllOfEventsInnerOneOf9 Event sent to other users when users have been unsubscribed from channels. Sent to all users if the channel is public or to only the existing subscribers if the channel is private.  **Changes**: Prior to Zulip 8.0 (feature level 220), this event was incorrectly not sent to guest users when subscribers to web-public channels and subscribed public channels changed.  In Zulip 4.0 (feature level 35), the singular `user_id` and `stream_id` integers included in this event were replaced with plural `user_ids` and `stream_ids` integer arrays.  In Zulip 3.0 (feature level 19), the `stream_id` field was added to identify the channel the user unsubscribed from, replacing the `name` field. 
type GetEvents200ResponseAllOfEventsInnerOneOf9 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op *string `json:"op,omitempty"`
	// The IDs of the channels from which the users have been unsubscribed from.  When a user is deactivated, the server will send this event removing the user's subscriptions before the `realm_user` event for the user's deactivation.  **Changes**: Before Zulip 10.0 (feature level 377), this event was not sent on user deactivation. Clients supporting older server versions and maintaining peer subscriber data need to remove all channel subscriptions for a user when processing the `realm_user` event with `op=\"remove\"`.  **Changes**: New in Zulip 4.0 (feature level 35), replacing the `stream_id` integer. 
	StreamIds []int32 `json:"stream_ids,omitempty"`
	// The IDs of the users who have been unsubscribed.  **Changes**: New in Zulip 4.0 (feature level 35), replacing the `user_id` integer. 
	UserIds []int32 `json:"user_ids,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf9 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf9() *GetEvents200ResponseAllOfEventsInnerOneOf9 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf9{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf9WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf9WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf9 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf9{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) SetOp(v string) {
	o.Op = &v
}

// GetStreamIds returns the StreamIds field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetStreamIds() []int32 {
	if o == nil || IsNil(o.StreamIds) {
		var ret []int32
		return ret
	}
	return o.StreamIds
}

// GetStreamIdsOk returns a tuple with the StreamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetStreamIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.StreamIds) {
		return nil, false
	}
	return o.StreamIds, true
}

// HasStreamIds returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) HasStreamIds() bool {
	if o != nil && !IsNil(o.StreamIds) {
		return true
	}

	return false
}

// SetStreamIds gets a reference to the given []int32 and assigns it to the StreamIds field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) SetStreamIds(v []int32) {
	o.StreamIds = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetUserIds() []int32 {
	if o == nil || IsNil(o.UserIds) {
		var ret []int32
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) GetUserIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []int32 and assigns it to the UserIds field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf9) SetUserIds(v []int32) {
	o.UserIds = v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf9) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf9) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.StreamIds) {
		toSerialize["stream_ids"] = o.StreamIds
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf9 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf9
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf9) Get() *GetEvents200ResponseAllOfEventsInnerOneOf9 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf9) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf9) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf9) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf9(val *GetEvents200ResponseAllOfEventsInnerOneOf9) *NullableGetEvents200ResponseAllOfEventsInnerOneOf9 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf9{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


