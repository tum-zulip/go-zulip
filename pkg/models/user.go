/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	UserId interface{} `json:"user_id,omitempty"`
	DeliveryEmail interface{} `json:"delivery_email,omitempty"`
	Email interface{} `json:"email,omitempty"`
	FullName interface{} `json:"full_name,omitempty"`
	DateJoined interface{} `json:"date_joined,omitempty"`
	IsActive interface{} `json:"is_active,omitempty"`
	IsOwner interface{} `json:"is_owner,omitempty"`
	IsAdmin interface{} `json:"is_admin,omitempty"`
	IsGuest interface{} `json:"is_guest,omitempty"`
	IsBot interface{} `json:"is_bot,omitempty"`
	BotType interface{} `json:"bot_type,omitempty"`
	BotOwnerId interface{} `json:"bot_owner_id,omitempty"`
	Role interface{} `json:"role,omitempty"`
	Timezone interface{} `json:"timezone,omitempty"`
	AvatarUrl interface{} `json:"avatar_url,omitempty"`
	AvatarVersion interface{} `json:"avatar_version,omitempty"`
	ProfileData interface{} `json:"profile_data,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUserId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUserIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return &o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *User) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given interface{} and assigns it to the UserId field.
func (o *User) SetUserId(v interface{}) {
	o.UserId = v
}

// GetDeliveryEmail returns the DeliveryEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetDeliveryEmail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DeliveryEmail
}

// GetDeliveryEmailOk returns a tuple with the DeliveryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDeliveryEmailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DeliveryEmail) {
		return nil, false
	}
	return &o.DeliveryEmail, true
}

// HasDeliveryEmail returns a boolean if a field has been set.
func (o *User) HasDeliveryEmail() bool {
	if o != nil && !IsNil(o.DeliveryEmail) {
		return true
	}

	return false
}

// SetDeliveryEmail gets a reference to the given interface{} and assigns it to the DeliveryEmail field.
func (o *User) SetDeliveryEmail(v interface{}) {
	o.DeliveryEmail = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEmail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return &o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given interface{} and assigns it to the Email field.
func (o *User) SetEmail(v interface{}) {
	o.Email = v
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetFullName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetFullNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return &o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *User) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given interface{} and assigns it to the FullName field.
func (o *User) SetFullName(v interface{}) {
	o.FullName = v
}

// GetDateJoined returns the DateJoined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetDateJoined() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DateJoined
}

// GetDateJoinedOk returns a tuple with the DateJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDateJoinedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DateJoined) {
		return nil, false
	}
	return &o.DateJoined, true
}

// HasDateJoined returns a boolean if a field has been set.
func (o *User) HasDateJoined() bool {
	if o != nil && !IsNil(o.DateJoined) {
		return true
	}

	return false
}

// SetDateJoined gets a reference to the given interface{} and assigns it to the DateJoined field.
func (o *User) SetDateJoined(v interface{}) {
	o.DateJoined = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIsActive() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIsActiveOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return &o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *User) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given interface{} and assigns it to the IsActive field.
func (o *User) SetIsActive(v interface{}) {
	o.IsActive = v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIsOwner() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIsOwnerOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsOwner) {
		return nil, false
	}
	return &o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *User) HasIsOwner() bool {
	if o != nil && !IsNil(o.IsOwner) {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given interface{} and assigns it to the IsOwner field.
func (o *User) SetIsOwner(v interface{}) {
	o.IsOwner = v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIsAdmin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIsAdminOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return &o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *User) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given interface{} and assigns it to the IsAdmin field.
func (o *User) SetIsAdmin(v interface{}) {
	o.IsAdmin = v
}

// GetIsGuest returns the IsGuest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIsGuest() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsGuest
}

// GetIsGuestOk returns a tuple with the IsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIsGuestOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsGuest) {
		return nil, false
	}
	return &o.IsGuest, true
}

// HasIsGuest returns a boolean if a field has been set.
func (o *User) HasIsGuest() bool {
	if o != nil && !IsNil(o.IsGuest) {
		return true
	}

	return false
}

// SetIsGuest gets a reference to the given interface{} and assigns it to the IsGuest field.
func (o *User) SetIsGuest(v interface{}) {
	o.IsGuest = v
}

// GetIsBot returns the IsBot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIsBot() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsBot
}

// GetIsBotOk returns a tuple with the IsBot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIsBotOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsBot) {
		return nil, false
	}
	return &o.IsBot, true
}

// HasIsBot returns a boolean if a field has been set.
func (o *User) HasIsBot() bool {
	if o != nil && !IsNil(o.IsBot) {
		return true
	}

	return false
}

// SetIsBot gets a reference to the given interface{} and assigns it to the IsBot field.
func (o *User) SetIsBot(v interface{}) {
	o.IsBot = v
}

// GetBotType returns the BotType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetBotType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BotType
}

// GetBotTypeOk returns a tuple with the BotType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetBotTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BotType) {
		return nil, false
	}
	return &o.BotType, true
}

// HasBotType returns a boolean if a field has been set.
func (o *User) HasBotType() bool {
	if o != nil && !IsNil(o.BotType) {
		return true
	}

	return false
}

// SetBotType gets a reference to the given interface{} and assigns it to the BotType field.
func (o *User) SetBotType(v interface{}) {
	o.BotType = v
}

// GetBotOwnerId returns the BotOwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetBotOwnerId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BotOwnerId
}

// GetBotOwnerIdOk returns a tuple with the BotOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetBotOwnerIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BotOwnerId) {
		return nil, false
	}
	return &o.BotOwnerId, true
}

// HasBotOwnerId returns a boolean if a field has been set.
func (o *User) HasBotOwnerId() bool {
	if o != nil && !IsNil(o.BotOwnerId) {
		return true
	}

	return false
}

// SetBotOwnerId gets a reference to the given interface{} and assigns it to the BotOwnerId field.
func (o *User) SetBotOwnerId(v interface{}) {
	o.BotOwnerId = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetRole() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRoleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return &o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *User) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given interface{} and assigns it to the Role field.
func (o *User) SetRole(v interface{}) {
	o.Role = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetTimezone() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetTimezoneOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return &o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *User) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given interface{} and assigns it to the Timezone field.
func (o *User) SetTimezone(v interface{}) {
	o.Timezone = v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAvatarUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAvatarUrlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *User) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given interface{} and assigns it to the AvatarUrl field.
func (o *User) SetAvatarUrl(v interface{}) {
	o.AvatarUrl = v
}

// GetAvatarVersion returns the AvatarVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAvatarVersion() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AvatarVersion
}

// GetAvatarVersionOk returns a tuple with the AvatarVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAvatarVersionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AvatarVersion) {
		return nil, false
	}
	return &o.AvatarVersion, true
}

// HasAvatarVersion returns a boolean if a field has been set.
func (o *User) HasAvatarVersion() bool {
	if o != nil && !IsNil(o.AvatarVersion) {
		return true
	}

	return false
}

// SetAvatarVersion gets a reference to the given interface{} and assigns it to the AvatarVersion field.
func (o *User) SetAvatarVersion(v interface{}) {
	o.AvatarVersion = v
}

// GetProfileData returns the ProfileData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetProfileData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProfileData
}

// GetProfileDataOk returns a tuple with the ProfileData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetProfileDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileData) {
		return nil, false
	}
	return &o.ProfileData, true
}

// HasProfileData returns a boolean if a field has been set.
func (o *User) HasProfileData() bool {
	if o != nil && !IsNil(o.ProfileData) {
		return true
	}

	return false
}

// SetProfileData gets a reference to the given interface{} and assigns it to the ProfileData field.
func (o *User) SetProfileData(v interface{}) {
	o.ProfileData = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.DeliveryEmail != nil {
		toSerialize["delivery_email"] = o.DeliveryEmail
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.DateJoined != nil {
		toSerialize["date_joined"] = o.DateJoined
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.IsOwner != nil {
		toSerialize["is_owner"] = o.IsOwner
	}
	if o.IsAdmin != nil {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if o.IsGuest != nil {
		toSerialize["is_guest"] = o.IsGuest
	}
	if o.IsBot != nil {
		toSerialize["is_bot"] = o.IsBot
	}
	if o.BotType != nil {
		toSerialize["bot_type"] = o.BotType
	}
	if o.BotOwnerId != nil {
		toSerialize["bot_owner_id"] = o.BotOwnerId
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.AvatarVersion != nil {
		toSerialize["avatar_version"] = o.AvatarVersion
	}
	if o.ProfileData != nil {
		toSerialize["profile_data"] = o.ProfileData
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


