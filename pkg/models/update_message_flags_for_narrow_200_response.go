/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateMessageFlagsForNarrow200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMessageFlagsForNarrow200Response{}

// UpdateMessageFlagsForNarrow200Response struct for UpdateMessageFlagsForNarrow200Response
type UpdateMessageFlagsForNarrow200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](zulip.com/api/rest-error-handling#ignored-parameters documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// The number of messages that were within the update range (at most `num_before + 1 + num_after`).
	ProcessedCount int32 `json:"processed_count"`
	// The number of messages where the flag's value was changed (at most `processed_count`).
	UpdatedCount int32 `json:"updated_count"`
	// The ID of the oldest message within the update range, or `null` if the range was empty.
	FirstProcessedId NullableInt32 `json:"first_processed_id"`
	// The ID of the newest message within the update range, or `null` if the range was empty.
	LastProcessedId NullableInt32 `json:"last_processed_id"`
	// Whether the update range reached backward far enough to include very oldest message matching the narrow (used by clients doing a bulk update to decide whether to issue another request anchored at `first_processed_id`).
	FoundOldest bool `json:"found_oldest"`
	// Whether the update range reached forward far enough to include very oldest message matching the narrow (used by clients doing a bulk update to decide whether to issue another request anchored at `last_processed_id`).
	FoundNewest bool `json:"found_newest"`
	// Only present if the flag is `read` and the operation is `remove`.  Zulip has an invariant that all unread messages must be in channels the user is subscribed to. This field will contain a list of the channels whose messages were skipped to mark as unread because the user is not subscribed to them.  **Changes**: New in Zulip 10.0 (feature level 355).
	IgnoredBecauseNotSubscribedChannels []int32 `json:"ignored_because_not_subscribed_channels,omitempty"`
}

type _UpdateMessageFlagsForNarrow200Response UpdateMessageFlagsForNarrow200Response

// NewUpdateMessageFlagsForNarrow200Response instantiates a new UpdateMessageFlagsForNarrow200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMessageFlagsForNarrow200Response(result string, msg string, processedCount int32, updatedCount int32, firstProcessedId NullableInt32, lastProcessedId NullableInt32, foundOldest bool, foundNewest bool) *UpdateMessageFlagsForNarrow200Response {
	this := UpdateMessageFlagsForNarrow200Response{}
	this.Result = result
	this.Msg = msg
	this.ProcessedCount = processedCount
	this.UpdatedCount = updatedCount
	this.FirstProcessedId = firstProcessedId
	this.LastProcessedId = lastProcessedId
	this.FoundOldest = foundOldest
	this.FoundNewest = foundNewest
	return &this
}

// NewUpdateMessageFlagsForNarrow200ResponseWithDefaults instantiates a new UpdateMessageFlagsForNarrow200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMessageFlagsForNarrow200ResponseWithDefaults() *UpdateMessageFlagsForNarrow200Response {
	this := UpdateMessageFlagsForNarrow200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *UpdateMessageFlagsForNarrow200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *UpdateMessageFlagsForNarrow200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *UpdateMessageFlagsForNarrow200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *UpdateMessageFlagsForNarrow200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *UpdateMessageFlagsForNarrow200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetProcessedCount returns the ProcessedCount field value
func (o *UpdateMessageFlagsForNarrow200Response) GetProcessedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessedCount
}

// GetProcessedCountOk returns a tuple with the ProcessedCount field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetProcessedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedCount, true
}

// SetProcessedCount sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetProcessedCount(v int32) {
	o.ProcessedCount = v
}

// GetUpdatedCount returns the UpdatedCount field value
func (o *UpdateMessageFlagsForNarrow200Response) GetUpdatedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedCount
}

// GetUpdatedCountOk returns a tuple with the UpdatedCount field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetUpdatedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedCount, true
}

// SetUpdatedCount sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetUpdatedCount(v int32) {
	o.UpdatedCount = v
}

// GetFirstProcessedId returns the FirstProcessedId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UpdateMessageFlagsForNarrow200Response) GetFirstProcessedId() int32 {
	if o == nil || o.FirstProcessedId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.FirstProcessedId.Get()
}

// GetFirstProcessedIdOk returns a tuple with the FirstProcessedId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMessageFlagsForNarrow200Response) GetFirstProcessedIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstProcessedId.Get(), o.FirstProcessedId.IsSet()
}

// SetFirstProcessedId sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetFirstProcessedId(v int32) {
	o.FirstProcessedId.Set(&v)
}

// GetLastProcessedId returns the LastProcessedId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UpdateMessageFlagsForNarrow200Response) GetLastProcessedId() int32 {
	if o == nil || o.LastProcessedId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.LastProcessedId.Get()
}

// GetLastProcessedIdOk returns a tuple with the LastProcessedId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMessageFlagsForNarrow200Response) GetLastProcessedIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastProcessedId.Get(), o.LastProcessedId.IsSet()
}

// SetLastProcessedId sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetLastProcessedId(v int32) {
	o.LastProcessedId.Set(&v)
}

// GetFoundOldest returns the FoundOldest field value
func (o *UpdateMessageFlagsForNarrow200Response) GetFoundOldest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FoundOldest
}

// GetFoundOldestOk returns a tuple with the FoundOldest field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetFoundOldestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FoundOldest, true
}

// SetFoundOldest sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetFoundOldest(v bool) {
	o.FoundOldest = v
}

// GetFoundNewest returns the FoundNewest field value
func (o *UpdateMessageFlagsForNarrow200Response) GetFoundNewest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FoundNewest
}

// GetFoundNewestOk returns a tuple with the FoundNewest field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetFoundNewestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FoundNewest, true
}

// SetFoundNewest sets field value
func (o *UpdateMessageFlagsForNarrow200Response) SetFoundNewest(v bool) {
	o.FoundNewest = v
}

// GetIgnoredBecauseNotSubscribedChannels returns the IgnoredBecauseNotSubscribedChannels field value if set, zero value otherwise.
func (o *UpdateMessageFlagsForNarrow200Response) GetIgnoredBecauseNotSubscribedChannels() []int32 {
	if o == nil || IsNil(o.IgnoredBecauseNotSubscribedChannels) {
		var ret []int32
		return ret
	}
	return o.IgnoredBecauseNotSubscribedChannels
}

// GetIgnoredBecauseNotSubscribedChannelsOk returns a tuple with the IgnoredBecauseNotSubscribedChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMessageFlagsForNarrow200Response) GetIgnoredBecauseNotSubscribedChannelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IgnoredBecauseNotSubscribedChannels) {
		return nil, false
	}
	return o.IgnoredBecauseNotSubscribedChannels, true
}

// HasIgnoredBecauseNotSubscribedChannels returns a boolean if a field has been set.
func (o *UpdateMessageFlagsForNarrow200Response) HasIgnoredBecauseNotSubscribedChannels() bool {
	if o != nil && !IsNil(o.IgnoredBecauseNotSubscribedChannels) {
		return true
	}

	return false
}

// SetIgnoredBecauseNotSubscribedChannels gets a reference to the given []int32 and assigns it to the IgnoredBecauseNotSubscribedChannels field.
func (o *UpdateMessageFlagsForNarrow200Response) SetIgnoredBecauseNotSubscribedChannels(v []int32) {
	o.IgnoredBecauseNotSubscribedChannels = v
}

func (o UpdateMessageFlagsForNarrow200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMessageFlagsForNarrow200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	toSerialize["processed_count"] = o.ProcessedCount
	toSerialize["updated_count"] = o.UpdatedCount
	toSerialize["first_processed_id"] = o.FirstProcessedId.Get()
	toSerialize["last_processed_id"] = o.LastProcessedId.Get()
	toSerialize["found_oldest"] = o.FoundOldest
	toSerialize["found_newest"] = o.FoundNewest
	if !IsNil(o.IgnoredBecauseNotSubscribedChannels) {
		toSerialize["ignored_because_not_subscribed_channels"] = o.IgnoredBecauseNotSubscribedChannels
	}
	return toSerialize, nil
}

func (o *UpdateMessageFlagsForNarrow200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"processed_count",
		"updated_count",
		"first_processed_id",
		"last_processed_id",
		"found_oldest",
		"found_newest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMessageFlagsForNarrow200Response := _UpdateMessageFlagsForNarrow200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMessageFlagsForNarrow200Response)

	if err != nil {
		return err
	}

	*o = UpdateMessageFlagsForNarrow200Response(varUpdateMessageFlagsForNarrow200Response)

	return err
}

type NullableUpdateMessageFlagsForNarrow200Response struct {
	value *UpdateMessageFlagsForNarrow200Response
	isSet bool
}

func (v NullableUpdateMessageFlagsForNarrow200Response) Get() *UpdateMessageFlagsForNarrow200Response {
	return v.value
}

func (v *NullableUpdateMessageFlagsForNarrow200Response) Set(val *UpdateMessageFlagsForNarrow200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMessageFlagsForNarrow200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMessageFlagsForNarrow200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMessageFlagsForNarrow200Response(val *UpdateMessageFlagsForNarrow200Response) *NullableUpdateMessageFlagsForNarrow200Response {
	return &NullableUpdateMessageFlagsForNarrow200Response{value: val, isSet: true}
}

func (v NullableUpdateMessageFlagsForNarrow200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMessageFlagsForNarrow200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
