/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// Recipients - A message's tentative target audience.
// For channel messages, the integer ID of the channel.
// For direct messages, a list containing integer user IDs.
type Recipients struct {
	Users   *[]int32
	Channel *int32
}

// []UserAsRecipients is a convenience function that returns []int32 wrapped in Recipients
func UsersAsRecipients(v *[]int32) Recipients {
	return Recipients{
		Users: v,
	}
}

// int32AsRecipients is a convenience function that returns int32 wrapped in Recipients
func ChannelAsRecipients(v *int32) Recipients {
	return Recipients{
		Channel: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Recipients) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Users
	err = newStrictDecoder(data).Decode(&dst.Users)
	if err == nil {
		jsonUsers, _ := json.Marshal(dst.Users)
		if string(jsonUsers) == "{}" { // empty struct
			dst.Users = nil
		} else {
			if err = validator.Validate(dst.Users); err != nil {
				dst.Users = nil
			} else {
				match++
			}
		}
	} else {
		dst.Users = nil
	}

	// try to unmarshal data into Channel
	err = newStrictDecoder(data).Decode(&dst.Channel)
	if err == nil {
		jsonChannel, _ := json.Marshal(dst.Channel)
		if string(jsonChannel) == "{}" { // empty struct
			dst.Channel = nil
		} else {
			if err = validator.Validate(dst.Channel); err != nil {
				dst.Channel = nil
			} else {
				match++
			}
		}
	} else {
		dst.Channel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Users = nil
		dst.Channel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Recipients)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Recipients)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Recipients) MarshalJSON() ([]byte, error) {
	if src.Users != nil {
		return json.Marshal(&src.Users)
	}

	if src.Channel != nil {
		return json.Marshal(&src.Channel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Recipients) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Users != nil {
		return obj.Users
	}

	if obj.Channel != nil {
		return obj.Channel
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Recipients) GetActualInstanceValue() interface{} {
	if obj.Users != nil {
		return *obj.Users
	}

	if obj.Channel != nil {
		return *obj.Channel
	}

	// all schemas are nil
	return nil
}

type NullableRecipients struct {
	value *Recipients
	isSet bool
}

func (v NullableRecipients) Get() *Recipients {
	return v.value
}

func (v *NullableRecipients) Set(val *Recipients) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipients) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipients) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipients(val *Recipients) *NullableRecipients {
	return &NullableRecipients{value: val, isSet: true}
}

func (v NullableRecipients) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipients) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
