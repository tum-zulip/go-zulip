/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GroupPermissionSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPermissionSetting{}

// GroupPermissionSetting Configuration for a group permission setting specifying the groups to which the setting can be set to and the default values for the setting.  **Changes**: Removed `allow_owners_group` field in Zulip 10.0 (feature level 326), as we now support anonymous user groups. Previously, the `role:owners` system group was not offered when `allow_owners_group` was false.  Removed unnecessary `id_field_name` field in Zulip 10.0 (feature level 326). Previously, this always had the value of `\"{setting_name}_id\"`; it was an internal implementation detail of the server not intended to be included in the API.
type GroupPermissionSetting struct {
	// Whether the setting can only be set to a system user group.
	RequireSystemGroup *bool `json:"require_system_group,omitempty"`
	// Whether the setting can be set to `role:internet` system group.
	AllowInternetGroup *bool `json:"allow_internet_group,omitempty"`
	// Whether the setting can be set to `role:nobody` system group.
	AllowNobodyGroup *bool `json:"allow_nobody_group,omitempty"`
	// Whether the setting can be set to `role:everyone` system group.  If false, guest users cannot exercise this permission even if they are part of the [group-setting value](/api/group-setting-values) for this setting.
	AllowEveryoneGroup *bool `json:"allow_everyone_group,omitempty"`
	// Name of the default group for the setting.
	DefaultGroupName *string `json:"default_group_name,omitempty"`
	// Name of the default group for the setting for system groups.  This is non-null only for group-level settings.
	DefaultForSystemGroups NullableString `json:"default_for_system_groups,omitempty"`
	// An array of names of system groups to which the setting can be set to.  If the list is empty, the setting can be set to system groups based on the other boolean fields.  **Changes**: New in Zulip 8.0 (feature level 225).
	AllowedSystemGroups []string `json:"allowed_system_groups,omitempty"`
}

// NewGroupPermissionSetting instantiates a new GroupPermissionSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPermissionSetting() *GroupPermissionSetting {
	this := GroupPermissionSetting{}
	return &this
}

// NewGroupPermissionSettingWithDefaults instantiates a new GroupPermissionSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPermissionSettingWithDefaults() *GroupPermissionSetting {
	this := GroupPermissionSetting{}
	return &this
}

// GetRequireSystemGroup returns the RequireSystemGroup field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetRequireSystemGroup() bool {
	if o == nil || IsNil(o.RequireSystemGroup) {
		var ret bool
		return ret
	}
	return *o.RequireSystemGroup
}

// GetRequireSystemGroupOk returns a tuple with the RequireSystemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetRequireSystemGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSystemGroup) {
		return nil, false
	}
	return o.RequireSystemGroup, true
}

// HasRequireSystemGroup returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasRequireSystemGroup() bool {
	if o != nil && !IsNil(o.RequireSystemGroup) {
		return true
	}

	return false
}

// SetRequireSystemGroup gets a reference to the given bool and assigns it to the RequireSystemGroup field.
func (o *GroupPermissionSetting) SetRequireSystemGroup(v bool) {
	o.RequireSystemGroup = &v
}

// GetAllowInternetGroup returns the AllowInternetGroup field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetAllowInternetGroup() bool {
	if o == nil || IsNil(o.AllowInternetGroup) {
		var ret bool
		return ret
	}
	return *o.AllowInternetGroup
}

// GetAllowInternetGroupOk returns a tuple with the AllowInternetGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetAllowInternetGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowInternetGroup) {
		return nil, false
	}
	return o.AllowInternetGroup, true
}

// HasAllowInternetGroup returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasAllowInternetGroup() bool {
	if o != nil && !IsNil(o.AllowInternetGroup) {
		return true
	}

	return false
}

// SetAllowInternetGroup gets a reference to the given bool and assigns it to the AllowInternetGroup field.
func (o *GroupPermissionSetting) SetAllowInternetGroup(v bool) {
	o.AllowInternetGroup = &v
}

// GetAllowNobodyGroup returns the AllowNobodyGroup field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetAllowNobodyGroup() bool {
	if o == nil || IsNil(o.AllowNobodyGroup) {
		var ret bool
		return ret
	}
	return *o.AllowNobodyGroup
}

// GetAllowNobodyGroupOk returns a tuple with the AllowNobodyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetAllowNobodyGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNobodyGroup) {
		return nil, false
	}
	return o.AllowNobodyGroup, true
}

// HasAllowNobodyGroup returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasAllowNobodyGroup() bool {
	if o != nil && !IsNil(o.AllowNobodyGroup) {
		return true
	}

	return false
}

// SetAllowNobodyGroup gets a reference to the given bool and assigns it to the AllowNobodyGroup field.
func (o *GroupPermissionSetting) SetAllowNobodyGroup(v bool) {
	o.AllowNobodyGroup = &v
}

// GetAllowEveryoneGroup returns the AllowEveryoneGroup field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetAllowEveryoneGroup() bool {
	if o == nil || IsNil(o.AllowEveryoneGroup) {
		var ret bool
		return ret
	}
	return *o.AllowEveryoneGroup
}

// GetAllowEveryoneGroupOk returns a tuple with the AllowEveryoneGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetAllowEveryoneGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowEveryoneGroup) {
		return nil, false
	}
	return o.AllowEveryoneGroup, true
}

// HasAllowEveryoneGroup returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasAllowEveryoneGroup() bool {
	if o != nil && !IsNil(o.AllowEveryoneGroup) {
		return true
	}

	return false
}

// SetAllowEveryoneGroup gets a reference to the given bool and assigns it to the AllowEveryoneGroup field.
func (o *GroupPermissionSetting) SetAllowEveryoneGroup(v bool) {
	o.AllowEveryoneGroup = &v
}

// GetDefaultGroupName returns the DefaultGroupName field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetDefaultGroupName() string {
	if o == nil || IsNil(o.DefaultGroupName) {
		var ret string
		return ret
	}
	return *o.DefaultGroupName
}

// GetDefaultGroupNameOk returns a tuple with the DefaultGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetDefaultGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultGroupName) {
		return nil, false
	}
	return o.DefaultGroupName, true
}

// HasDefaultGroupName returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasDefaultGroupName() bool {
	if o != nil && !IsNil(o.DefaultGroupName) {
		return true
	}

	return false
}

// SetDefaultGroupName gets a reference to the given string and assigns it to the DefaultGroupName field.
func (o *GroupPermissionSetting) SetDefaultGroupName(v string) {
	o.DefaultGroupName = &v
}

// GetDefaultForSystemGroups returns the DefaultForSystemGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupPermissionSetting) GetDefaultForSystemGroups() string {
	if o == nil || IsNil(o.DefaultForSystemGroups.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultForSystemGroups.Get()
}

// GetDefaultForSystemGroupsOk returns a tuple with the DefaultForSystemGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPermissionSetting) GetDefaultForSystemGroupsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultForSystemGroups.Get(), o.DefaultForSystemGroups.IsSet()
}

// HasDefaultForSystemGroups returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasDefaultForSystemGroups() bool {
	if o != nil && o.DefaultForSystemGroups.IsSet() {
		return true
	}

	return false
}

// SetDefaultForSystemGroups gets a reference to the given NullableString and assigns it to the DefaultForSystemGroups field.
func (o *GroupPermissionSetting) SetDefaultForSystemGroups(v string) {
	o.DefaultForSystemGroups.Set(&v)
}

// SetDefaultForSystemGroupsNil sets the value for DefaultForSystemGroups to be an explicit nil
func (o *GroupPermissionSetting) SetDefaultForSystemGroupsNil() {
	o.DefaultForSystemGroups.Set(nil)
}

// UnsetDefaultForSystemGroups ensures that no value is present for DefaultForSystemGroups, not even an explicit nil
func (o *GroupPermissionSetting) UnsetDefaultForSystemGroups() {
	o.DefaultForSystemGroups.Unset()
}

// GetAllowedSystemGroups returns the AllowedSystemGroups field value if set, zero value otherwise.
func (o *GroupPermissionSetting) GetAllowedSystemGroups() []string {
	if o == nil || IsNil(o.AllowedSystemGroups) {
		var ret []string
		return ret
	}
	return o.AllowedSystemGroups
}

// GetAllowedSystemGroupsOk returns a tuple with the AllowedSystemGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermissionSetting) GetAllowedSystemGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedSystemGroups) {
		return nil, false
	}
	return o.AllowedSystemGroups, true
}

// HasAllowedSystemGroups returns a boolean if a field has been set.
func (o *GroupPermissionSetting) HasAllowedSystemGroups() bool {
	if o != nil && !IsNil(o.AllowedSystemGroups) {
		return true
	}

	return false
}

// SetAllowedSystemGroups gets a reference to the given []string and assigns it to the AllowedSystemGroups field.
func (o *GroupPermissionSetting) SetAllowedSystemGroups(v []string) {
	o.AllowedSystemGroups = v
}

func (o GroupPermissionSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPermissionSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequireSystemGroup) {
		toSerialize["require_system_group"] = o.RequireSystemGroup
	}
	if !IsNil(o.AllowInternetGroup) {
		toSerialize["allow_internet_group"] = o.AllowInternetGroup
	}
	if !IsNil(o.AllowNobodyGroup) {
		toSerialize["allow_nobody_group"] = o.AllowNobodyGroup
	}
	if !IsNil(o.AllowEveryoneGroup) {
		toSerialize["allow_everyone_group"] = o.AllowEveryoneGroup
	}
	if !IsNil(o.DefaultGroupName) {
		toSerialize["default_group_name"] = o.DefaultGroupName
	}
	if o.DefaultForSystemGroups.IsSet() {
		toSerialize["default_for_system_groups"] = o.DefaultForSystemGroups.Get()
	}
	if !IsNil(o.AllowedSystemGroups) {
		toSerialize["allowed_system_groups"] = o.AllowedSystemGroups
	}
	return toSerialize, nil
}

type NullableGroupPermissionSetting struct {
	value *GroupPermissionSetting
	isSet bool
}

func (v NullableGroupPermissionSetting) Get() *GroupPermissionSetting {
	return v.value
}

func (v *NullableGroupPermissionSetting) Set(val *GroupPermissionSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPermissionSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPermissionSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPermissionSetting(val *GroupPermissionSetting) *NullableGroupPermissionSetting {
	return &NullableGroupPermissionSetting{value: val, isSet: true}
}

func (v NullableGroupPermissionSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPermissionSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
