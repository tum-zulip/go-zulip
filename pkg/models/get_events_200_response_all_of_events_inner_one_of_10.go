/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf10{}

// GetEvents200ResponseAllOfEventsInnerOneOf10 Event type for messages.  **Changes**: In Zulip 3.1 (feature level 26), the `sender_short_name` field was removed from message objects. 
type GetEvents200ResponseAllOfEventsInnerOneOf10 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Message *MessagesEvent `json:"message,omitempty"`
	// The user's [message flags][message-flags] for the message.  Clients should inspect the flags field rather than assuming that new messages are unread; [muted users](/api/mute-user), messages sent by the current user, and more subtle scenarios can result in a new message that the server has already marked as read for the user.  **Changes**: In Zulip 8.0 (feature level 224), the `wildcard_mentioned` flag was deprecated in favor of the `stream_wildcard_mentioned` and `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists for backwards compatibility with older clients and equals `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients supporting older server versions should treat this field as a previous name for the `stream_wildcard_mentioned` flag as topic wildcard mentions were not available prior to this feature level.  [message-flags]: /api/update-message-flags#available-flags 
	Flags []string `json:"flags,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf10 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf10() *GetEvents200ResponseAllOfEventsInnerOneOf10 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf10{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf10WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf10WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf10 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf10{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) SetType(v string) {
	o.Type = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetMessage() MessagesEvent {
	if o == nil || IsNil(o.Message) {
		var ret MessagesEvent
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetMessageOk() (*MessagesEvent, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given MessagesEvent and assigns it to the Message field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) SetMessage(v MessagesEvent) {
	o.Message = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetFlags() []string {
	if o == nil || IsNil(o.Flags) {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) GetFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf10) SetFlags(v []string) {
	o.Flags = v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf10 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf10
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf10) Get() *GetEvents200ResponseAllOfEventsInnerOneOf10 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf10) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf10) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf10) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf10(val *GetEvents200ResponseAllOfEventsInnerOneOf10) *NullableGetEvents200ResponseAllOfEventsInnerOneOf10 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf10{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


