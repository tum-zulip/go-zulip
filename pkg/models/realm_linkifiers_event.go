/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmLinkifiersEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmLinkifiersEvent{}

// RealmLinkifiersEvent Event sent to all users in a Zulip organization when the set of configured [linkifiers](zulip.com/help/add-a-custom-linkifier for the organization has changed.  Processing this event is important for doing Markdown local echo correctly.  Clients will not receive this event unless the event queue is registered with the client capability `{\"linkifier_url_template\": true}`. See [`POST /register`](zulip.com/api/register-queue#parameter-client_capabilities for how client capabilities can be specified.  **Changes**: Before Zulip 7.0 (feature level 176), the `linkifier_url_template` client capability was not required. The requirement was added because linkifiers were updated to contain a URL template instead of a URL format string, which was not a backwards-compatible change.  New in Zulip 4.0 (feature level 54), replacing the deprecated `realm_filters` event type.
type RealmLinkifiersEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// An ordered array of dictionaries where each dictionary contains details about a single linkifier.  Clients should always process linkifiers in the order given; this is important if the realm has linkifiers with overlapping patterns. The order can be modified using [`PATCH /realm/linkifiers`](zulip.com/api/reorder-linkifiers.
	RealmLinkifiers []SubscriptionAddEvent0RealmLinkifiersInner `json:"realm_linkifiers,omitempty"`
}

// NewSubscriptionAddEvent0 instantiates a new RealmLinkifiersEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionAddEvent0() *RealmLinkifiersEvent {
	this := RealmLinkifiersEvent{}
	return &this
}

// NewSubscriptionAddEvent0WithDefaults instantiates a new RealmLinkifiersEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionAddEvent0WithDefaults() *RealmLinkifiersEvent {
	this := RealmLinkifiersEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmLinkifiersEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmLinkifiersEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmLinkifiersEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmLinkifiersEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmLinkifiersEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmLinkifiersEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmLinkifiersEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmLinkifiersEvent) SetType(v string) {
	o.Type = &v
}

// GetRealmLinkifiers returns the RealmLinkifiers field value if set, zero value otherwise.
func (o *RealmLinkifiersEvent) GetRealmLinkifiers() []SubscriptionAddEvent0RealmLinkifiersInner {
	if o == nil || IsNil(o.RealmLinkifiers) {
		var ret []SubscriptionAddEvent0RealmLinkifiersInner
		return ret
	}
	return o.RealmLinkifiers
}

// GetRealmLinkifiersOk returns a tuple with the RealmLinkifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmLinkifiersEvent) GetRealmLinkifiersOk() ([]SubscriptionAddEvent0RealmLinkifiersInner, bool) {
	if o == nil || IsNil(o.RealmLinkifiers) {
		return nil, false
	}
	return o.RealmLinkifiers, true
}

// HasRealmLinkifiers returns a boolean if a field has been set.
func (o *RealmLinkifiersEvent) HasRealmLinkifiers() bool {
	if o != nil && !IsNil(o.RealmLinkifiers) {
		return true
	}

	return false
}

// SetRealmLinkifiers gets a reference to the given []SubscriptionAddEvent0RealmLinkifiersInner and assigns it to the RealmLinkifiers field.
func (o *RealmLinkifiersEvent) SetRealmLinkifiers(v []SubscriptionAddEvent0RealmLinkifiersInner) {
	o.RealmLinkifiers = v
}

func (o RealmLinkifiersEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmLinkifiersEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RealmLinkifiers) {
		toSerialize["realm_linkifiers"] = o.RealmLinkifiers
	}
	return toSerialize, nil
}

type NullableSubscriptionAddEvent0 struct {
	value *RealmLinkifiersEvent
	isSet bool
}

func (v NullableSubscriptionAddEvent0) Get() *RealmLinkifiersEvent {
	return v.value
}

func (v *NullableSubscriptionAddEvent0) Set(val *RealmLinkifiersEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionAddEvent0) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionAddEvent0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionAddEvent0(val *RealmLinkifiersEvent) *NullableSubscriptionAddEvent0 {
	return &NullableSubscriptionAddEvent0{value: val, isSet: true}
}

func (v NullableSubscriptionAddEvent0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionAddEvent0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
