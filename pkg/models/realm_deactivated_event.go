/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmDeactivatedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmDeactivatedEvent{}

// RealmDeactivatedEvent Event sent to all users in a Zulip organization when the organization (realm) is deactivated. Its main purpose is to flush active longpolling connections so clients can immediately show the organization as deactivated.  Clients cannot rely on receiving this event, because they will no longer be able to authenticate to the Zulip API due to the deactivation, and thus can miss it if they did not have an active longpolling connection at the moment of deactivation.  Correct handling of realm deactivations requires that clients parse authentication errors from GET /events; if that is done correctly, the client can ignore this event type and rely on its handling of the `GET /events` request it will do immediately after processing this batch of events.
type RealmDeactivatedEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// The ID of the deactivated realm.
	RealmId *int32 `json:"realm_id,omitempty"`
}

// NewSubscriptionRemoveEvent4 instantiates a new RealmDeactivatedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRemoveEvent4() *RealmDeactivatedEvent {
	this := RealmDeactivatedEvent{}
	return &this
}

// NewSubscriptionRemoveEvent4WithDefaults instantiates a new RealmDeactivatedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRemoveEvent4WithDefaults() *RealmDeactivatedEvent {
	this := RealmDeactivatedEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmDeactivatedEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmDeactivatedEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmDeactivatedEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmDeactivatedEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmDeactivatedEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmDeactivatedEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmDeactivatedEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmDeactivatedEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RealmDeactivatedEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmDeactivatedEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RealmDeactivatedEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RealmDeactivatedEvent) SetOp(v string) {
	o.Op = &v
}

// GetRealmId returns the RealmId field value if set, zero value otherwise.
func (o *RealmDeactivatedEvent) GetRealmId() int32 {
	if o == nil || IsNil(o.RealmId) {
		var ret int32
		return ret
	}
	return *o.RealmId
}

// GetRealmIdOk returns a tuple with the RealmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmDeactivatedEvent) GetRealmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RealmId) {
		return nil, false
	}
	return o.RealmId, true
}

// HasRealmId returns a boolean if a field has been set.
func (o *RealmDeactivatedEvent) HasRealmId() bool {
	if o != nil && !IsNil(o.RealmId) {
		return true
	}

	return false
}

// SetRealmId gets a reference to the given int32 and assigns it to the RealmId field.
func (o *RealmDeactivatedEvent) SetRealmId(v int32) {
	o.RealmId = &v
}

func (o RealmDeactivatedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmDeactivatedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.RealmId) {
		toSerialize["realm_id"] = o.RealmId
	}
	return toSerialize, nil
}

type NullableSubscriptionRemoveEvent4 struct {
	value *RealmDeactivatedEvent
	isSet bool
}

func (v NullableSubscriptionRemoveEvent4) Get() *RealmDeactivatedEvent {
	return v.value
}

func (v *NullableSubscriptionRemoveEvent4) Set(val *RealmDeactivatedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRemoveEvent4) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRemoveEvent4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRemoveEvent4(val *RealmDeactivatedEvent) *NullableSubscriptionRemoveEvent4 {
	return &NullableSubscriptionRemoveEvent4{value: val, isSet: true}
}

func (v NullableSubscriptionRemoveEvent4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRemoveEvent4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
