/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SubscriptionAddEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionAddEvent{}

// SubscriptionAddEvent Event sent to a user's clients when that user's channel subscriptions have changed (either the set of subscriptions or their properties).
type SubscriptionAddEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id   *int32  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Op   *string `json:"op,omitempty"`
	// A list of dictionaries where each dictionary contains information about one of the subscribed channels.  **Changes**: Removed `email_address` field from the dictionary in Zulip 8.0 (feature level 226).  Removed `role` field from the dictionary in Zulip 6.0 (feature level 133).
	Subscriptions []Subscription `json:"subscriptions,omitempty"`
}

// NewSubscriptionAddEvent instantiates a new SubscriptionAddEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionAddEvent() *SubscriptionAddEvent {
	this := SubscriptionAddEvent{}
	return &this
}

// NewSubscriptionAddEventWithDefaults instantiates a new SubscriptionAddEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionAddEventWithDefaults() *SubscriptionAddEvent {
	this := SubscriptionAddEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionAddEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionAddEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionAddEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubscriptionAddEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubscriptionAddEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionAddEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubscriptionAddEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubscriptionAddEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SubscriptionAddEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionAddEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SubscriptionAddEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *SubscriptionAddEvent) SetOp(v string) {
	o.Op = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *SubscriptionAddEvent) GetSubscriptions() []Subscription {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []Subscription
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionAddEvent) GetSubscriptionsOk() ([]Subscription, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *SubscriptionAddEvent) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []Subscription and assigns it to the Subscriptions field.
func (o *SubscriptionAddEvent) SetSubscriptions(v []Subscription) {
	o.Subscriptions = v
}

func (o SubscriptionAddEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionAddEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	return toSerialize, nil
}

type NullableSubscriptionAddEvent struct {
	value *SubscriptionAddEvent
	isSet bool
}

func (v NullableSubscriptionAddEvent) Get() *SubscriptionAddEvent {
	return v.value
}

func (v *NullableSubscriptionAddEvent) Set(val *SubscriptionAddEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionAddEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionAddEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionAddEvent(val *SubscriptionAddEvent) *NullableSubscriptionAddEvent {
	return &NullableSubscriptionAddEvent{value: val, isSet: true}
}

func (v NullableSubscriptionAddEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionAddEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
