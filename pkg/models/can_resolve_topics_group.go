/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the CanResolveTopicsGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CanResolveTopicsGroup{}

// CanResolveTopicsGroup A [group-setting value][setting-values] defining the set of users who have permission to resolve topics in the channel.  Users who have similar realm-level permissions can resolve topics in a channel regardless of the value of this setting.  **Changes**: New in Zulip 11.0 (feature level 402).  [setting-values]: /api/group-setting-values 
type CanResolveTopicsGroup struct {
	// The list of IDs of individual users in the collection of users with this permission.  **Changes**: Prior to Zulip 10.0 (feature level 303), this list would include deactivated users who had the permission before being deactivated. 
	DirectMembers []int32 `json:"direct_members,omitempty"`
	// The list of IDs of the groups in the collection of users with this permission. 
	DirectSubgroups []int32 `json:"direct_subgroups,omitempty"`
}

// NewCanResolveTopicsGroup instantiates a new CanResolveTopicsGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCanResolveTopicsGroup() *CanResolveTopicsGroup {
	this := CanResolveTopicsGroup{}
	return &this
}

// NewCanResolveTopicsGroupWithDefaults instantiates a new CanResolveTopicsGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCanResolveTopicsGroupWithDefaults() *CanResolveTopicsGroup {
	this := CanResolveTopicsGroup{}
	return &this
}

// GetDirectMembers returns the DirectMembers field value if set, zero value otherwise.
func (o *CanResolveTopicsGroup) GetDirectMembers() []int32 {
	if o == nil || IsNil(o.DirectMembers) {
		var ret []int32
		return ret
	}
	return o.DirectMembers
}

// GetDirectMembersOk returns a tuple with the DirectMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CanResolveTopicsGroup) GetDirectMembersOk() ([]int32, bool) {
	if o == nil || IsNil(o.DirectMembers) {
		return nil, false
	}
	return o.DirectMembers, true
}

// HasDirectMembers returns a boolean if a field has been set.
func (o *CanResolveTopicsGroup) HasDirectMembers() bool {
	if o != nil && !IsNil(o.DirectMembers) {
		return true
	}

	return false
}

// SetDirectMembers gets a reference to the given []int32 and assigns it to the DirectMembers field.
func (o *CanResolveTopicsGroup) SetDirectMembers(v []int32) {
	o.DirectMembers = v
}

// GetDirectSubgroups returns the DirectSubgroups field value if set, zero value otherwise.
func (o *CanResolveTopicsGroup) GetDirectSubgroups() []int32 {
	if o == nil || IsNil(o.DirectSubgroups) {
		var ret []int32
		return ret
	}
	return o.DirectSubgroups
}

// GetDirectSubgroupsOk returns a tuple with the DirectSubgroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CanResolveTopicsGroup) GetDirectSubgroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DirectSubgroups) {
		return nil, false
	}
	return o.DirectSubgroups, true
}

// HasDirectSubgroups returns a boolean if a field has been set.
func (o *CanResolveTopicsGroup) HasDirectSubgroups() bool {
	if o != nil && !IsNil(o.DirectSubgroups) {
		return true
	}

	return false
}

// SetDirectSubgroups gets a reference to the given []int32 and assigns it to the DirectSubgroups field.
func (o *CanResolveTopicsGroup) SetDirectSubgroups(v []int32) {
	o.DirectSubgroups = v
}

func (o CanResolveTopicsGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CanResolveTopicsGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DirectMembers) {
		toSerialize["direct_members"] = o.DirectMembers
	}
	if !IsNil(o.DirectSubgroups) {
		toSerialize["direct_subgroups"] = o.DirectSubgroups
	}
	return toSerialize, nil
}

type NullableCanResolveTopicsGroup struct {
	value *CanResolveTopicsGroup
	isSet bool
}

func (v NullableCanResolveTopicsGroup) Get() *CanResolveTopicsGroup {
	return v.value
}

func (v *NullableCanResolveTopicsGroup) Set(val *CanResolveTopicsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCanResolveTopicsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCanResolveTopicsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCanResolveTopicsGroup(val *CanResolveTopicsGroup) *NullableCanResolveTopicsGroup {
	return &NullableCanResolveTopicsGroup{value: val, isSet: true}
}

func (v NullableCanResolveTopicsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCanResolveTopicsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


