/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InvalidRemotePushDeviceTokenError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidRemotePushDeviceTokenError{}

// InvalidRemotePushDeviceTokenError ## Invalid push device token  A typical failed JSON response for when the push device token is not recognized by the push notification bouncer: 
type InvalidRemotePushDeviceTokenError struct {
	Result interface{} `json:"result"`
	Msg interface{} `json:"msg"`
	Code interface{} `json:"code"`
}

type _InvalidRemotePushDeviceTokenError InvalidRemotePushDeviceTokenError

// NewInvalidRemotePushDeviceTokenError instantiates a new InvalidRemotePushDeviceTokenError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidRemotePushDeviceTokenError(result interface{}, msg interface{}, code interface{}) *InvalidRemotePushDeviceTokenError {
	this := InvalidRemotePushDeviceTokenError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewInvalidRemotePushDeviceTokenErrorWithDefaults instantiates a new InvalidRemotePushDeviceTokenError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidRemotePushDeviceTokenErrorWithDefaults() *InvalidRemotePushDeviceTokenError {
	this := InvalidRemotePushDeviceTokenError{}
	return &this
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidRemotePushDeviceTokenError) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRemotePushDeviceTokenError) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *InvalidRemotePushDeviceTokenError) SetResult(v interface{}) {
	o.Result = v
}

// GetMsg returns the Msg field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidRemotePushDeviceTokenError) GetMsg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRemotePushDeviceTokenError) GetMsgOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *InvalidRemotePushDeviceTokenError) SetMsg(v interface{}) {
	o.Msg = v
}

// GetCode returns the Code field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InvalidRemotePushDeviceTokenError) GetCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvalidRemotePushDeviceTokenError) GetCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *InvalidRemotePushDeviceTokenError) SetCode(v interface{}) {
	o.Code = v
}

func (o InvalidRemotePushDeviceTokenError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidRemotePushDeviceTokenError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

func (o *InvalidRemotePushDeviceTokenError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvalidRemotePushDeviceTokenError := _InvalidRemotePushDeviceTokenError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvalidRemotePushDeviceTokenError)

	if err != nil {
		return err
	}

	*o = InvalidRemotePushDeviceTokenError(varInvalidRemotePushDeviceTokenError)

	return err
}

type NullableInvalidRemotePushDeviceTokenError struct {
	value *InvalidRemotePushDeviceTokenError
	isSet bool
}

func (v NullableInvalidRemotePushDeviceTokenError) Get() *InvalidRemotePushDeviceTokenError {
	return v.value
}

func (v *NullableInvalidRemotePushDeviceTokenError) Set(val *InvalidRemotePushDeviceTokenError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidRemotePushDeviceTokenError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidRemotePushDeviceTokenError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidRemotePushDeviceTokenError(val *InvalidRemotePushDeviceTokenError) *NullableInvalidRemotePushDeviceTokenError {
	return &NullableInvalidRemotePushDeviceTokenError{value: val, isSet: true}
}

func (v NullableInvalidRemotePushDeviceTokenError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidRemotePushDeviceTokenError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


