/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NonExistingChannelIdError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NonExistingChannelIdError{}

// NonExistingChannelIdError struct for NonExistingChannelIdError
type NonExistingChannelIdError struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// A string that identifies the error.
	Code string `json:"code"`
	// The channel ID that could not be found.
	StreamId *int32 `json:"stream_id,omitempty"`
}

type _NonExistingChannelIdError NonExistingChannelIdError

// NewNonExistingChannelIdError instantiates a new NonExistingChannelIdError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonExistingChannelIdError(result string, msg string, code string) *NonExistingChannelIdError {
	this := NonExistingChannelIdError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewNonExistingChannelIdErrorWithDefaults instantiates a new NonExistingChannelIdError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonExistingChannelIdErrorWithDefaults() *NonExistingChannelIdError {
	this := NonExistingChannelIdError{}
	return &this
}

// GetResult returns the Result field value
func (o *NonExistingChannelIdError) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *NonExistingChannelIdError) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *NonExistingChannelIdError) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *NonExistingChannelIdError) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *NonExistingChannelIdError) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *NonExistingChannelIdError) SetMsg(v string) {
	o.Msg = v
}

// GetCode returns the Code field value
func (o *NonExistingChannelIdError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *NonExistingChannelIdError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *NonExistingChannelIdError) SetCode(v string) {
	o.Code = v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *NonExistingChannelIdError) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonExistingChannelIdError) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *NonExistingChannelIdError) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *NonExistingChannelIdError) SetStreamId(v int32) {
	o.StreamId = &v
}

func (o NonExistingChannelIdError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NonExistingChannelIdError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	toSerialize["code"] = o.Code
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	return toSerialize, nil
}

func (o *NonExistingChannelIdError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNonExistingChannelIdError := _NonExistingChannelIdError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNonExistingChannelIdError)

	if err != nil {
		return err
	}

	*o = NonExistingChannelIdError(varNonExistingChannelIdError)

	return err
}

type NullableNonExistingChannelIdError struct {
	value *NonExistingChannelIdError
	isSet bool
}

func (v NullableNonExistingChannelIdError) Get() *NonExistingChannelIdError {
	return v.value
}

func (v *NullableNonExistingChannelIdError) Set(val *NonExistingChannelIdError) {
	v.value = val
	v.isSet = true
}

func (v NullableNonExistingChannelIdError) IsSet() bool {
	return v.isSet
}

func (v *NullableNonExistingChannelIdError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonExistingChannelIdError(val *NonExistingChannelIdError) *NullableNonExistingChannelIdError {
	return &NullableNonExistingChannelIdError{value: val, isSet: true}
}

func (v NullableNonExistingChannelIdError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonExistingChannelIdError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
