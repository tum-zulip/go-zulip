/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ExportConsent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportConsent{}

// ExportConsent struct for ExportConsent
type ExportConsent struct {
	// The user ID.
	UserId *int32 `json:"user_id,omitempty"`
	// Whether the user has consented for their private data export.
	Consented *bool `json:"consented,omitempty"`
}

// NewExportConsent instantiates a new ExportConsent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportConsent() *ExportConsent {
	this := ExportConsent{}
	return &this
}

// NewExportConsentWithDefaults instantiates a new ExportConsent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportConsentWithDefaults() *ExportConsent {
	this := ExportConsent{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ExportConsent) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConsent) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ExportConsent) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ExportConsent) SetUserId(v int32) {
	o.UserId = &v
}

// GetConsented returns the Consented field value if set, zero value otherwise.
func (o *ExportConsent) GetConsented() bool {
	if o == nil || IsNil(o.Consented) {
		var ret bool
		return ret
	}
	return *o.Consented
}

// GetConsentedOk returns a tuple with the Consented field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConsent) GetConsentedOk() (*bool, bool) {
	if o == nil || IsNil(o.Consented) {
		return nil, false
	}
	return o.Consented, true
}

// HasConsented returns a boolean if a field has been set.
func (o *ExportConsent) HasConsented() bool {
	if o != nil && !IsNil(o.Consented) {
		return true
	}

	return false
}

// SetConsented gets a reference to the given bool and assigns it to the Consented field.
func (o *ExportConsent) SetConsented(v bool) {
	o.Consented = &v
}

func (o ExportConsent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportConsent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Consented) {
		toSerialize["consented"] = o.Consented
	}
	return toSerialize, nil
}

type NullableExportConsent struct {
	value *ExportConsent
	isSet bool
}

func (v NullableExportConsent) Get() *ExportConsent {
	return v.value
}

func (v *NullableExportConsent) Set(val *ExportConsent) {
	v.value = val
	v.isSet = true
}

func (v NullableExportConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableExportConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportConsent(val *ExportConsent) *NullableExportConsent {
	return &NullableExportConsent{value: val, isSet: true}
}

func (v NullableExportConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
