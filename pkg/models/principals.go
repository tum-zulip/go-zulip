/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// Principals - A list of user IDs (preferred) or Zulip API email addresses of the users to be subscribed to or unsubscribed from the channels specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).
type Principals struct {
	ArrayOfInt32  *[]int32
	ArrayOfString *[]string
}

// []int32AsPrincipals is a convenience function that returns []int32 wrapped in Principals
func ArrayOfInt32AsPrincipals(v *[]int32) Principals {
	return Principals{
		ArrayOfInt32: v,
	}
}

// []stringAsPrincipals is a convenience function that returns []string wrapped in Principals
func ArrayOfStringAsPrincipals(v *[]string) Principals {
	return Principals{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Principals) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfInt32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfInt32)
	if err == nil {
		jsonArrayOfInt32, _ := json.Marshal(dst.ArrayOfInt32)
		if string(jsonArrayOfInt32) == "{}" { // empty struct
			dst.ArrayOfInt32 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfInt32); err != nil {
				dst.ArrayOfInt32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfInt32 = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfInt32 = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Principals)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Principals)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Principals) MarshalJSON() ([]byte, error) {
	if src.ArrayOfInt32 != nil {
		return json.Marshal(&src.ArrayOfInt32)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Principals) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfInt32 != nil {
		return obj.ArrayOfInt32
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Principals) GetActualInstanceValue() interface{} {
	if obj.ArrayOfInt32 != nil {
		return *obj.ArrayOfInt32
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullablePrincipals struct {
	value *Principals
	isSet bool
}

func (v NullablePrincipals) Get() *Principals {
	return v.value
}

func (v *NullablePrincipals) Set(val *Principals) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipals) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipals(val *Principals) *NullablePrincipals {
	return &NullablePrincipals{value: val, isSet: true}
}

func (v NullablePrincipals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
