/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Invite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invite{}

// Invite A dictionary containing details about an [invitation](zulip.com/help/invite-new-users.
type Invite struct {
	// The ID of the invitation.  Note that email invitations and reusable invitation links are stored in different database tables on the server, so each ID is guaranteed to be unique in combination with the boolean value of `is_multiuse`, e.g. there can only be one invitation with `id: 1` and `is_multiuse: true`.
	Id *int32 `json:"id,omitempty"`
	// The [user ID](zulip.com/api/get-user of the user who created the invitation.  **Changes**: New in Zulip 3.0 (feature level 22), replacing the `ref` field which contained the Zulip display email address of the user who created the invitation.
	InvitedByUserId *int32 `json:"invited_by_user_id,omitempty"`
	// The UNIX timestamp for when the invitation was created, in UTC seconds.
	Invited *Timestamp `json:"invited,omitempty"`
	// The UNIX timestamp for when the invitation will expire, in UTC seconds. If `null`, the invitation never expires.
	ExpiryDate NullableTimestamp `json:"expiry_date,omitempty"`
	// The [organization-level role](zulip.com/api/roles-and-permissions of the user that is created when the invitation is accepted. Possible values are:  - 100 = Organization owner - 200 = Organization administrator - 300 = Organization moderator - 400 = Member - 600 = Guest
	InvitedAs *int32 `json:"invited_as,omitempty"`
	// The email address the invitation was sent to. This will not be present when `is_multiuse` is `true` (i.e. the invitation is a reusable invitation link).
	Email *string `json:"email,omitempty"`
	// A boolean indicating whether the referrer has opted to receive a direct message from [notification bot](zulip.com/help/configure-automated-notices when a user account is created using this invitation.  **Changes**: New in Zulip 9.0 (feature level 267). Previously, referrers always received such direct messages.
	NotifyReferrerOnJoin *bool `json:"notify_referrer_on_join,omitempty"`
	// The URL of the reusable invitation link. This will not be present when `is_multiuse` is `false` (i.e. the invitation is an email invitation).
	LinkUrl *string `json:"link_url,omitempty"`
	// A boolean specifying whether the [invitation](zulip.com/help/invite-new-users is a reusable invitation link or an email invitation.
	IsMultiuse *bool `json:"is_multiuse,omitempty"`
}

// NewInvite instantiates a new Invite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvite() *Invite {
	this := Invite{}
	return &this
}

// NewInviteWithDefaults instantiates a new Invite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteWithDefaults() *Invite {
	this := Invite{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Invite) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Invite) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Invite) SetId(v int32) {
	o.Id = &v
}

// GetInvitedByUserId returns the InvitedByUserId field value if set, zero value otherwise.
func (o *Invite) GetInvitedByUserId() int32 {
	if o == nil || IsNil(o.InvitedByUserId) {
		var ret int32
		return ret
	}
	return *o.InvitedByUserId
}

// GetInvitedByUserIdOk returns a tuple with the InvitedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetInvitedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InvitedByUserId) {
		return nil, false
	}
	return o.InvitedByUserId, true
}

// HasInvitedByUserId returns a boolean if a field has been set.
func (o *Invite) HasInvitedByUserId() bool {
	if o != nil && !IsNil(o.InvitedByUserId) {
		return true
	}

	return false
}

// SetInvitedByUserId gets a reference to the given int32 and assigns it to the InvitedByUserId field.
func (o *Invite) SetInvitedByUserId(v int32) {
	o.InvitedByUserId = &v
}

// GetInvited returns the Invited field value if set, zero value otherwise.
func (o *Invite) GetInvited() Timestamp {
	if o == nil || IsNil(o.Invited) {
		var ret Timestamp
		return ret
	}
	return *o.Invited
}

// GetInvitedOk returns a tuple with the Invited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetInvitedOk() (*Timestamp, bool) {
	if o == nil || IsNil(o.Invited) {
		return nil, false
	}
	return o.Invited, true
}

// HasInvited returns a boolean if a field has been set.
func (o *Invite) HasInvited() bool {
	if o != nil && !IsNil(o.Invited) {
		return true
	}

	return false
}

// SetInvited gets a reference to the given int32 and assigns it to the Invited field.
func (o *Invite) SetInvited(v Timestamp) {
	o.Invited = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invite) GetExpiryDate() Timestamp {
	if o == nil || IsNil(o.ExpiryDate.Get()) {
		var ret Timestamp
		return ret
	}
	return *o.ExpiryDate.Get()
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invite) GetExpiryDateOk() (*Timestamp, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryDate.Get(), o.ExpiryDate.IsSet()
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *Invite) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate.IsSet() {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given NullableTimestamp and assigns it to the ExpiryDate field.
func (o *Invite) SetExpiryDate(v Timestamp) {
	o.ExpiryDate.Set(&v)
}

// SetExpiryDateNil sets the value for ExpiryDate to be an explicit nil
func (o *Invite) SetExpiryDateNil() {
	o.ExpiryDate.Set(nil)
}

// UnsetExpiryDate ensures that no value is present for ExpiryDate, not even an explicit nil
func (o *Invite) UnsetExpiryDate() {
	o.ExpiryDate.Unset()
}

// GetInvitedAs returns the InvitedAs field value if set, zero value otherwise.
func (o *Invite) GetInvitedAs() int32 {
	if o == nil || IsNil(o.InvitedAs) {
		var ret int32
		return ret
	}
	return *o.InvitedAs
}

// GetInvitedAsOk returns a tuple with the InvitedAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetInvitedAsOk() (*int32, bool) {
	if o == nil || IsNil(o.InvitedAs) {
		return nil, false
	}
	return o.InvitedAs, true
}

// HasInvitedAs returns a boolean if a field has been set.
func (o *Invite) HasInvitedAs() bool {
	if o != nil && !IsNil(o.InvitedAs) {
		return true
	}

	return false
}

// SetInvitedAs gets a reference to the given int32 and assigns it to the InvitedAs field.
func (o *Invite) SetInvitedAs(v int32) {
	o.InvitedAs = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Invite) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Invite) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Invite) SetEmail(v string) {
	o.Email = &v
}

// GetNotifyReferrerOnJoin returns the NotifyReferrerOnJoin field value if set, zero value otherwise.
func (o *Invite) GetNotifyReferrerOnJoin() bool {
	if o == nil || IsNil(o.NotifyReferrerOnJoin) {
		var ret bool
		return ret
	}
	return *o.NotifyReferrerOnJoin
}

// GetNotifyReferrerOnJoinOk returns a tuple with the NotifyReferrerOnJoin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetNotifyReferrerOnJoinOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyReferrerOnJoin) {
		return nil, false
	}
	return o.NotifyReferrerOnJoin, true
}

// HasNotifyReferrerOnJoin returns a boolean if a field has been set.
func (o *Invite) HasNotifyReferrerOnJoin() bool {
	if o != nil && !IsNil(o.NotifyReferrerOnJoin) {
		return true
	}

	return false
}

// SetNotifyReferrerOnJoin gets a reference to the given bool and assigns it to the NotifyReferrerOnJoin field.
func (o *Invite) SetNotifyReferrerOnJoin(v bool) {
	o.NotifyReferrerOnJoin = &v
}

// GetLinkUrl returns the LinkUrl field value if set, zero value otherwise.
func (o *Invite) GetLinkUrl() string {
	if o == nil || IsNil(o.LinkUrl) {
		var ret string
		return ret
	}
	return *o.LinkUrl
}

// GetLinkUrlOk returns a tuple with the LinkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetLinkUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LinkUrl) {
		return nil, false
	}
	return o.LinkUrl, true
}

// HasLinkUrl returns a boolean if a field has been set.
func (o *Invite) HasLinkUrl() bool {
	if o != nil && !IsNil(o.LinkUrl) {
		return true
	}

	return false
}

// SetLinkUrl gets a reference to the given string and assigns it to the LinkUrl field.
func (o *Invite) SetLinkUrl(v string) {
	o.LinkUrl = &v
}

// GetIsMultiuse returns the IsMultiuse field value if set, zero value otherwise.
func (o *Invite) GetIsMultiuse() bool {
	if o == nil || IsNil(o.IsMultiuse) {
		var ret bool
		return ret
	}
	return *o.IsMultiuse
}

// GetIsMultiuseOk returns a tuple with the IsMultiuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetIsMultiuseOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMultiuse) {
		return nil, false
	}
	return o.IsMultiuse, true
}

// HasIsMultiuse returns a boolean if a field has been set.
func (o *Invite) HasIsMultiuse() bool {
	if o != nil && !IsNil(o.IsMultiuse) {
		return true
	}

	return false
}

// SetIsMultiuse gets a reference to the given bool and assigns it to the IsMultiuse field.
func (o *Invite) SetIsMultiuse(v bool) {
	o.IsMultiuse = &v
}

func (o Invite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InvitedByUserId) {
		toSerialize["invited_by_user_id"] = o.InvitedByUserId
	}
	if !IsNil(o.Invited) {
		toSerialize["invited"] = o.Invited
	}
	if o.ExpiryDate.IsSet() {
		toSerialize["expiry_date"] = o.ExpiryDate.Get()
	}
	if !IsNil(o.InvitedAs) {
		toSerialize["invited_as"] = o.InvitedAs
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.NotifyReferrerOnJoin) {
		toSerialize["notify_referrer_on_join"] = o.NotifyReferrerOnJoin
	}
	if !IsNil(o.LinkUrl) {
		toSerialize["link_url"] = o.LinkUrl
	}
	if !IsNil(o.IsMultiuse) {
		toSerialize["is_multiuse"] = o.IsMultiuse
	}
	return toSerialize, nil
}

type NullableInvite struct {
	value *Invite
	isSet bool
}

func (v NullableInvite) Get() *Invite {
	return v.value
}

func (v *NullableInvite) Set(val *Invite) {
	v.value = val
	v.isSet = true
}

func (v NullableInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvite(val *Invite) *NullableInvite {
	return &NullableInvite{value: val, isSet: true}
}

func (v NullableInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
