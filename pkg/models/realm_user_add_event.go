/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RealmUserAddEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmUserAddEvent{}

// RealmUserAddEvent Event sent to all users in a Zulip organization when a new user joins or when a guest user gains access to a user. Processing this event is important to being able to display basic details on other users given only their ID.  If the current user is a guest whose access to a newly created user is limited by a `can_access_all_users_group` policy, and the event queue was registered with the `user_list_incomplete` client capability, then the event queue will not receive an event for such a new user. If a newly created user is inaccessible to the current user via such a policy, but the client lacks `user_list_incomplete` client capability, then this event will be delivered to the queue, with an \"Unknown user\" object with the usual format but placeholder data whose only variable content is the user ID.  **Changes**: Before Zulip 8.0 (feature level 232), the `user_list_incomplete` client capability did not exist, and so all clients whose access to a new user was prevented by `can_access_all_users_group` policy would receive a fake \"Unknown user\" event for such a user.  Starting with Zulip 8.0 (feature level 228), this event is also sent when a guest user gains access to a user.
type RealmUserAddEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id     *int32  `json:"id,omitempty"`
	Type   *string `json:"type,omitempty"`
	Op     *string `json:"op,omitempty"`
	Person *User   `json:"person,omitempty"`
}

// NewUpdateDisplaySettingsEvent3 instantiates a new RealmUserAddEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDisplaySettingsEvent3() *RealmUserAddEvent {
	this := RealmUserAddEvent{}
	return &this
}

// NewUpdateDisplaySettingsEvent3WithDefaults instantiates a new RealmUserAddEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDisplaySettingsEvent3WithDefaults() *RealmUserAddEvent {
	this := RealmUserAddEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmUserAddEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserAddEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmUserAddEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmUserAddEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmUserAddEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserAddEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmUserAddEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmUserAddEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RealmUserAddEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserAddEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RealmUserAddEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RealmUserAddEvent) SetOp(v string) {
	o.Op = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *RealmUserAddEvent) GetPerson() User {
	if o == nil || IsNil(o.Person) {
		var ret User
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmUserAddEvent) GetPersonOk() (*User, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *RealmUserAddEvent) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given User and assigns it to the Person field.
func (o *RealmUserAddEvent) SetPerson(v User) {
	o.Person = &v
}

func (o RealmUserAddEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmUserAddEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	return toSerialize, nil
}

type NullableUpdateDisplaySettingsEvent3 struct {
	value *RealmUserAddEvent
	isSet bool
}

func (v NullableUpdateDisplaySettingsEvent3) Get() *RealmUserAddEvent {
	return v.value
}

func (v *NullableUpdateDisplaySettingsEvent3) Set(val *RealmUserAddEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDisplaySettingsEvent3) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDisplaySettingsEvent3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDisplaySettingsEvent3(val *RealmUserAddEvent) *NullableUpdateDisplaySettingsEvent3 {
	return &NullableUpdateDisplaySettingsEvent3{value: val, isSet: true}
}

func (v NullableUpdateDisplaySettingsEvent3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDisplaySettingsEvent3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
