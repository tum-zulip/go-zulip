/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// EventEnvelope - struct for EventEnvelope
type EventEnvelope struct {
	AlertWordsEvent                      *AlertWordsEvent
	UpdateDisplaySettingsEvent           *UpdateDisplaySettingsEvent
	MessageEvent                         *MessageEvent
	HasZoomTokenEvent                    *HasZoomTokenEvent
	InvitesChangedEvent                  *InvitesChangedEvent
	RealmUserAddEvent                    *RealmUserAddEvent
	RealmUserRemoveEvent                 *RealmUserRemoveEvent
	PresenceEvent                        *PresenceEvent
	StreamCreateEvent                    *StreamCreateEvent
	StreamDeleteEvent                    *StreamDeleteEvent
	StreamUpdateEvent                    *StreamUpdateEvent
	ReactionAddEvent                     *ReactionAddEvent
	UpdateGlobalNotificationsEvent       *UpdateGlobalNotificationsEvent
	ReactionRemoveEvent                  *ReactionRemoveEvent
	AttachmentAddEvent                   *AttachmentAddEvent
	AttachmentUpdateEvent                *AttachmentUpdateEvent
	AttachmentRemoveEvent                *AttachmentRemoveEvent
	PushDeviceEvent                      *PushDeviceEvent
	SubmessageEvent                      *SubmessageEvent
	UserStatusEvent                      *UserStatusEvent
	CustomProfileFieldsEvent             *CustomProfileFieldsEvent
	DefaultStreamGroupsEvent             *DefaultStreamGroupsEvent
	DefaultStreamsEvent                  *DefaultStreamsEvent
	UserSettingsUpdateEvent              *UserSettingsUpdateEvent
	DeleteMessageEvent                   *DeleteMessageEvent
	MutedTopicsEvent                     *MutedTopicsEvent
	UserTopicEvent                       *UserTopicEvent
	MutedUsersEvent                      *MutedUsersEvent
	HeartbeatEvent                       *HeartbeatEvent
	OnboardingStepsEvent                 *OnboardingStepsEvent
	UpdateMessageEvent                   *UpdateMessageEvent
	TypingStartEvent                     *TypingStartEvent
	TypingStopEvent                      *TypingStopEvent
	TypingEditMessageStartEvent          *TypingEditMessageStartEvent
	RealmUserUpdateEvent                 *RealmUserUpdateEvent
	TypingEditMessageStopEvent           *TypingEditMessageStopEvent
	UpdateMessageFlagsAddEvent           *UpdateMessageFlagsAddEvent
	UpdateMessageFlagsRemoveEvent        *UpdateMessageFlagsRemoveEvent
	UserGroupAddEvent                    *UserGroupAddEvent
	UserGroupUpdateEvent                 *UserGroupUpdateEvent
	UserGroupAddMembersEvent             *UserGroupAddMembersEvent
	UserGroupRemoveMembersEvent          *UserGroupRemoveMembersEvent
	UserGroupAddSubgroupsEvent           *UserGroupAddSubgroupsEvent
	UserGroupRemoveSubgroupsEvent        *UserGroupRemoveSubgroupsEvent
	UserGroupRemoveEvent                 *UserGroupRemoveEvent
	SubscriptionAddEvent                 *SubscriptionAddEvent
	RealmLinkifiersEvent                 *RealmLinkifiersEvent
	RealmFiltersEvent                    *RealmFiltersEvent
	RealmPlaygroundsEvent                *RealmPlaygroundsEvent
	RealmEmojiUpdateEvent                *RealmEmojiUpdateEvent
	RealmDomainsAddEvent                 *RealmDomainsAddEvent
	RealmDomainsChangeEvent              *RealmDomainsChangeEvent
	RealmDomainsRemoveEvent              *RealmDomainsRemoveEvent
	RealmExportEvent                     *RealmExportEvent
	RealmExportConsentEvent              *RealmExportConsentEvent
	RealmBotAddEvent                     *RealmBotAddEvent
	SubscriptionRemoveEvent              *SubscriptionRemoveEvent
	RealmBotUpdateEvent                  *RealmBotUpdateEvent
	RealmBotRemoveEvent                  *RealmBotRemoveEvent
	RealmBotDeleteEvent                  *RealmBotDeleteEvent
	RealmUpdateEvent                     *RealmUpdateEvent
	RealmDeactivatedEvent                *RealmDeactivatedEvent
	RestartEvent                         *RestartEvent
	WebReloadClientEvent                 *WebReloadClientEvent
	RealmUpdateDictEvent                 *RealmUpdateDictEvent
	RealmUserSettingsDefaultsUpdateEvent *RealmUserSettingsDefaultsUpdateEvent
	DraftsAddEvent                       *DraftsAddEvent
	SubscriptionUpdateEvent              *SubscriptionUpdateEvent
	DraftsUpdateEvent                    *DraftsUpdateEvent
	DraftsRemoveEvent                    *DraftsRemoveEvent
	NavigationViewAddEvent               *NavigationViewAddEvent
	NavigationViewUpdateEvent            *NavigationViewUpdateEvent
	NavigationViewRemoveEvent            *NavigationViewRemoveEvent
	SavedSnippetsAddEvent                *SavedSnippetsAddEvent
	SavedSnippetsUpdateEvent             *SavedSnippetsUpdateEvent
	SavedSnippetsRemoveEvent             *SavedSnippetsRemoveEvent
	RemindersAddEvent                    *RemindersAddEvent
	RemindersRemoveEvent                 *RemindersRemoveEvent
	SubscriptionPeerAddEvent             *SubscriptionPeerAddEvent
	ScheduledMessagesAddEvent            *ScheduledMessagesAddEvent
	ScheduledMessagesUpdateEvent         *ScheduledMessagesUpdateEvent
	ScheduledMessagesRemoveEvent         *ScheduledMessagesRemoveEvent
	ChannelFolderAddEvent                *ChannelFolderAddEvent
	ChannelFolderUpdateEvent             *ChannelFolderUpdateEvent
	ChannelFolderReorderEvent            *ChannelFolderReorderEvent
	SubscriptionPeerRemoveEvent          *SubscriptionPeerRemoveEvent
}

// AlertWordsEventAsEventEnvelope is a convenience function that returns AlertWordsEvent wrapped in EventEnvelope
func AlertWordsEventAsEventEnvelope(v *AlertWordsEvent) EventEnvelope {
	return EventEnvelope{
		AlertWordsEvent: v,
	}
}

// UpdateDisplaySettingsEventAsEventEnvelope is a convenience function that returns UpdateDisplaySettingsEvent wrapped in EventEnvelope
func UpdateDisplaySettingsEventAsEventEnvelope(v *UpdateDisplaySettingsEvent) EventEnvelope {
	return EventEnvelope{
		UpdateDisplaySettingsEvent: v,
	}
}

// MessageEventAsEventEnvelope is a convenience function that returns MessageEvent wrapped in EventEnvelope
func MessageEventAsEventEnvelope(v *MessageEvent) EventEnvelope {
	return EventEnvelope{
		MessageEvent: v,
	}
}

// HasZoomTokenEventAsEventEnvelope is a convenience function that returns HasZoomTokenEvent wrapped in EventEnvelope
func HasZoomTokenEventAsEventEnvelope(v *HasZoomTokenEvent) EventEnvelope {
	return EventEnvelope{
		HasZoomTokenEvent: v,
	}
}

// InvitesChangedEventAsEventEnvelope is a convenience function that returns InvitesChangedEvent wrapped in EventEnvelope
func InvitesChangedEventAsEventEnvelope(v *InvitesChangedEvent) EventEnvelope {
	return EventEnvelope{
		InvitesChangedEvent: v,
	}
}

// RealmUserAddEventAsEventEnvelope is a convenience function that returns RealmUserAddEvent wrapped in EventEnvelope
func RealmUserAddEventAsEventEnvelope(v *RealmUserAddEvent) EventEnvelope {
	return EventEnvelope{
		RealmUserAddEvent: v,
	}
}

// RealmUserRemoveEventAsEventEnvelope is a convenience function that returns RealmUserRemoveEvent wrapped in EventEnvelope
func RealmUserRemoveEventAsEventEnvelope(v *RealmUserRemoveEvent) EventEnvelope {
	return EventEnvelope{
		RealmUserRemoveEvent: v,
	}
}

// PresenceEventAsEventEnvelope is a convenience function that returns PresenceEvent wrapped in EventEnvelope
func PresenceEventAsEventEnvelope(v *PresenceEvent) EventEnvelope {
	return EventEnvelope{
		PresenceEvent: v,
	}
}

// StreamCreateEventAsEventEnvelope is a convenience function that returns StreamCreateEvent wrapped in EventEnvelope
func StreamCreateEventAsEventEnvelope(v *StreamCreateEvent) EventEnvelope {
	return EventEnvelope{
		StreamCreateEvent: v,
	}
}

// StreamDeleteEventAsEventEnvelope is a convenience function that returns StreamDeleteEvent wrapped in EventEnvelope
func StreamDeleteEventAsEventEnvelope(v *StreamDeleteEvent) EventEnvelope {
	return EventEnvelope{
		StreamDeleteEvent: v,
	}
}

// StreamUpdateEventAsEventEnvelope is a convenience function that returns StreamUpdateEvent wrapped in EventEnvelope
func StreamUpdateEventAsEventEnvelope(v *StreamUpdateEvent) EventEnvelope {
	return EventEnvelope{
		StreamUpdateEvent: v,
	}
}

// ReactionAddEventAsEventEnvelope is a convenience function that returns ReactionAddEvent wrapped in EventEnvelope
func ReactionAddEventAsEventEnvelope(v *ReactionAddEvent) EventEnvelope {
	return EventEnvelope{
		ReactionAddEvent: v,
	}
}

// UpdateGlobalNotificationsEventAsEventEnvelope is a convenience function that returns UpdateGlobalNotificationsEvent wrapped in EventEnvelope
func UpdateGlobalNotificationsEventAsEventEnvelope(v *UpdateGlobalNotificationsEvent) EventEnvelope {
	return EventEnvelope{
		UpdateGlobalNotificationsEvent: v,
	}
}

// ReactionRemoveEventAsEventEnvelope is a convenience function that returns ReactionRemoveEvent wrapped in EventEnvelope
func ReactionRemoveEventAsEventEnvelope(v *ReactionRemoveEvent) EventEnvelope {
	return EventEnvelope{
		ReactionRemoveEvent: v,
	}
}

// AttachmentAddEventAsEventEnvelope is a convenience function that returns AttachmentAddEvent wrapped in EventEnvelope
func AttachmentAddEventAsEventEnvelope(v *AttachmentAddEvent) EventEnvelope {
	return EventEnvelope{
		AttachmentAddEvent: v,
	}
}

// AttachmentUpdateEventAsEventEnvelope is a convenience function that returns AttachmentUpdateEvent wrapped in EventEnvelope
func AttachmentUpdateEventAsEventEnvelope(v *AttachmentUpdateEvent) EventEnvelope {
	return EventEnvelope{
		AttachmentUpdateEvent: v,
	}
}

// AttachmentRemoveEventAsEventEnvelope is a convenience function that returns AttachmentRemoveEvent wrapped in EventEnvelope
func AttachmentRemoveEventAsEventEnvelope(v *AttachmentRemoveEvent) EventEnvelope {
	return EventEnvelope{
		AttachmentRemoveEvent: v,
	}
}

// PushDeviceEventAsEventEnvelope is a convenience function that returns PushDeviceEvent wrapped in EventEnvelope
func PushDeviceEventAsEventEnvelope(v *PushDeviceEvent) EventEnvelope {
	return EventEnvelope{
		PushDeviceEvent: v,
	}
}

// SubmessageEventAsEventEnvelope is a convenience function that returns SubmessageEvent wrapped in EventEnvelope
func SubmessageEventAsEventEnvelope(v *SubmessageEvent) EventEnvelope {
	return EventEnvelope{
		SubmessageEvent: v,
	}
}

// UserStatusEventAsEventEnvelope is a convenience function that returns UserStatusEvent wrapped in EventEnvelope
func UserStatusEventAsEventEnvelope(v *UserStatusEvent) EventEnvelope {
	return EventEnvelope{
		UserStatusEvent: v,
	}
}

// CustomProfileFieldsEventAsEventEnvelope is a convenience function that returns CustomProfileFieldsEvent wrapped in EventEnvelope
func CustomProfileFieldsEventAsEventEnvelope(v *CustomProfileFieldsEvent) EventEnvelope {
	return EventEnvelope{
		CustomProfileFieldsEvent: v,
	}
}

// DefaultStreamGroupsEventAsEventEnvelope is a convenience function that returns DefaultStreamGroupsEvent wrapped in EventEnvelope
func DefaultStreamGroupsEventAsEventEnvelope(v *DefaultStreamGroupsEvent) EventEnvelope {
	return EventEnvelope{
		DefaultStreamGroupsEvent: v,
	}
}

// DefaultStreamsEventAsEventEnvelope is a convenience function that returns DefaultStreamsEvent wrapped in EventEnvelope
func DefaultStreamsEventAsEventEnvelope(v *DefaultStreamsEvent) EventEnvelope {
	return EventEnvelope{
		DefaultStreamsEvent: v,
	}
}

// UserSettingsUpdateEventAsEventEnvelope is a convenience function that returns UserSettingsUpdateEvent wrapped in EventEnvelope
func UserSettingsUpdateEventAsEventEnvelope(v *UserSettingsUpdateEvent) EventEnvelope {
	return EventEnvelope{
		UserSettingsUpdateEvent: v,
	}
}

// DeleteMessageEventAsEventEnvelope is a convenience function that returns DeleteMessageEvent wrapped in EventEnvelope
func DeleteMessageEventAsEventEnvelope(v *DeleteMessageEvent) EventEnvelope {
	return EventEnvelope{
		DeleteMessageEvent: v,
	}
}

// MutedTopicsEventAsEventEnvelope is a convenience function that returns MutedTopicsEvent wrapped in EventEnvelope
func MutedTopicsEventAsEventEnvelope(v *MutedTopicsEvent) EventEnvelope {
	return EventEnvelope{
		MutedTopicsEvent: v,
	}
}

// UserTopicEventAsEventEnvelope is a convenience function that returns UserTopicEvent wrapped in EventEnvelope
func UserTopicEventAsEventEnvelope(v *UserTopicEvent) EventEnvelope {
	return EventEnvelope{
		UserTopicEvent: v,
	}
}

// MutedUsersEventAsEventEnvelope is a convenience function that returns MutedUsersEvent wrapped in EventEnvelope
func MutedUsersEventAsEventEnvelope(v *MutedUsersEvent) EventEnvelope {
	return EventEnvelope{
		MutedUsersEvent: v,
	}
}

// HeartbeatEventAsEventEnvelope is a convenience function that returns HeartbeatEvent wrapped in EventEnvelope
func HeartbeatEventAsEventEnvelope(v *HeartbeatEvent) EventEnvelope {
	return EventEnvelope{
		HeartbeatEvent: v,
	}
}

// OnboardingStepsEventAsEventEnvelope is a convenience function that returns OnboardingStepsEvent wrapped in EventEnvelope
func OnboardingStepsEventAsEventEnvelope(v *OnboardingStepsEvent) EventEnvelope {
	return EventEnvelope{
		OnboardingStepsEvent: v,
	}
}

// UpdateMessageEventAsEventEnvelope is a convenience function that returns UpdateMessageEvent wrapped in EventEnvelope
func UpdateMessageEventAsEventEnvelope(v *UpdateMessageEvent) EventEnvelope {
	return EventEnvelope{
		UpdateMessageEvent: v,
	}
}

// TypingStartEventAsEventEnvelope is a convenience function that returns TypingStartEvent wrapped in EventEnvelope
func TypingStartEventAsEventEnvelope(v *TypingStartEvent) EventEnvelope {
	return EventEnvelope{
		TypingStartEvent: v,
	}
}

// TypingStopEventAsEventEnvelope is a convenience function that returns TypingStopEvent wrapped in EventEnvelope
func TypingStopEventAsEventEnvelope(v *TypingStopEvent) EventEnvelope {
	return EventEnvelope{
		TypingStopEvent: v,
	}
}

// TypingEditMessageStartEventAsEventEnvelope is a convenience function that returns TypingEditMessageStartEvent wrapped in EventEnvelope
func TypingEditMessageStartEventAsEventEnvelope(v *TypingEditMessageStartEvent) EventEnvelope {
	return EventEnvelope{
		TypingEditMessageStartEvent: v,
	}
}

// RealmUserUpdateEventAsEventEnvelope is a convenience function that returns RealmUserUpdateEvent wrapped in EventEnvelope
func RealmUserUpdateEventAsEventEnvelope(v *RealmUserUpdateEvent) EventEnvelope {
	return EventEnvelope{
		RealmUserUpdateEvent: v,
	}
}

// TypingEditMessageStopEventAsEventEnvelope is a convenience function that returns TypingEditMessageStopEvent wrapped in EventEnvelope
func TypingEditMessageStopEventAsEventEnvelope(v *TypingEditMessageStopEvent) EventEnvelope {
	return EventEnvelope{
		TypingEditMessageStopEvent: v,
	}
}

// UpdateMessageFlagsAddEventAsEventEnvelope is a convenience function that returns UpdateMessageFlagsAddEvent wrapped in EventEnvelope
func UpdateMessageFlagsAddEventAsEventEnvelope(v *UpdateMessageFlagsAddEvent) EventEnvelope {
	return EventEnvelope{
		UpdateMessageFlagsAddEvent: v,
	}
}

// UpdateMessageFlagsRemoveEventAsEventEnvelope is a convenience function that returns UpdateMessageFlagsRemoveEvent wrapped in EventEnvelope
func UpdateMessageFlagsRemoveEventAsEventEnvelope(v *UpdateMessageFlagsRemoveEvent) EventEnvelope {
	return EventEnvelope{
		UpdateMessageFlagsRemoveEvent: v,
	}
}

// UserGroupAddEventAsEventEnvelope is a convenience function that returns UserGroupAddEvent wrapped in EventEnvelope
func UserGroupAddEventAsEventEnvelope(v *UserGroupAddEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupAddEvent: v,
	}
}

// UserGroupUpdateEventAsEventEnvelope is a convenience function that returns UserGroupUpdateEvent wrapped in EventEnvelope
func UserGroupUpdateEventAsEventEnvelope(v *UserGroupUpdateEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupUpdateEvent: v,
	}
}

// UserGroupAddMembersEventAsEventEnvelope is a convenience function that returns UserGroupAddMembersEvent wrapped in EventEnvelope
func UserGroupAddMembersEventAsEventEnvelope(v *UserGroupAddMembersEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupAddMembersEvent: v,
	}
}

// UserGroupRemoveMembersEventAsEventEnvelope is a convenience function that returns UserGroupRemoveMembersEvent wrapped in EventEnvelope
func UserGroupRemoveMembersEventAsEventEnvelope(v *UserGroupRemoveMembersEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupRemoveMembersEvent: v,
	}
}

// UserGroupAddSubgroupsEventAsEventEnvelope is a convenience function that returns UserGroupAddSubgroupsEvent wrapped in EventEnvelope
func UserGroupAddSubgroupsEventAsEventEnvelope(v *UserGroupAddSubgroupsEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupAddSubgroupsEvent: v,
	}
}

// UserGroupRemoveSubgroupsEventAsEventEnvelope is a convenience function that returns UserGroupRemoveSubgroupsEvent wrapped in EventEnvelope
func UserGroupRemoveSubgroupsEventAsEventEnvelope(v *UserGroupRemoveSubgroupsEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupRemoveSubgroupsEvent: v,
	}
}

// UserGroupRemoveEventAsEventEnvelope is a convenience function that returns UserGroupRemoveEvent wrapped in EventEnvelope
func UserGroupRemoveEventAsEventEnvelope(v *UserGroupRemoveEvent) EventEnvelope {
	return EventEnvelope{
		UserGroupRemoveEvent: v,
	}
}

// SubscriptionAddEventAsEventEnvelope is a convenience function that returns SubscriptionAddEvent wrapped in EventEnvelope
func SubscriptionAddEventAsEventEnvelope(v *SubscriptionAddEvent) EventEnvelope {
	return EventEnvelope{
		SubscriptionAddEvent: v,
	}
}

// RealmLinkifiersEventAsEventEnvelope is a convenience function that returns RealmLinkifiersEvent wrapped in EventEnvelope
func RealmLinkifiersEventAsEventEnvelope(v *RealmLinkifiersEvent) EventEnvelope {
	return EventEnvelope{
		RealmLinkifiersEvent: v,
	}
}

// RealmFiltersEventAsEventEnvelope is a convenience function that returns RealmFiltersEvent wrapped in EventEnvelope
func RealmFiltersEventAsEventEnvelope(v *RealmFiltersEvent) EventEnvelope {
	return EventEnvelope{
		RealmFiltersEvent: v,
	}
}

// RealmPlaygroundsEventAsEventEnvelope is a convenience function that returns RealmPlaygroundsEvent wrapped in EventEnvelope
func RealmPlaygroundsEventAsEventEnvelope(v *RealmPlaygroundsEvent) EventEnvelope {
	return EventEnvelope{
		RealmPlaygroundsEvent: v,
	}
}

// RealmEmojiUpdateEventAsEventEnvelope is a convenience function that returns RealmEmojiUpdateEvent wrapped in EventEnvelope
func RealmEmojiUpdateEventAsEventEnvelope(v *RealmEmojiUpdateEvent) EventEnvelope {
	return EventEnvelope{
		RealmEmojiUpdateEvent: v,
	}
}

// RealmDomainsAddEventAsEventEnvelope is a convenience function that returns RealmDomainsAddEvent wrapped in EventEnvelope
func RealmDomainsAddEventAsEventEnvelope(v *RealmDomainsAddEvent) EventEnvelope {
	return EventEnvelope{
		RealmDomainsAddEvent: v,
	}
}

// RealmDomainsChangeEventAsEventEnvelope is a convenience function that returns RealmDomainsChangeEvent wrapped in EventEnvelope
func RealmDomainsChangeEventAsEventEnvelope(v *RealmDomainsChangeEvent) EventEnvelope {
	return EventEnvelope{
		RealmDomainsChangeEvent: v,
	}
}

// RealmDomainsRemoveEventAsEventEnvelope is a convenience function that returns RealmDomainsRemoveEvent wrapped in EventEnvelope
func RealmDomainsRemoveEventAsEventEnvelope(v *RealmDomainsRemoveEvent) EventEnvelope {
	return EventEnvelope{
		RealmDomainsRemoveEvent: v,
	}
}

// RealmExportEventAsEventEnvelope is a convenience function that returns RealmExportEvent wrapped in EventEnvelope
func RealmExportEventAsEventEnvelope(v *RealmExportEvent) EventEnvelope {
	return EventEnvelope{
		RealmExportEvent: v,
	}
}

// RealmExportConsentEventAsEventEnvelope is a convenience function that returns RealmExportConsentEvent wrapped in EventEnvelope
func RealmExportConsentEventAsEventEnvelope(v *RealmExportConsentEvent) EventEnvelope {
	return EventEnvelope{
		RealmExportConsentEvent: v,
	}
}

// RealmBotAddEventAsEventEnvelope is a convenience function that returns RealmBotAddEvent wrapped in EventEnvelope
func RealmBotAddEventAsEventEnvelope(v *RealmBotAddEvent) EventEnvelope {
	return EventEnvelope{
		RealmBotAddEvent: v,
	}
}

// SubscriptionRemoveEventAsEventEnvelope is a convenience function that returns SubscriptionRemoveEvent wrapped in EventEnvelope
func SubscriptionRemoveEventAsEventEnvelope(v *SubscriptionRemoveEvent) EventEnvelope {
	return EventEnvelope{
		SubscriptionRemoveEvent: v,
	}
}

// RealmBotUpdateEventAsEventEnvelope is a convenience function that returns RealmBotUpdateEvent wrapped in EventEnvelope
func RealmBotUpdateEventAsEventEnvelope(v *RealmBotUpdateEvent) EventEnvelope {
	return EventEnvelope{
		RealmBotUpdateEvent: v,
	}
}

// RealmBotRemoveEventAsEventEnvelope is a convenience function that returns RealmBotRemoveEvent wrapped in EventEnvelope
func RealmBotRemoveEventAsEventEnvelope(v *RealmBotRemoveEvent) EventEnvelope {
	return EventEnvelope{
		RealmBotRemoveEvent: v,
	}
}

// RealmBotDeleteEventAsEventEnvelope is a convenience function that returns RealmBotDeleteEvent wrapped in EventEnvelope
func RealmBotDeleteEventAsEventEnvelope(v *RealmBotDeleteEvent) EventEnvelope {
	return EventEnvelope{
		RealmBotDeleteEvent: v,
	}
}

// RealmUpdateEventAsEventEnvelope is a convenience function that returns RealmUpdateEvent wrapped in EventEnvelope
func RealmUpdateEventAsEventEnvelope(v *RealmUpdateEvent) EventEnvelope {
	return EventEnvelope{
		RealmUpdateEvent: v,
	}
}

// RealmDeactivatedEventAsEventEnvelope is a convenience function that returns RealmDeactivatedEvent wrapped in EventEnvelope
func RealmDeactivatedEventAsEventEnvelope(v *RealmDeactivatedEvent) EventEnvelope {
	return EventEnvelope{
		RealmDeactivatedEvent: v,
	}
}

// RestartEventAsEventEnvelope is a convenience function that returns RestartEvent wrapped in EventEnvelope
func RestartEventAsEventEnvelope(v *RestartEvent) EventEnvelope {
	return EventEnvelope{
		RestartEvent: v,
	}
}

// WebReloadClientEventAsEventEnvelope is a convenience function that returns WebReloadClientEvent wrapped in EventEnvelope
func WebReloadClientEventAsEventEnvelope(v *WebReloadClientEvent) EventEnvelope {
	return EventEnvelope{
		WebReloadClientEvent: v,
	}
}

// RealmUpdateDictEventAsEventEnvelope is a convenience function that returns RealmUpdateDictEvent wrapped in EventEnvelope
func RealmUpdateDictEventAsEventEnvelope(v *RealmUpdateDictEvent) EventEnvelope {
	return EventEnvelope{
		RealmUpdateDictEvent: v,
	}
}

// RealmUserSettingsDefaultsUpdateEventAsEventEnvelope is a convenience function that returns RealmUserSettingsDefaultsUpdateEvent wrapped in EventEnvelope
func RealmUserSettingsDefaultsUpdateEventAsEventEnvelope(v *RealmUserSettingsDefaultsUpdateEvent) EventEnvelope {
	return EventEnvelope{
		RealmUserSettingsDefaultsUpdateEvent: v,
	}
}

// DraftsAddEventAsEventEnvelope is a convenience function that returns DraftsAddEvent wrapped in EventEnvelope
func DraftsAddEventAsEventEnvelope(v *DraftsAddEvent) EventEnvelope {
	return EventEnvelope{
		DraftsAddEvent: v,
	}
}

// SubscriptionUpdateEventAsEventEnvelope is a convenience function that returns SubscriptionUpdateEvent wrapped in EventEnvelope
func SubscriptionUpdateEventAsEventEnvelope(v *SubscriptionUpdateEvent) EventEnvelope {
	return EventEnvelope{
		SubscriptionUpdateEvent: v,
	}
}

// DraftsUpdateEventAsEventEnvelope is a convenience function that returns DraftsUpdateEvent wrapped in EventEnvelope
func DraftsUpdateEventAsEventEnvelope(v *DraftsUpdateEvent) EventEnvelope {
	return EventEnvelope{
		DraftsUpdateEvent: v,
	}
}

// DraftsRemoveEventAsEventEnvelope is a convenience function that returns DraftsRemoveEvent wrapped in EventEnvelope
func DraftsRemoveEventAsEventEnvelope(v *DraftsRemoveEvent) EventEnvelope {
	return EventEnvelope{
		DraftsRemoveEvent: v,
	}
}

// NavigationViewAddEventAsEventEnvelope is a convenience function that returns NavigationViewAddEvent wrapped in EventEnvelope
func NavigationViewAddEventAsEventEnvelope(v *NavigationViewAddEvent) EventEnvelope {
	return EventEnvelope{
		NavigationViewAddEvent: v,
	}
}

// NavigationViewUpdateEventAsEventEnvelope is a convenience function that returns NavigationViewUpdateEvent wrapped in EventEnvelope
func NavigationViewUpdateEventAsEventEnvelope(v *NavigationViewUpdateEvent) EventEnvelope {
	return EventEnvelope{
		NavigationViewUpdateEvent: v,
	}
}

// NavigationViewRemoveEventAsEventEnvelope is a convenience function that returns NavigationViewRemoveEvent wrapped in EventEnvelope
func NavigationViewRemoveEventAsEventEnvelope(v *NavigationViewRemoveEvent) EventEnvelope {
	return EventEnvelope{
		NavigationViewRemoveEvent: v,
	}
}

// SavedSnippetsAddEventAsEventEnvelope is a convenience function that returns SavedSnippetsAddEvent wrapped in EventEnvelope
func SavedSnippetsAddEventAsEventEnvelope(v *SavedSnippetsAddEvent) EventEnvelope {
	return EventEnvelope{
		SavedSnippetsAddEvent: v,
	}
}

// SavedSnippetsUpdateEventAsEventEnvelope is a convenience function that returns SavedSnippetsUpdateEvent wrapped in EventEnvelope
func SavedSnippetsUpdateEventAsEventEnvelope(v *SavedSnippetsUpdateEvent) EventEnvelope {
	return EventEnvelope{
		SavedSnippetsUpdateEvent: v,
	}
}

// SavedSnippetsRemoveEventAsEventEnvelope is a convenience function that returns SavedSnippetsRemoveEvent wrapped in EventEnvelope
func SavedSnippetsRemoveEventAsEventEnvelope(v *SavedSnippetsRemoveEvent) EventEnvelope {
	return EventEnvelope{
		SavedSnippetsRemoveEvent: v,
	}
}

// RemindersAddEventAsEventEnvelope is a convenience function that returns RemindersAddEvent wrapped in EventEnvelope
func RemindersAddEventAsEventEnvelope(v *RemindersAddEvent) EventEnvelope {
	return EventEnvelope{
		RemindersAddEvent: v,
	}
}

// RemindersRemoveEventAsEventEnvelope is a convenience function that returns RemindersRemoveEvent wrapped in EventEnvelope
func RemindersRemoveEventAsEventEnvelope(v *RemindersRemoveEvent) EventEnvelope {
	return EventEnvelope{
		RemindersRemoveEvent: v,
	}
}

// SubscriptionPeerAddEventAsEventEnvelope is a convenience function that returns SubscriptionPeerAddEvent wrapped in EventEnvelope
func SubscriptionPeerAddEventAsEventEnvelope(v *SubscriptionPeerAddEvent) EventEnvelope {
	return EventEnvelope{
		SubscriptionPeerAddEvent: v,
	}
}

// ScheduledMessagesAddEventAsEventEnvelope is a convenience function that returns ScheduledMessagesAddEvent wrapped in EventEnvelope
func ScheduledMessagesAddEventAsEventEnvelope(v *ScheduledMessagesAddEvent) EventEnvelope {
	return EventEnvelope{
		ScheduledMessagesAddEvent: v,
	}
}

// ScheduledMessagesUpdateEventAsEventEnvelope is a convenience function that returns ScheduledMessagesUpdateEvent wrapped in EventEnvelope
func ScheduledMessagesUpdateEventAsEventEnvelope(v *ScheduledMessagesUpdateEvent) EventEnvelope {
	return EventEnvelope{
		ScheduledMessagesUpdateEvent: v,
	}
}

// ScheduledMessagesRemoveEventAsEventEnvelope is a convenience function that returns ScheduledMessagesRemoveEvent wrapped in EventEnvelope
func ScheduledMessagesRemoveEventAsEventEnvelope(v *ScheduledMessagesRemoveEvent) EventEnvelope {
	return EventEnvelope{
		ScheduledMessagesRemoveEvent: v,
	}
}

// ChannelFolderAddEventAsEventEnvelope is a convenience function that returns ChannelFolderAddEvent wrapped in EventEnvelope
func ChannelFolderAddEventAsEventEnvelope(v *ChannelFolderAddEvent) EventEnvelope {
	return EventEnvelope{
		ChannelFolderAddEvent: v,
	}
}

// ChannelFolderUpdateEventAsEventEnvelope is a convenience function that returns ChannelFolderUpdateEvent wrapped in EventEnvelope
func ChannelFolderUpdateEventAsEventEnvelope(v *ChannelFolderUpdateEvent) EventEnvelope {
	return EventEnvelope{
		ChannelFolderUpdateEvent: v,
	}
}

// ChannelFolderReorderEventAsEventEnvelope is a convenience function that returns ChannelFolderReorderEvent wrapped in EventEnvelope
func ChannelFolderReorderEventAsEventEnvelope(v *ChannelFolderReorderEvent) EventEnvelope {
	return EventEnvelope{
		ChannelFolderReorderEvent: v,
	}
}

// SubscriptionPeerRemoveEventAsEventEnvelope is a convenience function that returns SubscriptionPeerRemoveEvent wrapped in EventEnvelope
func SubscriptionPeerRemoveEventAsEventEnvelope(v *SubscriptionPeerRemoveEvent) EventEnvelope {
	return EventEnvelope{
		SubscriptionPeerRemoveEvent: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventEnvelope) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlertWordsEvent
	err = newStrictDecoder(data).Decode(&dst.AlertWordsEvent)
	if err == nil {
		jsonAlertWordsEvent, _ := json.Marshal(dst.AlertWordsEvent)
		if string(jsonAlertWordsEvent) == "{}" { // empty struct
			dst.AlertWordsEvent = nil
		} else {
			if err = validator.Validate(dst.AlertWordsEvent); err != nil {
				dst.AlertWordsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AlertWordsEvent = nil
	}

	// try to unmarshal data into UpdateDisplaySettingsEvent
	err = newStrictDecoder(data).Decode(&dst.UpdateDisplaySettingsEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent, _ := json.Marshal(dst.UpdateDisplaySettingsEvent)
		if string(jsonUpdateDisplaySettingsEvent) == "{}" { // empty struct
			dst.UpdateDisplaySettingsEvent = nil
		} else {
			if err = validator.Validate(dst.UpdateDisplaySettingsEvent); err != nil {
				dst.UpdateDisplaySettingsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateDisplaySettingsEvent = nil
	}

	// try to unmarshal data into MessageEvent
	err = newStrictDecoder(data).Decode(&dst.MessageEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent0, _ := json.Marshal(dst.MessageEvent)
		if string(jsonUpdateDisplaySettingsEvent0) == "{}" { // empty struct
			dst.MessageEvent = nil
		} else {
			if err = validator.Validate(dst.MessageEvent); err != nil {
				dst.MessageEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageEvent = nil
	}

	// try to unmarshal data into HasZoomTokenEvent
	err = newStrictDecoder(data).Decode(&dst.HasZoomTokenEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent1, _ := json.Marshal(dst.HasZoomTokenEvent)
		if string(jsonUpdateDisplaySettingsEvent1) == "{}" { // empty struct
			dst.HasZoomTokenEvent = nil
		} else {
			if err = validator.Validate(dst.HasZoomTokenEvent); err != nil {
				dst.HasZoomTokenEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.HasZoomTokenEvent = nil
	}

	// try to unmarshal data into InvitesChangedEvent
	err = newStrictDecoder(data).Decode(&dst.InvitesChangedEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent2, _ := json.Marshal(dst.InvitesChangedEvent)
		if string(jsonUpdateDisplaySettingsEvent2) == "{}" { // empty struct
			dst.InvitesChangedEvent = nil
		} else {
			if err = validator.Validate(dst.InvitesChangedEvent); err != nil {
				dst.InvitesChangedEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvitesChangedEvent = nil
	}

	// try to unmarshal data into RealmUserAddEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUserAddEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent3, _ := json.Marshal(dst.RealmUserAddEvent)
		if string(jsonUpdateDisplaySettingsEvent3) == "{}" { // empty struct
			dst.RealmUserAddEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUserAddEvent); err != nil {
				dst.RealmUserAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserAddEvent = nil
	}

	// try to unmarshal data into RealmUserRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUserRemoveEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent4, _ := json.Marshal(dst.RealmUserRemoveEvent)
		if string(jsonUpdateDisplaySettingsEvent4) == "{}" { // empty struct
			dst.RealmUserRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUserRemoveEvent); err != nil {
				dst.RealmUserRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserRemoveEvent = nil
	}

	// try to unmarshal data into PresenceEvent
	err = newStrictDecoder(data).Decode(&dst.PresenceEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent5, _ := json.Marshal(dst.PresenceEvent)
		if string(jsonUpdateDisplaySettingsEvent5) == "{}" { // empty struct
			dst.PresenceEvent = nil
		} else {
			if err = validator.Validate(dst.PresenceEvent); err != nil {
				dst.PresenceEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.PresenceEvent = nil
	}

	// try to unmarshal data into StreamCreateEvent
	err = newStrictDecoder(data).Decode(&dst.StreamCreateEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent6, _ := json.Marshal(dst.StreamCreateEvent)
		if string(jsonUpdateDisplaySettingsEvent6) == "{}" { // empty struct
			dst.StreamCreateEvent = nil
		} else {
			if err = validator.Validate(dst.StreamCreateEvent); err != nil {
				dst.StreamCreateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.StreamCreateEvent = nil
	}

	// try to unmarshal data into StreamDeleteEvent
	err = newStrictDecoder(data).Decode(&dst.StreamDeleteEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent7, _ := json.Marshal(dst.StreamDeleteEvent)
		if string(jsonUpdateDisplaySettingsEvent7) == "{}" { // empty struct
			dst.StreamDeleteEvent = nil
		} else {
			if err = validator.Validate(dst.StreamDeleteEvent); err != nil {
				dst.StreamDeleteEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.StreamDeleteEvent = nil
	}

	// try to unmarshal data into StreamUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.StreamUpdateEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent8, _ := json.Marshal(dst.StreamUpdateEvent)
		if string(jsonUpdateDisplaySettingsEvent8) == "{}" { // empty struct
			dst.StreamUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.StreamUpdateEvent); err != nil {
				dst.StreamUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.StreamUpdateEvent = nil
	}

	// try to unmarshal data into ReactionAddEvent
	err = newStrictDecoder(data).Decode(&dst.ReactionAddEvent)
	if err == nil {
		jsonUpdateDisplaySettingsEvent9, _ := json.Marshal(dst.ReactionAddEvent)
		if string(jsonUpdateDisplaySettingsEvent9) == "{}" { // empty struct
			dst.ReactionAddEvent = nil
		} else {
			if err = validator.Validate(dst.ReactionAddEvent); err != nil {
				dst.ReactionAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ReactionAddEvent = nil
	}

	// try to unmarshal data into UpdateGlobalNotificationsEvent
	err = newStrictDecoder(data).Decode(&dst.UpdateGlobalNotificationsEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent, _ := json.Marshal(dst.UpdateGlobalNotificationsEvent)
		if string(jsonUpdateGlobalNotificationsEvent) == "{}" { // empty struct
			dst.UpdateGlobalNotificationsEvent = nil
		} else {
			if err = validator.Validate(dst.UpdateGlobalNotificationsEvent); err != nil {
				dst.UpdateGlobalNotificationsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateGlobalNotificationsEvent = nil
	}

	// try to unmarshal data into ReactionRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.ReactionRemoveEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent0, _ := json.Marshal(dst.ReactionRemoveEvent)
		if string(jsonUpdateGlobalNotificationsEvent0) == "{}" { // empty struct
			dst.ReactionRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.ReactionRemoveEvent); err != nil {
				dst.ReactionRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ReactionRemoveEvent = nil
	}

	// try to unmarshal data into AttachmentAddEvent
	err = newStrictDecoder(data).Decode(&dst.AttachmentAddEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent1, _ := json.Marshal(dst.AttachmentAddEvent)
		if string(jsonUpdateGlobalNotificationsEvent1) == "{}" { // empty struct
			dst.AttachmentAddEvent = nil
		} else {
			if err = validator.Validate(dst.AttachmentAddEvent); err != nil {
				dst.AttachmentAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AttachmentAddEvent = nil
	}

	// try to unmarshal data into AttachmentUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.AttachmentUpdateEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent2, _ := json.Marshal(dst.AttachmentUpdateEvent)
		if string(jsonUpdateGlobalNotificationsEvent2) == "{}" { // empty struct
			dst.AttachmentUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.AttachmentUpdateEvent); err != nil {
				dst.AttachmentUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AttachmentUpdateEvent = nil
	}

	// try to unmarshal data into AttachmentRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.AttachmentRemoveEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent3, _ := json.Marshal(dst.AttachmentRemoveEvent)
		if string(jsonUpdateGlobalNotificationsEvent3) == "{}" { // empty struct
			dst.AttachmentRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.AttachmentRemoveEvent); err != nil {
				dst.AttachmentRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AttachmentRemoveEvent = nil
	}

	// try to unmarshal data into PushDeviceEvent
	err = newStrictDecoder(data).Decode(&dst.PushDeviceEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent4, _ := json.Marshal(dst.PushDeviceEvent)
		if string(jsonUpdateGlobalNotificationsEvent4) == "{}" { // empty struct
			dst.PushDeviceEvent = nil
		} else {
			if err = validator.Validate(dst.PushDeviceEvent); err != nil {
				dst.PushDeviceEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.PushDeviceEvent = nil
	}

	// try to unmarshal data into SubmessageEvent
	err = newStrictDecoder(data).Decode(&dst.SubmessageEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent5, _ := json.Marshal(dst.SubmessageEvent)
		if string(jsonUpdateGlobalNotificationsEvent5) == "{}" { // empty struct
			dst.SubmessageEvent = nil
		} else {
			if err = validator.Validate(dst.SubmessageEvent); err != nil {
				dst.SubmessageEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubmessageEvent = nil
	}

	// try to unmarshal data into UserStatusEvent
	err = newStrictDecoder(data).Decode(&dst.UserStatusEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent6, _ := json.Marshal(dst.UserStatusEvent)
		if string(jsonUpdateGlobalNotificationsEvent6) == "{}" { // empty struct
			dst.UserStatusEvent = nil
		} else {
			if err = validator.Validate(dst.UserStatusEvent); err != nil {
				dst.UserStatusEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserStatusEvent = nil
	}

	// try to unmarshal data into CustomProfileFieldsEvent
	err = newStrictDecoder(data).Decode(&dst.CustomProfileFieldsEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent7, _ := json.Marshal(dst.CustomProfileFieldsEvent)
		if string(jsonUpdateGlobalNotificationsEvent7) == "{}" { // empty struct
			dst.CustomProfileFieldsEvent = nil
		} else {
			if err = validator.Validate(dst.CustomProfileFieldsEvent); err != nil {
				dst.CustomProfileFieldsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.CustomProfileFieldsEvent = nil
	}

	// try to unmarshal data into DefaultStreamGroupsEvent
	err = newStrictDecoder(data).Decode(&dst.DefaultStreamGroupsEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent8, _ := json.Marshal(dst.DefaultStreamGroupsEvent)
		if string(jsonUpdateGlobalNotificationsEvent8) == "{}" { // empty struct
			dst.DefaultStreamGroupsEvent = nil
		} else {
			if err = validator.Validate(dst.DefaultStreamGroupsEvent); err != nil {
				dst.DefaultStreamGroupsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultStreamGroupsEvent = nil
	}

	// try to unmarshal data into DefaultStreamsEvent
	err = newStrictDecoder(data).Decode(&dst.DefaultStreamsEvent)
	if err == nil {
		jsonUpdateGlobalNotificationsEvent9, _ := json.Marshal(dst.DefaultStreamsEvent)
		if string(jsonUpdateGlobalNotificationsEvent9) == "{}" { // empty struct
			dst.DefaultStreamsEvent = nil
		} else {
			if err = validator.Validate(dst.DefaultStreamsEvent); err != nil {
				dst.DefaultStreamsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultStreamsEvent = nil
	}

	// try to unmarshal data into UserSettingsUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.UserSettingsUpdateEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent, _ := json.Marshal(dst.UserSettingsUpdateEvent)
		if string(jsonUserSettingsUpdateEvent) == "{}" { // empty struct
			dst.UserSettingsUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.UserSettingsUpdateEvent); err != nil {
				dst.UserSettingsUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserSettingsUpdateEvent = nil
	}

	// try to unmarshal data into DeleteMessageEvent
	err = newStrictDecoder(data).Decode(&dst.DeleteMessageEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent0, _ := json.Marshal(dst.DeleteMessageEvent)
		if string(jsonUserSettingsUpdateEvent0) == "{}" { // empty struct
			dst.DeleteMessageEvent = nil
		} else {
			if err = validator.Validate(dst.DeleteMessageEvent); err != nil {
				dst.DeleteMessageEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteMessageEvent = nil
	}

	// try to unmarshal data into MutedTopicsEvent
	err = newStrictDecoder(data).Decode(&dst.MutedTopicsEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent1, _ := json.Marshal(dst.MutedTopicsEvent)
		if string(jsonUserSettingsUpdateEvent1) == "{}" { // empty struct
			dst.MutedTopicsEvent = nil
		} else {
			if err = validator.Validate(dst.MutedTopicsEvent); err != nil {
				dst.MutedTopicsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.MutedTopicsEvent = nil
	}

	// try to unmarshal data into UserTopicEvent
	err = newStrictDecoder(data).Decode(&dst.UserTopicEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent2, _ := json.Marshal(dst.UserTopicEvent)
		if string(jsonUserSettingsUpdateEvent2) == "{}" { // empty struct
			dst.UserTopicEvent = nil
		} else {
			if err = validator.Validate(dst.UserTopicEvent); err != nil {
				dst.UserTopicEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserTopicEvent = nil
	}

	// try to unmarshal data into MutedUsersEvent
	err = newStrictDecoder(data).Decode(&dst.MutedUsersEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent3, _ := json.Marshal(dst.MutedUsersEvent)
		if string(jsonUserSettingsUpdateEvent3) == "{}" { // empty struct
			dst.MutedUsersEvent = nil
		} else {
			if err = validator.Validate(dst.MutedUsersEvent); err != nil {
				dst.MutedUsersEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.MutedUsersEvent = nil
	}

	// try to unmarshal data into HeartbeatEvent
	err = newStrictDecoder(data).Decode(&dst.HeartbeatEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent4, _ := json.Marshal(dst.HeartbeatEvent)
		if string(jsonUserSettingsUpdateEvent4) == "{}" { // empty struct
			dst.HeartbeatEvent = nil
		} else {
			if err = validator.Validate(dst.HeartbeatEvent); err != nil {
				dst.HeartbeatEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.HeartbeatEvent = nil
	}

	// try to unmarshal data into OnboardingStepsEvent
	err = newStrictDecoder(data).Decode(&dst.OnboardingStepsEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent5, _ := json.Marshal(dst.OnboardingStepsEvent)
		if string(jsonUserSettingsUpdateEvent5) == "{}" { // empty struct
			dst.OnboardingStepsEvent = nil
		} else {
			if err = validator.Validate(dst.OnboardingStepsEvent); err != nil {
				dst.OnboardingStepsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.OnboardingStepsEvent = nil
	}

	// try to unmarshal data into UpdateMessageEvent
	err = newStrictDecoder(data).Decode(&dst.UpdateMessageEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent6, _ := json.Marshal(dst.UpdateMessageEvent)
		if string(jsonUserSettingsUpdateEvent6) == "{}" { // empty struct
			dst.UpdateMessageEvent = nil
		} else {
			if err = validator.Validate(dst.UpdateMessageEvent); err != nil {
				dst.UpdateMessageEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMessageEvent = nil
	}

	// try to unmarshal data into TypingStartEvent
	err = newStrictDecoder(data).Decode(&dst.TypingStartEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent7, _ := json.Marshal(dst.TypingStartEvent)
		if string(jsonUserSettingsUpdateEvent7) == "{}" { // empty struct
			dst.TypingStartEvent = nil
		} else {
			if err = validator.Validate(dst.TypingStartEvent); err != nil {
				dst.TypingStartEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypingStartEvent = nil
	}

	// try to unmarshal data into TypingStopEvent
	err = newStrictDecoder(data).Decode(&dst.TypingStopEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent8, _ := json.Marshal(dst.TypingStopEvent)
		if string(jsonUserSettingsUpdateEvent8) == "{}" { // empty struct
			dst.TypingStopEvent = nil
		} else {
			if err = validator.Validate(dst.TypingStopEvent); err != nil {
				dst.TypingStopEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypingStopEvent = nil
	}

	// try to unmarshal data into TypingEditMessageStartEvent
	err = newStrictDecoder(data).Decode(&dst.TypingEditMessageStartEvent)
	if err == nil {
		jsonUserSettingsUpdateEvent9, _ := json.Marshal(dst.TypingEditMessageStartEvent)
		if string(jsonUserSettingsUpdateEvent9) == "{}" { // empty struct
			dst.TypingEditMessageStartEvent = nil
		} else {
			if err = validator.Validate(dst.TypingEditMessageStartEvent); err != nil {
				dst.TypingEditMessageStartEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypingEditMessageStartEvent = nil
	}

	// try to unmarshal data into RealmUserUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUserUpdateEvent)
	if err == nil {
		jsonRealmUserUpdateEvent, _ := json.Marshal(dst.RealmUserUpdateEvent)
		if string(jsonRealmUserUpdateEvent) == "{}" { // empty struct
			dst.RealmUserUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUserUpdateEvent); err != nil {
				dst.RealmUserUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserUpdateEvent = nil
	}

	// try to unmarshal data into TypingEditMessageStopEvent
	err = newStrictDecoder(data).Decode(&dst.TypingEditMessageStopEvent)
	if err == nil {
		jsonRealmUserUpdateEvent0, _ := json.Marshal(dst.TypingEditMessageStopEvent)
		if string(jsonRealmUserUpdateEvent0) == "{}" { // empty struct
			dst.TypingEditMessageStopEvent = nil
		} else {
			if err = validator.Validate(dst.TypingEditMessageStopEvent); err != nil {
				dst.TypingEditMessageStopEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.TypingEditMessageStopEvent = nil
	}

	// try to unmarshal data into UpdateMessageFlagsAddEvent
	err = newStrictDecoder(data).Decode(&dst.UpdateMessageFlagsAddEvent)
	if err == nil {
		jsonUpdateMessageFlagsAddEvent, _ := json.Marshal(dst.UpdateMessageFlagsAddEvent)
		if string(jsonUpdateMessageFlagsAddEvent) == "{}" { // empty struct
			dst.UpdateMessageFlagsAddEvent = nil
		} else {
			if err = validator.Validate(dst.UpdateMessageFlagsAddEvent); err != nil {
				dst.UpdateMessageFlagsAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMessageFlagsAddEvent = nil
	}

	// try to unmarshal data into UpdateMessageFlagsRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.UpdateMessageFlagsRemoveEvent)
	if err == nil {
		jsonUpdateMessageFlagsRemoveEvent, _ := json.Marshal(dst.UpdateMessageFlagsRemoveEvent)
		if string(jsonUpdateMessageFlagsRemoveEvent) == "{}" { // empty struct
			dst.UpdateMessageFlagsRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.UpdateMessageFlagsRemoveEvent); err != nil {
				dst.UpdateMessageFlagsRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMessageFlagsRemoveEvent = nil
	}

	// try to unmarshal data into UserGroupAddEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupAddEvent)
	if err == nil {
		jsonUserGroupAddEvent, _ := json.Marshal(dst.UserGroupAddEvent)
		if string(jsonUserGroupAddEvent) == "{}" { // empty struct
			dst.UserGroupAddEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupAddEvent); err != nil {
				dst.UserGroupAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupAddEvent = nil
	}

	// try to unmarshal data into UserGroupUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupUpdateEvent)
	if err == nil {
		jsonRealmUserUpdateEvent4, _ := json.Marshal(dst.UserGroupUpdateEvent)
		if string(jsonRealmUserUpdateEvent4) == "{}" { // empty struct
			dst.UserGroupUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupUpdateEvent); err != nil {
				dst.UserGroupUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupUpdateEvent = nil
	}

	// try to unmarshal data into UserGroupAddMembersEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupAddMembersEvent)
	if err == nil {
		jsonRealmUserUpdateEvent5, _ := json.Marshal(dst.UserGroupAddMembersEvent)
		if string(jsonRealmUserUpdateEvent5) == "{}" { // empty struct
			dst.UserGroupAddMembersEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupAddMembersEvent); err != nil {
				dst.UserGroupAddMembersEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupAddMembersEvent = nil
	}

	// try to unmarshal data into UserGroupRemoveMembersEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupRemoveMembersEvent)
	if err == nil {
		jsonRealmUserUpdateEvent6, _ := json.Marshal(dst.UserGroupRemoveMembersEvent)
		if string(jsonRealmUserUpdateEvent6) == "{}" { // empty struct
			dst.UserGroupRemoveMembersEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupRemoveMembersEvent); err != nil {
				dst.UserGroupRemoveMembersEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupRemoveMembersEvent = nil
	}

	// try to unmarshal data into UserGroupAddSubgroupsEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupAddSubgroupsEvent)
	if err == nil {
		jsonRealmUserUpdateEvent7, _ := json.Marshal(dst.UserGroupAddSubgroupsEvent)
		if string(jsonRealmUserUpdateEvent7) == "{}" { // empty struct
			dst.UserGroupAddSubgroupsEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupAddSubgroupsEvent); err != nil {
				dst.UserGroupAddSubgroupsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupAddSubgroupsEvent = nil
	}

	// try to unmarshal data into UserGroupRemoveSubgroupsEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupRemoveSubgroupsEvent)
	if err == nil {
		jsonRealmUserUpdateEvent8, _ := json.Marshal(dst.UserGroupRemoveSubgroupsEvent)
		if string(jsonRealmUserUpdateEvent8) == "{}" { // empty struct
			dst.UserGroupRemoveSubgroupsEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupRemoveSubgroupsEvent); err != nil {
				dst.UserGroupRemoveSubgroupsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupRemoveSubgroupsEvent = nil
	}

	// try to unmarshal data into UserGroupRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.UserGroupRemoveEvent)
	if err == nil {
		jsonRealmUserUpdateEvent9, _ := json.Marshal(dst.UserGroupRemoveEvent)
		if string(jsonRealmUserUpdateEvent9) == "{}" { // empty struct
			dst.UserGroupRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.UserGroupRemoveEvent); err != nil {
				dst.UserGroupRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupRemoveEvent = nil
	}

	// try to unmarshal data into SubscriptionAddEvent
	err = newStrictDecoder(data).Decode(&dst.SubscriptionAddEvent)
	if err == nil {
		jsonSubscriptionAddEvent, _ := json.Marshal(dst.SubscriptionAddEvent)
		if string(jsonSubscriptionAddEvent) == "{}" { // empty struct
			dst.SubscriptionAddEvent = nil
		} else {
			if err = validator.Validate(dst.SubscriptionAddEvent); err != nil {
				dst.SubscriptionAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionAddEvent = nil
	}

	// try to unmarshal data into RealmLinkifiersEvent
	err = newStrictDecoder(data).Decode(&dst.RealmLinkifiersEvent)
	if err == nil {
		jsonSubscriptionAddEvent0, _ := json.Marshal(dst.RealmLinkifiersEvent)
		if string(jsonSubscriptionAddEvent0) == "{}" { // empty struct
			dst.RealmLinkifiersEvent = nil
		} else {
			if err = validator.Validate(dst.RealmLinkifiersEvent); err != nil {
				dst.RealmLinkifiersEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmLinkifiersEvent = nil
	}

	// try to unmarshal data into RealmFiltersEvent
	err = newStrictDecoder(data).Decode(&dst.RealmFiltersEvent)
	if err == nil {
		jsonSubscriptionAddEvent1, _ := json.Marshal(dst.RealmFiltersEvent)
		if string(jsonSubscriptionAddEvent1) == "{}" { // empty struct
			dst.RealmFiltersEvent = nil
		} else {
			if err = validator.Validate(dst.RealmFiltersEvent); err != nil {
				dst.RealmFiltersEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmFiltersEvent = nil
	}

	// try to unmarshal data into RealmPlaygroundsEvent
	err = newStrictDecoder(data).Decode(&dst.RealmPlaygroundsEvent)
	if err == nil {
		jsonSubscriptionAddEvent2, _ := json.Marshal(dst.RealmPlaygroundsEvent)
		if string(jsonSubscriptionAddEvent2) == "{}" { // empty struct
			dst.RealmPlaygroundsEvent = nil
		} else {
			if err = validator.Validate(dst.RealmPlaygroundsEvent); err != nil {
				dst.RealmPlaygroundsEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmPlaygroundsEvent = nil
	}

	// try to unmarshal data into RealmEmojiUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.RealmEmojiUpdateEvent)
	if err == nil {
		jsonSubscriptionAddEvent3, _ := json.Marshal(dst.RealmEmojiUpdateEvent)
		if string(jsonSubscriptionAddEvent3) == "{}" { // empty struct
			dst.RealmEmojiUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.RealmEmojiUpdateEvent); err != nil {
				dst.RealmEmojiUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmEmojiUpdateEvent = nil
	}

	// try to unmarshal data into RealmDomainsAddEvent
	err = newStrictDecoder(data).Decode(&dst.RealmDomainsAddEvent)
	if err == nil {
		jsonSubscriptionAddEvent4, _ := json.Marshal(dst.RealmDomainsAddEvent)
		if string(jsonSubscriptionAddEvent4) == "{}" { // empty struct
			dst.RealmDomainsAddEvent = nil
		} else {
			if err = validator.Validate(dst.RealmDomainsAddEvent); err != nil {
				dst.RealmDomainsAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmDomainsAddEvent = nil
	}

	// try to unmarshal data into RealmDomainsChangeEvent
	err = newStrictDecoder(data).Decode(&dst.RealmDomainsChangeEvent)
	if err == nil {
		jsonSubscriptionAddEvent5, _ := json.Marshal(dst.RealmDomainsChangeEvent)
		if string(jsonSubscriptionAddEvent5) == "{}" { // empty struct
			dst.RealmDomainsChangeEvent = nil
		} else {
			if err = validator.Validate(dst.RealmDomainsChangeEvent); err != nil {
				dst.RealmDomainsChangeEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmDomainsChangeEvent = nil
	}

	// try to unmarshal data into RealmDomainsRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.RealmDomainsRemoveEvent)
	if err == nil {
		jsonSubscriptionAddEvent6, _ := json.Marshal(dst.RealmDomainsRemoveEvent)
		if string(jsonSubscriptionAddEvent6) == "{}" { // empty struct
			dst.RealmDomainsRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.RealmDomainsRemoveEvent); err != nil {
				dst.RealmDomainsRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmDomainsRemoveEvent = nil
	}

	// try to unmarshal data into RealmExportEvent
	err = newStrictDecoder(data).Decode(&dst.RealmExportEvent)
	if err == nil {
		jsonSubscriptionAddEvent7, _ := json.Marshal(dst.RealmExportEvent)
		if string(jsonSubscriptionAddEvent7) == "{}" { // empty struct
			dst.RealmExportEvent = nil
		} else {
			if err = validator.Validate(dst.RealmExportEvent); err != nil {
				dst.RealmExportEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmExportEvent = nil
	}

	// try to unmarshal data into RealmExportConsentEvent
	err = newStrictDecoder(data).Decode(&dst.RealmExportConsentEvent)
	if err == nil {
		jsonSubscriptionAddEvent8, _ := json.Marshal(dst.RealmExportConsentEvent)
		if string(jsonSubscriptionAddEvent8) == "{}" { // empty struct
			dst.RealmExportConsentEvent = nil
		} else {
			if err = validator.Validate(dst.RealmExportConsentEvent); err != nil {
				dst.RealmExportConsentEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmExportConsentEvent = nil
	}

	// try to unmarshal data into RealmBotAddEvent
	err = newStrictDecoder(data).Decode(&dst.RealmBotAddEvent)
	if err == nil {
		jsonSubscriptionAddEvent9, _ := json.Marshal(dst.RealmBotAddEvent)
		if string(jsonSubscriptionAddEvent9) == "{}" { // empty struct
			dst.RealmBotAddEvent = nil
		} else {
			if err = validator.Validate(dst.RealmBotAddEvent); err != nil {
				dst.RealmBotAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmBotAddEvent = nil
	}

	// try to unmarshal data into SubscriptionRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.SubscriptionRemoveEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent, _ := json.Marshal(dst.SubscriptionRemoveEvent)
		if string(jsonSubscriptionRemoveEvent) == "{}" { // empty struct
			dst.SubscriptionRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.SubscriptionRemoveEvent); err != nil {
				dst.SubscriptionRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionRemoveEvent = nil
	}

	// try to unmarshal data into RealmBotUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.RealmBotUpdateEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent0, _ := json.Marshal(dst.RealmBotUpdateEvent)
		if string(jsonSubscriptionRemoveEvent0) == "{}" { // empty struct
			dst.RealmBotUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.RealmBotUpdateEvent); err != nil {
				dst.RealmBotUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmBotUpdateEvent = nil
	}

	// try to unmarshal data into RealmBotRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.RealmBotRemoveEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent1, _ := json.Marshal(dst.RealmBotRemoveEvent)
		if string(jsonSubscriptionRemoveEvent1) == "{}" { // empty struct
			dst.RealmBotRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.RealmBotRemoveEvent); err != nil {
				dst.RealmBotRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmBotRemoveEvent = nil
	}

	// try to unmarshal data into RealmBotDeleteEvent
	err = newStrictDecoder(data).Decode(&dst.RealmBotDeleteEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent2, _ := json.Marshal(dst.RealmBotDeleteEvent)
		if string(jsonSubscriptionRemoveEvent2) == "{}" { // empty struct
			dst.RealmBotDeleteEvent = nil
		} else {
			if err = validator.Validate(dst.RealmBotDeleteEvent); err != nil {
				dst.RealmBotDeleteEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmBotDeleteEvent = nil
	}

	// try to unmarshal data into RealmUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUpdateEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent3, _ := json.Marshal(dst.RealmUpdateEvent)
		if string(jsonSubscriptionRemoveEvent3) == "{}" { // empty struct
			dst.RealmUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUpdateEvent); err != nil {
				dst.RealmUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUpdateEvent = nil
	}

	// try to unmarshal data into RealmDeactivatedEvent
	err = newStrictDecoder(data).Decode(&dst.RealmDeactivatedEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent4, _ := json.Marshal(dst.RealmDeactivatedEvent)
		if string(jsonSubscriptionRemoveEvent4) == "{}" { // empty struct
			dst.RealmDeactivatedEvent = nil
		} else {
			if err = validator.Validate(dst.RealmDeactivatedEvent); err != nil {
				dst.RealmDeactivatedEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmDeactivatedEvent = nil
	}

	// try to unmarshal data into RestartEvent
	err = newStrictDecoder(data).Decode(&dst.RestartEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent5, _ := json.Marshal(dst.RestartEvent)
		if string(jsonSubscriptionRemoveEvent5) == "{}" { // empty struct
			dst.RestartEvent = nil
		} else {
			if err = validator.Validate(dst.RestartEvent); err != nil {
				dst.RestartEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RestartEvent = nil
	}

	// try to unmarshal data into WebReloadClientEvent
	err = newStrictDecoder(data).Decode(&dst.WebReloadClientEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent6, _ := json.Marshal(dst.WebReloadClientEvent)
		if string(jsonSubscriptionRemoveEvent6) == "{}" { // empty struct
			dst.WebReloadClientEvent = nil
		} else {
			if err = validator.Validate(dst.WebReloadClientEvent); err != nil {
				dst.WebReloadClientEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebReloadClientEvent = nil
	}

	// try to unmarshal data into RealmUpdateDictEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUpdateDictEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent7, _ := json.Marshal(dst.RealmUpdateDictEvent)
		if string(jsonSubscriptionRemoveEvent7) == "{}" { // empty struct
			dst.RealmUpdateDictEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUpdateDictEvent); err != nil {
				dst.RealmUpdateDictEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUpdateDictEvent = nil
	}

	// try to unmarshal data into RealmUserSettingsDefaultsUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.RealmUserSettingsDefaultsUpdateEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent8, _ := json.Marshal(dst.RealmUserSettingsDefaultsUpdateEvent)
		if string(jsonSubscriptionRemoveEvent8) == "{}" { // empty struct
			dst.RealmUserSettingsDefaultsUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.RealmUserSettingsDefaultsUpdateEvent); err != nil {
				dst.RealmUserSettingsDefaultsUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RealmUserSettingsDefaultsUpdateEvent = nil
	}

	// try to unmarshal data into DraftsAddEvent
	err = newStrictDecoder(data).Decode(&dst.DraftsAddEvent)
	if err == nil {
		jsonSubscriptionRemoveEvent9, _ := json.Marshal(dst.DraftsAddEvent)
		if string(jsonSubscriptionRemoveEvent9) == "{}" { // empty struct
			dst.DraftsAddEvent = nil
		} else {
			if err = validator.Validate(dst.DraftsAddEvent); err != nil {
				dst.DraftsAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DraftsAddEvent = nil
	}

	// try to unmarshal data into SubscriptionUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.SubscriptionUpdateEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent, _ := json.Marshal(dst.SubscriptionUpdateEvent)
		if string(jsonSubscriptionUpdateEvent) == "{}" { // empty struct
			dst.SubscriptionUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.SubscriptionUpdateEvent); err != nil {
				dst.SubscriptionUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionUpdateEvent = nil
	}

	// try to unmarshal data into DraftsUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.DraftsUpdateEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent0, _ := json.Marshal(dst.DraftsUpdateEvent)
		if string(jsonSubscriptionUpdateEvent0) == "{}" { // empty struct
			dst.DraftsUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.DraftsUpdateEvent); err != nil {
				dst.DraftsUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DraftsUpdateEvent = nil
	}

	// try to unmarshal data into DraftsRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.DraftsRemoveEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent1, _ := json.Marshal(dst.DraftsRemoveEvent)
		if string(jsonSubscriptionUpdateEvent1) == "{}" { // empty struct
			dst.DraftsRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.DraftsRemoveEvent); err != nil {
				dst.DraftsRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.DraftsRemoveEvent = nil
	}

	// try to unmarshal data into NavigationViewAddEvent
	err = newStrictDecoder(data).Decode(&dst.NavigationViewAddEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent2, _ := json.Marshal(dst.NavigationViewAddEvent)
		if string(jsonSubscriptionUpdateEvent2) == "{}" { // empty struct
			dst.NavigationViewAddEvent = nil
		} else {
			if err = validator.Validate(dst.NavigationViewAddEvent); err != nil {
				dst.NavigationViewAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.NavigationViewAddEvent = nil
	}

	// try to unmarshal data into NavigationViewUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.NavigationViewUpdateEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent3, _ := json.Marshal(dst.NavigationViewUpdateEvent)
		if string(jsonSubscriptionUpdateEvent3) == "{}" { // empty struct
			dst.NavigationViewUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.NavigationViewUpdateEvent); err != nil {
				dst.NavigationViewUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.NavigationViewUpdateEvent = nil
	}

	// try to unmarshal data into NavigationViewRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.NavigationViewRemoveEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent4, _ := json.Marshal(dst.NavigationViewRemoveEvent)
		if string(jsonSubscriptionUpdateEvent4) == "{}" { // empty struct
			dst.NavigationViewRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.NavigationViewRemoveEvent); err != nil {
				dst.NavigationViewRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.NavigationViewRemoveEvent = nil
	}

	// try to unmarshal data into SavedSnippetsAddEvent
	err = newStrictDecoder(data).Decode(&dst.SavedSnippetsAddEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent5, _ := json.Marshal(dst.SavedSnippetsAddEvent)
		if string(jsonSubscriptionUpdateEvent5) == "{}" { // empty struct
			dst.SavedSnippetsAddEvent = nil
		} else {
			if err = validator.Validate(dst.SavedSnippetsAddEvent); err != nil {
				dst.SavedSnippetsAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SavedSnippetsAddEvent = nil
	}

	// try to unmarshal data into SavedSnippetsUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.SavedSnippetsUpdateEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent6, _ := json.Marshal(dst.SavedSnippetsUpdateEvent)
		if string(jsonSubscriptionUpdateEvent6) == "{}" { // empty struct
			dst.SavedSnippetsUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.SavedSnippetsUpdateEvent); err != nil {
				dst.SavedSnippetsUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SavedSnippetsUpdateEvent = nil
	}

	// try to unmarshal data into SavedSnippetsRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.SavedSnippetsRemoveEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent7, _ := json.Marshal(dst.SavedSnippetsRemoveEvent)
		if string(jsonSubscriptionUpdateEvent7) == "{}" { // empty struct
			dst.SavedSnippetsRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.SavedSnippetsRemoveEvent); err != nil {
				dst.SavedSnippetsRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SavedSnippetsRemoveEvent = nil
	}

	// try to unmarshal data into RemindersAddEvent
	err = newStrictDecoder(data).Decode(&dst.RemindersAddEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent8, _ := json.Marshal(dst.RemindersAddEvent)
		if string(jsonSubscriptionUpdateEvent8) == "{}" { // empty struct
			dst.RemindersAddEvent = nil
		} else {
			if err = validator.Validate(dst.RemindersAddEvent); err != nil {
				dst.RemindersAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RemindersAddEvent = nil
	}

	// try to unmarshal data into RemindersRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.RemindersRemoveEvent)
	if err == nil {
		jsonSubscriptionUpdateEvent9, _ := json.Marshal(dst.RemindersRemoveEvent)
		if string(jsonSubscriptionUpdateEvent9) == "{}" { // empty struct
			dst.RemindersRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.RemindersRemoveEvent); err != nil {
				dst.RemindersRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.RemindersRemoveEvent = nil
	}

	// try to unmarshal data into SubscriptionPeerAddEvent
	err = newStrictDecoder(data).Decode(&dst.SubscriptionPeerAddEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent, _ := json.Marshal(dst.SubscriptionPeerAddEvent)
		if string(jsonSubscriptionPeerAddEvent) == "{}" { // empty struct
			dst.SubscriptionPeerAddEvent = nil
		} else {
			if err = validator.Validate(dst.SubscriptionPeerAddEvent); err != nil {
				dst.SubscriptionPeerAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionPeerAddEvent = nil
	}

	// try to unmarshal data into ScheduledMessagesAddEvent
	err = newStrictDecoder(data).Decode(&dst.ScheduledMessagesAddEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent0, _ := json.Marshal(dst.ScheduledMessagesAddEvent)
		if string(jsonSubscriptionPeerAddEvent0) == "{}" { // empty struct
			dst.ScheduledMessagesAddEvent = nil
		} else {
			if err = validator.Validate(dst.ScheduledMessagesAddEvent); err != nil {
				dst.ScheduledMessagesAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduledMessagesAddEvent = nil
	}

	// try to unmarshal data into ScheduledMessagesUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.ScheduledMessagesUpdateEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent1, _ := json.Marshal(dst.ScheduledMessagesUpdateEvent)
		if string(jsonSubscriptionPeerAddEvent1) == "{}" { // empty struct
			dst.ScheduledMessagesUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.ScheduledMessagesUpdateEvent); err != nil {
				dst.ScheduledMessagesUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduledMessagesUpdateEvent = nil
	}

	// try to unmarshal data into ScheduledMessagesRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.ScheduledMessagesRemoveEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent2, _ := json.Marshal(dst.ScheduledMessagesRemoveEvent)
		if string(jsonSubscriptionPeerAddEvent2) == "{}" { // empty struct
			dst.ScheduledMessagesRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.ScheduledMessagesRemoveEvent); err != nil {
				dst.ScheduledMessagesRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduledMessagesRemoveEvent = nil
	}

	// try to unmarshal data into ChannelFolderAddEvent
	err = newStrictDecoder(data).Decode(&dst.ChannelFolderAddEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent3, _ := json.Marshal(dst.ChannelFolderAddEvent)
		if string(jsonSubscriptionPeerAddEvent3) == "{}" { // empty struct
			dst.ChannelFolderAddEvent = nil
		} else {
			if err = validator.Validate(dst.ChannelFolderAddEvent); err != nil {
				dst.ChannelFolderAddEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChannelFolderAddEvent = nil
	}

	// try to unmarshal data into ChannelFolderUpdateEvent
	err = newStrictDecoder(data).Decode(&dst.ChannelFolderUpdateEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent4, _ := json.Marshal(dst.ChannelFolderUpdateEvent)
		if string(jsonSubscriptionPeerAddEvent4) == "{}" { // empty struct
			dst.ChannelFolderUpdateEvent = nil
		} else {
			if err = validator.Validate(dst.ChannelFolderUpdateEvent); err != nil {
				dst.ChannelFolderUpdateEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChannelFolderUpdateEvent = nil
	}

	// try to unmarshal data into ChannelFolderReorderEvent
	err = newStrictDecoder(data).Decode(&dst.ChannelFolderReorderEvent)
	if err == nil {
		jsonSubscriptionPeerAddEvent5, _ := json.Marshal(dst.ChannelFolderReorderEvent)
		if string(jsonSubscriptionPeerAddEvent5) == "{}" { // empty struct
			dst.ChannelFolderReorderEvent = nil
		} else {
			if err = validator.Validate(dst.ChannelFolderReorderEvent); err != nil {
				dst.ChannelFolderReorderEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChannelFolderReorderEvent = nil
	}

	// try to unmarshal data into SubscriptionPeerRemoveEvent
	err = newStrictDecoder(data).Decode(&dst.SubscriptionPeerRemoveEvent)
	if err == nil {
		jsonSubscriptionPeerRemoveEvent, _ := json.Marshal(dst.SubscriptionPeerRemoveEvent)
		if string(jsonSubscriptionPeerRemoveEvent) == "{}" { // empty struct
			dst.SubscriptionPeerRemoveEvent = nil
		} else {
			if err = validator.Validate(dst.SubscriptionPeerRemoveEvent); err != nil {
				dst.SubscriptionPeerRemoveEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubscriptionPeerRemoveEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlertWordsEvent = nil
		dst.UpdateDisplaySettingsEvent = nil
		dst.MessageEvent = nil
		dst.HasZoomTokenEvent = nil
		dst.InvitesChangedEvent = nil
		dst.RealmUserAddEvent = nil
		dst.RealmUserRemoveEvent = nil
		dst.PresenceEvent = nil
		dst.StreamCreateEvent = nil
		dst.StreamDeleteEvent = nil
		dst.StreamUpdateEvent = nil
		dst.ReactionAddEvent = nil
		dst.UpdateGlobalNotificationsEvent = nil
		dst.ReactionRemoveEvent = nil
		dst.AttachmentAddEvent = nil
		dst.AttachmentUpdateEvent = nil
		dst.AttachmentRemoveEvent = nil
		dst.PushDeviceEvent = nil
		dst.SubmessageEvent = nil
		dst.UserStatusEvent = nil
		dst.CustomProfileFieldsEvent = nil
		dst.DefaultStreamGroupsEvent = nil
		dst.DefaultStreamsEvent = nil
		dst.UserSettingsUpdateEvent = nil
		dst.DeleteMessageEvent = nil
		dst.MutedTopicsEvent = nil
		dst.UserTopicEvent = nil
		dst.MutedUsersEvent = nil
		dst.HeartbeatEvent = nil
		dst.OnboardingStepsEvent = nil
		dst.UpdateMessageEvent = nil
		dst.TypingStartEvent = nil
		dst.TypingStopEvent = nil
		dst.TypingEditMessageStartEvent = nil
		dst.RealmUserUpdateEvent = nil
		dst.TypingEditMessageStopEvent = nil
		dst.UpdateMessageFlagsAddEvent = nil
		dst.UpdateMessageFlagsRemoveEvent = nil
		dst.UserGroupAddEvent = nil
		dst.UserGroupUpdateEvent = nil
		dst.UserGroupAddMembersEvent = nil
		dst.UserGroupRemoveMembersEvent = nil
		dst.UserGroupAddSubgroupsEvent = nil
		dst.UserGroupRemoveSubgroupsEvent = nil
		dst.UserGroupRemoveEvent = nil
		dst.SubscriptionAddEvent = nil
		dst.RealmLinkifiersEvent = nil
		dst.RealmFiltersEvent = nil
		dst.RealmPlaygroundsEvent = nil
		dst.RealmEmojiUpdateEvent = nil
		dst.RealmDomainsAddEvent = nil
		dst.RealmDomainsChangeEvent = nil
		dst.RealmDomainsRemoveEvent = nil
		dst.RealmExportEvent = nil
		dst.RealmExportConsentEvent = nil
		dst.RealmBotAddEvent = nil
		dst.SubscriptionRemoveEvent = nil
		dst.RealmBotUpdateEvent = nil
		dst.RealmBotRemoveEvent = nil
		dst.RealmBotDeleteEvent = nil
		dst.RealmUpdateEvent = nil
		dst.RealmDeactivatedEvent = nil
		dst.RestartEvent = nil
		dst.WebReloadClientEvent = nil
		dst.RealmUpdateDictEvent = nil
		dst.RealmUserSettingsDefaultsUpdateEvent = nil
		dst.DraftsAddEvent = nil
		dst.SubscriptionUpdateEvent = nil
		dst.DraftsUpdateEvent = nil
		dst.DraftsRemoveEvent = nil
		dst.NavigationViewAddEvent = nil
		dst.NavigationViewUpdateEvent = nil
		dst.NavigationViewRemoveEvent = nil
		dst.SavedSnippetsAddEvent = nil
		dst.SavedSnippetsUpdateEvent = nil
		dst.SavedSnippetsRemoveEvent = nil
		dst.RemindersAddEvent = nil
		dst.RemindersRemoveEvent = nil
		dst.SubscriptionPeerAddEvent = nil
		dst.ScheduledMessagesAddEvent = nil
		dst.ScheduledMessagesUpdateEvent = nil
		dst.ScheduledMessagesRemoveEvent = nil
		dst.ChannelFolderAddEvent = nil
		dst.ChannelFolderUpdateEvent = nil
		dst.ChannelFolderReorderEvent = nil
		dst.SubscriptionPeerRemoveEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EventEnvelope)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EventEnvelope)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventEnvelope) MarshalJSON() ([]byte, error) {
	if src.AlertWordsEvent != nil {
		return json.Marshal(&src.AlertWordsEvent)
	}

	if src.UpdateDisplaySettingsEvent != nil {
		return json.Marshal(&src.UpdateDisplaySettingsEvent)
	}

	if src.MessageEvent != nil {
		return json.Marshal(&src.MessageEvent)
	}

	if src.HasZoomTokenEvent != nil {
		return json.Marshal(&src.HasZoomTokenEvent)
	}

	if src.InvitesChangedEvent != nil {
		return json.Marshal(&src.InvitesChangedEvent)
	}

	if src.RealmUserAddEvent != nil {
		return json.Marshal(&src.RealmUserAddEvent)
	}

	if src.RealmUserRemoveEvent != nil {
		return json.Marshal(&src.RealmUserRemoveEvent)
	}

	if src.PresenceEvent != nil {
		return json.Marshal(&src.PresenceEvent)
	}

	if src.StreamCreateEvent != nil {
		return json.Marshal(&src.StreamCreateEvent)
	}

	if src.StreamDeleteEvent != nil {
		return json.Marshal(&src.StreamDeleteEvent)
	}

	if src.StreamUpdateEvent != nil {
		return json.Marshal(&src.StreamUpdateEvent)
	}

	if src.ReactionAddEvent != nil {
		return json.Marshal(&src.ReactionAddEvent)
	}

	if src.UpdateGlobalNotificationsEvent != nil {
		return json.Marshal(&src.UpdateGlobalNotificationsEvent)
	}

	if src.ReactionRemoveEvent != nil {
		return json.Marshal(&src.ReactionRemoveEvent)
	}

	if src.AttachmentAddEvent != nil {
		return json.Marshal(&src.AttachmentAddEvent)
	}

	if src.AttachmentUpdateEvent != nil {
		return json.Marshal(&src.AttachmentUpdateEvent)
	}

	if src.AttachmentRemoveEvent != nil {
		return json.Marshal(&src.AttachmentRemoveEvent)
	}

	if src.PushDeviceEvent != nil {
		return json.Marshal(&src.PushDeviceEvent)
	}

	if src.SubmessageEvent != nil {
		return json.Marshal(&src.SubmessageEvent)
	}

	if src.UserStatusEvent != nil {
		return json.Marshal(&src.UserStatusEvent)
	}

	if src.CustomProfileFieldsEvent != nil {
		return json.Marshal(&src.CustomProfileFieldsEvent)
	}

	if src.DefaultStreamGroupsEvent != nil {
		return json.Marshal(&src.DefaultStreamGroupsEvent)
	}

	if src.DefaultStreamsEvent != nil {
		return json.Marshal(&src.DefaultStreamsEvent)
	}

	if src.UserSettingsUpdateEvent != nil {
		return json.Marshal(&src.UserSettingsUpdateEvent)
	}

	if src.DeleteMessageEvent != nil {
		return json.Marshal(&src.DeleteMessageEvent)
	}

	if src.MutedTopicsEvent != nil {
		return json.Marshal(&src.MutedTopicsEvent)
	}

	if src.UserTopicEvent != nil {
		return json.Marshal(&src.UserTopicEvent)
	}

	if src.MutedUsersEvent != nil {
		return json.Marshal(&src.MutedUsersEvent)
	}

	if src.HeartbeatEvent != nil {
		return json.Marshal(&src.HeartbeatEvent)
	}

	if src.OnboardingStepsEvent != nil {
		return json.Marshal(&src.OnboardingStepsEvent)
	}

	if src.UpdateMessageEvent != nil {
		return json.Marshal(&src.UpdateMessageEvent)
	}

	if src.TypingStartEvent != nil {
		return json.Marshal(&src.TypingStartEvent)
	}

	if src.TypingStopEvent != nil {
		return json.Marshal(&src.TypingStopEvent)
	}

	if src.TypingEditMessageStartEvent != nil {
		return json.Marshal(&src.TypingEditMessageStartEvent)
	}

	if src.RealmUserUpdateEvent != nil {
		return json.Marshal(&src.RealmUserUpdateEvent)
	}

	if src.TypingEditMessageStopEvent != nil {
		return json.Marshal(&src.TypingEditMessageStopEvent)
	}

	if src.UpdateMessageFlagsAddEvent != nil {
		return json.Marshal(&src.UpdateMessageFlagsAddEvent)
	}

	if src.UpdateMessageFlagsRemoveEvent != nil {
		return json.Marshal(&src.UpdateMessageFlagsRemoveEvent)
	}

	if src.UserGroupAddEvent != nil {
		return json.Marshal(&src.UserGroupAddEvent)
	}

	if src.UserGroupUpdateEvent != nil {
		return json.Marshal(&src.UserGroupUpdateEvent)
	}

	if src.UserGroupAddMembersEvent != nil {
		return json.Marshal(&src.UserGroupAddMembersEvent)
	}

	if src.UserGroupRemoveMembersEvent != nil {
		return json.Marshal(&src.UserGroupRemoveMembersEvent)
	}

	if src.UserGroupAddSubgroupsEvent != nil {
		return json.Marshal(&src.UserGroupAddSubgroupsEvent)
	}

	if src.UserGroupRemoveSubgroupsEvent != nil {
		return json.Marshal(&src.UserGroupRemoveSubgroupsEvent)
	}

	if src.UserGroupRemoveEvent != nil {
		return json.Marshal(&src.UserGroupRemoveEvent)
	}

	if src.SubscriptionAddEvent != nil {
		return json.Marshal(&src.SubscriptionAddEvent)
	}

	if src.RealmLinkifiersEvent != nil {
		return json.Marshal(&src.RealmLinkifiersEvent)
	}

	if src.RealmFiltersEvent != nil {
		return json.Marshal(&src.RealmFiltersEvent)
	}

	if src.RealmPlaygroundsEvent != nil {
		return json.Marshal(&src.RealmPlaygroundsEvent)
	}

	if src.RealmEmojiUpdateEvent != nil {
		return json.Marshal(&src.RealmEmojiUpdateEvent)
	}

	if src.RealmDomainsAddEvent != nil {
		return json.Marshal(&src.RealmDomainsAddEvent)
	}

	if src.RealmDomainsChangeEvent != nil {
		return json.Marshal(&src.RealmDomainsChangeEvent)
	}

	if src.RealmDomainsRemoveEvent != nil {
		return json.Marshal(&src.RealmDomainsRemoveEvent)
	}

	if src.RealmExportEvent != nil {
		return json.Marshal(&src.RealmExportEvent)
	}

	if src.RealmExportConsentEvent != nil {
		return json.Marshal(&src.RealmExportConsentEvent)
	}

	if src.RealmBotAddEvent != nil {
		return json.Marshal(&src.RealmBotAddEvent)
	}

	if src.SubscriptionRemoveEvent != nil {
		return json.Marshal(&src.SubscriptionRemoveEvent)
	}

	if src.RealmBotUpdateEvent != nil {
		return json.Marshal(&src.RealmBotUpdateEvent)
	}

	if src.RealmBotRemoveEvent != nil {
		return json.Marshal(&src.RealmBotRemoveEvent)
	}

	if src.RealmBotDeleteEvent != nil {
		return json.Marshal(&src.RealmBotDeleteEvent)
	}

	if src.RealmUpdateEvent != nil {
		return json.Marshal(&src.RealmUpdateEvent)
	}

	if src.RealmDeactivatedEvent != nil {
		return json.Marshal(&src.RealmDeactivatedEvent)
	}

	if src.RestartEvent != nil {
		return json.Marshal(&src.RestartEvent)
	}

	if src.WebReloadClientEvent != nil {
		return json.Marshal(&src.WebReloadClientEvent)
	}

	if src.RealmUpdateDictEvent != nil {
		return json.Marshal(&src.RealmUpdateDictEvent)
	}

	if src.RealmUserSettingsDefaultsUpdateEvent != nil {
		return json.Marshal(&src.RealmUserSettingsDefaultsUpdateEvent)
	}

	if src.DraftsAddEvent != nil {
		return json.Marshal(&src.DraftsAddEvent)
	}

	if src.SubscriptionUpdateEvent != nil {
		return json.Marshal(&src.SubscriptionUpdateEvent)
	}

	if src.DraftsUpdateEvent != nil {
		return json.Marshal(&src.DraftsUpdateEvent)
	}

	if src.DraftsRemoveEvent != nil {
		return json.Marshal(&src.DraftsRemoveEvent)
	}

	if src.NavigationViewAddEvent != nil {
		return json.Marshal(&src.NavigationViewAddEvent)
	}

	if src.NavigationViewUpdateEvent != nil {
		return json.Marshal(&src.NavigationViewUpdateEvent)
	}

	if src.NavigationViewRemoveEvent != nil {
		return json.Marshal(&src.NavigationViewRemoveEvent)
	}

	if src.SavedSnippetsAddEvent != nil {
		return json.Marshal(&src.SavedSnippetsAddEvent)
	}

	if src.SavedSnippetsUpdateEvent != nil {
		return json.Marshal(&src.SavedSnippetsUpdateEvent)
	}

	if src.SavedSnippetsRemoveEvent != nil {
		return json.Marshal(&src.SavedSnippetsRemoveEvent)
	}

	if src.RemindersAddEvent != nil {
		return json.Marshal(&src.RemindersAddEvent)
	}

	if src.RemindersRemoveEvent != nil {
		return json.Marshal(&src.RemindersRemoveEvent)
	}

	if src.SubscriptionPeerAddEvent != nil {
		return json.Marshal(&src.SubscriptionPeerAddEvent)
	}

	if src.ScheduledMessagesAddEvent != nil {
		return json.Marshal(&src.ScheduledMessagesAddEvent)
	}

	if src.ScheduledMessagesUpdateEvent != nil {
		return json.Marshal(&src.ScheduledMessagesUpdateEvent)
	}

	if src.ScheduledMessagesRemoveEvent != nil {
		return json.Marshal(&src.ScheduledMessagesRemoveEvent)
	}

	if src.ChannelFolderAddEvent != nil {
		return json.Marshal(&src.ChannelFolderAddEvent)
	}

	if src.ChannelFolderUpdateEvent != nil {
		return json.Marshal(&src.ChannelFolderUpdateEvent)
	}

	if src.ChannelFolderReorderEvent != nil {
		return json.Marshal(&src.ChannelFolderReorderEvent)
	}

	if src.SubscriptionPeerRemoveEvent != nil {
		return json.Marshal(&src.SubscriptionPeerRemoveEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventEnvelope) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AlertWordsEvent != nil {
		return obj.AlertWordsEvent
	}

	if obj.UpdateDisplaySettingsEvent != nil {
		return obj.UpdateDisplaySettingsEvent
	}

	if obj.MessageEvent != nil {
		return obj.MessageEvent
	}

	if obj.HasZoomTokenEvent != nil {
		return obj.HasZoomTokenEvent
	}

	if obj.InvitesChangedEvent != nil {
		return obj.InvitesChangedEvent
	}

	if obj.RealmUserAddEvent != nil {
		return obj.RealmUserAddEvent
	}

	if obj.RealmUserRemoveEvent != nil {
		return obj.RealmUserRemoveEvent
	}

	if obj.PresenceEvent != nil {
		return obj.PresenceEvent
	}

	if obj.StreamCreateEvent != nil {
		return obj.StreamCreateEvent
	}

	if obj.StreamDeleteEvent != nil {
		return obj.StreamDeleteEvent
	}

	if obj.StreamUpdateEvent != nil {
		return obj.StreamUpdateEvent
	}

	if obj.ReactionAddEvent != nil {
		return obj.ReactionAddEvent
	}

	if obj.UpdateGlobalNotificationsEvent != nil {
		return obj.UpdateGlobalNotificationsEvent
	}

	if obj.ReactionRemoveEvent != nil {
		return obj.ReactionRemoveEvent
	}

	if obj.AttachmentAddEvent != nil {
		return obj.AttachmentAddEvent
	}

	if obj.AttachmentUpdateEvent != nil {
		return obj.AttachmentUpdateEvent
	}

	if obj.AttachmentRemoveEvent != nil {
		return obj.AttachmentRemoveEvent
	}

	if obj.PushDeviceEvent != nil {
		return obj.PushDeviceEvent
	}

	if obj.SubmessageEvent != nil {
		return obj.SubmessageEvent
	}

	if obj.UserStatusEvent != nil {
		return obj.UserStatusEvent
	}

	if obj.CustomProfileFieldsEvent != nil {
		return obj.CustomProfileFieldsEvent
	}

	if obj.DefaultStreamGroupsEvent != nil {
		return obj.DefaultStreamGroupsEvent
	}

	if obj.DefaultStreamsEvent != nil {
		return obj.DefaultStreamsEvent
	}

	if obj.UserSettingsUpdateEvent != nil {
		return obj.UserSettingsUpdateEvent
	}

	if obj.DeleteMessageEvent != nil {
		return obj.DeleteMessageEvent
	}

	if obj.MutedTopicsEvent != nil {
		return obj.MutedTopicsEvent
	}

	if obj.UserTopicEvent != nil {
		return obj.UserTopicEvent
	}

	if obj.MutedUsersEvent != nil {
		return obj.MutedUsersEvent
	}

	if obj.HeartbeatEvent != nil {
		return obj.HeartbeatEvent
	}

	if obj.OnboardingStepsEvent != nil {
		return obj.OnboardingStepsEvent
	}

	if obj.UpdateMessageEvent != nil {
		return obj.UpdateMessageEvent
	}

	if obj.TypingStartEvent != nil {
		return obj.TypingStartEvent
	}

	if obj.TypingStopEvent != nil {
		return obj.TypingStopEvent
	}

	if obj.TypingEditMessageStartEvent != nil {
		return obj.TypingEditMessageStartEvent
	}

	if obj.RealmUserUpdateEvent != nil {
		return obj.RealmUserUpdateEvent
	}

	if obj.TypingEditMessageStopEvent != nil {
		return obj.TypingEditMessageStopEvent
	}

	if obj.UpdateMessageFlagsAddEvent != nil {
		return obj.UpdateMessageFlagsAddEvent
	}

	if obj.UpdateMessageFlagsRemoveEvent != nil {
		return obj.UpdateMessageFlagsRemoveEvent
	}

	if obj.UserGroupAddEvent != nil {
		return obj.UserGroupAddEvent
	}

	if obj.UserGroupUpdateEvent != nil {
		return obj.UserGroupUpdateEvent
	}

	if obj.UserGroupAddMembersEvent != nil {
		return obj.UserGroupAddMembersEvent
	}

	if obj.UserGroupRemoveMembersEvent != nil {
		return obj.UserGroupRemoveMembersEvent
	}

	if obj.UserGroupAddSubgroupsEvent != nil {
		return obj.UserGroupAddSubgroupsEvent
	}

	if obj.UserGroupRemoveSubgroupsEvent != nil {
		return obj.UserGroupRemoveSubgroupsEvent
	}

	if obj.UserGroupRemoveEvent != nil {
		return obj.UserGroupRemoveEvent
	}

	if obj.SubscriptionAddEvent != nil {
		return obj.SubscriptionAddEvent
	}

	if obj.RealmLinkifiersEvent != nil {
		return obj.RealmLinkifiersEvent
	}

	if obj.RealmFiltersEvent != nil {
		return obj.RealmFiltersEvent
	}

	if obj.RealmPlaygroundsEvent != nil {
		return obj.RealmPlaygroundsEvent
	}

	if obj.RealmEmojiUpdateEvent != nil {
		return obj.RealmEmojiUpdateEvent
	}

	if obj.RealmDomainsAddEvent != nil {
		return obj.RealmDomainsAddEvent
	}

	if obj.RealmDomainsChangeEvent != nil {
		return obj.RealmDomainsChangeEvent
	}

	if obj.RealmDomainsRemoveEvent != nil {
		return obj.RealmDomainsRemoveEvent
	}

	if obj.RealmExportEvent != nil {
		return obj.RealmExportEvent
	}

	if obj.RealmExportConsentEvent != nil {
		return obj.RealmExportConsentEvent
	}

	if obj.RealmBotAddEvent != nil {
		return obj.RealmBotAddEvent
	}

	if obj.SubscriptionRemoveEvent != nil {
		return obj.SubscriptionRemoveEvent
	}

	if obj.RealmBotUpdateEvent != nil {
		return obj.RealmBotUpdateEvent
	}

	if obj.RealmBotRemoveEvent != nil {
		return obj.RealmBotRemoveEvent
	}

	if obj.RealmBotDeleteEvent != nil {
		return obj.RealmBotDeleteEvent
	}

	if obj.RealmUpdateEvent != nil {
		return obj.RealmUpdateEvent
	}

	if obj.RealmDeactivatedEvent != nil {
		return obj.RealmDeactivatedEvent
	}

	if obj.RestartEvent != nil {
		return obj.RestartEvent
	}

	if obj.WebReloadClientEvent != nil {
		return obj.WebReloadClientEvent
	}

	if obj.RealmUpdateDictEvent != nil {
		return obj.RealmUpdateDictEvent
	}

	if obj.RealmUserSettingsDefaultsUpdateEvent != nil {
		return obj.RealmUserSettingsDefaultsUpdateEvent
	}

	if obj.DraftsAddEvent != nil {
		return obj.DraftsAddEvent
	}

	if obj.SubscriptionUpdateEvent != nil {
		return obj.SubscriptionUpdateEvent
	}

	if obj.DraftsUpdateEvent != nil {
		return obj.DraftsUpdateEvent
	}

	if obj.DraftsRemoveEvent != nil {
		return obj.DraftsRemoveEvent
	}

	if obj.NavigationViewAddEvent != nil {
		return obj.NavigationViewAddEvent
	}

	if obj.NavigationViewUpdateEvent != nil {
		return obj.NavigationViewUpdateEvent
	}

	if obj.NavigationViewRemoveEvent != nil {
		return obj.NavigationViewRemoveEvent
	}

	if obj.SavedSnippetsAddEvent != nil {
		return obj.SavedSnippetsAddEvent
	}

	if obj.SavedSnippetsUpdateEvent != nil {
		return obj.SavedSnippetsUpdateEvent
	}

	if obj.SavedSnippetsRemoveEvent != nil {
		return obj.SavedSnippetsRemoveEvent
	}

	if obj.RemindersAddEvent != nil {
		return obj.RemindersAddEvent
	}

	if obj.RemindersRemoveEvent != nil {
		return obj.RemindersRemoveEvent
	}

	if obj.SubscriptionPeerAddEvent != nil {
		return obj.SubscriptionPeerAddEvent
	}

	if obj.ScheduledMessagesAddEvent != nil {
		return obj.ScheduledMessagesAddEvent
	}

	if obj.ScheduledMessagesUpdateEvent != nil {
		return obj.ScheduledMessagesUpdateEvent
	}

	if obj.ScheduledMessagesRemoveEvent != nil {
		return obj.ScheduledMessagesRemoveEvent
	}

	if obj.ChannelFolderAddEvent != nil {
		return obj.ChannelFolderAddEvent
	}

	if obj.ChannelFolderUpdateEvent != nil {
		return obj.ChannelFolderUpdateEvent
	}

	if obj.ChannelFolderReorderEvent != nil {
		return obj.ChannelFolderReorderEvent
	}

	if obj.SubscriptionPeerRemoveEvent != nil {
		return obj.SubscriptionPeerRemoveEvent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EventEnvelope) GetActualInstanceValue() interface{} {
	if obj.AlertWordsEvent != nil {
		return *obj.AlertWordsEvent
	}

	if obj.UpdateDisplaySettingsEvent != nil {
		return *obj.UpdateDisplaySettingsEvent
	}

	if obj.MessageEvent != nil {
		return *obj.MessageEvent
	}

	if obj.HasZoomTokenEvent != nil {
		return *obj.HasZoomTokenEvent
	}

	if obj.InvitesChangedEvent != nil {
		return *obj.InvitesChangedEvent
	}

	if obj.RealmUserAddEvent != nil {
		return *obj.RealmUserAddEvent
	}

	if obj.RealmUserRemoveEvent != nil {
		return *obj.RealmUserRemoveEvent
	}

	if obj.PresenceEvent != nil {
		return *obj.PresenceEvent
	}

	if obj.StreamCreateEvent != nil {
		return *obj.StreamCreateEvent
	}

	if obj.StreamDeleteEvent != nil {
		return *obj.StreamDeleteEvent
	}

	if obj.StreamUpdateEvent != nil {
		return *obj.StreamUpdateEvent
	}

	if obj.ReactionAddEvent != nil {
		return *obj.ReactionAddEvent
	}

	if obj.UpdateGlobalNotificationsEvent != nil {
		return *obj.UpdateGlobalNotificationsEvent
	}

	if obj.ReactionRemoveEvent != nil {
		return *obj.ReactionRemoveEvent
	}

	if obj.AttachmentAddEvent != nil {
		return *obj.AttachmentAddEvent
	}

	if obj.AttachmentUpdateEvent != nil {
		return *obj.AttachmentUpdateEvent
	}

	if obj.AttachmentRemoveEvent != nil {
		return *obj.AttachmentRemoveEvent
	}

	if obj.PushDeviceEvent != nil {
		return *obj.PushDeviceEvent
	}

	if obj.SubmessageEvent != nil {
		return *obj.SubmessageEvent
	}

	if obj.UserStatusEvent != nil {
		return *obj.UserStatusEvent
	}

	if obj.CustomProfileFieldsEvent != nil {
		return *obj.CustomProfileFieldsEvent
	}

	if obj.DefaultStreamGroupsEvent != nil {
		return *obj.DefaultStreamGroupsEvent
	}

	if obj.DefaultStreamsEvent != nil {
		return *obj.DefaultStreamsEvent
	}

	if obj.UserSettingsUpdateEvent != nil {
		return *obj.UserSettingsUpdateEvent
	}

	if obj.DeleteMessageEvent != nil {
		return *obj.DeleteMessageEvent
	}

	if obj.MutedTopicsEvent != nil {
		return *obj.MutedTopicsEvent
	}

	if obj.UserTopicEvent != nil {
		return *obj.UserTopicEvent
	}

	if obj.MutedUsersEvent != nil {
		return *obj.MutedUsersEvent
	}

	if obj.HeartbeatEvent != nil {
		return *obj.HeartbeatEvent
	}

	if obj.OnboardingStepsEvent != nil {
		return *obj.OnboardingStepsEvent
	}

	if obj.UpdateMessageEvent != nil {
		return *obj.UpdateMessageEvent
	}

	if obj.TypingStartEvent != nil {
		return *obj.TypingStartEvent
	}

	if obj.TypingStopEvent != nil {
		return *obj.TypingStopEvent
	}

	if obj.TypingEditMessageStartEvent != nil {
		return *obj.TypingEditMessageStartEvent
	}

	if obj.RealmUserUpdateEvent != nil {
		return *obj.RealmUserUpdateEvent
	}

	if obj.TypingEditMessageStopEvent != nil {
		return *obj.TypingEditMessageStopEvent
	}

	if obj.UpdateMessageFlagsAddEvent != nil {
		return *obj.UpdateMessageFlagsAddEvent
	}

	if obj.UpdateMessageFlagsRemoveEvent != nil {
		return *obj.UpdateMessageFlagsRemoveEvent
	}

	if obj.UserGroupAddEvent != nil {
		return *obj.UserGroupAddEvent
	}

	if obj.UserGroupUpdateEvent != nil {
		return *obj.UserGroupUpdateEvent
	}

	if obj.UserGroupAddMembersEvent != nil {
		return *obj.UserGroupAddMembersEvent
	}

	if obj.UserGroupRemoveMembersEvent != nil {
		return *obj.UserGroupRemoveMembersEvent
	}

	if obj.UserGroupAddSubgroupsEvent != nil {
		return *obj.UserGroupAddSubgroupsEvent
	}

	if obj.UserGroupRemoveSubgroupsEvent != nil {
		return *obj.UserGroupRemoveSubgroupsEvent
	}

	if obj.UserGroupRemoveEvent != nil {
		return *obj.UserGroupRemoveEvent
	}

	if obj.SubscriptionAddEvent != nil {
		return *obj.SubscriptionAddEvent
	}

	if obj.RealmLinkifiersEvent != nil {
		return *obj.RealmLinkifiersEvent
	}

	if obj.RealmFiltersEvent != nil {
		return *obj.RealmFiltersEvent
	}

	if obj.RealmPlaygroundsEvent != nil {
		return *obj.RealmPlaygroundsEvent
	}

	if obj.RealmEmojiUpdateEvent != nil {
		return *obj.RealmEmojiUpdateEvent
	}

	if obj.RealmDomainsAddEvent != nil {
		return *obj.RealmDomainsAddEvent
	}

	if obj.RealmDomainsChangeEvent != nil {
		return *obj.RealmDomainsChangeEvent
	}

	if obj.RealmDomainsRemoveEvent != nil {
		return *obj.RealmDomainsRemoveEvent
	}

	if obj.RealmExportEvent != nil {
		return *obj.RealmExportEvent
	}

	if obj.RealmExportConsentEvent != nil {
		return *obj.RealmExportConsentEvent
	}

	if obj.RealmBotAddEvent != nil {
		return *obj.RealmBotAddEvent
	}

	if obj.SubscriptionRemoveEvent != nil {
		return *obj.SubscriptionRemoveEvent
	}

	if obj.RealmBotUpdateEvent != nil {
		return *obj.RealmBotUpdateEvent
	}

	if obj.RealmBotRemoveEvent != nil {
		return *obj.RealmBotRemoveEvent
	}

	if obj.RealmBotDeleteEvent != nil {
		return *obj.RealmBotDeleteEvent
	}

	if obj.RealmUpdateEvent != nil {
		return *obj.RealmUpdateEvent
	}

	if obj.RealmDeactivatedEvent != nil {
		return *obj.RealmDeactivatedEvent
	}

	if obj.RestartEvent != nil {
		return *obj.RestartEvent
	}

	if obj.WebReloadClientEvent != nil {
		return *obj.WebReloadClientEvent
	}

	if obj.RealmUpdateDictEvent != nil {
		return *obj.RealmUpdateDictEvent
	}

	if obj.RealmUserSettingsDefaultsUpdateEvent != nil {
		return *obj.RealmUserSettingsDefaultsUpdateEvent
	}

	if obj.DraftsAddEvent != nil {
		return *obj.DraftsAddEvent
	}

	if obj.SubscriptionUpdateEvent != nil {
		return *obj.SubscriptionUpdateEvent
	}

	if obj.DraftsUpdateEvent != nil {
		return *obj.DraftsUpdateEvent
	}

	if obj.DraftsRemoveEvent != nil {
		return *obj.DraftsRemoveEvent
	}

	if obj.NavigationViewAddEvent != nil {
		return *obj.NavigationViewAddEvent
	}

	if obj.NavigationViewUpdateEvent != nil {
		return *obj.NavigationViewUpdateEvent
	}

	if obj.NavigationViewRemoveEvent != nil {
		return *obj.NavigationViewRemoveEvent
	}

	if obj.SavedSnippetsAddEvent != nil {
		return *obj.SavedSnippetsAddEvent
	}

	if obj.SavedSnippetsUpdateEvent != nil {
		return *obj.SavedSnippetsUpdateEvent
	}

	if obj.SavedSnippetsRemoveEvent != nil {
		return *obj.SavedSnippetsRemoveEvent
	}

	if obj.RemindersAddEvent != nil {
		return *obj.RemindersAddEvent
	}

	if obj.RemindersRemoveEvent != nil {
		return *obj.RemindersRemoveEvent
	}

	if obj.SubscriptionPeerAddEvent != nil {
		return *obj.SubscriptionPeerAddEvent
	}

	if obj.ScheduledMessagesAddEvent != nil {
		return *obj.ScheduledMessagesAddEvent
	}

	if obj.ScheduledMessagesUpdateEvent != nil {
		return *obj.ScheduledMessagesUpdateEvent
	}

	if obj.ScheduledMessagesRemoveEvent != nil {
		return *obj.ScheduledMessagesRemoveEvent
	}

	if obj.ChannelFolderAddEvent != nil {
		return *obj.ChannelFolderAddEvent
	}

	if obj.ChannelFolderUpdateEvent != nil {
		return *obj.ChannelFolderUpdateEvent
	}

	if obj.ChannelFolderReorderEvent != nil {
		return *obj.ChannelFolderReorderEvent
	}

	if obj.SubscriptionPeerRemoveEvent != nil {
		return *obj.SubscriptionPeerRemoveEvent
	}

	// all schemas are nil
	return nil
}

type NullableEventEnvelope struct {
	value *EventEnvelope
	isSet bool
}

func (v NullableEventEnvelope) Get() *EventEnvelope {
	return v.value
}

func (v *NullableEventEnvelope) Set(val *EventEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullableEventEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullableEventEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventEnvelope(val *EventEnvelope) *NullableEventEnvelope {
	return &NullableEventEnvelope{value: val, isSet: true}
}

func (v NullableEventEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
