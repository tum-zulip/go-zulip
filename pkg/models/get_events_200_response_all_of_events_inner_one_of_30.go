/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GetEvents200ResponseAllOfEventsInnerOneOf30 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200ResponseAllOfEventsInnerOneOf30{}

// GetEvents200ResponseAllOfEventsInnerOneOf30 Event sent when a message has been deleted.  Sent to all users who currently are subscribed to the messages' recipient. May also be sent to additional users who had access to it, including, in particular, an administrator user deleting messages in a stream that they are not subscribed to.  This means that clients can assume that they will always receive an event of this type for deletions that the client itself initiated.  This event is also sent when the user loses access to a message, such as when it is [moved to a channel][message-move-channel] that the user does not [have permission to access][channel-access].  **Changes**: Before Zulip 9.0 (feature level 274), this event was only sent to subscribers of the message's recipient.  Before Zulip 5.0 (feature level 77), events for direct messages contained additional `sender_id` and `recipient_id` fields.  [message-move-channel]: /help/move-content-to-another-channel [channel-access]: /help/channel-permissions 
type GetEvents200ResponseAllOfEventsInnerOneOf30 struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive. 
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Only present for clients that support the `bulk_message_deletion` [client capability][client-capabilities].  A sorted list containing the IDs of the newly deleted messages.  **Changes**: Before Zulip 11.0 (feature level 393), this list was not guaranteed to be sorted.  [client-capabilities]: /api/register-queue#parameter-client_capabilities 
	MessageIds []int32 `json:"message_ids,omitempty"`
	// Only present for clients that do not support the `bulk_message_deletion` [client capability][client-capabilities].  The ID of the newly deleted message.  [client-capabilities]: /api/register-queue#parameter-client_capabilities 
	MessageId *int32 `json:"message_id,omitempty"`
	// The type of message. Either `\"stream\"` or `\"private\"`. 
	MessageType *string `json:"message_type,omitempty"`
	// Only present if `message_type` is `\"stream\"`.  The ID of the channel to which the message was sent. 
	StreamId *int32 `json:"stream_id,omitempty"`
	// Only present if `message_type` is `\"stream\"`.  The topic to which the message was sent.  For clients that don't support the `empty_topic_name` [client capability][client-capabilities], if the actual topic name was empty string, this field's value will instead be the value of `realm_empty_topic_display_name` found in the [`POST /register`](/api/register-queue) response.  **Changes**: Before 10.0 (feature level 334), `empty_topic_name` client capability didn't exist and empty string as the topic name for channel messages wasn't allowed.  [client-capabilities]: /api/register-queue#parameter-client_capabilities 
	Topic *string `json:"topic,omitempty"`
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf30 instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf30 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200ResponseAllOfEventsInnerOneOf30() *GetEvents200ResponseAllOfEventsInnerOneOf30 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf30{}
	return &this
}

// NewGetEvents200ResponseAllOfEventsInnerOneOf30WithDefaults instantiates a new GetEvents200ResponseAllOfEventsInnerOneOf30 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseAllOfEventsInnerOneOf30WithDefaults() *GetEvents200ResponseAllOfEventsInnerOneOf30 {
	this := GetEvents200ResponseAllOfEventsInnerOneOf30{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetType(v string) {
	o.Type = &v
}

// GetMessageIds returns the MessageIds field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageIds() []int32 {
	if o == nil || IsNil(o.MessageIds) {
		var ret []int32
		return ret
	}
	return o.MessageIds
}

// GetMessageIdsOk returns a tuple with the MessageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.MessageIds) {
		return nil, false
	}
	return o.MessageIds, true
}

// HasMessageIds returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasMessageIds() bool {
	if o != nil && !IsNil(o.MessageIds) {
		return true
	}

	return false
}

// SetMessageIds gets a reference to the given []int32 and assigns it to the MessageIds field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetMessageIds(v []int32) {
	o.MessageIds = v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetMessageId(v int32) {
	o.MessageId = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetMessageType(v string) {
	o.MessageType = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetStreamId() int32 {
	if o == nil || IsNil(o.StreamId) {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetStreamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *GetEvents200ResponseAllOfEventsInnerOneOf30) SetTopic(v string) {
	o.Topic = &v
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf30) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200ResponseAllOfEventsInnerOneOf30) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MessageIds) {
		toSerialize["message_ids"] = o.MessageIds
	}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	return toSerialize, nil
}

type NullableGetEvents200ResponseAllOfEventsInnerOneOf30 struct {
	value *GetEvents200ResponseAllOfEventsInnerOneOf30
	isSet bool
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf30) Get() *GetEvents200ResponseAllOfEventsInnerOneOf30 {
	return v.value
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf30) Set(val *GetEvents200ResponseAllOfEventsInnerOneOf30) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf30) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf30) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseAllOfEventsInnerOneOf30(val *GetEvents200ResponseAllOfEventsInnerOneOf30) *NullableGetEvents200ResponseAllOfEventsInnerOneOf30 {
	return &NullableGetEvents200ResponseAllOfEventsInnerOneOf30{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseAllOfEventsInnerOneOf30) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseAllOfEventsInnerOneOf30) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


