/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ScheduledMessagesUpdateEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledMessagesUpdateEvent{}

// ScheduledMessagesUpdateEvent Event sent to a user's clients when a scheduled message is edited.  **Changes**: New in Zulip 7.0 (feature level 179).
type ScheduledMessagesUpdateEvent struct {
	// The ID of the event. Events appear in increasing order but may not be consecutive.
	Id               *int32            `json:"id,omitempty"`
	Type             *string           `json:"type,omitempty"`
	Op               *string           `json:"op,omitempty"`
	ScheduledMessage *ScheduledMessage `json:"scheduled_message,omitempty"`
}

// NewSubscriptionPeerAddEvent1 instantiates a new ScheduledMessagesUpdateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPeerAddEvent1() *ScheduledMessagesUpdateEvent {
	this := ScheduledMessagesUpdateEvent{}
	return &this
}

// NewSubscriptionPeerAddEvent1WithDefaults instantiates a new ScheduledMessagesUpdateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPeerAddEvent1WithDefaults() *ScheduledMessagesUpdateEvent {
	this := ScheduledMessagesUpdateEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduledMessagesUpdateEvent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledMessagesUpdateEvent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduledMessagesUpdateEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ScheduledMessagesUpdateEvent) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScheduledMessagesUpdateEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledMessagesUpdateEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScheduledMessagesUpdateEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScheduledMessagesUpdateEvent) SetType(v string) {
	o.Type = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *ScheduledMessagesUpdateEvent) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledMessagesUpdateEvent) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *ScheduledMessagesUpdateEvent) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *ScheduledMessagesUpdateEvent) SetOp(v string) {
	o.Op = &v
}

// GetScheduledMessage returns the ScheduledMessage field value if set, zero value otherwise.
func (o *ScheduledMessagesUpdateEvent) GetScheduledMessage() ScheduledMessage {
	if o == nil || IsNil(o.ScheduledMessage) {
		var ret ScheduledMessage
		return ret
	}
	return *o.ScheduledMessage
}

// GetScheduledMessageOk returns a tuple with the ScheduledMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledMessagesUpdateEvent) GetScheduledMessageOk() (*ScheduledMessage, bool) {
	if o == nil || IsNil(o.ScheduledMessage) {
		return nil, false
	}
	return o.ScheduledMessage, true
}

// HasScheduledMessage returns a boolean if a field has been set.
func (o *ScheduledMessagesUpdateEvent) HasScheduledMessage() bool {
	if o != nil && !IsNil(o.ScheduledMessage) {
		return true
	}

	return false
}

// SetScheduledMessage gets a reference to the given ScheduledMessage and assigns it to the ScheduledMessage field.
func (o *ScheduledMessagesUpdateEvent) SetScheduledMessage(v ScheduledMessage) {
	o.ScheduledMessage = &v
}

func (o ScheduledMessagesUpdateEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledMessagesUpdateEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.ScheduledMessage) {
		toSerialize["scheduled_message"] = o.ScheduledMessage
	}
	return toSerialize, nil
}

type NullableSubscriptionPeerAddEvent1 struct {
	value *ScheduledMessagesUpdateEvent
	isSet bool
}

func (v NullableSubscriptionPeerAddEvent1) Get() *ScheduledMessagesUpdateEvent {
	return v.value
}

func (v *NullableSubscriptionPeerAddEvent1) Set(val *ScheduledMessagesUpdateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPeerAddEvent1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPeerAddEvent1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPeerAddEvent1(val *ScheduledMessagesUpdateEvent) *NullableSubscriptionPeerAddEvent1 {
	return &NullableSubscriptionPeerAddEvent1{value: val, isSet: true}
}

func (v NullableSubscriptionPeerAddEvent1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPeerAddEvent1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
