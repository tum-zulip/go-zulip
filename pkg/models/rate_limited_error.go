/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RateLimitedError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitedError{}

// RateLimitedError struct for RateLimitedError
type RateLimitedError struct {
	Result interface{} `json:"result"`
	Msg interface{} `json:"msg"`
	Code interface{} `json:"code"`
	// How many seconds the client must wait before making additional requests. 
	RetryAfter *int32 `json:"retry-after,omitempty"`
}

type _RateLimitedError RateLimitedError

// NewRateLimitedError instantiates a new RateLimitedError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitedError(result interface{}, msg interface{}, code interface{}) *RateLimitedError {
	this := RateLimitedError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewRateLimitedErrorWithDefaults instantiates a new RateLimitedError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitedErrorWithDefaults() *RateLimitedError {
	this := RateLimitedError{}
	return &this
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RateLimitedError) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RateLimitedError) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *RateLimitedError) SetResult(v interface{}) {
	o.Result = v
}

// GetMsg returns the Msg field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RateLimitedError) GetMsg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RateLimitedError) GetMsgOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *RateLimitedError) SetMsg(v interface{}) {
	o.Msg = v
}

// GetCode returns the Code field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RateLimitedError) GetCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RateLimitedError) GetCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RateLimitedError) SetCode(v interface{}) {
	o.Code = v
}

// GetRetryAfter returns the RetryAfter field value if set, zero value otherwise.
func (o *RateLimitedError) GetRetryAfter() int32 {
	if o == nil || IsNil(o.RetryAfter) {
		var ret int32
		return ret
	}
	return *o.RetryAfter
}

// GetRetryAfterOk returns a tuple with the RetryAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitedError) GetRetryAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryAfter) {
		return nil, false
	}
	return o.RetryAfter, true
}

// HasRetryAfter returns a boolean if a field has been set.
func (o *RateLimitedError) HasRetryAfter() bool {
	if o != nil && !IsNil(o.RetryAfter) {
		return true
	}

	return false
}

// SetRetryAfter gets a reference to the given int32 and assigns it to the RetryAfter field.
func (o *RateLimitedError) SetRetryAfter(v int32) {
	o.RetryAfter = &v
}

func (o RateLimitedError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitedError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.RetryAfter) {
		toSerialize["retry-after"] = o.RetryAfter
	}
	return toSerialize, nil
}

func (o *RateLimitedError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRateLimitedError := _RateLimitedError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRateLimitedError)

	if err != nil {
		return err
	}

	*o = RateLimitedError(varRateLimitedError)

	return err
}

type NullableRateLimitedError struct {
	value *RateLimitedError
	isSet bool
}

func (v NullableRateLimitedError) Get() *RateLimitedError {
	return v.value
}

func (v *NullableRateLimitedError) Set(val *RateLimitedError) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitedError) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitedError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitedError(val *RateLimitedError) *NullableRateLimitedError {
	return &NullableRateLimitedError{value: val, isSet: true}
}

func (v NullableRateLimitedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitedError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


