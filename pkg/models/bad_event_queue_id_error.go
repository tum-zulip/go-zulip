/*
Zulip REST API

Powerful open source group chat 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BadEventQueueIdError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BadEventQueueIdError{}

// BadEventQueueIdError struct for BadEventQueueIdError
type BadEventQueueIdError struct {
	Result interface{} `json:"result"`
	Msg interface{} `json:"msg"`
	Code interface{} `json:"code"`
	// The string that identifies the invalid event queue. 
	QueueId *string `json:"queue_id,omitempty"`
}

type _BadEventQueueIdError BadEventQueueIdError

// NewBadEventQueueIdError instantiates a new BadEventQueueIdError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadEventQueueIdError(result interface{}, msg interface{}, code interface{}) *BadEventQueueIdError {
	this := BadEventQueueIdError{}
	this.Result = result
	this.Msg = msg
	this.Code = code
	return &this
}

// NewBadEventQueueIdErrorWithDefaults instantiates a new BadEventQueueIdError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadEventQueueIdErrorWithDefaults() *BadEventQueueIdError {
	this := BadEventQueueIdError{}
	return &this
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BadEventQueueIdError) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BadEventQueueIdError) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BadEventQueueIdError) SetResult(v interface{}) {
	o.Result = v
}

// GetMsg returns the Msg field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BadEventQueueIdError) GetMsg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BadEventQueueIdError) GetMsgOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *BadEventQueueIdError) SetMsg(v interface{}) {
	o.Msg = v
}

// GetCode returns the Code field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *BadEventQueueIdError) GetCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BadEventQueueIdError) GetCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *BadEventQueueIdError) SetCode(v interface{}) {
	o.Code = v
}

// GetQueueId returns the QueueId field value if set, zero value otherwise.
func (o *BadEventQueueIdError) GetQueueId() string {
	if o == nil || IsNil(o.QueueId) {
		var ret string
		return ret
	}
	return *o.QueueId
}

// GetQueueIdOk returns a tuple with the QueueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadEventQueueIdError) GetQueueIdOk() (*string, bool) {
	if o == nil || IsNil(o.QueueId) {
		return nil, false
	}
	return o.QueueId, true
}

// HasQueueId returns a boolean if a field has been set.
func (o *BadEventQueueIdError) HasQueueId() bool {
	if o != nil && !IsNil(o.QueueId) {
		return true
	}

	return false
}

// SetQueueId gets a reference to the given string and assigns it to the QueueId field.
func (o *BadEventQueueIdError) SetQueueId(v string) {
	o.QueueId = &v
}

func (o BadEventQueueIdError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BadEventQueueIdError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.QueueId) {
		toSerialize["queue_id"] = o.QueueId
	}
	return toSerialize, nil
}

func (o *BadEventQueueIdError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBadEventQueueIdError := _BadEventQueueIdError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBadEventQueueIdError)

	if err != nil {
		return err
	}

	*o = BadEventQueueIdError(varBadEventQueueIdError)

	return err
}

type NullableBadEventQueueIdError struct {
	value *BadEventQueueIdError
	isSet bool
}

func (v NullableBadEventQueueIdError) Get() *BadEventQueueIdError {
	return v.value
}

func (v *NullableBadEventQueueIdError) Set(val *BadEventQueueIdError) {
	v.value = val
	v.isSet = true
}

func (v NullableBadEventQueueIdError) IsSet() bool {
	return v.isSet
}

func (v *NullableBadEventQueueIdError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadEventQueueIdError(val *BadEventQueueIdError) *NullableBadEventQueueIdError {
	return &NullableBadEventQueueIdError{value: val, isSet: true}
}

func (v NullableBadEventQueueIdError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadEventQueueIdError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


