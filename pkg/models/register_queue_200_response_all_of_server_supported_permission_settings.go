/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RegisterQueue200ResponseAllOfServerSupportedPermissionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterQueue200ResponseAllOfServerSupportedPermissionSettings{}

// RegisterQueue200ResponseAllOfServerSupportedPermissionSettings Present if `realm` is present in `fetch_event_types`.  Metadata detailing the valid values for permission settings that use [group-setting values](/api/group-setting-values). Clients should use these data as explained in the [main documentation](/api/group-setting-values#permitted-values) to determine what values to present as possible values for these settings in UI components.  This part of the Zulip API is unstable and may change significantly in future versions.  **Changes**: New in Zulip 8.0 (feature level 221).
type RegisterQueue200ResponseAllOfServerSupportedPermissionSettings struct {
	// Configuration for realm level group permission settings.
	Realm *map[string]GroupPermissionSetting `json:"realm,omitempty"`
	// Configuration for channel level group permission settings.
	Stream *map[string]GroupPermissionSetting `json:"stream,omitempty"`
	// Configuration for group level group permission settings.
	Group *map[string]GroupPermissionSetting `json:"group,omitempty"`
}

// NewRegisterQueue200ResponseAllOfServerSupportedPermissionSettings instantiates a new RegisterQueue200ResponseAllOfServerSupportedPermissionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterQueue200ResponseAllOfServerSupportedPermissionSettings() *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings {
	this := RegisterQueue200ResponseAllOfServerSupportedPermissionSettings{}
	return &this
}

// NewRegisterQueue200ResponseAllOfServerSupportedPermissionSettingsWithDefaults instantiates a new RegisterQueue200ResponseAllOfServerSupportedPermissionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterQueue200ResponseAllOfServerSupportedPermissionSettingsWithDefaults() *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings {
	this := RegisterQueue200ResponseAllOfServerSupportedPermissionSettings{}
	return &this
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetRealm() map[string]GroupPermissionSetting {
	if o == nil || IsNil(o.Realm) {
		var ret map[string]GroupPermissionSetting
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetRealmOk() (*map[string]GroupPermissionSetting, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given map[string]GroupPermissionSetting and assigns it to the Realm field.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) SetRealm(v map[string]GroupPermissionSetting) {
	o.Realm = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetStream() map[string]GroupPermissionSetting {
	if o == nil || IsNil(o.Stream) {
		var ret map[string]GroupPermissionSetting
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetStreamOk() (*map[string]GroupPermissionSetting, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given map[string]GroupPermissionSetting and assigns it to the Stream field.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) SetStream(v map[string]GroupPermissionSetting) {
	o.Stream = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetGroup() map[string]GroupPermissionSetting {
	if o == nil || IsNil(o.Group) {
		var ret map[string]GroupPermissionSetting
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) GetGroupOk() (*map[string]GroupPermissionSetting, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given map[string]GroupPermissionSetting and assigns it to the Group field.
func (o *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) SetGroup(v map[string]GroupPermissionSetting) {
	o.Group = &v
}

func (o RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings struct {
	value *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings
	isSet bool
}

func (v NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) Get() *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings {
	return v.value
}

func (v *NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) Set(val *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings(val *RegisterQueue200ResponseAllOfServerSupportedPermissionSettings) *NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings {
	return &NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings{value: val, isSet: true}
}

func (v NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterQueue200ResponseAllOfServerSupportedPermissionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
