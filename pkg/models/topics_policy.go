/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TopicsPolicy Whether [named topics](/help/introduction-to-topics) and the empty topic (i.e., [\"general chat\" topic](/help/general-chat-topic)) are enabled in this channel.  - `\"inherit\"`: Messages can be sent to named topics in this channel,   and the [organization-level `realm_topics_policy`][realm-topics-policy]   is used for whether messages can be sent to the empty topic in this   channel. - `\"allow_empty_topic\"`: Messages can be sent to both named topics and   the empty topic in this channel. - `\"disable_empty_topic\"`: Messages can be sent to named topics in this   channel, but the empty topic is disabled. - `\"empty_topic_only\"`: Messages can be sent to the empty topic in this   channel, but named topics are disabled. See [\"general chat\"   channels](/help/general-chat-channels).  The `\"empty_topic_only\"` policy can only be set if all existing messages in the channel are already in the empty topic.  When creating a new channel, if the `topics_policy` is not specified, the `\"inherit\"` option will be set.  **Changes**: In Zulip 11.0 (feature level 404), the `\"empty_topic_only\"` option was added.  New in Zulip 11.0 (feature level 392).  [realm-topics-policy]: /help/require-topics#set-the-default-general-chat-topic-configuration
type TopicsPolicy string

// List of TopicsPolicy
const (
	TOPICSPOLICY_INHERIT             TopicsPolicy = "inherit"
	TOPICSPOLICY_ALLOW_EMPTY_TOPIC   TopicsPolicy = "allow_empty_topic"
	TOPICSPOLICY_DISABLE_EMPTY_TOPIC TopicsPolicy = "disable_empty_topic"
	TOPICSPOLICY_EMPTY_TOPIC_ONLY    TopicsPolicy = "empty_topic_only"
)

// All allowed values of TopicsPolicy enum
var AllowedTopicsPolicyEnumValues = []TopicsPolicy{
	"inherit",
	"allow_empty_topic",
	"disable_empty_topic",
	"empty_topic_only",
}

func (v *TopicsPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TopicsPolicy(value)
	for _, existing := range AllowedTopicsPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TopicsPolicy", value)
}

// NewTopicsPolicyFromValue returns a pointer to a valid TopicsPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTopicsPolicyFromValue(v string) (*TopicsPolicy, error) {
	ev := TopicsPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TopicsPolicy: valid values are %v", v, AllowedTopicsPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TopicsPolicy) IsValid() bool {
	for _, existing := range AllowedTopicsPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TopicsPolicy value
func (v TopicsPolicy) Ptr() *TopicsPolicy {
	return &v
}

type NullableTopicsPolicy struct {
	value *TopicsPolicy
	isSet bool
}

func (v NullableTopicsPolicy) Get() *TopicsPolicy {
	return v.value
}

func (v *NullableTopicsPolicy) Set(val *TopicsPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicsPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicsPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicsPolicy(val *TopicsPolicy) *NullableTopicsPolicy {
	return &NullableTopicsPolicy{value: val, isSet: true}
}

func (v NullableTopicsPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicsPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
