/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetSubscribers200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSubscribers200Response{}

// GetSubscribers200Response struct for GetSubscribers200Response
type GetSubscribers200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](zulip.com/api/rest-error-handling#ignored-parameters documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// A list containing the IDs of all active users who are subscribed to the channel.
	Subscribers []int32 `json:"subscribers,omitempty"`
}

type _GetSubscribers200Response GetSubscribers200Response

// NewGetSubscribers200Response instantiates a new GetSubscribers200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSubscribers200Response(result string, msg string) *GetSubscribers200Response {
	this := GetSubscribers200Response{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewGetSubscribers200ResponseWithDefaults instantiates a new GetSubscribers200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSubscribers200ResponseWithDefaults() *GetSubscribers200Response {
	this := GetSubscribers200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *GetSubscribers200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *GetSubscribers200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *GetSubscribers200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *GetSubscribers200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *GetSubscribers200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *GetSubscribers200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *GetSubscribers200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSubscribers200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *GetSubscribers200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *GetSubscribers200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *GetSubscribers200Response) GetSubscribers() []int32 {
	if o == nil || IsNil(o.Subscribers) {
		var ret []int32
		return ret
	}
	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSubscribers200Response) GetSubscribersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Subscribers) {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *GetSubscribers200Response) HasSubscribers() bool {
	if o != nil && !IsNil(o.Subscribers) {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given []int32 and assigns it to the Subscribers field.
func (o *GetSubscribers200Response) SetSubscribers(v []int32) {
	o.Subscribers = v
}

func (o GetSubscribers200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSubscribers200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	if !IsNil(o.Subscribers) {
		toSerialize["subscribers"] = o.Subscribers
	}
	return toSerialize, nil
}

func (o *GetSubscribers200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSubscribers200Response := _GetSubscribers200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSubscribers200Response)

	if err != nil {
		return err
	}

	*o = GetSubscribers200Response(varGetSubscribers200Response)

	return err
}

type NullableGetSubscribers200Response struct {
	value *GetSubscribers200Response
	isSet bool
}

func (v NullableGetSubscribers200Response) Get() *GetSubscribers200Response {
	return v.value
}

func (v *NullableGetSubscribers200Response) Set(val *GetSubscribers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSubscribers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSubscribers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSubscribers200Response(val *GetSubscribers200Response) *NullableGetSubscribers200Response {
	return &NullableGetSubscribers200Response{value: val, isSet: true}
}

func (v NullableGetSubscribers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSubscribers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
