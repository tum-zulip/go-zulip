/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateSubscriptions200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptions200Response{}

// UpdateSubscriptions200Response struct for UpdateSubscriptions200Response
type UpdateSubscriptions200Response struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](zulip.com/api/rest-error-handling#ignored-parameters documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
	// A dictionary where the key is the Zulip API email address of the user/bot and the value is a list of the names of the channels that were subscribed to as a result of the query.
	Subscribed map[string][]string `json:"subscribed"`
	// A dictionary where the key is the Zulip API email address of the user/bot and the value is a list of the names of the channels that the user/bot is already subscribed to.
	AlreadySubscribed map[string][]string `json:"already_subscribed"`
	// A list of the names of channels that the user is already unsubscribed from, and hence doesn't need to be unsubscribed.
	NotRemoved []string `json:"not_removed,omitempty"`
	// A list of the names of channels which were unsubscribed from as a result of the query.
	Removed []string `json:"removed"`
	// Only present if the parameter `send_new_subscription_messages` in the request was `true`.  Whether Notification Bot DMs in fact sent to the added subscribers as requested by the `send_new_subscription_messages` parameter. Clients may find this value useful to communicate with users about the effect of this request.  **Changes**: New in Zulip 11.0 (feature level 397).
	NewSubscriptionMessagesSent *bool `json:"new_subscription_messages_sent,omitempty"`
}

type _UpdateSubscriptions200Response UpdateSubscriptions200Response

// NewUpdateSubscriptions200Response instantiates a new UpdateSubscriptions200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriptions200Response(result string, msg string, subscribed map[string][]string, alreadySubscribed map[string][]string, removed []string) *UpdateSubscriptions200Response {
	this := UpdateSubscriptions200Response{}
	this.Result = result
	this.Msg = msg
	this.Subscribed = subscribed
	this.AlreadySubscribed = alreadySubscribed
	this.Removed = removed
	return &this
}

// NewUpdateSubscriptions200ResponseWithDefaults instantiates a new UpdateSubscriptions200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptions200ResponseWithDefaults() *UpdateSubscriptions200Response {
	this := UpdateSubscriptions200Response{}
	return &this
}

// GetResult returns the Result field value
func (o *UpdateSubscriptions200Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *UpdateSubscriptions200Response) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *UpdateSubscriptions200Response) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *UpdateSubscriptions200Response) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *UpdateSubscriptions200Response) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *UpdateSubscriptions200Response) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *UpdateSubscriptions200Response) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

// GetSubscribed returns the Subscribed field value
func (o *UpdateSubscriptions200Response) GetSubscribed() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetSubscribedOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscribed, true
}

// SetSubscribed sets field value
func (o *UpdateSubscriptions200Response) SetSubscribed(v map[string][]string) {
	o.Subscribed = v
}

// GetAlreadySubscribed returns the AlreadySubscribed field value
func (o *UpdateSubscriptions200Response) GetAlreadySubscribed() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.AlreadySubscribed
}

// GetAlreadySubscribedOk returns a tuple with the AlreadySubscribed field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetAlreadySubscribedOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlreadySubscribed, true
}

// SetAlreadySubscribed sets field value
func (o *UpdateSubscriptions200Response) SetAlreadySubscribed(v map[string][]string) {
	o.AlreadySubscribed = v
}

// GetNotRemoved returns the NotRemoved field value if set, zero value otherwise.
func (o *UpdateSubscriptions200Response) GetNotRemoved() []string {
	if o == nil || IsNil(o.NotRemoved) {
		var ret []string
		return ret
	}
	return o.NotRemoved
}

// GetNotRemovedOk returns a tuple with the NotRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetNotRemovedOk() ([]string, bool) {
	if o == nil || IsNil(o.NotRemoved) {
		return nil, false
	}
	return o.NotRemoved, true
}

// HasNotRemoved returns a boolean if a field has been set.
func (o *UpdateSubscriptions200Response) HasNotRemoved() bool {
	if o != nil && !IsNil(o.NotRemoved) {
		return true
	}

	return false
}

// SetNotRemoved gets a reference to the given []string and assigns it to the NotRemoved field.
func (o *UpdateSubscriptions200Response) SetNotRemoved(v []string) {
	o.NotRemoved = v
}

// GetRemoved returns the Removed field value
func (o *UpdateSubscriptions200Response) GetRemoved() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetRemovedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Removed, true
}

// SetRemoved sets field value
func (o *UpdateSubscriptions200Response) SetRemoved(v []string) {
	o.Removed = v
}

// GetNewSubscriptionMessagesSent returns the NewSubscriptionMessagesSent field value if set, zero value otherwise.
func (o *UpdateSubscriptions200Response) GetNewSubscriptionMessagesSent() bool {
	if o == nil || IsNil(o.NewSubscriptionMessagesSent) {
		var ret bool
		return ret
	}
	return *o.NewSubscriptionMessagesSent
}

// GetNewSubscriptionMessagesSentOk returns a tuple with the NewSubscriptionMessagesSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptions200Response) GetNewSubscriptionMessagesSentOk() (*bool, bool) {
	if o == nil || IsNil(o.NewSubscriptionMessagesSent) {
		return nil, false
	}
	return o.NewSubscriptionMessagesSent, true
}

// HasNewSubscriptionMessagesSent returns a boolean if a field has been set.
func (o *UpdateSubscriptions200Response) HasNewSubscriptionMessagesSent() bool {
	if o != nil && !IsNil(o.NewSubscriptionMessagesSent) {
		return true
	}

	return false
}

// SetNewSubscriptionMessagesSent gets a reference to the given bool and assigns it to the NewSubscriptionMessagesSent field.
func (o *UpdateSubscriptions200Response) SetNewSubscriptionMessagesSent(v bool) {
	o.NewSubscriptionMessagesSent = &v
}

func (o UpdateSubscriptions200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptions200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	toSerialize["subscribed"] = o.Subscribed
	toSerialize["already_subscribed"] = o.AlreadySubscribed
	if !IsNil(o.NotRemoved) {
		toSerialize["not_removed"] = o.NotRemoved
	}
	toSerialize["removed"] = o.Removed
	if !IsNil(o.NewSubscriptionMessagesSent) {
		toSerialize["new_subscription_messages_sent"] = o.NewSubscriptionMessagesSent
	}
	return toSerialize, nil
}

func (o *UpdateSubscriptions200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
		"subscribed",
		"already_subscribed",
		"removed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubscriptions200Response := _UpdateSubscriptions200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSubscriptions200Response)

	if err != nil {
		return err
	}

	*o = UpdateSubscriptions200Response(varUpdateSubscriptions200Response)

	return err
}

type NullableUpdateSubscriptions200Response struct {
	value *UpdateSubscriptions200Response
	isSet bool
}

func (v NullableUpdateSubscriptions200Response) Get() *UpdateSubscriptions200Response {
	return v.value
}

func (v *NullableUpdateSubscriptions200Response) Set(val *UpdateSubscriptions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptions200Response(val *UpdateSubscriptions200Response) *NullableUpdateSubscriptions200Response {
	return &NullableUpdateSubscriptions200Response{value: val, isSet: true}
}

func (v NullableUpdateSubscriptions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
