/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IgnoredParametersSuccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IgnoredParametersSuccess{}

// IgnoredParametersSuccess **Changes**: The [`ignored_parameters_unsupported`][ignored_params] array was added as a possible return value for all REST API endpoint JSON success responses in Zulip 7.0 (feature level 167).  Previously, it was added to [`POST /users/me/subscriptions/properties`](/api/update-subscription-settings) in Zulip 5.0 (feature level 111) and to [`PATCH /realm/user_settings_defaults`](/api/update-realm-user-settings-defaults) in Zulip 5.0 (feature level 96). The feature was introduced in Zulip 5.0 (feature level 78) as a return value for the [`PATCH /settings`](/api/update-settings) endpoint.  A typical successful JSON response with ignored parameters may look like:  [ignored_params]: /api/rest-error-handling#ignored-parameters
type IgnoredParametersSuccess struct {
	Result string `json:"result"`
	Msg    string `json:"msg"`
	// An array of any parameters sent in the request that are not supported by the endpoint.  See [error handling](/api/rest-error-handling#ignored-parameters) documentation for details on this and its change history.
	IgnoredParametersUnsupported []string `json:"ignored_parameters_unsupported,omitempty"`
}

type _IgnoredParametersSuccess IgnoredParametersSuccess

// NewIgnoredParametersSuccess instantiates a new IgnoredParametersSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIgnoredParametersSuccess(result string, msg string) *IgnoredParametersSuccess {
	this := IgnoredParametersSuccess{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewIgnoredParametersSuccessWithDefaults instantiates a new IgnoredParametersSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIgnoredParametersSuccessWithDefaults() *IgnoredParametersSuccess {
	this := IgnoredParametersSuccess{}
	return &this
}

// GetResult returns the Result field value
func (o *IgnoredParametersSuccess) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *IgnoredParametersSuccess) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *IgnoredParametersSuccess) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *IgnoredParametersSuccess) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *IgnoredParametersSuccess) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *IgnoredParametersSuccess) SetMsg(v string) {
	o.Msg = v
}

// GetIgnoredParametersUnsupported returns the IgnoredParametersUnsupported field value if set, zero value otherwise.
func (o *IgnoredParametersSuccess) GetIgnoredParametersUnsupported() []string {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		var ret []string
		return ret
	}
	return o.IgnoredParametersUnsupported
}

// GetIgnoredParametersUnsupportedOk returns a tuple with the IgnoredParametersUnsupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IgnoredParametersSuccess) GetIgnoredParametersUnsupportedOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredParametersUnsupported) {
		return nil, false
	}
	return o.IgnoredParametersUnsupported, true
}

// HasIgnoredParametersUnsupported returns a boolean if a field has been set.
func (o *IgnoredParametersSuccess) HasIgnoredParametersUnsupported() bool {
	if o != nil && !IsNil(o.IgnoredParametersUnsupported) {
		return true
	}

	return false
}

// SetIgnoredParametersUnsupported gets a reference to the given []string and assigns it to the IgnoredParametersUnsupported field.
func (o *IgnoredParametersSuccess) SetIgnoredParametersUnsupported(v []string) {
	o.IgnoredParametersUnsupported = v
}

func (o IgnoredParametersSuccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IgnoredParametersSuccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["msg"] = o.Msg
	if !IsNil(o.IgnoredParametersUnsupported) {
		toSerialize["ignored_parameters_unsupported"] = o.IgnoredParametersUnsupported
	}
	return toSerialize, nil
}

func (o *IgnoredParametersSuccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIgnoredParametersSuccess := _IgnoredParametersSuccess{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIgnoredParametersSuccess)

	if err != nil {
		return err
	}

	*o = IgnoredParametersSuccess(varIgnoredParametersSuccess)

	return err
}

type NullableIgnoredParametersSuccess struct {
	value *IgnoredParametersSuccess
	isSet bool
}

func (v NullableIgnoredParametersSuccess) Get() *IgnoredParametersSuccess {
	return v.value
}

func (v *NullableIgnoredParametersSuccess) Set(val *IgnoredParametersSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIgnoredParametersSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIgnoredParametersSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIgnoredParametersSuccess(val *IgnoredParametersSuccess) *NullableIgnoredParametersSuccess {
	return &NullableIgnoredParametersSuccess{value: val, isSet: true}
}

func (v NullableIgnoredParametersSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIgnoredParametersSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
