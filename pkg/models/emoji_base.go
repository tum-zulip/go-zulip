/*
Zulip REST API

Powerful open source group chat

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the EmojiBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmojiBase{}

// EmojiBase struct for EmojiBase
type EmojiBase struct {
	// Name of the emoji.
	EmojiName *string `json:"emoji_name,omitempty"`
	// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.
	EmojiCode *string `json:"emoji_code,omitempty"`
	// A string indicating the type of emoji. Each emoji `reaction_type` has an independent namespace for values of `emoji_code`.  Must be one of the following values:  - `unicode_emoji` : In this namespace, `emoji_code` will be a   dash-separated hex encoding of the sequence of Unicode codepoints   that define this emoji in the Unicode specification.  - `realm_emoji` : In this namespace, `emoji_code` will be the ID of   the uploaded [custom emoji](/help/custom-emoji).  - `zulip_extra_emoji` : These are special emoji included with Zulip.   In this namespace, `emoji_code` will be the name of the emoji (e.g.   \"zulip\").
	ReactionType *string `json:"reaction_type,omitempty"`
}

// NewEmojiBase instantiates a new EmojiBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiBase() *EmojiBase {
	this := EmojiBase{}
	return &this
}

// NewEmojiBaseWithDefaults instantiates a new EmojiBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiBaseWithDefaults() *EmojiBase {
	this := EmojiBase{}
	return &this
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *EmojiBase) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName) {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiBase) GetEmojiNameOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiName) {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *EmojiBase) HasEmojiName() bool {
	if o != nil && !IsNil(o.EmojiName) {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *EmojiBase) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *EmojiBase) GetEmojiCode() string {
	if o == nil || IsNil(o.EmojiCode) {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiBase) GetEmojiCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiCode) {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *EmojiBase) HasEmojiCode() bool {
	if o != nil && !IsNil(o.EmojiCode) {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *EmojiBase) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *EmojiBase) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiBase) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *EmojiBase) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *EmojiBase) SetReactionType(v string) {
	o.ReactionType = &v
}

func (o EmojiBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmojiBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmojiName) {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if !IsNil(o.EmojiCode) {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	return toSerialize, nil
}

type NullableEmojiBase struct {
	value *EmojiBase
	isSet bool
}

func (v NullableEmojiBase) Get() *EmojiBase {
	return v.value
}

func (v *NullableEmojiBase) Set(val *EmojiBase) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiBase) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiBase(val *EmojiBase) *NullableEmojiBase {
	return &NullableEmojiBase{value: val, isSet: true}
}

func (v NullableEmojiBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
